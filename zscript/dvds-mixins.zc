mixin class MapCheck
{
	int A_MapCheckDamageMobj()
	{
		int result;
		int TempRatio;
		int ChanceFactor, LevelCheck, MapCheck;
		int deathkingsmapcalcmod = dvds_deathkingsmapcalcmod;
		int mapcalcfactorexact = 0;
		int mapcalcfactorpercent = 100;
		int PlayerLevel = CallACS("StatCheck",0);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int mapdifficultytype = dvds_mapdifficultytype;
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int ModType = CallACS("OtherVarCheckDECORATE",8);

		if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
		{
			if (mapdifficultytype == 0) MapCheck = level.levelnum;
			else MapCheck = CallACS("MiscVarCheckDECORATE",1000);
			
			if (CallACS("MiscVarCheckDECORATE",259) > 0) 
			{
				if (mapdifficultytype == 0) MapCheck += (40 + deathkingsmapcalcmod);
				else MapCheck += deathkingsmapcalcmod;
			}
			MapCheck += CallACS("MiscVarCheckDECORATE",53); // Map Inflation [Stats - Exact]
			MapCheck += CallACS("MiscVarCheckDECORATE",169); // Map Inflation [Overall - Exact]
			MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",2) / 100; // Map Inflation [Stats - Percentile]
			MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",5) / 100; // Map Inflation [Overall - Percentile]
			MapCheck = clamp(MapCheck, 1, 100);
		}
		//Console.Printf("MapCheck: %d", MapCheck);
		
		return MapCheck;
	}
}

mixin class CritAtkSound
{
	void A_PlayCrisisAtkSound ()
	{
		A_StartSound("crisisattack", 9, CHANF_DEFAULT, frandom(1.25,1.5), ATTN_NORM, frandom(0.75,1.25));
		A_StartSound("crisisattack2", 10, CHANF_DEFAULT, frandom(1.25,1.5), ATTN_NORM, frandom(0.75,1.25));
	}
}

mixin class DamageMessages
{
	action void A_PrintDamageMessage(Actor inflictor, Actor source,
																	 int ret, Name mod, bool criticalhit,
																	 string infl, string sour, string vict, 
																	 int newhealth, int predmg, int flags)
	{
		if (mod == "Charm") return;
		if (mod == "SilentMassacre") return;

		AetheriusPlayerPawn acttype;
		acttype = AetheriusPlayerPawn(self);
		AetheriusMonsterZSC acttype2;
		acttype2 = AetheriusMonsterZSC(self);

		string friendmsg = " \cn(F)\c-";
		string charmmsg = " \cx(C)\c-";

		bool debugmode = dvds_showdamagemessagedebug;
		bool useactortags = dvds_showdamagemessageactortags;
		string DamageMessage = " \c[white]* ";
		DamageMessage.AppendFormat("\cy%d\c- ", ret);
		if (debugmode)
		{
			if (predmg > ret) DamageMessage.AppendFormat("\ca(%d)\c- ", ret-predmg);
			if (predmg < ret) DamageMessage.AppendFormat("\cf(+%d)\c- ", ret-predmg);
		}
		if (useactortags)
		{
			vict = GetTag("");
			if (source != null) sour = source.GetTag("");
			if (inflictor != null) infl = inflictor.GetTag("");
		}
		if (criticalhit) DamageMessage.AppendFormat("CRITICAL ");
		if (!(mod == "Normal" || mod == "None" || mod == "Suicide" || mod == "Massacre" || mod == "SilentMassacre" || mod == "InstantDeath"))
		{
			if (mod == 'Magic') DamageMessage.AppendFormat("\c[purple]");
			if (mod == 'Spiritual') DamageMessage.AppendFormat("\c[cyan]");
			if (mod == 'Eldritch' || mod == 'Deadlight') DamageMessage.AppendFormat("\c[olive]");
			if (mod == 'Fire' || mod == 'Magma') DamageMessage.AppendFormat("\c[fire]");
			if (mod == 'Ice') DamageMessage.AppendFormat("\c[ice]");
			if (mod == 'Thunder' || mod == 'Electric' || mod == 'Lightning' || mod == 'Shock') DamageMessage.AppendFormat("\c[sapphire]");
			if (mod == 'Wind' || mod == 'Sigil' || mod == 'SpectralLow') DamageMessage.AppendFormat("\c[lightblue]");
			if (mod == 'Holy') DamageMessage.AppendFormat("\c[white]");
			if (mod == 'IncarnateGlare' || mod == 'Dark') DamageMessage.AppendFormat("\c[darkgray]");
			if (mod == 'PoisonNeedle' || mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw' || mod == 'Gauntlets' || mod == 'Sceptre') DamageMessage.AppendFormat("\c[cream]");
			if (mod == 'Falling' || mod == 'Drowning' || mod == 'HellcoreDrain' || mod == 'SigilUse') DamageMessage.AppendFormat("\c[darkgray]");
			if (mod == 'BFG' || mod == 'BFGSpray' || mod == 'BFGSplash') DamageMessage.AppendFormat("\c[green]");
			if (mod == 'Slime' || mod == 'Crush' || (CountInv("PlayingStrangeAeons") && mod == 'ScrollFloor')) DamageMessage.AppendFormat("\c[orange]");
			if (mod == 'Plasma') DamageMessage.AppendFormat("\c[blue]");
			if (mod == 'Bullet') DamageMessage.AppendFormat("\c[brown]");
			if (mod == 'Explosive') DamageMessage.AppendFormat("\c[brick]");
			if (mod == "PoisonBolt" || mod == "PoisonElemental" || mod == "Poison") DamageMessage.AppendFormat("\c[teal]");
			DamageMessage.AppendFormat("%s", mod);
			DamageMessage.AppendFormat("\c- ");
		}
		if ((flags & DMG_EXPLOSION)) DamageMessage.AppendFormat("\c[brick]Damage\c-");
														else DamageMessage.AppendFormat("\c[red]Damage\c-");
		DamageMessage.AppendFormat(" dealt to \cx%s\c-", vict);
		if (acttype2)
		{
			if (health > 0) DamageMessage.AppendFormat(" \cx[L%d]\c-", acttype2.user_monsterlevel);
								 else DamageMessage.AppendFormat(" \cx[L%d]\c-", acttype2.user_lastmonsterlevel);
		}
		if (acttype2 && acttype2.diedasafriendly) 
		{
			if (acttype2 && acttype2.diedasacharmed) DamageMessage.AppendFormat(charmmsg);
																				else DamageMessage.AppendFormat(friendmsg);
		}
		else
		if (acttype2 && acttype2.bFRIENDLY) 
		{
			if (acttype2 && acttype2.user_charmed) DamageMessage.AppendFormat(charmmsg);
																				else DamageMessage.AppendFormat(friendmsg);
		}
		if (source != null)
		{
			AetheriusPlayerPawn acttype3;
			acttype3 = AetheriusPlayerPawn(source);
			AetheriusMonsterZSC acttype4;
			acttype4 = AetheriusMonsterZSC(source);

			if (acttype3 || acttype4)
			{
				if (inflictor != null) 
				{
					if (inflictor != source) 
					{
						if (source == self) DamageMessage.AppendFormat(" by \cz%s\c-", infl);
						else 
						{
							DamageMessage.AppendFormat(" by \cw%s's\c-", sour);
							if (acttype4)
							{
								if (acttype4.health > 0) DamageMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_monsterlevel);
																		else DamageMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_lastmonsterlevel);
							}
							if (acttype4 && acttype4.diedasafriendly) 
							{
								if (acttype4 && acttype4.diedasacharmed) DamageMessage.AppendFormat(charmmsg);
																										else DamageMessage.AppendFormat(friendmsg);
							}
							else
							if (acttype4 && acttype4.bFRIENDLY) 
							{
								if (acttype4 && acttype4.user_charmed) DamageMessage.AppendFormat(charmmsg);
																									else DamageMessage.AppendFormat(friendmsg);
							}
							DamageMessage.AppendFormat(" \cz%s\c-", infl);
						}
						DamageMessage.AppendFormat("!");
					}
					else 
					{
						if (inflictor != self) 
						{
							DamageMessage.AppendFormat(" by \cw%s\c-", sour);
							if (acttype4)
							{
								if (acttype4.health > 0) DamageMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_monsterlevel);
																		else DamageMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_lastmonsterlevel);
							}
							if (acttype4 && acttype4.diedasafriendly) 
							{
								if (acttype4 && acttype4.diedasacharmed) DamageMessage.AppendFormat(charmmsg);
																										else DamageMessage.AppendFormat(friendmsg);
							}
							else
							if (acttype4 && acttype4.bFRIENDLY) 
							{
								if (acttype4 && acttype4.user_charmed) DamageMessage.AppendFormat(charmmsg);
																									else DamageMessage.AppendFormat(friendmsg);
							}
						}
						DamageMessage.AppendFormat("!");
					}
				}
				else 
				{
					DamageMessage.AppendFormat(" by \cw%s\c-", sour);
					if (acttype4)
					{
						if (acttype4.health > 0) DamageMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_monsterlevel);
																else DamageMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_lastmonsterlevel);
					}
					if (acttype4 && acttype4.diedasafriendly) 
					{
						if (acttype4 && acttype4.diedasacharmed) DamageMessage.AppendFormat(charmmsg);
																								else DamageMessage.AppendFormat(friendmsg);
					}
					else
					if (acttype4 && acttype4.bFRIENDLY) 
					{
						if (acttype4 && acttype4.user_charmed) DamageMessage.AppendFormat(charmmsg);
																							else DamageMessage.AppendFormat(friendmsg);
					}
					DamageMessage.AppendFormat("!");
				}
			}
			else
			{
				DamageMessage.AppendFormat(" by \cz%s\c-!", infl);
			}
		}
		else
		{
			if (inflictor != null)
			{
				DamageMessage.AppendFormat(" by \cz%s\c-!", infl);
			}
			else
			{
				DamageMessage.AppendFormat("!");
			}
		}
		if (health <= 0)
		{
			DamageMessage.AppendFormat(" \cx%s\c-", vict);
			if (acttype2 && acttype2.user_lastmonsterlevel >= 0) DamageMessage.AppendFormat(" \cx[L%d]\c-", acttype2.user_lastmonsterlevel);
			if (acttype2 && acttype2.diedasafriendly) 
			{
				if (acttype2 && acttype2.diedasacharmed) DamageMessage.AppendFormat(charmmsg);
																						else DamageMessage.AppendFormat(friendmsg);
			}
			else
			if (acttype2 && acttype2.bFRIENDLY) 
			{
				if (acttype2 && acttype2.user_charmed) DamageMessage.AppendFormat(charmmsg);
																						else DamageMessage.AppendFormat(friendmsg);
			}
			DamageMessage.AppendFormat(" dies!");
		}
		else
		{
			if (acttype && acttype.health == 1 && (acttype.player.cheats & CF_BUDDHA || acttype.player.cheats & CF_BUDDHA2) && CallACS("MiscVarCheckDECORATE",241) > 1) DamageMessage.AppendFormat(" \cx%s\c- survives a mortal blow!", vict);
		}
		if (debugmode) DamageMessage.AppendFormat(" (%d)", gametic);
		Console.Printf("%s", DamageMessage);
	}
	
	action void A_DrainDmgMessage(Actor drainer, Actor drainee, int ret,
																string infl, string sour, string vict)
	{
	}

	action void A_PrintEvadeMessage(Actor inflictor, Actor source,
																	int ret, Name mod, bool criticalhit,
																	string infl, string sour, string vict, 
																	int newhealth)
	{
		string friendmsg = " \cn(F)\c-";
		string charmmsg = " \cx(C)\c-";

		bool debugmode = dvds_showdamagemessagedebug;
		bool useactortags = dvds_showdamagemessageactortags;
		string EvadeMessage = " * ";
		if (useactortags)
		{
			vict = GetTag("");
			if (source != null) sour = source.GetTag("");
			if (inflictor != null) infl = inflictor.GetTag("");
		}
		EvadeMessage.AppendFormat("\cx%s\c- evaded", vict);

		if (source != null)
		{
			AetheriusPlayerPawn acttype3;
			acttype3 = AetheriusPlayerPawn(source);
			AetheriusMonsterZSC acttype4;
			acttype4 = AetheriusMonsterZSC(source);

			if (acttype3 || acttype4)
			{
				if (inflictor != null)
				{
					if (inflictor != source) 
					{
						if (source == self) EvadeMessage.AppendFormat(" \cz%s\c-", infl);
						else
						{
							EvadeMessage.AppendFormat(" \cw%s's\c-", sour);
							if (acttype4)
							{
								if (acttype4.health > 0) EvadeMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_monsterlevel);
																		else EvadeMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_lastmonsterlevel);
							}
							if (acttype4 && acttype4.diedasafriendly) 
							{
								if (acttype4 && acttype4.diedasacharmed) EvadeMessage.AppendFormat(charmmsg);
																										else EvadeMessage.AppendFormat(friendmsg);
							}
							else
							if (acttype4 && acttype4.bFRIENDLY) 
							{
								if (acttype4 && acttype4.user_charmed) EvadeMessage.AppendFormat(charmmsg);
																									else EvadeMessage.AppendFormat(friendmsg);
							}
							EvadeMessage.AppendFormat(" \cz%s\c-", infl);
						}
						EvadeMessage.AppendFormat("!");
					}
					else 
					{
						if (inflictor != self) 
						{
							EvadeMessage.AppendFormat(" \cw%s\c-", sour);
							if (acttype4)
							{
								if (acttype4.health > 0) EvadeMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_monsterlevel);
																		else EvadeMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_lastmonsterlevel);
							}
							if (acttype4 && acttype4.diedasafriendly) 
							{
								if (acttype4 && acttype4.diedasacharmed) EvadeMessage.AppendFormat(charmmsg);
																										else EvadeMessage.AppendFormat(friendmsg);
							}
							else
							if (acttype4 && acttype4.bFRIENDLY) 
							{
								if (acttype4 && acttype4.user_charmed) EvadeMessage.AppendFormat(charmmsg);
																									else EvadeMessage.AppendFormat(friendmsg);
							}
							EvadeMessage.AppendFormat("!");
						}
						else 
						{
							EvadeMessage.AppendFormat("!");
						}
					}
				}
				else 
				{
					EvadeMessage.AppendFormat(" \cw%s\c-", sour);
					if (acttype4)
					{
						if (acttype4.health > 0) EvadeMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_monsterlevel);
																else EvadeMessage.AppendFormat(" \cw[L%d]\c-", acttype4.user_lastmonsterlevel);
					}
					if (acttype4 && acttype4.diedasafriendly) 
					{
						if (acttype4 && acttype4.diedasacharmed) EvadeMessage.AppendFormat(charmmsg);
																								else EvadeMessage.AppendFormat(friendmsg);
					}
					else
					if (acttype4 && acttype4.bFRIENDLY) 
					{
						if (acttype4 && acttype4.user_charmed) EvadeMessage.AppendFormat(charmmsg);
																							else EvadeMessage.AppendFormat(friendmsg);
					}
					EvadeMessage.AppendFormat("!");
				}
			}
			else
			{
				EvadeMessage.AppendFormat(" \cz%s\c-!", infl);
			}
		}
		else
		{
			if (inflictor != null)
			{
				EvadeMessage.AppendFormat(" \cz%s\c-!", infl);
			}
			else
			{
				EvadeMessage.AppendFormat(" some");
				EvadeMessage.AppendFormat(" damage!");
			}
		}
		if (debugmode) EvadeMessage.AppendFormat(" (%d)", gametic);
		Console.Printf("%s", EvadeMessage);
	}

	action void A_PrintHealingMessage(actor healee, int healamount, actor healer = null)
	{
		AetheriusMonsterZSC acttype1;
		if (healee) acttype1 = AetheriusMonsterZSC(healee);
		AetheriusPlayerPawn acttype2;
		if (healer) acttype2 = AetheriusPlayerPawn(healer);

		string friendmsg = " \cn(F)\c-";
		string charmmsg = " \cx(C)\c-";

		bool debugmode = dvds_showdamagemessagedebug;
		string healeename = healee.GetClassName();
		if (dvds_showdamagemessageactortags) healeename = healee.GetTag("");
		string HealMessage = " \c[green]* ";

		if (healer)
		{
			string healername = healer.GetClassName();
			if (dvds_showdamagemessageactortags) healername = healer.GetTag("");
			HealMessage.AppendFormat("\cw%s\c[green] healed \cx%s\c[green]", healername, healeename);
			if (acttype1 && acttype1.user_monsterlevel >= 0) HealMessage.AppendFormat(" \cx[L%d]\c-", acttype1.user_monsterlevel);
			if (acttype1 && acttype1.bFRIENDLY)
			{
				if (acttype1 && acttype1.user_charmed) HealMessage.AppendFormat(charmmsg);
																					else HealMessage.AppendFormat(friendmsg);
			}
			HealMessage.AppendFormat(" for \cy%d\c[green] HP!", healamount);
		}
		else
		{
			HealMessage.AppendFormat("\cx%s\c[green]", healeename, healamount);
			if (acttype1 && acttype1.user_monsterlevel >= 0) HealMessage.AppendFormat(" \cx[L%d]\c-", acttype1.user_monsterlevel);
			if (acttype1 && acttype1.bFRIENDLY) 
			{
				if (acttype1 && acttype1.user_charmed) HealMessage.AppendFormat(charmmsg);
																					else HealMessage.AppendFormat(friendmsg);
			}
			HealMessage.AppendFormat(" healed \cy%d\c[green] HP!", healamount);
		}

		if (debugmode) HealMessage.AppendFormat(" (%d)", gametic);
		Console.Printf("%s", HealMessage);
	}
	
	action void A_PrintCharmMessage()
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		bool debugmode = dvds_showdamagemessagedebug;
		string charmer;

		AetheriusMonsterZSC acttype1;
		acttype1 = AetheriusMonsterZSC(self);
		
		if (CharacterClass == 0) charmer = "DeggarisMontegger";
		if (CharacterClass == 1) charmer = "IlluciaHendershot";
		if (CharacterClass == 2) charmer = "FloraBriscoletti";
		if (CharacterClass == 8) charmer = "AilishEstdale";
		if (CharacterClass == 9) charmer = "PetraLagerkvist";
		string charmee = GetClassName();
		string CharmMsg = " \cy* ";

		if (dvds_showdamagemessageactortags) 
		{
			charmee = GetTag("");
			if (CharacterClass == 0) charmer = "Deggaris Montegger";
			if (CharacterClass == 1) charmer = "Illucia Hendershot";
			if (CharacterClass == 2) charmer = "Flora Briscoletti";
			if (CharacterClass == 8) charmer = "Ailish Estdale";
			if (CharacterClass == 9) charmer = "Petra Johanna Lagerkvist";
		}
		CharmMsg.AppendFormat("\cw%s\cy charmed ", charmer);
		CharmMsg.AppendFormat("\cx%s\cy ", charmee);
		if (acttype1 && acttype1.user_monsterlevel >= 0) CharmMsg.AppendFormat("\cx[L%d]\c- ", acttype1.user_monsterlevel);
		CharmMsg.AppendFormat("with some monster munchies!");
		if (debugmode) CharmMsg.AppendFormat(" (%d)", gametic);
		Console.Printf("%s", CharmMsg);
	}
	
	action void A_PrintPsychUpMessage(actor Psycher, int psychlevel)
	{
		string ownername = Psycher.GetClassName();
		if (dvds_showdamagemessageactortags) ownername = Psycher.GetTag("");

		string PsychMsg = " \c[purple]* ";
		PsychMsg.AppendFormat("\cx%s's\c[purple] ", ownername);
		if (psychlevel == 1) PsychMsg.AppendFormat("\c[purple]tension increases to 5!");
		if (psychlevel == 2) 
		{
			PsychMsg.AppendFormat("\c[purple]tension increases to 20!");
			if (random(1,2) == 1) PsychMsg.AppendFormat("\c[purple]!");
		}
		if (psychlevel == 3) PsychMsg.AppendFormat("\c[purple]tension increases to 50!!");
		if (psychlevel == 4) PsychMsg.AppendFormat("\c[purple]tension increases to 100!!!");
		if (psychlevel == 5) PsychMsg.AppendFormat("\c[purple]tension increases to 250!!!");
		if (psychlevel == 6) PsychMsg.AppendFormat("\c[purple]tension increases to 500!!!!");
		if (psychlevel == 7) PsychMsg.AppendFormat("\c[purple]tension increases to 1000!!!!");
		if (psychlevel >= 1 && psychlevel <= 3) PsychMsg.AppendFormat(" \cx%s\c[purple] enters a state of High Tension", ownername);
		if (psychlevel >= 4 && psychlevel <= 6) PsychMsg.AppendFormat(" \cx%s\c[purple] enters a state of Super High Tension", ownername);
		if (psychlevel >= 7) PsychMsg.AppendFormat(" \cx%s\c[purple] enters a state of Ultra High Tension", ownername);
		PsychMsg.AppendFormat("\c[purple]!");
		Console.Printf("%s", PsychMsg);
	}
}

mixin class EvolveMonsters
{
	action int A_GetEvolveChance()
	{
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int ModType = CallACS("OtherVarCheckDECORATE",8);

		int TempRatio;
		int SpawnChance, TempSpawnChance, ChanceFactor, LevelCheck, MapCheck;
		int debugevolvestealth = dvdsdebug_evolvestealthstuff;
		int deathkingsmapcalcmod = dvds_deathkingsmapcalcmod;
		int mapcalcfactorexact = 0;
		int mapcalcfactorpercent = 100;
		
		SpawnChance = dvds_rnd_evolve;
		if (SpawnChance <= 0) return SpawnChance;

		if (debugevolvestealth == 1) Console.Printf("Evolve Chance [Base]: %d - %s", SpawnChance, GetClassName());
		
		SpawnChance = clamp(SpawnChance, 0, 512);
		
		TempRatio = dvds_rnd_evolve_levels;
		if (TempRatio > 0)
		{
			if (TempRatio > 1000) TempRatio = 1000;
			
			TempSpawnChance = (SceptreActualLevel * 0.2) + (PlayerLevel * 0.0666666666666667);
			TempSpawnChance = TempSpawnChance * TempRatio / 100;
			SpawnChance += TempSpawnChance;
			if (debugevolvestealth == 1) Console.Printf("Evolve Chance [Level]: %d - %s - (+%d)", SpawnChance, GetClassName(), TempSpawnChance);
		}
		
		TempRatio = dvds_rnd_evolve_chars;
		if (TempRatio > 0)
		{
			if (TempRatio > 1000) TempRatio = 1000;
			
			TempSpawnChance = 0;
			if (CharacterClass == 0) TempSpawnChance = -100;
			else if (CharacterClass == 1) TempSpawnChance = -25;
			else if (CharacterClass == 2) TempSpawnChance = 50;
			else if (CharacterClass == 8) TempSpawnChance = -50;
			else if (CharacterClass == 9) TempSpawnChance = 25;
	
			TempSpawnChance = TempSpawnChance * TempRatio / 100;
			TempSpawnChance += 1000;
			SpawnChance *= TempSpawnChance;
			SpawnChance /= 1000;
			if (debugevolvestealth == 1) Console.Printf("Evolve Chance [Character]: %d - %s - (%d / 1000)", SpawnChance, GetClassName(), TempSpawnChance);
		}
		
		TempRatio = dvds_rnd_evolve_skill;
		if (TempRatio > 0)
		{
			if (TempRatio > 1000) TempRatio = 1000;
			
			TempSpawnChance = 0;
			if (TrueGameSkill <= 0) TempSpawnChance = -200;
			else if (TrueGameSkill == 1) TempSpawnChance = -100;
			else if (TrueGameSkill == 2) TempSpawnChance = 0;
			else if (TrueGameSkill == 3) TempSpawnChance = 100;
			else if (TrueGameSkill == 4) TempSpawnChance = 250;
			else if (TrueGameSkill == 5) TempSpawnChance = 350;
			else if (TrueGameSkill == 6) TempSpawnChance = 500;
			else if (TrueGameSkill == 7) TempSpawnChance = 700;
			else if (TrueGameSkill >= 8) TempSpawnChance = 1000;
	
			TempSpawnChance = TempSpawnChance * TempRatio / 100;
			TempSpawnChance += 1000;
			SpawnChance *= TempSpawnChance;
			SpawnChance /= 1000;
			if (debugevolvestealth == 1) Console.Printf("Evolve Chance [Skill]: %d - %s - (%d / 1000)", SpawnChance, GetClassName(), TempSpawnChance);
		}
		
		
		TempRatio = dvds_rnd_evolve_sauronequip;
		if (TempRatio > 0)
		{
			TempRatio = clamp(TempRatio, 0, 1000);
			
			TempSpawnChance = 0;
			if (CountInv("SauronHelmet", AAPTR_PLAYER1)) TempSpawnChance = 100; // Elevates Spawn Chances by 10%
			TempSpawnChance = TempSpawnChance * TempRatio / 100;
			TempSpawnChance += 1000;
			SpawnChance *= TempSpawnChance;
			SpawnChance /= 1000;
			if (debugevolvestealth == 1) Console.Printf("Evolve Chance [SauronHelm]: %d - %s - (%d / 1000)", SpawnChance, GetClassName(), TempSpawnChance);
	
			TempSpawnChance = 0;
			if (CountInv("SauronGauntletsItem", AAPTR_PLAYER1)) TempSpawnChance = 100; // Elevates Spawn Chances by 10%
			TempSpawnChance = TempSpawnChance * TempRatio / 100;
			TempSpawnChance += 1000;
			SpawnChance *= TempSpawnChance;
			SpawnChance /= 1000;
			if (debugevolvestealth == 1) Console.Printf("Evolve Chance [SauronGauntlets]: %d - %s - (%d / 1000)", SpawnChance, GetClassName(), TempSpawnChance);
		}
		
		int mapdifficultytype = dvds_mapdifficultytype;

		TempRatio = dvds_rnd_evolve_maps;
		if (TempRatio > 0)
		{
			TempRatio = clamp(TempRatio, 0, 1000);
			
			if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
			{
				if (ClassicDoomType == 1 || ClassicDoomType == 2) // Doom 1 / Heretic
				{
					if (mapdifficultytype == 0) MapCheck = level.levelnum;
					else MapCheck = CallACS("MiscVarCheckDECORATE",1000);

					if (CallACS("MiscVarCheckDECORATE",259) > 0)
					{
						if (mapdifficultytype == 0) MapCheck += (40 + deathkingsmapcalcmod);
						else MapCheck += deathkingsmapcalcmod;
					}
					MapCheck += CallACS("MiscVarCheckDECORATE",54); // Map Inflation [Evolve/Stealth - Exact]
					MapCheck += CallACS("MiscVarCheckDECORATE",169); // Map Inflation [Overall - Exact]
					MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",3) / 100; // Map Inflation [Evolve/Stealth - Percentile]
					MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",5) / 100; // Map Inflation [Overall - Percentile]
					MapCheck = clamp(MapCheck, 1, 100);

					if (MapCheck >= 1 && MapCheck <= 10) ChanceFactor = (MapCheck * 25); // Episode 1
					if (MapCheck >= 11 && MapCheck <= 20) ChanceFactor = (MapCheck * 31); // Episode 2
					if (MapCheck >= 21 && MapCheck <= 30) ChanceFactor = (MapCheck * 38); // Episode 3
					if (MapCheck >= 31 && MapCheck <= 40) ChanceFactor = (MapCheck * 46); // Episode 4
					if (MapCheck >= 41 && MapCheck <= 50) ChanceFactor = (MapCheck * 55); // Episode 5
					if (MapCheck >= 51 && MapCheck <= 60) ChanceFactor = (MapCheck * 65); // Episode 6
					if (MapCheck >= 61 && MapCheck <= 70) ChanceFactor = (MapCheck * 76); // Episode 7
					if (MapCheck >= 71 && MapCheck <= 80) ChanceFactor = (MapCheck * 88); // Episode 8
					if (MapCheck >= 81 && MapCheck <= 90) ChanceFactor = (MapCheck * 101); // Episode 9
					if (MapCheck >= 91 && MapCheck <= 100) ChanceFactor = (MapCheck * 115); // Episode 10
				}
				else // Doom 2 / Hexen / Strife / Doom64
				{
					if (mapdifficultytype == 0) MapCheck = level.levelnum;
					else MapCheck = CallACS("MiscVarCheckDECORATE",1000);

					if (CallACS("MiscVarCheckDECORATE",259) > 0)
					{
						if (mapdifficultytype == 0) MapCheck += (40 + deathkingsmapcalcmod);
						else MapCheck += deathkingsmapcalcmod;
					}
					MapCheck += CallACS("MiscVarCheckDECORATE",54); // Map Inflation [Evolve/Stealth - Exact]
					MapCheck += CallACS("MiscVarCheckDECORATE",169); // Map Inflation [Overall - Exact]
					MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",3) / 100; // Map Inflation [Evolve/Stealth - Percentile]
					MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",5) / 100; // Map Inflation [Overall - Percentile]
					MapCheck = clamp(MapCheck, 1, 100);
			
					if (MapCheck >= 1 && MapCheck <= 5) ChanceFactor = (MapCheck * 30);
					if (MapCheck >= 6 && MapCheck <= 10) ChanceFactor = (MapCheck * 35);
					if (MapCheck >= 11 && MapCheck <= 15) ChanceFactor = (MapCheck * 40);
					if (MapCheck >= 16 && MapCheck <= 20) ChanceFactor = (MapCheck * 45);
					if (MapCheck >= 21 && MapCheck <= 25) ChanceFactor = (MapCheck * 55);
					if (MapCheck >= 26 && MapCheck <= 30) ChanceFactor = (MapCheck * 60);
					if (MapCheck >= 31 && MapCheck <= 36) ChanceFactor = (MapCheck * 66);
					if (MapCheck >= 37 && MapCheck <= 42) ChanceFactor = (MapCheck * 72);
					if (MapCheck >= 43 && MapCheck <= 48) ChanceFactor = (MapCheck * 78);
					if (MapCheck >= 49 && MapCheck <= 54) ChanceFactor = (MapCheck * 84);
					if (MapCheck >= 55 && MapCheck <= 60) ChanceFactor = (MapCheck * 90);
					if (MapCheck >= 61 && MapCheck <= 66) ChanceFactor = (MapCheck * 96);
					if (MapCheck >= 67 && MapCheck <= 72) ChanceFactor = (MapCheck * 103);
					if (MapCheck >= 73 && MapCheck <= 78) ChanceFactor = (MapCheck * 110);
					if (MapCheck >= 79 && MapCheck <= 84) ChanceFactor = (MapCheck * 118);
					if (MapCheck >= 85 && MapCheck <= 90) ChanceFactor = (MapCheck * 126);
					if (MapCheck >= 91 && MapCheck <= 96) ChanceFactor = (MapCheck * 135);
					if (MapCheck >= 97 && MapCheck <= 102) ChanceFactor = (MapCheck * 144);
				}
			}
			else if (ModType == 1) // DVI
			{
				MapCheck = level.levelnum;
				MapCheck = clamp(MapCheck, 1101, 1104);
				
				ChanceFactor = 0;
				if (MapCheck == 1101) ChanceFactor = 0; // MAP01 - Insurgents
				else if (MapCheck == 1102) ChanceFactor = 116; // MAP02 - Torture Chamber
				else if (MapCheck == 1103) ChanceFactor = 256; // MAP03 - Cathedral
				else if (MapCheck == 1104) ChanceFactor = 418; // MAP04 - End Of Days
			}
			else if (ModType == 2) // DVII
			{
				MapCheck = level.levelnum;
				MapCheck = clamp(MapCheck, 1201, 1212);
			
				ChanceFactor = 0;
				if (MapCheck == 1201) ChanceFactor = 0; // MAP01 - Entryway Pass
				else if (MapCheck == 1202) ChanceFactor = 70; // MAP02 - Mutagen
				else if (MapCheck == 1203) ChanceFactor = 140; // MAP03 - Crouching Demon, Hidden Archvile
				else if (MapCheck == 1204) ChanceFactor = 209; // MAP04 - Minas Morgul
				else if (MapCheck == 1205) ChanceFactor = 302; // MAP05 - Eagle's Nest
				else if (MapCheck == 1206) ChanceFactor = 395; // MAP05B - The Manliest Level Ever
				else if (MapCheck == 1207) ChanceFactor = 488; // MAP06 - Stargate
				else if (MapCheck == 1208) ChanceFactor = 605; // MAP07 - The Desert Temple
				else if (MapCheck == 1209) ChanceFactor = 953; // MAP08 - The Unholy Cathedral
				else if (MapCheck == 1210) ChanceFactor = 1372; // MAP09 - You Shall Not Pass!
				else if (MapCheck == 1211) ChanceFactor = 1884; // MAP10 - Hell's Vendetta
				else if (MapCheck == 1212) ChanceFactor = 2488; // MAP10B - attedneV s'lleH
				else if (MapCheck == 1214) ChanceFactor = 465; // MAP12 - "The Wings of The Maiar" [DVI combined level remake]
				else if (MapCheck == 1215) ChanceFactor = 2488; // MAP10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
			}
			ChanceFactor = ChanceFactor * TempRatio / 100;
			ChanceFactor += 1000;
			SpawnChance = SpawnChance * ChanceFactor / 1000;

			if (debugevolvestealth == 1) 
			{
				Console.Printf("\czMapCheck: %d", MapCheck);
				Console.Printf("Evolve Chance [Maps]: %d - %s - (%d / 1000)", SpawnChance, GetClassName(), ChanceFactor);
			}
		}
		
		if (debugevolvestealth == 1) Console.Printf("Evolve Chance [Final]: %d - %s", SpawnChance, GetClassName());
		return SpawnChance;
	}
}

mixin class Tension
{
	action void A_SetTensionLevel(int level = 0, int vimstone = 0, bool hassource = false, Actor Source = null)
	{
		string ownername;
		int pviewheight;
		Actor playpawn;
		if (hassource) playpawn = AetheriusPlayerPawn(source);
							else playpawn = null;
		Actor check;
		if (hassource) 
		{
			check = playpawn.player.mo;
			pviewheight = playpawn.player.mo.viewheight;
		}
		else 
		{
			check = player.mo;
			pviewheight = player.mo.viewheight;
		}
							

		int CharacterClass = CallACS("CheckCharacterClass");
		int templevel = CallACS("MiscVarCheckDECORATE",181);
		if (vimstone)
		{
			if (vimstone == 1) 
			{
				templevel += level;
				if (templevel > 4) templevel = 4;
			}
			if (vimstone == 2) 
			{
				templevel += level;
				if (templevel > 7) templevel = 7;
			}
			level = templevel;
		}
		
		level = clamp(level, 0, 7);
		
		double fadetime = (35 * 1.125);
				 if (level == 1) fadetime = (35 * 1.25); // FadeRange(254,104,253,0.33,254,104,253,0,1.25);
		else if (level == 2) fadetime = (35 * 1.375); // FadeRange(254,104,253,0.44,254,104,253,0,1.375);
		else if (level == 3) fadetime = (35 * 1.5); // FadeRange(254,104,253,0.55,254,104,253,0,1.5);
		else if (level == 4) fadetime = (35 * 1.625); // FadeRange(254,104,253,0.66,254,104,253,0,1.625);
		else if (level == 5) fadetime = (35 * 1.75); // FadeRange(254,104,253,0.77,254,104,253,0,1.75);
		else if (level == 6) fadetime = (35 * 1.875); // FadeRange(254,104,253,0.88,254,104,253,0,1.875);
		else if (level == 7) fadetime = (35 * 2.00); // FadeRange(254,104,253,0.99,254,104,253,0,2.0);
		check.A_SetBlend("FE 68 FD",0.33,fadetime);
		
		if (level >= 1 && level <= 3)
		{
			check.A_StopSound(CHAN_7);
			check.A_StartSound("tensionincrease",CHAN_7,CHANF_DEFAULT,1.0,ATTN_NORM);
		}
		else if (level >= 4 && level <= 5)
		{
			check.A_StopSound(CHAN_7);
			check.A_StartSound("tensionhigh1",CHAN_7,CHANF_DEFAULT,1.0,ATTN_NORM);

			if (CharacterClass == 2 && level == 4 && random(1,3) == 1) 
			{
				check.A_StopSound(CHAN_VOICE);
				check.A_StartSound("FloraEnterHighTension1",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
			if (CharacterClass == 2 && level == 5 && random(1,2) == 1)
			{
				check.A_StopSound(CHAN_VOICE);
				check.A_StartSound("FloraEnterHighTension2",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		else if (level == 6)
		{
			if (CharacterClass == 2)
			{
				check.A_StopSound(CHAN_VOICE);
				check.A_StartSound("FloraEnterHighTension2",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		else if (level == 7) 
		{
			if (CharacterClass == 2)
			{
				check.A_StopSound(CHAN_VOICE);
				check.A_StartSound("FloraEnterHighTension3",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		else if (templevel > 0 && level == 0)
		{
			check.A_StopSound(CHAN_BODY);
			check.A_StartSound("tensionrevert",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM);
		}


		

		if ((dvds_showdamagemessages & 1))
		{
			if (hassource) A_PrintPsychUpMessage(source,level);
								else A_PrintPsychUpMessage(self,level);
		}

		double project_RealZ = (pviewheight * 39 / 50) + 8.0;
		string blastwavetype = "PlayerTension5BlastRadius";
		if (level == 1) blastwavetype = "PlayerTension5BlastRadius";
		if (level == 2) blastwavetype = "PlayerTension20BlastRadius";
		if (level == 3) blastwavetype = "PlayerTension50BlastRadius";
		if (level == 4) blastwavetype = "PlayerTension100BlastRadius";
		if (level == 5) blastwavetype = "PlayerTension250BlastRadius";
		if (level == 6) blastwavetype = "PlayerTension500BlastRadius";
		if (level == 7) blastwavetype = "PlayerTension1000BlastRadius";
		check.A_SpawnItemEx(blastwavetype,0.0,0.0,project_RealZ,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);

		if (level == 1) CallACS("MiscVarSetDECORATE",183,3600);
		if (level == 2) CallACS("MiscVarSetDECORATE",183,4320);
		if (level == 3) CallACS("MiscVarSetDECORATE",183,5184);
		if (level == 4) CallACS("MiscVarSetDECORATE",183,6221);
		if (level == 5) CallACS("MiscVarSetDECORATE",183,7465);
		if (level == 6) CallACS("MiscVarSetDECORATE",183,8958);
		if (level == 7) CallACS("MiscVarSetDECORATE",183,10750);
		
		CallACS("MiscVarSetDECORATE",181,level);
		CallACS("MiscVarSetDECORATE",184,0); // Resets Tension Countdown to idle.
		CallACS("MiscVarSetDECORATE",186,0); // Resets Tension Cooldown to idle.
		
	}
}

mixin class GetPlayerHeight
{
	action int A_GetPlayerHeight(int checktype, bool hassource = false, Actor Source = null)
	{
		int finalresult;
		int CharacterClass = CallACS("CheckCharacterClass");

		if (checktype == 0) // Height
		{
			if (CharacterClass == 0) finalresult = 56;
			if (CharacterClass == 1) finalresult = 56;
			if (CharacterClass == 2) finalresult = 52;
			if (CharacterClass == 8) finalresult = 50;
			if (CharacterClass == 9) finalresult = 44;
		}
		if (checktype == 1) // View Height
		{
			if (CharacterClass == 0) finalresult = 41;
			if (CharacterClass == 1) finalresult = 38;
			if (CharacterClass == 2) finalresult = 37;
			if (CharacterClass == 8) finalresult = 36;
			if (CharacterClass == 9) finalresult = 34;
		}
		if (checktype == 2) // Half Height
		{
			if (CharacterClass == 0) finalresult = 56;
			if (CharacterClass == 1) finalresult = 56;
			if (CharacterClass == 2) finalresult = 52;
			if (CharacterClass == 8) finalresult = 50;
			if (CharacterClass == 9) finalresult = 44;
			finalresult *= 0.5;
		}
		return finalresult;
	}
}

mixin class EGArmorBonus
{
	// Emulates Armor Bonuses for all four types of normal armor in DVI[I]-DS. [Applies Only to Deggaris and Illucia] (also one part of the Sauron's Gauntlet hit effect)
	action void A_EmulateGiveArmorBonus(int BaseAmount = 0, int GauntletGive = 0, bool hassource = false, Actor Source = null)
	{
		bool debug = false;
		Actor playpawn;
		if (hassource) playpawn = AetheriusPlayerPawn(source);
							else playpawn = null;
		Actor check;
		if (hassource) check = playpawn.player.mo;
							else check = player.mo;

		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int GauntletsArmorLimit = dvds_saurongauntlets_givearmor;
		if (GauntletGive && GauntletsArmorLimit <= 0) return;
		
		int ExtraAPAdd, ExtraAPAdd2, ExtraAPAdd3;
		int RawArmorValue;
		
		if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9) // Stops Flora/Ailish/Petra from getting armor benefits
		{
			BaseAmount = clamp(BaseAmount, 1, BaseAmount);
		
			// Saves original raw Armor Value
			RawArmorValue = check.CountInv("BasicArmor");
			if (debug) check.A_PrintBold(String.Format("Has %d Armor [base]", RawArmorValue));
			
			// Clears Armor Types
			check.A_SetInventory("BasicArmor", 0);
			check.A_SetInventory("ArmorBonusDSGreen",0);
			check.A_SetInventory("ArmorBonusDSBlue",0);
			check.A_SetInventory("ArmorBonusDSStone1",0);
			check.A_SetInventory("ArmorBonusDSStone2",0);
			check.A_SetInventory("ArmorBonusDSDiamond1",0);
			check.A_SetInventory("ArmorBonusDSDiamond2",0);
			// Flora and her Spiritual Exoskin spell have no Armor Bonuses
			// Flora and her Greater Spiritual Exoskin spell have no Armor Bonuses
			// Flora and her Perfected Spiritual Exoskin spell have no Armor Bonuses

			if (RawArmorValue == 0) // No Armor
			{
				if (debug) check.A_PrintBold(String.Format("Did Not Have Armor"));
	
				ExtraAPAdd = 1; // Base Increase to Armor and make it Green class
				ExtraAPAdd = ExtraAPAdd * BaseAmount;
				if (GauntletGive)
				{
					ExtraAPAdd *= 0.25;
					ExtraAPAdd = clamp(ExtraAPAdd, 1, ExtraAPAdd);
				}
				RawArmorValue += ExtraAPAdd;
				if (GauntletGive && RawArmorValue > GauntletsArmorLimit) RawArmorValue = GauntletsArmorLimit;
	
				if (debug) check.A_PrintBold(String.Format("%d Armor Given", ExtraAPAdd));
	
				CurrentArmorClass = 1;
				CurrentMaxArmor = 100;
				for (int i = 0; i < RawArmorValue; i++) { check.A_GiveInventory("ArmorBonusDSGreen", 1); }
				check.A_SetInventory("DSGreenArmorClass", 1);
				check.A_SetInventory("DSNoArmorClass", 0);
				check.A_SetInventory("DSBlueArmorClass", 0);
				check.A_SetInventory("DSStoneArmorClass1", 0);
				check.A_SetInventory("DSDiamondArmorClass1", 0);
				check.A_SetInventory("DSStoneArmorClass2", 0);
				check.A_SetInventory("DSDiamondArmorClass2", 0);
			}
			else // Have some kind of existing Armor
			{
				if (debug) check.A_PrintBold(String.Format("Already Has Armor"));
	
				ExtraAPAdd = CurrentArmorClass; // Base Increase to Armor and make it Green class
				ExtraAPAdd = ExtraAPAdd * BaseAmount;
				ExtraAPAdd2 = RawArmorValue / 100;
				ExtraAPAdd2 = ExtraAPAdd2 * BaseAmount;
				ExtraAPAdd3 = PlayerLevel * 0.2;
				ExtraAPAdd3 = ExtraAPAdd3 * BaseAmount;
				if (GauntletGive)
				{
					ExtraAPAdd /= 4;
					ExtraAPAdd2 /= 4;
					ExtraAPAdd3 /= 4;
				}
				int combinedarmor = (ExtraAPAdd + ExtraAPAdd2 + ExtraAPAdd3);
				combinedarmor = clamp(combinedarmor, 1, combinedarmor);
				RawArmorValue += combinedarmor;
				if (debug) check.A_PrintBold(String.Format("%d + %d + %d (= %d) Armor Given [%d Armor Class]", ExtraAPAdd, ExtraAPAdd2, ExtraAPAdd3, combinedarmor, CurrentArmorClass));
				
				if (GauntletGive && RawArmorValue > GauntletsArmorLimit) RawArmorValue = GauntletsArmorLimit;
	
				if (RawArmorValue < 101)
				{
					if (CurrentArmorClass < 1) CurrentArmorClass = 1;
				}
				else
				{
					if (RawArmorValue < 201)
					{
						if (CurrentArmorClass < 2) CurrentArmorClass = 2;
					}
					else
					{
						if (RawArmorValue < 501)
						{
							if (CurrentArmorClass < 3) CurrentArmorClass = 3;
						}
						else
						{
							if (RawArmorValue < 1251)
							{
								if (CurrentArmorClass < 4) CurrentArmorClass = 4;
							}
							else
							{
								if (RawArmorValue < 2001)
								{
									if (CurrentArmorClass < 5) CurrentArmorClass = 5;
								}
								else
								{
									if (CurrentArmorClass < 6) CurrentArmorClass = 6;
								}
							}
						}
					}
				}
				if (debug) check.A_PrintBold(String.Format("%d Armor Class", CurrentArmorClass));
				
				
				if (CurrentArmorClass == 0)
				{
					CurrentMaxArmor = 0;
					check.A_SetInventory("DSNoArmorClass", 1);
					check.A_SetInventory("DSGreenArmorClass", 0);
					check.A_SetInventory("DSBlueArmorClass", 0);
					check.A_SetInventory("DSStoneArmorClass1", 0);
					check.A_SetInventory("DSDiamondArmorClass1", 0);
					check.A_SetInventory("DSStoneArmorClass2", 0);
					check.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				if (CurrentArmorClass == 1)
				{
					CurrentMaxArmor = 100;
					for (int i = 0; i < RawArmorValue; i++) { check.A_GiveInventory("ArmorBonusDSGreen", 1); }
					check.A_SetInventory("DSGreenArmorClass", 1);
					check.A_SetInventory("DSNoArmorClass", 0);
					check.A_SetInventory("DSBlueArmorClass", 0);
					check.A_SetInventory("DSStoneArmorClass1", 0);
					check.A_SetInventory("DSDiamondArmorClass1", 0);
					check.A_SetInventory("DSStoneArmorClass2", 0);
					check.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				if (CurrentArmorClass == 2)
				{
					CurrentMaxArmor = 200;
					for (int i = 0; i < RawArmorValue; i++) { check.A_GiveInventory("ArmorBonusDSBlue", 1); }
					check.A_SetInventory("DSBlueArmorClass", 1);
					check.A_SetInventory("DSNoArmorClass", 0);
					check.A_SetInventory("DSGreenArmorClass", 0);
					check.A_SetInventory("DSStoneArmorClass1", 0);
					check.A_SetInventory("DSDiamondArmorClass1", 0);
					check.A_SetInventory("DSStoneArmorClass2", 0);
					check.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				if (CurrentArmorClass == 3)
				{
					CurrentMaxArmor = 500;
					for (int i = 0; i < RawArmorValue; i++) { check.A_GiveInventory("ArmorBonusDSStone1", 1); }
					check.A_SetInventory("DSStoneArmorClass1", 1);
					check.A_SetInventory("DSNoArmorClass", 0);
					check.A_SetInventory("DSGreenArmorClass", 0);
					check.A_SetInventory("DSBlueArmorClass", 0);
					check.A_SetInventory("DSDiamondArmorClass1", 0);
					check.A_SetInventory("DSStoneArmorClass2", 0);
					check.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				if (CurrentArmorClass == 4)
				{
					CurrentMaxArmor = 1250;
					for (int i = 0; i < RawArmorValue; i++) { check.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
					check.A_SetInventory("DSDiamondArmorClass1", 1);
					check.A_SetInventory("DSNoArmorClass", 0);
					check.A_SetInventory("DSGreenArmorClass", 0);
					check.A_SetInventory("DSBlueArmorClass", 0);
					check.A_SetInventory("DSStoneArmorClass1", 0);
					check.A_SetInventory("DSStoneArmorClass2", 0);
					check.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				if (CurrentArmorClass == 5)
				{
					CurrentMaxArmor = 2000;
					for (int i = 0; i < RawArmorValue; i++) { check.A_GiveInventory("ArmorBonusDSStone2", 1); }
					check.A_SetInventory("DSStoneArmorClass2", 1);
					check.A_SetInventory("DSNoArmorClass", 0);
					check.A_SetInventory("DSGreenArmorClass", 0);
					check.A_SetInventory("DSBlueArmorClass", 0);
					check.A_SetInventory("DSStoneArmorClass1", 0);
					check.A_SetInventory("DSDiamondArmorClass1", 0);
					check.A_SetInventory("DSDiamondArmorClass2", 0);
				}
				if (CurrentArmorClass >= 6)
				{
					CurrentMaxArmor = 5000;
					for (int i = 0; i < RawArmorValue; i++) { check.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
					check.A_SetInventory("DSDiamondArmorClass2", 1);
					check.A_SetInventory("DSNoArmorClass", 0);
					check.A_SetInventory("DSGreenArmorClass", 0);
					check.A_SetInventory("DSBlueArmorClass", 0);
					check.A_SetInventory("DSStoneArmorClass1", 0);
					check.A_SetInventory("DSDiamondArmorClass1", 0);
					check.A_SetInventory("DSStoneArmorClass2", 0);
				}

			}
		}
		CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
		CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
		if (dvdsdebug_armortrackdisplays) Console.Printf("---___> CurrentArmorClass: %d, CurrentMaxArmor: %d", CurrentArmorClass, CurrentMaxArmor);
	}
}

mixin class HellcoreChecker
{
	// Checks for certain projectiles from charmed/friendly allies to pass through other friendlies instead of colliding
	int A_CheckFriendCollisionProjTypeFriendlyDoom()
	{
		string infl = GetClassName();

		int type;
		if (
				infl == "EvilWarriorShieldBall" ||
				infl == "EvilWarriorShieldBallCrisis" ||
				// Doom
				infl == "UnmakerLaser" ||
				infl == "UnmakerLaserCrisis" ||
				infl == "DBTPuff" ||
				infl == "ZombieBulletTracer" ||
				infl == "ZombieBulletTracerCrisis" ||
				infl == "ZombieRepeaterTracer" ||
				infl == "ZombieRepeaterTracerCrisis" ||
				infl == "PlasmaBall1Monster" ||
				infl == "PlasmaBall1Crisis" ||
				infl == "PlasmaBall2Monster" ||
				infl == "PlasmaBall2Crisis" ||
				infl == "RocketMonster" ||
				infl == "RocketCrisis" ||
				infl == "BFGBallMonster" ||
				infl == "BFGBallCrisis" ||
				infl == "BFGExtraMonster" ||
				infl == "DoomImpBall" ||
				infl == "DoomImpBallNew" ||
				infl == "DoomImpBallCrisis" ||
				infl == "DarkSeeker" ||
				infl == "DarkSeekerCrisis" ||
				infl == "HellClericDarkBall" ||
				infl == "HellClericDarkBallCrisis" ||
				infl == "DarkFast" ||
				infl == "DarkFastCrisis" ||
				infl == "DarkNormal" ||
				infl == "DarkNormalCrisis" ||
				infl == "DarkStrong" ||
				infl == "DarkStrongCrisis" ||
				infl == "InfernoBall" ||
				infl == "InfernoBallCrisis" ||
				infl == "NetherLightning" ||
				infl == "NetherLightningCrisis" ||
				infl == "RevenantTracer" ||
				infl == "RevenantTracerNew" ||
				infl == "RevenantTracer2New" ||
				infl == "FlyingBalrogShot1" ||
				infl == "FlyingBalrogShot1Crisis" ||
				infl == "FlyingBalrogShot2" ||
				infl == "FlyingBalrogShot2Crisis" ||
				infl == "WeakenedBalrogShot1" ||
				infl == "WeakenedBalrogShot2" ||
				infl == "FatShot" ||
				infl == "FatShotNew" ||
				infl == "FatShotCrisis" ||
				infl == "HectShot" ||
				infl == "HectShotCrisis" ||
				infl == "DaedFire" ||
				infl == "DaedFire" ||
				infl == "DaedFireCrisis" ||
				infl == "SuicideBomb" ||
				infl == "SuicideBombStrong" ||
				infl == "SuicideBombUltra" ||
				infl == "HSBoom" ||
				infl == "HSBoomOverlord" ||
				infl == "CacodemonBall" ||
				infl == "CacodemonBallNew" ||
				infl == "CacodemonBallCrisis" ||
				infl == "CacolanternBall" ||
				infl == "CacolanternBallCrisis" ||
				infl == "AbaddonBall" ||
				infl == "AbaddonBallCrisis" ||
				infl == "HadesElementalBall" ||
				infl == "HadesElementalBallCrisis" ||
				infl == "HadesBolt" ||
				infl == "HadesBoltCrisis" ||
				infl == "OverBall" ||
				infl == "OverBallCrisis" ||
				infl == "HadesOverlordBall" ||
				infl == "HadesOverlordBallCrisis" ||
				infl == "StormShot1Ball" ||
				infl == "StormShot1BallCrisis" ||
				infl == "StormShot2Ball" ||
				infl == "StormShot2BallCrisis" ||
				infl == "StormStrike1" ||
				infl == "StormStrike1Crisis" ||
				infl == "StormBolt" ||
				infl == "StormBoltCrisis" ||
				infl == "StormBolt2" ||
				infl == "StormBolt2Crisis" ||
				infl == "StormLite1" ||
				infl == "StormLite1Crisis" ||
				infl == "StormLite2" ||
				infl == "StormLite2Crisis" ||
				infl == "ArachnotronPlasma" ||
				infl == "ArachnotronPlasmaNew" ||
				infl == "ArachnotronPlasmaCrisis" ||
				infl == "FusionShot" ||
				infl == "FusionShotCrisis" ||
				infl == "BaronBall" ||
				infl == "BaronBallNew" ||
				infl == "HellKnightBall" ||
				infl == "HellKnightBallCrisis" ||
				infl == "BaronOfHellBall" ||
				infl == "BaronOfHellBallCrisis" ||
				infl == "BelphegorBall" ||
				infl == "BelphegorBallCrisis" ||
				infl == "BruiserBall1" ||
				infl == "BruiserBall1Crisis" ||
				infl == "BruiserBall2" ||
				infl == "BruiserBall2Crisis" ||
				infl == "BruiserFireSpawner" ||
				infl == "BruiserFireSpawnerCrisis" ||
				infl == "BruiserFire" ||
				infl == "BruiserFireCrisis" ||
				infl == "CyBruiserMissile" ||
				infl == "CyBruiserMissileCrisis" ||
				infl == "CyBruiserMissileSeek" ||
				infl == "CyBruiserMissileSeekCrisis" ||
				infl == "ArchonOfHellBall" ||
				infl == "ArchonOfHellBallCrisis" ||
				infl == "ArchonComet" ||
				infl == "ArchonCometCrisis" ||
				infl == "PyroBall" ||
				infl == "PyroBallCrisis" ||
				infl == "FirebombExplosion1" ||
				infl == "FirebombExplosion1Crisis" ||
				infl == "FirebombExplosion2" ||
				infl == "FirebombExplosion2Crisis" ||
				infl == "FirebombExplosion3" ||
				infl == "FirebombExplosion3Crisis" ||
				infl == "PyroBlast" ||
				infl == "PyroBlastCrisis" ||
				infl == "RainCometNull" ||
				infl == "RainCometNullCrisis" ||
				infl == "FallingComet" ||
				infl == "FallingCometCrisis" ||
				infl == "CometDeath" ||
				infl == "ArchvileFlame" ||
				infl == "ArchvileFlameCrisis" ||
				infl == "ArchvileFire" ||
				infl == "ArchvileFireNew" ||
				infl == "ArchvileFireCrisis" ||
				infl == "ArchvileFireFast" ||
				infl == "ArchvileFireFastCrisis" ||
				infl == "DFire" ||
				infl == "DFireCrisis" ||
				infl == "DFlare" ||
				infl == "DFlareCrisis" ||
				infl == "DMissile" ||
				infl == "DMissileCrisis" ||
				infl == "DTracer" ||
				infl == "DTracerCrisis" ||
				infl == "DTracerPuff" ||
				infl == "DTracerPuffCrisis" ||
				infl == "DMissileCircle" ||
				infl == "DMissileCircleCrisis" ||
				infl == "DiabloistGravityHPTargeter" ||
				infl == "DiabloistGravityHPTargeter2" ||
				infl == "DiabloistGravityHPTargeter3" ||
				infl == "DiabloistGravityManaTargeter" ||
				infl == "DiabloistGravityManaTargeter2" ||
				infl == "DiabloistGravityManaTargeter3" ||
				infl == "Rocket2" ||
				infl == "Rocket2Crisis" ||
				infl == "HomRocket1" ||
				infl == "HomRocket1Crisis" ||
				infl == "HellClericBall" ||
				infl == "HellClericBallCrisis" ||
				infl == "CyBruiser" ||
				infl == "CyBruiserCrisis" ||
				infl == "DIPuff" ||
				infl == "IncarnateGlareTracer" ||
				infl == "IncarnateGlareTracerCrisis" ||
				infl == "HieroBall1" ||
				infl == "HieroBall1Crisis" ||
				infl == "HieroBall2" ||
				infl == "HieroBall2Crisis" ||
				infl == "CurseBall" ||
				infl == "CyberStomp" ||
				infl == "CyberStompCrisis" ||
				infl == "AnnhiliatorStomp" ||
				infl == "AnnhiliatorStompCrisis" ||
				infl == "HellWarriorBall" ||
				infl == "HellWarriorBallCrisis" ||
				infl == "HellWarriorBall2" ||
				infl == "HellWarriorBall2Crisis" ||
				infl == "HellWarriorShield" ||
				infl == "STGrenadeMonster" ||
				infl == "STGrenadeCrisis" ||
				infl == "IceGuyFXNew" ||
				infl == "IceGuyFXCrisis" ||
				infl == "IceGuyFX2New" ||
				infl == "IceGuyFX2Crisis" ||
				infl == "IceGuyFX3New" ||
				infl == "IceGuyFX3Crisis" ||
				infl == "IceGuyFX4New" ||
				infl == "IceGuyFX4Crisis" ||
				infl == "DemonFire" ||
				infl == "DemonFireCrisis"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyHeretic()
	{
		string infl = GetClassName();

		int type;
		if (
				// Heretic
				infl == "EggFX" ||
				infl == "EggFXNew" ||
				infl == "HereticImpBall" ||
				infl == "HereticImpBallNew" ||
				infl == "HereticImpBallCrisis" ||
				infl == "HereticImpBall2" ||
				infl == "HereticImpBall2Crisis" ||
				infl == "BeastBall" ||
				infl == "BeastBallNew" ||
				infl == "BeastBallCrisis" ||
				infl == "BeastBall2" ||
				infl == "BeastBall2Crisis" ||
				infl == "MummyFX1" ||
				infl == "MummyFX1New" ||
				infl == "MummyFX1Crisis" ||
				infl == "KnightAxe" ||
				infl == "KnightAxeNew" ||
				infl == "KnightAxeCrisis" ||
				infl == "RedAxe" ||
				infl == "RedAxeNew" ||
				infl == "RedAxeCrisis" ||
				infl == "DKDart" ||
				infl == "DKDartCrisis" ||
				infl == "FHeadShot" ||
				infl == "FHeadShotCrisis" ||
				infl == "DKbolt" ||
				infl == "DKboltCrisis" ||
				infl == "DKFire" ||
				infl == "DKFireCrisis" ||
				infl == "RedPuff" ||
				infl == "WizardFX1" ||
				infl == "WizardFX1New" ||
				infl == "WizardFX1Crisis" ||
				infl == "BansheeFire" ||
				infl == "BansheeFireCrisis" ||
				infl == "BansheeFire2" ||
				infl == "BansheeFire2Crisis" ||
				infl == "BansheeFire3" ||
				infl == "BansheeFire3Crisis" ||
				infl == "BansheeFire4" ||
				infl == "BansheeFire4Crisis" ||
				infl == "BansheeFire5" ||
				infl == "BansheeFire5Crisis" ||
				infl == "BansheeTrail" ||
				infl == "BansheeTrailCrisis" ||
				infl == "BansheeFireTrail" ||
				infl == "BansheeFireTrailCrisis" ||
				infl == "BansheeFireTrail" ||
				infl == "BansheeFireTrail2" ||
				infl == "HeadFX1" ||
				infl == "HeadFX1New" ||
				infl == "HeadFX1Crisis" ||
				infl == "HeadFX2" ||
				infl == "HeadFX2New" ||
				infl == "HeadFX2Crisis" ||
				infl == "HeadFX3" ||
				infl == "HeadFX3New" ||
				infl == "HeadFX3Crisis" ||
				infl == "Whirlwind" ||
				infl == "WhirlwindNew" ||
				infl == "WhirlwindCrisis" ||
				infl == "IceBreath" ||
				infl == "IceBreathCrisis" ||
				infl == "GoldLichBounce" ||
				infl == "GoldLichBounceCrisis" ||
				infl == "GoldLichFire" ||
				infl == "GoldLichFireCrisis" ||
				infl == "FireBreath" ||
				infl == "FireBreathCrisis" ||
				infl == "BloodLichFireball" ||
				infl == "BloodLichFireballCrisis" ||
				infl == "CurseSpell" ||
				infl == "CurseSpellCrisis" ||
				infl == "ClinkAxe" ||
				infl == "ClinkAxeCrisis" ||
				infl == "ClinkAxe2" ||
				infl == "ClinkAxe2Crisis" ||
				infl == "ShadowBeastBallFire" ||
				infl == "ShadowBeastBallFireCrisis" ||
				infl == "ShadowBeastBall1" ||
				infl == "ShadowBeastBall1Crisis" ||
				infl == "ShadowBeastBall2" ||
				infl == "ShadowBeastBall2Crisis" ||
				infl == "ShadowBeastBall3" ||
				infl == "ShadowBeastBall3Crisis" ||
				infl == "SnakeProjA" ||
				infl == "SnakeProjANew" ||
				infl == "SnakeProjACrisis" ||
				infl == "SnakeProjB" ||
				infl == "SnakeProjBNew" ||
				infl == "SnakeProjBCrisis" ||
				infl == "HellGuardBall" ||
				infl == "HellGuardBallCrisis" ||
				infl == "SorcererFX1" ||
				infl == "SorcererFX1New" ||
				infl == "SorcererFX1Crisis" ||
				infl == "Sorcerer2FX1" ||
				infl == "Sorcerer2FX1New" ||
				infl == "Sorcerer2FX1Crisis" ||
				infl == "Sorcerer2FX2" ||
				infl == "Sorcerer2FX2New" ||
				infl == "Sorcerer2FX2Crisis" ||
				infl == "PlagueShot" ||
				infl == "PlagueShotCrisis" ||
				infl == "DarkClinkBall" ||
				infl == "DarkClinkBallCrisis" ||
				infl == "ShadowBeastSpread" ||
				infl == "ShadowBeastSpreadCrisis" ||
				infl == "SerpathorPhoenixFX1" ||
				infl == "SerpathorPhoenixFX1Crisis" ||
				infl == "Medusabeam" ||
				infl == "MedusabeamCrisis" ||
				infl == "MBSpark" ||
				infl == "MBSparkCrisis" ||
				infl == "MinotaurFX1" ||
				infl == "MinotaurFX1New" ||
				infl == "MinotaurFX1Crisis" ||
				infl == "MinotaurFX2" ||
				infl == "MinotaurFX2New" ||
				infl == "MinotaurFX2Crisis" ||
				infl == "MinotaurFX3" ||
				infl == "MinotaurFX3New" ||
				infl == "MinotaurFX3Crisis"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyHexen()
	{
		string infl = GetClassName();

		int type;
		if (
				// Hexen
				infl == "ThrownMace" ||
				infl == "ThrownMaceCrisis" ||
				infl == "DBigEttinMace" ||
				infl == "WraithFX1" ||
				infl == "WraithFX1New" ||
				infl == "WraithFX1Crisis" ||
				infl == "BormerethFX1" ||
				infl == "BormerethFX1Crisis" ||
				infl == "PossEttFakeFireBall" ||
				infl == "PossEttFireBall" ||
				infl == "PossEttFireBallCrisis" ||
				infl == "WraithFX22" ||
				infl == "WraithFX23" ||
				infl == "PEFBExplo" ||
				infl == "PEFBTrail" ||
				infl == "FirePillarStarter" ||
				infl == "FirePillarStarterCrisis" ||
				infl == "FirePillarBase" ||
				infl == "FirePillarBaseCrisis" ||
				infl == "FirePillarShot" ||
				infl == "FirePillarShotCrisis" ||
				infl == "FirePillarShot2" ||
				infl == "FirePillarShot2Crisis" ||
				infl == "CentaurFX" ||
				infl == "CentaurFXNew" ||
				infl == "CentaurFXCrisis" ||
				infl == "FireDemonMissile" ||
				infl == "FireDemonMissileNew" ||
				infl == "FireDemonMissileCrisis" ||
				infl == "FireDemonLeaderMissile" ||
				infl == "FireDemonLeaderMissileCrisis" ||
				infl == "FireDemonLeaderTrail1" ||
				infl == "FireDemonLeaderTrail2" ||
				infl == "FireDemonCommanderMissile" ||
				infl == "FireDemonCommanderMissileCrisis" ||
				infl == "FireDemonCommanderTrail11" ||
				infl == "FireDemonCommanderTrail12" ||
				infl == "FireDemonQueenMissile" ||
				infl == "FireDemonQueenMissileCrisis" ||
				infl == "FireDemonQueenCloneMissile" ||
				infl == "FireDemonQueenCloneMissileCrisis" ||
				infl == "FireDemonQueenTrail1" ||
				infl == "FireDemonQueenTrail2" ||
				infl == "BishopFX" ||
				infl == "BishopFXNew" ||
				infl == "BishopFXNew2" ||
				infl == "BishopFXCrisis" ||
				infl == "DiscipleFX" ||
				infl == "DiscipleFXCrisis" ||
				infl == "DiscipleSpreadFX" ||
				infl == "DiscipleSpreadFXCrisis" ||
				infl == "VampireRoundBeam" ||
				infl == "VampireRoundBeamCrisis" ||
				infl == "VampireRoundBeamTrail" ||
				infl == "BatAttack" ||
				infl == "BatAttackCrisis" ||
				infl == "BatTrail" ||
				infl == "BatAttackSafe" ||
				infl == "SerpentFX" ||
				infl == "SerpentFXNew" ||
				infl == "SerpentFXCrisis" ||
				infl == "Demon1FX1" ||
				infl == "Demon1FX1New" ||
				infl == "Demon1FX1Crisis" ||
				infl == "Demon2FX1" ||
				infl == "Demon2FX1New" ||
				infl == "Demon2FX1Crisis" ||
				infl == "Demon3FX" ||
				infl == "Demon3FXCrisis" ||
				infl == "Demon3FX1Trail" ||
				infl == "HrVolcanoTBlast" ||
				infl == "HrVolcanoTBlastCrisis" ||
				infl == "Demon4FX" ||
				infl == "Demon4FXCrisis" ||
				infl == "BlackDemonTrail" ||
				infl == "PoisonVolcanoTBlast" ||
				infl == "PoisonVolcanoTBlastCrisis" ||
				infl == "Demon5FX1" ||
				infl == "Demon5FX1Crisis" ||
				infl == "Demon5Jet" ||
				infl == "Demon5JetCrisis" ||
				infl == "SorcBall1New" ||
				infl == "SorcBall2New" ||
				infl == "SorcBall3New" ||
				infl == "SorcFX1" ||
				infl == "SorcFX1Base" ||
				infl == "SorcFX1New" ||
				infl == "SorcFX1Crisis" ||
				infl == "SorcFX2" ||
				infl == "SorcFX2Base" ||
				infl == "SorcFX3" ||
				infl == "SorcFX3Base" ||
				infl == "SorcFX4" ||
				infl == "SorcFX4Base" ||
				infl == "SorcFX4New" ||
				infl == "SorcFX4Crisis" ||
				infl == "PorkFXNew"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendlyStrife()
	{
		string infl = GetClassName();

		int type;
		if (
				// Strife
				infl == "StrifeGenBulletTracer" ||
				infl == "StrifeGenBulletTracerCrisis" ||
				infl == "StrifeGenBulletTracer2" ||
				infl == "StrifeGenBulletTracer2Crisis" ||
				infl == "StrifeReaverBulletTracer" ||
				infl == "StrifeReaverBulletTracerCrisis" ||
				infl == "StrifeReaverBulletTracer2" ||
				infl == "StrifeReaverBulletTracer2Crisis" ||
				infl == "StrifeMaulerTracer" ||
				infl == "StrifeMaulerTracerCrisis" ||
				infl == "StrifeMaulerTracer2" ||
				infl == "StrifeMaulerTracer2Crisis" ||
				infl == "StrifeMaulerTracerRetail" ||
				infl == "StrifeMaulerTracerRetailCrisis" ||
				infl == "StrifeMaulerTracerRetail2" ||
				infl == "StrifeMaulerTracerRetail2Crisis" ||
				infl == "EMPGrenade" ||
				infl == "DarkInquisitorGibber" ||
				infl == "Shrapnel1" ||
				infl == "Shrapnel2" ||
				infl == "Shrapnel3" ||
				infl == "InquisitorDeathExplosion" ||
				infl == "DarkInquisitorBigExplosion" ||
				infl == "EMPTrail" ||
				infl == "DarkMatterBall" ||
				infl == "DarkMatterBallCrisis" ||
				infl == "ShadowVaporSpawner" ||
				infl == "ShadowVapor" ||
				infl == "DarkMatterSpark" ||
				infl == "FlameMissile" ||
				infl == "FlameMissileNew" ||
				infl == "FastFlameMissile" ||
				infl == "FastFlameMissileNew" ||
				infl == "FastFlameMissileCrisis" ||
				infl == "CrusaderMissile" ||
				infl == "CrusaderMissileNew" ||
				infl == "CrusaderMissileCrisis" ||
				infl == "SentinelFX1" ||
				infl == "SentinelFX1New" ||
				infl == "SentinelFX1Crisis" ||
				infl == "Sentinel2FX1" ||
				infl == "Sentinel2FX1New" ||
				infl == "Sentinel2FX1Crisis" ||
				infl == "Sentinel2FX2" ||
				infl == "Sentinel2FX2New" ||
				infl == "Sentinel2FX2Crisis" ||
				infl == "Sentinel2FX3" ||
				infl == "Sentinel2FX3New" ||
				infl == "Sentinel2FX3Crisis" ||
				infl == "Sentinel2FX4" ||
				infl == "Sentinel2FX4New" ||
				infl == "Sentinel2FX4Crisis" ||
				infl == "Sentinel2FX5" ||
				infl == "Sentinel2FX5New" ||
				infl == "Sentinel2FX5Crisis" ||
				infl == "InquisitorShot" ||
				infl == "InquisitorShotNew" ||
				infl == "InquisitorShotCrisis" ||
				infl == "BishopMissile" ||
				infl == "BishopMissileNew" ||
				infl == "BishopMissileCrisis" ||
				infl == "LoreShot" ||
				infl == "LoreShotBase" ||
				infl == "LoreShotNew" ||
				infl == "LoreShotCrisis" ||
				infl == "SpectralLightningBaseNew" ||
				infl == "SpectralLightningBall2Monster" ||
				infl == "SpectralLightningBall2MonsterCrisis" ||
				infl == "SpectralLightningBigV2Monster" ||
				infl == "SpectralLightningBigV2MonsterCrisis" ||
				infl == "SpectralLightningV1Monster" ||
				infl == "SpectralLightningV1MonsterCrisis" ||
				infl == "SpectralLightningV2Monster" ||
				infl == "SpectralLightningV2MonsterCrisis" ||
				infl == "SpectralLightningV2Monster" ||
				infl == "SpectralLightningV2MonsterCrisis" ||
				infl == "SpectralLightningH3Monster" ||
				infl == "SpectralLightningH3MonsterCrisis"
			 ) type = 1;

		return type;
	}
	
	int A_CheckFriendCollisionProjTypeFriendlyOthers()
	{
		string infl = GetClassName();

		int type;
		if (
				// KDIZD
				infl == "DemonCubeMissile" ||
				infl == "DemonCubeMissileCrisis" ||
				infl == "KDIZDImpBall" ||
				infl == "KDIZDImpBallCrisis" ||
				infl == "HellsFuryBall" ||
				infl == "HellsFuryBallCrisis" ||
				infl == "ZombieRifleBulletTracer" ||
				infl == "ZombieRifleBulletTracerCrisis" ||
				infl == "ShadowBall" ||
				infl == "ShadowBallCrisis" ||
				infl == "SoulHarvesterBall" ||
				infl == "SoulHarvesterBallCrisis" ||
				infl == "Portal1" ||
				infl == "Portal1Crisis" ||
				infl == "Portal2" ||
				infl == "Portal2Crisis" ||
				infl == "Redstar" ||
				infl == "RedstarCrisis" ||
				infl == "KDiZDGrenade" ||
				infl == "KDiZDGrenadeNoAOE" ||
				infl == "KDiZDGrenade2" ||
				infl == "KDiZDGrenade2NoAOE" ||
				infl == "SpiderBiteProj" ||
				infl == "SpiderBiteProjCrisis" ||
				infl == "SpiderBiteProj2" ||
				infl == "SpiderBiteProj2Crisis" ||
				// TCOTD:A
				infl == "BulletPuff2" ||
				infl == "SonicFireball" ||
				infl == "SonicFireballCrisis" ||
				infl == "ClayDevilMissile" ||
				infl == "ClayDevilMissileCrisis" ||
				infl == "FireBlast" ||
				infl == "FireBlastCrisis" ||
				infl == "SuperFireBlast" ||
				infl == "SuperFireBlastCrisis" ||
				infl == "ThrallShot1" ||
				infl == "ThrallShot1Crisis" ||
				infl == "DogFire" ||
				infl == "DogFireNew" ||
				infl == "DogFireCrisis" ||
				infl == "DogShot" ||
				infl == "ShadowBall" ||
				infl == "ShadowBallCrisis" ||
				infl == "SoulHarvesterBall" ||
				infl == "SoulHarvesterBallCrisis" ||
				infl == "DCBMiss1" ||
				infl == "DCBMiss1Crisis" ||
				infl == "DCBM1Trail" ||
				infl == "DCBMiss2" ||
				infl == "DCBMiss2Crisis" ||
				infl == "DCBMiss3" ||
				infl == "DCBMiss3Crisis" ||
				infl == "DCBMiss3M" ||
				infl == "DCBMiss3MCrisis" ||
				infl == "DCBMiss3Extra" ||
				infl == "DCBMiss3ExtraCrisis" ||
				infl == "VulgarShot" ||
				infl == "VulgarShotNew" ||
				infl == "VulgarShotCrisis" ||
				infl == "ButcherBarf" ||
				infl == "ButcherBarfNew" ||
				infl == "ButcherBarfCrisis" ||
				infl == "Pook" ||
				infl == "Cleaver" ||
				infl == "CleaverNew" ||
				infl == "CleaverCrisis" ||
				infl == "Cleaver" ||
				infl == "FattyTracer1" ||
				infl == "FattyTracer2" ||
				infl == "Pitchfork_thrown" ||
				infl == "TeslaBall" ||
				infl == "TeslaBall2" ||
				infl == "RocketBlood" ||
				infl == "WraithFX22" ||
				infl == "NewPuff" ||
				infl == "Puff2" ||
				infl == "NewSparks" ||
				infl == "ForkPuff" ||
				infl == "SpiderBiteProj" ||
				infl == "SpiderBiteProjCrisis" ||
				infl == "SpiderBiteProj2" ||
				infl == "SpiderBiteProj2Crisis" ||
				infl == "TCOTDBulletTracer" ||
				infl == "TCOTDBulletTracerCrisis" ||
				// TUTNT
				infl == "SGuardianFlameBreath" ||
				infl == "SGuardianFlameBreathCrisis" ||
				infl == "SourceGuardianDetonator" ||
				infl == "SourceGuardianDetonatorCrisis" ||
				infl == "FallingRock1" ||
				infl == "FallingRock2" ||
				infl == "FallingRockFrac1" ||
				infl == "FallingRockFrac2" ||
				infl == "FallingRockFrac3" ||
				infl == "FlameBreathSource" ||
				infl == "CatharsiBall" ||
				infl == "CatharsiBallCrisis" ||
				infl == "Comet" ||
				// Sitnalta
				infl == "LightningBallC1" ||
				infl == "LightningBallC2" ||
				infl == "LightningBallC2T" ||
				infl == "GroundLightning" ||
				infl == "GroundTrail" ||
				infl == "GroundSmoke" ||
				infl == "SmokeLightning" ||
				infl == "LightningBallS" ||
				infl == "LightningRod1" ||
				infl == "LightningRod1Crisis" ||
				infl == "GroundLightningTracer" ||
				infl == "MiniLightningPuff" ||
				infl == "LightningRod1L" ||
				infl == "TracerTrail" ||
				infl == "LightningRod3" ||
				// DUMP [1-3]
				// Circus666
				infl == "RevRocket" ||
				infl == "RevRocketCrisis" ||
				infl == "SpawnRck" ||
				infl == "SpawnRckCrisis" ||
				// Circus2
				infl == "SkullSeeker" ||
				infl == "SkullSeekerCrisis" ||
				infl == "SkullSeeker2" ||
				infl == "SkullSeeker2Crisis" ||
				infl == "PennywiseHeadProj" ||
				infl == "PennywiseHeadProjCrisis" ||
				infl == "RevRocketNew" ||
				infl == "RevRocketCrisis" ||
				infl == "HappyCloud" ||
				infl == "HappyCloudCrisis" ||
				infl == "TinyBingoBall" ||
				infl == "TinyBingoBallCrisis" ||
				infl == "BeefyBall1" ||
				infl == "BeefyBall1Crisis" ||
				infl == "BeefyBall2" ||
				infl == "BeefyBall2Crisis" ||
				infl == "Ghost2Ball" ||
				infl == "Ghost2BallCrisis" ||
				infl == "BulbyBall" ||
				infl == "BulbyBallCrisis" ||
				infl == "BulbyBall2" ||
				infl == "BulbyBall2Crisis" ||
				infl == "BulbyBall3" ||
				infl == "BulbyBall3Crisis" ||
				infl == "BerthaBall" ||
				infl == "BerthaBallCrisis" ||
				infl == "SoulAttack" ||
				infl == "SoulAttackCrisis" ||
				infl == "SkullSeeker666" ||
				infl == "SkullSeeker666Crisis" ||
				infl == "Deadlight" ||
				infl == "DeadlightCrisis" ||
				infl == "Hellfire" ||
				infl == "HellfireCrisis" ||
				infl == "Hellfire1" ||
				infl == "Hellfire1Crisis" ||
				infl == "Hellfire2" ||
				infl == "Hellfire2Crisis" ||
				// Strange Aeons
				infl == "WDemonProj" ||
				infl == "WDemonProjCrisis" ||
				infl == "WDemonProj2" ||
				infl == "WDemonProj2Crisis" ||
				infl == "ShadowBeastSpread" ||
				infl == "ShadowBeastSparkle" ||
				infl == "ShadowBeastBallFire" ||
				infl == "ShadowBeastBallFireCrisis" ||
				infl == "ShadowBeastBall2Fire" ||
				infl == "ShadowBeastBall2FireCrisis" ||
				infl == "ShadowBeastBall3Fire" ||
				infl == "ShadowBeastBall3FireCrisis" ||
				infl == "Revrailshot" ||
				infl == "RevrailshotCrisis" ||
				infl == "DeepOneBall" ||
				infl == "DeepOneBallCrisis" ||
				infl == "VulgarShotNew" ||
				infl == "VulgarShotCrisis" ||
				infl == "FlameShot" ||
				infl == "FlameShotCrisis" ||
				infl == "HellRipper" ||
				infl == "HellRipperCrisis" ||
				infl == "HellRipper2" ||
				infl == "HellRipper2Crisis" ||
				infl == "ArchvileFire2" ||
				infl == "ArchvileFire2Crisis" ||
				infl == "FloorShot" ||
				infl == "FloorShotCrisis" ||
				infl == "MagicBlast" ||
				infl == "MagicBlastCrisis" ||
				// Unloved
				infl == "MiniFirePuff" ||
				infl == "MiniFirePuffCrisis" ||
				infl == "MiniFirePuffNoDamage" ||
				infl == "YellowSkullSeeker" ||
				infl == "YellowSkullSeekerCrisis" ||
				infl == "GreenPoisonBall" ||
				infl == "GreenPoisonBallCrisis" ||
				infl == "RedSkullBall" ||
				infl == "RedSkullBallCrisis" ||
				infl == "Bloodshot" ||
				infl == "Bloodtrail" ||
				infl == "ShadowBall" ||
				infl == "ShadowBallCrisis" ||
				infl == "SoulHarvesterBall" ||
				infl == "SoulHarvesterBallCrisis" ||
				infl == "ThrallShot1" ||
				infl == "ThrallShot1Crisis" ||
				infl == "AcolyteShot" ||
				infl == "AcolyteShotCrisis" ||
				infl == "DiscipleShot1" ||
				infl == "DiscipleShot1Crisis" ||
				infl == "DiscipleShot2" ||
				infl == "DiscipleShot2Crisis" ||
				infl == "WickedShot" ||
				infl == "WickedShotCrisis" ||
				infl == "FireBlast" ||
				infl == "FireBlastCrisis" ||
				infl == "SuperFireBlast" ||
				infl == "SuperFireBlastCrisis" ||
				infl == "RedLiteTop" ||
				infl == "RedLiteTopCrisis" ||
				infl == "RedLiteBot" ||
				infl == "RedLiteBotCrisis" ||
				infl == "RedLiteZap" ||
				infl == "RedLiteZapCrisis" ||
				infl == "AvaFireBall" ||
				infl == "AvaFireBallCrisis" ||
				infl == "AvaBall1" ||
				infl == "AvaBall1Crisis" ||
				infl == "AvaBall2" ||
				infl == "AvaBall2Crisis" ||
				infl == "AvaBall3" ||
				infl == "AvaBall3Crisis" ||
				infl == "AvaBall4" ||
				infl == "AvaBall4Crisis" ||
				infl == "HolyMissile2" ||
				infl == "DCBMiss1" ||
				infl == "DCBMiss1Crisis" ||
				infl == "DCBMiss2" ||
				infl == "DCBMiss2Crisis" ||
				infl == "DCBMiss3" ||
				infl == "DCBMiss3Crisis" ||
				infl == "DCBMiss3M" ||
				infl == "DCBMiss3MCrisis" ||
				infl == "DCBMiss3G"
			 ) type = 1;

		return type;
	}

	int A_CheckFriendCollisionProjTypeFriendly1()
	{
		string infl = GetClassName();

		int type;
		if (
				// Misc
				infl == "WindyProjectile"
			 ) type = 1;

		return type;
	}
	
	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer(Actor type)
	{
		string infl = type.GetClassName();

		int type;
		if (
				infl == "UnmakerLaser" ||
				infl == "UnmakerLaserCrisis" ||
				// Hellcore Soul Projectiles
				infl == "DoomImpBall_Soul" ||
				infl == "DoomImpBallCrisis_Soul" ||
				infl == "DarkSeeker_Soul" ||
				infl == "DarkSeekerCrisis_Soul" ||
				infl == "CacodemonBall_Soul" ||
				infl == "CacodemonBallCrisis_Soul" ||
				infl == "CacolanternBall_Soul" ||
				infl == "CacolanternBallCrisis_Soul" ||
				infl == "AbaddonBall_Soul" ||
				infl == "AbaddonBallCrisis_Soul" ||
				infl == "HellKnightBall_Soul" ||
				infl == "HellKnightBallCrisis_Soul" ||
				infl == "BaronOfHellBall_Soul" ||
				infl == "BaronOfHellBallCrisis_Soul" ||
				infl == "BelphegorBall_Soul" ||
				infl == "BelphegorBallCrisis_Soul" ||
				infl == "BruiserBall_Soul" ||
				infl == "BruiserBallCrisis_Soul" ||
				infl == "BruiserBall2_Soul" ||
				infl == "BruiserBall2Crisis_Soul" ||
				infl == "BruiserFireSpawner_Soul" ||
				infl == "BruiserFireSpawnerCrisis_Soul" ||
				infl == "ArchonOfHellBall_Soul" ||
				infl == "ArchonOfHellBallCrisis_Soul" ||
				infl == "ArchonComet_Soul" ||
				infl == "ArchonCometCrisis_Soul" ||
				infl == "FireShot_Soul" ||
				infl == "FireShotCrisis_Soul" ||
				infl == "PyroBall_Soul" ||
				infl == "PyroBallCrisis_Soul" ||
				infl == "PyroBlast_Soul" ||
				infl == "PyroBlastCrisis_Soul" ||
				infl == "FirebombExplosion1_Soul" ||
				infl == "FirebombExplosion1Crisis_Soul" ||
				infl == "FirebombExplosion2_Soul" ||
				infl == "FirebombExplosion2Crisis_Soul" ||
				infl == "FirebombExplosion3_Soul" ||
				infl == "FirebombExplosion3Crisis_Soul" ||
				infl == "RainCometNull_Soul" ||
				infl == "RainCometNullCrisis_Soul" ||
				infl == "EscapeExplosion_Soul" ||
				infl == "EscapeExplosionCrisis_Soul" ||
				infl == "DIPuff_Soul" ||
				infl == "ArchvileFireFast" ||
				infl == "ArchvileFireFastCrisis" ||
				infl == "ArchvileFlame_Soul" ||
				infl == "ArchvileFlameCrisis_Soul" ||
				infl == "DFlare_Soul" ||
				infl == "DFlareCrisis_Soul" ||
				infl == "DTracer_Soul" ||
				infl == "DTracerCrisis_Soul" ||
				infl == "DTracerPuff_Soul" ||
				infl == "DTracerPuffCrisis_Soul" ||
				infl == "DMissile_Soul" ||
				infl == "DMissileCrisis_Soul" ||
				infl == "DMissileCircle_Soul" ||
				infl == "DMissileCircleCrisis_Soul" ||
				infl == "DFire_Soul" ||
				infl == "DFireCrisis_Soul" ||
				infl == "DiabloistGravityHPTargeter" ||
				infl == "DiabloistGravityHPTargeter2" ||
				infl == "DiabloistGravityHPTargeter3" ||
				infl == "DiabloistGravityManaTargeter" ||
				infl == "DiabloistGravityManaTargeter2" ||
				infl == "DiabloistGravityManaTargeter3" ||
				infl == "FlyingBalrogShot1_Soul" ||
				infl == "FlyingBalrogShot1Crisis_Soul" ||
				infl == "FlyingBalrogShot2_Soul" ||
				infl == "FlyingBalrogShot2Crisis_Soul" ||
				infl == "HadesElementalBall_Soul" ||
				infl == "HadesElementalBallCrisis_Soul" ||
				infl == "HadesBolt_Soul" ||
				infl == "HadesBoltCrisis_Soul" ||
				infl == "StormStrike1_Soul" ||
				infl == "StormStrike1Crisis_Soul" ||
				infl == "StormShot1_Soul" ||
				infl == "StormShot1Crisis_Soul" ||
				infl == "StormShot2_Soul" ||
				infl == "StormShot2Crisis_Soul" ||
				infl == "StormBolt_Soul" ||
				infl == "StormBoltCrisis_Soul" ||
				infl == "StormBolt2_Soul" ||
				infl == "StormBolt2Crisis_Soul" ||
				infl == "StormLite1_Soul" ||
				infl == "StormLite1Crisis_Soul" ||
				infl == "StormLite2_Soul" ||
				infl == "StormLite2Crisis_Soul" ||
				infl == "HadesOverlordBall_Soul" ||
				infl == "HadesOverlordBallCrisis_Soul" ||
				infl == "OverBall_Soul" ||
				infl == "OverBallCrisis_Soul" ||
				// Doomspells
				infl == "RagingSpiritBase" ||
				infl == "RagingSpirit2Base" ||
				infl == "RagingSpiritTail" ||
				infl == "RagingSpiritTail2" ||
				infl == "RagingSpirit" ||
				infl == "RagingSpirit2" ||
				infl == "MinorMagicMissile" ||
				infl == "MinorMagicMissileSeek" ||
				infl == "MMMParticle" ||
				infl == "MagicMissile" ||
				infl == "MagicMissileSeek" ||
				infl == "NMMParticle" ||
				infl == "MajorMagicMissile" ||
				infl == "MajorMagicMissileSeek" ||
				infl == "BMMParticle" ||
				infl == "UltraMagicMissile" ||
				infl == "UltraMagicMissileSeek" ||
				infl == "UMMParticle" ||
				infl == "MinorFireBall" ||
				infl == "MinorFireBallSeek" ||
				infl == "NormalFireBall" ||
				infl == "NormalFireBallSeek" ||
				infl == "MajorFireBall" ||
				infl == "MajorFireBallSeek" ||
				infl == "MinorHexenIceShard" ||
				infl == "MinorHexenIceShardSeek" ||
				infl == "HexenIceShard" ||
				infl == "HexenIceShardSeek" ||
				infl == "MajorHexenIceShard" ||
				infl == "MajorHexenIceShardSeek" ||
				infl == "ChillTouch" ||
				infl == "HexenLightningF" ||
				infl == "HexenLightningC" ||
				infl == "HexenLightningZap" ||
				infl == "MajorHexenLightningF" ||
				infl == "MajorHexenLightningC" ||
				infl == "MajorHexenLightningZap" ||
				infl == "AcidRainPillar" ||
				infl == "SuperiorAcidRainPillar" ||
				infl == "AcidRain" ||
				infl == "SuperiorAcidRain" ||
				infl == "MinorPoisonCloud" ||
				infl == "NormalPoisonCloud" ||
				infl == "MajorPoisonCloud" ||
				infl == "HexenPoisonCloud1" ||
				infl == "HexenPoisonCloud2Source" ||
				infl == "HexenPoisonCloud2Outer" ||
				infl == "HexenPoisonCloud3Source" ||
				infl == "HexenPoisonCloud3Outer" ||
				// Non Hellcore/DoomSpell
				infl == "HubbleBubble" ||
				infl == "GlimmeringGlobe" ||
				infl == "PoisonNeedlePuff" ||
				infl == "PoisonNeedleProj" ||
				infl == "PoisonNeedleProjExtra" ||
				infl == "PoisonNeedleProjPuff" ||
				infl == "EvilWarriorShieldBall" ||
				infl == "EvilWarriorShieldBallCrisis" ||
				infl == "MageWandMissileNew" ||
				infl == "MageWandMissile2New" ||
				infl == "DiarisHolyArrow" ||
				infl == "DiarisHolyArrow2XDmg" ||
				infl == "DiarisHolyArrow3XDmg" ||
				infl == "DiarisHolyArrowGlitter1" ||
				infl == "DiarisHolyArrowGlitter2" ||
				infl == "DiarisHolyArrowGlitter3" ||
				infl == "CStaffMissileNew" ||
				infl == "AChristinaShot" ||
				infl == "AChristinaShot2" ||
				infl == "AChristinaShotTracer" ||
				infl == "AChristinaShotPuff" ||
				infl == "AChristinaShotPuffChargedFinal" ||
				infl == "AChristinaBouncingShotWeak" ||
				infl == "AChristinaBouncingShotStage1" ||
				infl == "AChristinaBouncingShotStage2" ||
				infl == "AChristinaBouncingShotStage3" ||
				infl == "AChristinaPartiniasBall" ||
				// Doom Weapons
				infl == "BulletPuff" ||
				infl == "DBTPuff" ||
				infl == "FistPuff" ||
				infl == "KickPuff" ||
				infl == "UppercutPuff" ||
				infl == "GauntletPuff" ||
				infl == "SceptrePuffNormal" ||
				infl == "SceptrePuffShockWave" ||
				infl == "SceptrePuffSilent" ||
				infl == "SceptrePuffReticle" ||
				infl == "SceptrePuffReticle2" ||
				infl == "SceptrePuffSpinning" ||
				infl == "SceptrePuffSpinningSilent" ||
				infl == "HowitzerBase" ||
				infl == "HowitzerNoAOE" ||
				infl == "RocketPlayer" ||
				infl == "RocketPlayerNoAOE" ||
				infl == "RocketPlayerSeeking" ||
				infl == "RocketPlayerSeekingNoAOE" ||
				infl == "RocketPlayerDrunk" ||
				infl == "RocketPlayerDrunkNoAOE" ||
				infl == "PlasmaBallPlayer" ||
				infl == "RepeaterPuffPlayer" ||
				infl == "KsawBoltPlayer" ||
				infl == "PlasmaBall1Player" ||
				infl == "PlasmaBall2Player" ||
				infl == "BFGBallPlayer" ||
				infl == "BFGExtraPlayer" ||
				// Heretic
				infl == "Sorcerer2FX1Player" ||
				infl == "Sorcerer2FX3" ||
				infl == "RockBombShardProj" ||
				infl == "RockBombShardProjT" ||
				infl == "GoldWandFX1New" ||
				infl == "GoldWandFX2New" ||
				infl == "GoldWandPuff1New" ||
				infl == "GoldWandPuff2New" ||
				infl == "CrossbowFX1New" ||
				infl == "CrossbowFX2New" ||
				infl == "CrossbowFX3New" ||
				infl == "RipperNew" ||
				infl == "BlasterPuffNew" ||
				infl == "BlasterFX1New" ||
				infl == "HornRodFX1New" ||
				infl == "HornRodFX2New" ||
				infl == "RainPillarNew" ||
				infl == "PhoenixFX1New" ||
				infl == "PhoenixFX1NoAOE" ||
				infl == "PhoenixFX1Seeking" ||
				infl == "PhoenixFX1NoAOESeeking" ||
				infl == "PhoenixFX2New" ||
				infl == "PhoenixFX2Seeking" ||
				infl == "PhoenixPuff2" ||
				infl == "MaceFX1New" ||
				infl == "MaceFX2New" ||
				infl == "MaceFX3New" ||
				infl == "MaceFX4New" ||
				// Strife
				infl == "ElectricBoltNew" ||
				infl == "PoisonBoltNew" ||
				infl == "SpectralLightningBaseNew" ||
				infl == "SpectralLightningBall1New" ||
				infl == "SpectralLightningBall2New" ||
				infl == "SpectralLightningDeath1New" ||
				infl == "SpectralLightningBigV1New" ||
				infl == "SpectralLightningBigV2New" ||
				infl == "SpectralLightningDeath2New" ||
				infl == "SpectralLightningDeathShortNew" ||
				infl == "SpectralLightningBigBall1New" ||
				infl == "SpectralLightningV1New" ||
				infl == "SpectralLightningV2New" ||
				infl == "SpectralLightningH1New" ||
				infl == "SpectralLightningH2New" ||
				infl == "SpectralLightningH3New" ||
				infl == "SpectralLightningSpotNew" ||
				infl == "NNSigilLightningSpot" ||
				infl == "NNSigilLightningBigV" ||
				// Other
				infl == "WindyProjectile"
			 ) type = 1;

		return type;
	}

	// Checks for certain projectiles from players to pass through friendlies instead of colliding
	int A_CheckFriendCollisionProjTypePlayer2(Actor type)
	{
		string infl = type.GetClassName();

		int type;
		if (
				// Circus 2
				infl == "GoreBalloon666" ||
				infl == "GoreBalloon666NoHurt" ||
				infl == "CGrenade" ||
				infl == "CGrenadeNoHurt" ||
				infl == "GrenadeSpark" ||
				infl == "GrenadeSparkNoHurt" ||
				infl == "GrenadeSpark2" ||
				infl == "GrenadeSpark2NoHurt" ||
				infl == "FlyingGut" ||
				infl == "FlyingGutNoHurt" ||
				infl == "RevRocket2" ||
				infl == "RevRocket2NoHurt" ||
				infl == "CrazyBalls" ||
				infl == "CrazyBallsNoHurt" ||
				infl == "CrazyBall" ||
				infl == "CrazyBallNoHurt" ||
				infl == "CrazyBallNew" ||
				// TCOTD2
				infl == "ForkPuff" ||
				// Strange Aeons
				infl == "SonicNail" ||
				infl == "SoulScepterPuff" ||
				infl == "SoulScepterPuff2" ||
				infl == "SoulScepterPowerPuff" ||
				infl == "DualSoulScepterPuff" ||
				infl == "DualSoulScepterPowerPuff" ||
				// Other
				infl == "WindyProjectile"
			 ) type = 1;

		return type;
	}
}

mixin class AtkTypeChecker
{
	action int A_GetPlayerAttackDamage(int type = 0, int puff = 0, int isinvoker = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int finaldamagedealt;
		class<Inventory> ExternalCheck1;

		string nm;
		int debugplayeratkinfo = dvdsdebug_showplayeratkinformation;
		int flagchecktype = 0;
		double baserand1, baserand2;
		int damage, extradmg1, extradmg2, extradmg3, extradmg4, extradmg5, extradmg6, finaldmg;
		int rand1, rand2;
		double perkfactor = 1.00;
		double chargefactor = 1.00;
		double perkpts = 0.0;
		int playershot = 0;
		int PlayerAeonPts = CallACS("MiscVarCheckDECORATE",25);
		int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
		int PlayerDEF = CallACS("MiscVarCheckDECORATE",32);
		int PlayerDFT = CallACS("MiscVarCheckDECORATE",33);
		int PlayerSOR = CallACS("MiscVarCheckDECORATE",34);
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		int PlayerTHE = CallACS("MiscVarCheckDECORATE",36);
		int PlayerLevel = CallACS("StatCheck",0);
		int CurrentMana = CallACS("StatCheck",14);
		int HellWarriorShieldLevel = CallACS("MiscVarCheckDECORATE",300);

		int EWShieldKills = CallACS("MiscVarCheckDECORATE",49);
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);

		int MagiUpPerkLevel = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10004);
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int KarasawaAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10027);
		int KarasawaAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10028);
		int BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		int BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);
		int ArcheryMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10032);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ismagicalatk;
		int isfirearmatk;
		int ishybridatk;

		perkfactor = 1.00;
		// Bullet
		if (type == 1 ||
				type == 2 ||
				type == 5 ||
				type == 6 ||
				type == 60)
				perkfactor += ((BulletAccuracyPerkLevel * 0.05) + (BulletAccuracyEXPerkLevel * 0.125));
		// Pellet
		if (type == 3 || 
				type == 4 ||
				type == 60)
				perkfactor += ((PelletAccuracyPerkLevel * 0.05) + (PelletAccuracyEXPerkLevel * 0.125));
		// Plasma
		if (type == 7 || 
				type == 10 || 
				type == 11 || 
				type == 12 || 
				type == 13 ||
				type == 48 ||
				type == 49 ||
				(type >= 53 && type <= 56) ||
				type == 58)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.05) + (PlasmaAccuracyEXPerkLevel * 0.125));
		// Demolition
		if (type == 8 ||
				type == 9 ||
				type == 69 ||
				type == 70)
				perkfactor += ((DemolitionsExpertPerkLevel * frandompick(0.07,0.105,0.14)) + (DemolitionsExpertEXPerkLevel * frandompick(0.175,0.2625,0.35)));
		// Karasawa
		if (type == 17)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.05) + (PlasmaAccuracyEXPerkLevel * 0.125));
				perkfactor += ((KarasawaAttunementPerkLevel * 0.5) + (KarasawaAttunementEXPerkLevel * 1.25));
		// BFG
		if (type == 12 || 
				type == 13 || 
				type == 14 || 
				type == 15 || 
				type == 16)
				perkfactor += ((PlasmaAccuracyPerkLevel * 0.05) + (PlasmaAccuracyEXPerkLevel * 0.125));
				perkfactor += ((BFGAttunementPerkLevel * 0.5) + (BFGAttunementEXPerkLevel * 1.25));
		// Archery
		if (type >= 18 && type <= 20)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.125) + (ArcheryMasteryEXPerkLevel * 0.3125));
		// Ethereal Crossbow
		if (type == 21 || 
				type == 22 || 
				type == 23)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.125) + (ArcheryMasteryEXPerkLevel * 0.3125));
		// Strife Crossbow
		if (type == 25 ||
				type == 26 ||
				type == 72)
				perkfactor += ((ArcheryMasteryPerkLevel * 0.125) + (ArcheryMasteryEXPerkLevel * 0.3125));
		// Impaler Crossbow [Strange Aeons]
		if (type == 63 || type == 64)
		{
			perkfactor += ((ArcheryMasteryPerkLevel * 0.25) + (ArcheryMasteryEXPerkLevel * 0.625));
		}
		// Heretic Magic Weapons
		if (type == 24 || 
				(type >= 27 && type <= 32) ||
				(type >= 35 && type <= 38) ||
				(type >= 40 && type <= 43))
				perkfactor += ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		// Heretic Pheonix Rod Shots/Puffs
		if (type == 33 || type == 34 || type == 62)
		{
			perkfactor += ((WandMasteryPerkLevel * 0.10) + (WandMasteryEXPerkLevel * 0.25));
		}
		// Heretic ??????? Staff
		if (type == 39 || type == 61)
		{
			perkfactor += ((WandMasteryPerkLevel * 0.10) + (WandMasteryEXPerkLevel * 0.25));
		}
		// Sapphire Wand(s) [Flora]
		if (type == 44 || 
				type == 45)
		{
			perkfactor += ((WandMasteryPerkLevel * 0.0625) + (WandMasteryEXPerkLevel * 0.15625));
		}
		// Serpent Staff [Ailish]
		if (type == 57)
				perkfactor += ((WandMasteryPerkLevel * 0.125) + (WandMasteryEXPerkLevel * 0.3125));
		// Hubble Bubbles
		if (type == 46 || 
				type == 47)
				perkfactor += ((WandMasteryPerkLevel * 0.15) + (WandMasteryEXPerkLevel * 0.375));
		// Hell Warrior Shield Fireballs
		if (type == 52)
		{
			perkfactor += ((MagiUpPerkLevel * 0.0375) + (MagiUpEXPerkLevel * 0.09375)); // MagiUp
			perkfactor += ((SoulMasteryPerkLevel * 0.025) + (SoulMasteryEXPerkLevel * 0.0625)); // Soul Mastery
			perkfactor += ((WandMasteryPerkLevel * 0.025) + (WandMasteryEXPerkLevel * 0.0625)); // Wand/Staff Mastery
			perkfactor += (EWShieldKills * frandompick(0.0005,0.00075,0.00075,0.00075,0.00075,0.00075,0.001));
		}
		// Soul Scepter
		if (type >= 65 && type <= 68) // Soul Scepter
		{
			perkfactor += ((MagiUpPerkLevel * 0.0375) + (MagiUpEXPerkLevel * 0.09375)); // MagiUp
			perkfactor += ((SoulMasteryPerkLevel * 0.10) + (SoulMasteryEXPerkLevel * 0.25)); // Soul Mastery
			perkfactor += ((WandMasteryPerkLevel * 0.025) + (WandMasteryEXPerkLevel * 0.0625)); // Wand/Staff Mastery
		}
		
		
		// Main Definitions
		if (type == 1) // Pistol [Single]
		{
			perkpts = BulletAccuracyPerkLevel + (BulletAccuracyEXPerkLevel * 2.5);
			baserand1 = 1 + (perkpts * 0.5); // 1 to 6
			baserand2 = 3 + (perkpts * 0.334); // 3 to 6

			damage = frandom(baserand1,baserand2) * random(5,7); // 5 to 28
			extradmg1 = PlayerAGL * 1.50; // 150% of Agility
			extradmg2 = PlayerSTR * 0.35; // 35% of Strength
		}
		if (type == 2) // Pistols [Dual]
		{
			perkpts = BulletAccuracyPerkLevel + (BulletAccuracyEXPerkLevel * 2.5);
			baserand1 = 2 + (perkpts * 0.4); // 2 to 6
			baserand2 = 3 + (perkpts * 0.4); // 3 to 7

			damage = frandom(baserand1,baserand2) * random(6,7); // 12 to 28
			extradmg1 = PlayerAGL * 1.75; // 175% of Agility
			extradmg2 = PlayerSTR * 0.40; // 40% of Strength
		}
		if (type == 3) // Shotgun
		{
			perkpts = PelletAccuracyPerkLevel + (PelletAccuracyEXPerkLevel * 2.5);
			baserand1 = 1 + (perkpts * 0.40); // 1 to 5.0
			baserand2 = 3 + (perkpts * 0.25); // 3 to 5.5

			damage = frandom(baserand1,baserand2) * random(5,6); // 5 to 18
			extradmg1 = PlayerAGL * 2.00; // 200% of Agility
			extradmg2 = PlayerSTR * 0.175; // 17.5% of Strength
		}
		if (type == 4) // Super Shotgun
		{
			perkpts = PelletAccuracyPerkLevel + (PelletAccuracyEXPerkLevel * 2.5);
			baserand1 = 2 + (perkpts * 0.25); // 2 to 4.5
			baserand2 = 3 + (perkpts * 0.25); // 3 to 5.5

			damage = frandom(baserand1,baserand2) * random(5,7); // 10 to 18
			extradmg1 = PlayerAGL * 2.50; // 175% of Agility
			extradmg2 = PlayerSTR * 0.25; // 25% of Strength
		}
		if (type == 5) // Chaingun
		{
			perkpts = BulletAccuracyPerkLevel + (BulletAccuracyEXPerkLevel * 2.5);
			baserand1 = 2 + (perkpts * 0.4); // 2 to 6
			baserand2 = 3 + (perkpts * 0.4); // 3 to 7

			damage = frandom(baserand1,baserand2) * random(5,7); // 10 to 28
			extradmg1 = PlayerAGL * 1.75; // 175% of Agility
			extradmg2 = PlayerSTR * 0.40; // 40% of Strength 
		}
		if (type == 6) // Minigun
		{
			perkpts = BulletAccuracyPerkLevel + (BulletAccuracyEXPerkLevel * 2.5);
			baserand1 = 3 + (perkpts * 0.4); // 3 to 7
			baserand2 = 4 + (perkpts * 0.4); // 4 to 8

			damage = frandom(baserand1,baserand2) * random(6,7); // 18 to 28
			extradmg1 = PlayerAGL * 2.00; // 175% of Agility
			extradmg2 = PlayerSTR * 0.50; // 40% of Strength 
		}
		if (type == 7) // Repeater
		{
			baserand1 = 2 + (PlasmaAccuracyPerkLevel * 0.75) + (PlasmaAccuracyEXPerkLevel * 1.875); // 2 to 9.5
			baserand2 = 6 + (PlasmaAccuracyPerkLevel * 0.50) + (PlasmaAccuracyEXPerkLevel * 1.25); // 4 to 11.0
			
			damage = frandom(baserand1,baserand2) * 6; // 2 to 36
			extradmg1 = PlayerAGL * 3.00; // 300% of Agility
			extradmg2 = PlayerSTR * 0.75; // 75% of Strength 
		}
		if (type == 8) // Rocket/Grenade [main hit]
		{
			baserand1 = 1 + (DemolitionsExpertPerkLevel * 0.50) + (DemolitionsExpertEXPerkLevel * 1.25); // 1 to 6
			baserand2 = 8 + (DemolitionsExpertPerkLevel * 0.25) + (DemolitionsExpertEXPerkLevel * 0.625); // 8 to 10.5
			
			damage = frandom(baserand1,baserand2) * 20; // 20 to 160
			extradmg1 = PlayerAGL * 5.0; // 500% of Agility
			extradmg2 = PlayerSTR * 2.25; // 225.0% of Strength 
		}
		if (type == 9) // Rocket/Grenade [explosion]
		{
			damage = 128 + (DemolitionsExpertPerkLevel * 12) + (DemolitionsExpertEXPerkLevel * 30);
			extradmg1 = PlayerAGL * 5.0; // 500% of Agility
			extradmg2 = PlayerSTR * 2.25; // 225.0% of Strength 
		}
		if (type == 10) // Repeater [explosion]
		{
			perkpts = PlasmaAccuracyPerkLevel + (PlasmaAccuracyEXPerkLevel * 2.5);

			damage = 14 + (PlasmaAccuracyPerkLevel * 8) + (PlasmaAccuracyEXPerkLevel * 20); // 7
			damage *= (randompick(1,1,1,1,1,1,1,1,1,1,2,2,2,3) + (perkpts * 0.25));
			extradmg1 = PlayerAGL * 0.80; // 40% of Agility
			extradmg2 = PlayerSTR * 0.2857142856; // 28.57~% of Strength 
		}

		if (type == 11) // Plasma
		{
			perkpts = PlasmaAccuracyPerkLevel + (PlasmaAccuracyEXPerkLevel * 2.5);

			baserand1 = 1 + (PlasmaAccuracyPerkLevel * 1) + (PlasmaAccuracyEXPerkLevel * 2.5); // 1 to 11
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25); // 8 to 13
			damage = frandom(baserand1,baserand2) * 5; // 5 to 40
			extradmg1 = PlayerAGL * 1.4001; // 140.01% of Agility
			extradmg2 = PlayerSTR * 0.675; // 675% of Strength 
		}
		if (type == 12) // Plasma1 [BFG2704]
		{
			baserand1 = (PlasmaAccuracyPerkLevel * 2) + (PlasmaAccuracyEXPerkLevel * 5); // 0 to 10
			if (BFGAttunementPerkLevel <= 0) baserand1 += 2;
			if (BFGAttunementPerkLevel == 1) baserand1 += 6;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 14;
			baserand2 = (PlasmaAccuracyPerkLevel * 1) + (PlasmaAccuracyEXPerkLevel * 2.5); // 0 to 5
			if (BFGAttunementPerkLevel <= 0) baserand2 += 16;
			if (BFGAttunementPerkLevel == 1) baserand2 += 17;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 20;
			damage = frandom(baserand1,baserand2) * 2; // 4 to 50
			extradmg1 = PlayerAGL * 1.50; // 150% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 1.8); // 198% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 2.4); // 264% of Agility
			extradmg2 = PlayerSTR * 0.825; // 82.5% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 0.99); // 90% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 1.32); // 120% of Strength 
		}
		if (type == 13) // Plasma2 [BFG2704]
		{
			baserand1 = (PlasmaAccuracyPerkLevel * 2) + (PlasmaAccuracyEXPerkLevel * 5); // 0 to 10
			if (BFGAttunementPerkLevel <= 0) baserand1 += 2;
			if (BFGAttunementPerkLevel == 1) baserand1 += 6;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 14;
			baserand2 = (PlasmaAccuracyPerkLevel * 1) + (PlasmaAccuracyEXPerkLevel * 2.5); // 0 to 5
			if (BFGAttunementPerkLevel <= 0) baserand2 += 16;
			if (BFGAttunementPerkLevel == 1) baserand2 += 17;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 20;
			damage = frandom(baserand1,baserand2) * 2; // 4 to 50
			extradmg1 = PlayerAGL * 1.65; // 165% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 1.98); // 198% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 2.64); // 264% of Agility
			extradmg2 = PlayerSTR * 0.75; // 75% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 0.9); // 90% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 1.2); // 120% of Strength 
		}

		if (type == 14) // BFG [Main]
		{
			baserand1 = (PlasmaAccuracyPerkLevel * 2) + (PlasmaAccuracyEXPerkLevel * 5); // 0 to 20
			if (BFGAttunementPerkLevel <= 0) baserand1 += 2;
			if (BFGAttunementPerkLevel == 1) baserand1 += 4;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 8;
			baserand2 = (PlasmaAccuracyPerkLevel * 1) + (PlasmaAccuracyEXPerkLevel * 2.5); // 0 to 15
			if (BFGAttunementPerkLevel <= 0) baserand2 += 16;
			if (BFGAttunementPerkLevel == 1) baserand2 += 17;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 20;
			damage = frandom(baserand1,baserand2) * 50; // 100 to 1750
			extradmg1 = (PlayerAGL * 12.5); // 1250% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 15); // 1500% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 20); // 2000% of Agility
			extradmg2 = (PlayerSTR * 6.25); // 625% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 7.5); // 750% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 10); // 1000% of Strength 
		}
		if (type == 15) // BFG [Tracer]
		{
			baserand1 = (PlasmaAccuracyPerkLevel * 1.5) + (PlasmaAccuracyEXPerkLevel * 3.75); // 0 to 7.5
			if (BFGAttunementPerkLevel <= 0) baserand1 += 1;
			if (BFGAttunementPerkLevel == 1) baserand1 += 2;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 3;
			baserand2 = (PlasmaAccuracyPerkLevel * 0.75) + (PlasmaAccuracyEXPerkLevel * 1.875); // 0 to 3.75
			if (BFGAttunementPerkLevel <= 0) baserand2 += 8;
			if (BFGAttunementPerkLevel == 1) baserand2 += 9;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 10;
	
			damage = frandom(baserand1,baserand2) + 15; // 16 to 25
			if (BFGAttunementPerkLevel == 1) damage = frandom(baserand1,baserand2) + 18; // 20 to 30.75
			if (BFGAttunementPerkLevel == 2) damage = frandom(baserand1,baserand2) + 22; // 25 to 38.75
			extradmg1 = (PlayerAGL * 2.5); // 220% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 3.25); // 325% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 1); // 100% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 1.5); // 150% of Strength 
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 2.0); // 200% of Strength 
		}
		if (type == 16) // BFG [Tracer] (AOE)
		{
			baserand1 = (PlasmaAccuracyPerkLevel * 1) + (PlasmaAccuracyEXPerkLevel * 2.5); // 0 to 5
			if (BFGAttunementPerkLevel <= 0) baserand1 += 1;
			if (BFGAttunementPerkLevel == 1) baserand1 += 2;
			if (BFGAttunementPerkLevel >= 2) baserand1 += 3;
			baserand2 = (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25); // 0 to 2.5
			if (BFGAttunementPerkLevel <= 0) baserand2 += 3;
			if (BFGAttunementPerkLevel == 1) baserand2 += 4;
			if (BFGAttunementPerkLevel >= 2) baserand2 += 5;
	
			damage = frandom(baserand1,baserand2) + 5; // 6 to 11.5
			if (BFGAttunementPerkLevel == 1) damage = frandom(baserand1,baserand2) + 6; // 8 to 13.5
			if (BFGAttunementPerkLevel == 2) damage = frandom(baserand1,baserand2) + 8; // 11 to 15.5
			extradmg1 = (PlayerAGL * 2.5); // 220% of Agility
			if (BFGAttunementPerkLevel == 1) extradmg1 = (PlayerAGL * 3.25); // 325% of Agility
			if (BFGAttunementPerkLevel == 2) extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 1); // 100% of Strength 
			if (BFGAttunementPerkLevel == 1) extradmg2 = (PlayerSTR * 1.5); // 150% of Strength
			if (BFGAttunementPerkLevel == 2) extradmg2 = (PlayerSTR * 2.0); // 200% of Strength
			extradmg1 *= 0.3334;
			extradmg2 *= 0.3334;
		}
		if (type == 17) // KSawBolt
		{
			baserand1 = 1 + (PlasmaAccuracyPerkLevel * 0.5) + (PlasmaAccuracyEXPerkLevel * 1.25); // 1 to 6
			baserand2 = 8 + (PlasmaAccuracyPerkLevel * 0.25) + (PlasmaAccuracyEXPerkLevel * 0.625); // 8 to 10.5
			damage = frandom(baserand1,baserand2) * 15; // 15 to 157.5
			extradmg1 = (PlayerAGL * 4.4); // 440% of Agility
			extradmg2 = (PlayerSTR * 2); // 200% of Strength
		}
		if (type >= 18 && type <= 20) // DiarisHolyArrows
		{
			damage = 384 + randompick(-48,-24,0,24,48,72,96,120,144,168,192); // 336 to 576 damage
	
			if (type == 18) // DiarisHolyArrow [native]
			{
				extradmg1 = (PlayerAGL * 5); // 500% of Agility
				extradmg2 = (PlayerSTR * 0.4); // 40% of Strength 
			}
			if (type == 19) // DiarisHolyArrow2XDmg [native]
			{
				damage *= 2;
				extradmg1 = ((PlayerAGL * 6.25) * 2); // 625% of Agility
				extradmg2 = ((PlayerSTR * 0.5) * 2); // 50% of Strength 
			}
			if (type == 20) // DiarisHolyArrow3XDmg [native]
			{
				damage *= 3;
				extradmg1 = ((PlayerAGL * 7.5) * 3); // 750% of Agility
				extradmg2 = ((PlayerSTR * 0.6) * 3); // 60% of Strength 
			}
			
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 1) 
			{
				damage *= 1.5;
				extradmg1 *= 1.5;
				extradmg2 *= 1.5;
			}
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 2) 
			{
				damage *= 2.25;
				extradmg1 *= 2.25;
				extradmg2 *= 2.25;
			}
			if (CountInv("LongbowZoom", AAPTR_PLAYER1) == 3)
			{
				damage *= 3.375;
				extradmg1 *= 3.375;
				extradmg2 *= 3.375;
			}
			
			damage *= 0.5;
			extradmg1 *= 0.5;
			extradmg2 *= 0.5;
		}
		if (type == 21) // CrossbowFX1New [HERETIC]
		{
			damage = 45 + random(-22,22); // 23 to 67 damage
			extradmg1 = (PlayerAGL * 2.50); // 250% of Agility
			extradmg2 = (PlayerSTR * 0.50); // 50% of Strength 
		}
		if (type == 22) // CrossbowFX2New [HERETIC]
		{
			damage = 27 + random(-13,13); // 14 to 40 damage
			extradmg1 = (PlayerAGL * 1.50); // 150% of Agility
			extradmg2 = (PlayerSTR * 0.30); // 30% of Strength 
		}
		if (type == 23) // CrossbowFX3New [HERETIC]
		{
			damage = 9 + random(-4,4); // 5 to 13 damage
			extradmg1 = (PlayerAGL * 0.50); // 50% of Agility
			extradmg2 = (PlayerSTR * 0.10); // 10% of Strength 
		}
		if (type == 24) // RipperNew [HERETIC] <MAGIC TYPE>
		{
			perkpts = WandMasteryPerkLevel + (WandMasteryEXPerkLevel * 2.5);
			baserand1 = 1 + (WandMasteryPerkLevel * 0.5) + (WandMasteryEXPerkLevel * 1.25); // 1 to 6
			baserand2 = 8 + (WandMasteryPerkLevel * 0.125) + (WandMasteryEXPerkLevel * 0.3125); // 8 to 9.25
			
			damage = (1 + (perkpts * 0.2)) * frandom(baserand1,baserand2);
			extradmg1 = ((PlayerSOR * 0.125) * frandom(baserand1,baserand2)); // 12.5% of Sorcery
			extradmg2 = ((PlayerTHE * 0.0625) * frandom(baserand1,baserand2)); // 6.25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 25) // ElectricBoltNew [STRIFE]
		{
			damage = 25 + random(-12,12); // 10 to 40 damage
			extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 0.5); // 50% of Strength 
		}
		if (type == 26) // PoisonBoltNew [STRIFE]
		{
			damage = 25 + random(-12,12); // 10 to 40 damage
			extradmg1 = (PlayerAGL * 8.0); // 800% of Agility
			extradmg2 = (PlayerSTR * 0.25); // 25% of Strength 
		}
		if (type == 27) // BlasterPuffNew [HERETIC] <MAGIC TYPE>
		{
			damage = 18 + random(-9,9); // 4 to 32 damage
			extradmg1 = (PlayerSOR * 0.5); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.25); // 25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 28) // BlasterFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.125); // 12.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.0625); // 6.25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 29) // GoldWandPuff1New [HERETIC] <MAGIC TYPE>
		{
			damage = 8 + random(1,6); // 9-14
			extradmg1 = (PlayerSOR * 0.5); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.25); // 25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 30) // GoldWandPuff2New [HERETIC] <MAGIC TYPE>
		{
			damage = 5 + random(-3,3); // 2 to 8
			extradmg1 = (PlayerSOR * 0.3334); // 33.34% of Sorcery
			extradmg2 = (PlayerTHE * 0.1667); // 16.67~% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 31) // HornRodFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 14 + random(-7,8); // 7 to 22
			extradmg1 = (PlayerSOR * 0.1667); // 16.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.08334); // 8.334% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 32) // HornRodFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 0.3334); // 33.34% of Sorcery
			extradmg2 = (PlayerTHE * 0.1667); // 16.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 33) // PhoenixFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 1.0); // 100% of Sorcery
			extradmg2 = (PlayerTHE * 0.5); // 50% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 34) // PhoenixFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.20); // 20% of Sorcery
			extradmg2 = (PlayerTHE * 0.10); // 10% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 35) // MaceFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 2 to 16 damage
			extradmg1 = (PlayerSOR * 0.0667); // 6.67% of Sorcery
			extradmg2 = (PlayerTHE * 0.0334); // 3.34% of Therapeusis
			extradmg3 = (PlayerSTR * 0.4000); // 40.0% of Strength
			extradmg4 = (PlayerDEF * 0.2000); // 20.0% of Defense
			ismagicalatk = 1;
		}
		if (type == 36) // MaceFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 27 + random(-13,13); // 6 to 48
			extradmg1 = (PlayerSOR * 0.2000); // 20.0% of Sorcery
			extradmg2 = (PlayerTHE * 0.1000); // 10.0% of Therapeusis
			extradmg3 = (PlayerSTR * 1.2000); // 120.0% of Strength
			extradmg4 = (PlayerDEF * 0.6000); // 60.0% of Defense
			ismagicalatk = 1;
		}
		if (type == 37) // MaceFX3New [HERETIC] <MAGIC TYPE>
		{
			damage = 18 + random(-9,9); // 4 to 32
			extradmg1 = (PlayerSOR * 0.13334); // 13.334% of Sorcery
			extradmg2 = (PlayerTHE * 0.06667); // 6.667% of Therapeusis
			extradmg3 = (PlayerSTR * 0.8000); // 80.0% of Strength
			extradmg4 = (PlayerDEF * 0.4000); // 40.0% of Defense
			ismagicalatk = 1;
		}
		if (type == 38) // MaceFX4New [HERETIC] <MAGIC TYPE>
		{
			damage = 96 + random(-48,-48); // 48 to 144
			extradmg1 = (PlayerSOR * 0.8334); // 83.34% of Sorcery
			extradmg2 = (PlayerTHE * 0.4167); // 41.67% of Therapeusis
			extradmg3 = (PlayerSTR * 5.0000); // 500.00% of Strength
			extradmg4 = (PlayerDEF * 2.5000); // 250.00% of Defense
			ismagicalatk = 1;
		}
		if (type == 39) // Sorcerer2FX1Player [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 6.00); // 600% of Sorcery
			extradmg2 = (PlayerTHE * 2.50); // 250% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 40) // Sorcerer2FX3 [HERETIC] <MAGIC TYPE>
		{
			damage = 45 + random(-22,22); // 10 to 80
			extradmg1 = (PlayerSOR * 3.00); // 300% of Sorcery
			extradmg2 = (PlayerTHE * 1.25); // 125% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 41) // GoldWandFX1New [HERETIC] <MAGIC TYPE>
		{
			damage = 9 + random(-4,4); // 5 to 13 damage
			extradmg1 = (PlayerSOR * 0.50); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.25); // 25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 42) // GoldWandFX2New [HERETIC] <MAGIC TYPE>
		{
			damage = 5 + random(-3,3); // 2 to 8 damage
			extradmg1 = (PlayerSOR * 0.25); // 25% of Sorcery
			extradmg2 = (PlayerTHE * 0.125); // 12.5% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 43) // RainPillarNew [HERETIC] <MAGIC TYPE>
		{
			damage = 23 + random(-11,11); // 12 to 34 damage
			extradmg1 = (PlayerSOR * 0.50); // 50% of Sorcery
			extradmg2 = (PlayerTHE * 0.25); // 25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 44 || type == 45) // MageWandMissileNew & MageWandMissile2New <MAGIC TYPE>
		{
			damage = (6 + random(-3,3)) + random(-WandMasteryPerkLevel,WandMasteryPerkLevel);
			extradmg1 = (PlayerSOR * 0.625); // 62.5% of Sorcery
			extradmg2 = (PlayerTHE * 0.1667); // 16.67% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 46) // HubbleBubble [main] <MAGIC TYPE>
		{
			damage = (10 + random(-3,4));
			extradmg1 = (PlayerSOR * 1.25); // 125% of Sorcery
			extradmg2 = (PlayerTHE * 0.380952); // 38.0952% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 47) // GlimmeringGlobe [main] <MAGIC TYPE>
		{
			damage = (30 + random(-9,12));
			extradmg1 = (PlayerSOR * 3.75); // 375% of Sorcery
			extradmg2 = (PlayerTHE * 1.1428); // 114.28% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 48) // A. Christina Blast
		{
			damage = random(176,293); //234); //
			extradmg1 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg2 = (PlayerSTR * 2.67); // 267% of Strength
		}
		if (type == 49) // A. Christina Long Range Blast (Weak)
		{
			damage = random(54,91); //125); //
			extradmg1 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg2 = (PlayerSTR * 2.67); // 267% of Strength
		}
		if (type == 52) // Hell Warrior Shield Fireball <MAGIC TYPE>
		{
			damage = random(1,8) * 2; // 2 to 16
			extradmg1 = (PlayerSOR * 0.25); // 25.0% of Sorcery
			extradmg2 = (PlayerTHE * 0.125); // 12.5% of Therapeusis 
			extradmg5 = floor((EWShieldKills * frandompick(0.01,0.015,0.015,0.015,0.015,0.015,0.02)));
			ismagicalatk = 1;
			
			double HellWarriorShieldBonus = 0.20;
			damage *= (1.00 + (HellWarriorShieldLevel * HellWarriorShieldBonus));
			extradmg1 *= (1.00 + (HellWarriorShieldLevel * HellWarriorShieldBonus));
			extradmg2 *= (1.00 + (HellWarriorShieldLevel * HellWarriorShieldBonus));
			extradmg3 *= (1.00 + (HellWarriorShieldLevel * HellWarriorShieldBonus));
			extradmg4 *= (1.00 + (HellWarriorShieldLevel * HellWarriorShieldBonus));
			extradmg5 *= (1.00 + (HellWarriorShieldLevel * HellWarriorShieldBonus));
			extradmg6 *= (1.00 + (HellWarriorShieldLevel * HellWarriorShieldBonus));

		}
		if (type == 53) // A. Christina Long Range Blast (Normal)
		{
			damage = random(136,228); //182); //
			extradmg1 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg2 = (PlayerSTR * 2.67); // 267% of Strength
		}
		if (type == 54) // A. Christina Long Range Blast (Finale)
		{
			damage = random(340,570); //353); //
			extradmg1 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg2 = (PlayerSTR * 2.67); // 267% of Strength
		}
		if (type == 55) // A. Christina Bouncing Shot (Weak)
		{
			damage = random(54,90) * 0.16667; //353); //
			extradmg1 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg2 = (PlayerSTR * 2.67); // 267% of Strength
		}
		if (type == 56) // A. Christina Bouncing Shot (Normal)
		{
			damage = random(135,225) * 0.16667; //353); //
			extradmg1 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg2 = (PlayerSTR * 2.67); // 267% of Strength
		}
		if (type == 57) // CStaffMissileNew (Serpent Staff projectile) <MAGIC TYPE>
		{
			damage = (random(1,8) * 5) + random(-WandMasteryPerkLevel,WandMasteryPerkLevel);
			extradmg1 = (PlayerSOR * 0.75); // 75% of Sorcery
			extradmg2 = (PlayerTHE * 0.25); // 25% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 58) // Railgun [Player]
		{
			int railcharge = CountInv("RailgunCharge", AAPTR_PLAYER1);

			baserand1 = 8 + (PlasmaAccuracyPerkLevel * 0.375) + (PlasmaAccuracyEXPerkLevel * 0.9375); // 8 to 11.75
			baserand2 = 10 + (PlasmaAccuracyPerkLevel * 0.25) + (PlasmaAccuracyEXPerkLevel * 0.625); // 10 to 12.5

			damage = random(baserand1,baserand2) * 5; // 40 to 62.5
			extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 2.0); // 200% of Strength 
			int base = damage;
			int baseex1 = extradmg1;
			int baseex2 = extradmg2;
			
			chargefactor = ( ( (railcharge * 2) + (railcharge * 0.3334) ) * (0.10 + (railcharge * 0.01)));
			damage *= chargefactor;
			if (damage < base) damage = base;
			extradmg1 *= chargefactor;
			if (extradmg1 < base) extradmg1 = baseex1;
			extradmg2 *= chargefactor;
			if (extradmg2 < base) extradmg2 = baseex2;
			playershot += 1;
		}
		if (type == 59) // Thrown Poison Needle [Player]
		{
			int strengthcounter;
			damage = random(6,12);
			damage *= (1.00 + (stamdamagefactor * 0.5));
			for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
			{
				damage += random(0,2);
				damage += random(0,1);
			}

			if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1)) damage = floor(damage * 10);

			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1)) 
			{
				if (dvds_fke_effecttype == 0) Damage = floor(Damage * 1.667); // +66.7~% Punch Damage
				if (dvds_fke_effecttype == 1) Damage = floor(Damage * 1.5); // +50% Punch Damage
				if (dvds_fke_effecttype >= 2) Damage = floor(Damage * 1.334); // +33.3~% Punch Damage
			}
			if (CountInv("AnubisCufflinks", AAPTR_PLAYER1)) Damage = floor(Damage * 1.75); // +75% Punch Damage
			
			if (MartialArtsMastery > 0)
			{
				int temp1 = 0;
				if (MartialArtsMastery == 1) temp1 = 25;
				if (MartialArtsMastery == 2) temp1 = 75;
				if (MartialArtsMastery == 3) temp1 = 225;
				if (MartialArtsMastery == 4) temp1 = 675;
				if (MartialArtsMastery >= 5) temp1 = 2025;
				int temp2 = 0;
				if (MartialArtsMasteryEX == 1) temp2 = 500;
				if (MartialArtsMasteryEX == 2) temp2 = 1000;
				PerkFactor = 1000 + (temp1 + temp2);
				damage = floor(damage * PerkFactor / 1000);
			}
			
			if (StamUpPerkLevel > 0)
			{
				PerkFactor = 1.000 + ((StamUpPerkLevel * 0.075) + (StamUpEXPerkLevel * 0.1875));
				damage = floor(damage * PerkFactor);
			}
			
			damage /= random(10,20);
		}
		if (type == 60) // KDIZD Rifle Shell [Player]
		{
			damage = (random(3,5) * 25); //
			extradmg1 = PlayerAGL * 4.5; // 450% of Agility
			extradmg2 = PlayerSTR * 1.0625; // 106.25% of Strength
		}
		if (type == 61) // Sorcerer2FX1Player (Explosion) [HERETIC] <MAGIC TYPE>
		{
			damage = 128 + random(-24,-24); // 104 to 152
			extradmg1 = (PlayerSOR * 3.0); // 300% of Sorcery
			extradmg2 = (PlayerTHE * 1.25); // 114.28% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 62) // PhoenixFX1New (Explosion) [HERETIC] <MAGIC TYPE>
		{
			damage = 128 + random(-24,24); // 104 to 152
			extradmg1 = (PlayerSOR * 1.5); // 150% of Sorcery
			extradmg2 = (PlayerTHE * 0.75); // 75% of Therapeusis
			ismagicalatk = 1;
		}
		if (type == 63) // SonicNail [Strange Aeons]
		{
			damage = 16 + random(-8,8); // 8 to 24 damage
			nm = "ImpalerBowZoom"; ExternalCheck1 = nm;
			extradmg1 = (PlayerAGL * 3.0); // 300% of Agility
			extradmg2 = (PlayerSTR * 0.625); // 62.5% of Strength
			extradmg3 = (PlayerSOR * 1.25); // 125% of Sorcery
			extradmg4 = (PlayerTHE * 0.75); // 75% of Therapeusis

			if (CountInv(ExternalCheck1, AAPTR_PLAYER1) == 1) 
			{
				damage *= 1.25;
				extradmg1 *= 1.25;
				extradmg2 *= 1.25;
				extradmg3 *= 1.25;
				extradmg4 *= 1.25;
			}
			if (CountInv(ExternalCheck1, AAPTR_PLAYER1) == 2) 
			{
				damage *= 1.625;
				extradmg1 *= 1.625;
				extradmg2 *= 1.625;
				extradmg3 *= 1.625;
				extradmg4 *= 1.625;
			}
			if (CountInv(ExternalCheck1, AAPTR_PLAYER1) == 3) 
			{
				damage *= 2.5625;
				extradmg1 *= 2.5625;
				extradmg2 *= 2.5625;
				extradmg3 *= 2.5625;
				extradmg4 *= 2.5625;
			}
		}
		if (type == 64) // SonicNail AoE [Strange Aeons]
		{
			damage = 16 + random(-8,8); // 8 to 24 damage
			nm = "ImpalerBowZoom"; ExternalCheck1 = nm;
			extradmg1 = (PlayerAGL * 3.0); // 300% of Agility
			extradmg2 = (PlayerSTR * 0.625); // 62.5% of Strength
			extradmg3 = (PlayerSOR * 1.25); // 125% of Sorcery
			extradmg4 = (PlayerTHE * 0.75); // 75% of Therapeusis

			if (CountInv(ExternalCheck1, AAPTR_PLAYER1) == 1) 
			{
				damage *= 1.25;
				extradmg1 *= 1.25;
				extradmg2 *= 1.25;
				extradmg3 *= 1.25;
				extradmg4 *= 1.25;
			}
			if (CountInv(ExternalCheck1, AAPTR_PLAYER1) == 2) 
			{
				damage *= 1.625;
				extradmg1 *= 1.625;
				extradmg2 *= 1.625;
				extradmg3 *= 1.625;
				extradmg4 *= 1.625;
			}
			if (CountInv(ExternalCheck1, AAPTR_PLAYER1) == 3) 
			{
				damage *= 2.5625;
				extradmg1 *= 2.5625;
				extradmg2 *= 2.5625;
				extradmg3 *= 2.5625;
				extradmg4 *= 2.5625;
			}
		}
		if (type >= 65 && type <= 68) // Soul Scepter
		{
			damage = 3 * random(1,3); // 3 to 9 damage
			extradmg1 = (PlayerSOR * 1.125); // 225% of Sorcery
			extradmg2 = (PlayerTHE * 0.875); // 175% of Therapeusis
			extradmg3 = (PlayerDEF * 1.50); // 300% of Defense
			extradmg4 = (PlayerDFT * 0.75); // 150% of Deftness

			double frand = frandompick(0.334,0.5,0.667);
			damage *= frand;
			extradmg1 *= frand;
			extradmg2 *= frand;
			extradmg3 *= frand;
			extradmg4 *= frand;
			if ((type == 65 && CurrentMana <= 1) || (type == 66 && CurrentMana <= 2) || (type == 67 && CurrentMana <= 2) || (type == 68 && CurrentMana <= 4))
			{
				damage *= 0.25;
				extradmg1 *= 0.25;
				extradmg2 *= 0.25;
				extradmg3 *= 0.25;
				extradmg4 *= 0.25;
			}
		}
		if (type == 69) // RockBomb Shard Projectile [direct hit]
		{
			baserand1 = 1 + (DemolitionsExpertPerkLevel * 0.50) + (DemolitionsExpertEXPerkLevel * 1.25); // 1 to 6
			baserand2 = 8 + (DemolitionsExpertPerkLevel * 0.25) + (DemolitionsExpertEXPerkLevel * 0.625); // 8 to 10.5

			damage = frandom(baserand1,baserand2) * 10; // 10 to 80
			extradmg1 = PlayerAGL * 1.5; // 150% of Agility
			extradmg2 = PlayerSTR * 0.75; // 75% of Strength
		}
		if (type == 70) // RockBomb Shard Projectile [base explosion]
		{
			damage = 32 + (DemolitionsExpertPerkLevel * 6.4) + (DemolitionsExpertEXPerkLevel * 16);
			extradmg1 = PlayerAGL * 1.0; // 100% of Agility
			extradmg2 = PlayerSTR * 0.5; // 50% of Strength
		}
		if (type == 71) // UnmakerLaser [direct hit]
		{
			perkfactor += (MagiUpPerkLevel * 0.05) + (MagiUpEXPerkLevel * 0.125);
			baserand1 = 10 + (MagiUpPerkLevel * 0.625) + (MagiUpEXPerkLevel * 1.5625);
			extradmg5 = PlayerLevel * 0.9375; // 93.75% of Level

			if (CountInv("UnmakerAmmoType",AAPTR_PLAYER1) == 0) // MP
			{
				perkfactor += ((WandMasteryPerkLevel * 0.025) + (WandMasteryEXPerkLevel * 0.0625));
				baserand1 += (WandMasteryPerkLevel * 0.625) + ( WandMasteryEXPerkLevel * 1.5625);
				extradmg1 = PlayerAGL * 0.625; // 62.5% of Agility
				extradmg2 = PlayerSTR * 0.3125; // 31.25% of Strength
				extradmg3 = PlayerSOR * 1.25; // 125% of Sorcery
				extradmg4 = PlayerTHE * 0.625; // 62.5% of Therapeusis
			}
			else
			if (CountInv("UnmakerAmmoType",AAPTR_PLAYER1) == 1) // Hellcore/Cells
			{
				if (CharacterClass == 2) // Hellcore
				{
					perkfactor += ((SoulMasteryPerkLevel * 0.025) + (SoulMasteryEXPerkLevel * 0.0625));
					baserand1 += (SoulMasteryPerkLevel * 0.0625) + (SoulMasteryEXPerkLevel * 0.15625);
					extradmg1 = PlayerAGL * 0.625; // 62.5% of Agility
					extradmg2 = PlayerSTR * 0.3125; // 31.25% of Strength
					extradmg3 = PlayerSOR * 1.25; // 125% of Sorcery
					extradmg4 = PlayerTHE * 0.625; // 62.5% of Therapeusis
				}
				else // Cells
				{
					perkfactor += (PlasmaAccuracyPerkLevel * 0.025) + (PlasmaAccuracyEXPerkLevel * 0.0625);
					baserand1 += (PlasmaAccuracyPerkLevel * 0.0625) + (PlasmaAccuracyEXPerkLevel * 0.15625);
					extradmg1 = PlayerAGL * 1.25; // 125% of Agility
					extradmg2 = PlayerSTR * 0.625; // 62.5% of Strength
					extradmg3 = PlayerSOR * 0.625; // 62.5% of Sorcery
					extradmg4 = PlayerTHE * 0.3125; // 31.25% of Therapeusis
				}
			}
			else
			if (CountInv("UnmakerAmmoType",AAPTR_PLAYER1) == 2) // MP & Hellcore/Cells
			{
				perkfactor += ((WandMasteryPerkLevel * 0.025) + (WandMasteryEXPerkLevel * 0.0625));
				baserand1 += (WandMasteryPerkLevel * 0.625) + ( WandMasteryEXPerkLevel * 1.5625);
				if (CharacterClass == 2)
				{
					perkfactor += ((SoulMasteryPerkLevel * 0.025) + (SoulMasteryEXPerkLevel * 0.0625));
					baserand1 += (SoulMasteryPerkLevel * 0.0625) + (SoulMasteryEXPerkLevel * 0.15625);
				}
				else
				{
					perkfactor += (PlasmaAccuracyPerkLevel * 0.025) + (PlasmaAccuracyEXPerkLevel * 0.0625);
					baserand1 += (PlasmaAccuracyPerkLevel * 0.0625) + (PlasmaAccuracyEXPerkLevel * 0.15625);
				}
				extradmg1 = PlayerAGL * 1.25; // 125% of Agility
				extradmg2 = PlayerSTR * 0.625; // 62.5% of Strength
				extradmg3 = PlayerSOR * 1.25; // 125% of Sorcery
				extradmg4 = PlayerTHE * 0.625; // 62.5% of Therapeusis
				extradmg1 *= 1.25;
				extradmg2 *= 1.25;
				extradmg3 *= 1.25;
				extradmg4 *= 1.25;
				extradmg5 *= 1.25;
				extradmg6 *= 1.25;
			}
			int randpick1 = randompick(0,0,0,1);
			if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) == 1) randpick1 = randompick(0,1);
			if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) == 2) randpick1 = randompick(0,1,1,1);
			if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) == 3) randpick1 = 1;
			damage = baserand1 * (random(1,7) + randpick1);

			double randmult = frandompick(0.025,0.0375,0.05,0.0625,0.075);
			double numupgrades = ((CountInv("UnmakerUpgrades",AAPTR_PLAYER1) * 1.25));
			double totalartfiactmulti = (randmult * numupgrades);
			damage *= (1.0 + totalartfiactmulti);
			extradmg1 *= (1.0 + totalartfiactmulti);
			extradmg2 *= (1.0 + totalartfiactmulti);
			extradmg3 *= (1.0 + totalartfiactmulti);
			extradmg4 *= (1.0 + totalartfiactmulti);
			extradmg5 *= (1.0 + totalartfiactmulti);
			extradmg6 *= (1.0 + totalartfiactmulti);
			
			double randmulvalue = random(12,16) * 0.05;
			damage *= randmulvalue;
			extradmg1 *= randmulvalue;
			extradmg2 *= randmulvalue;
			extradmg3 *= randmulvalue;
			extradmg4 *= randmulvalue;
			extradmg5 *= randmulvalue;
			extradmg6 *= randmulvalue;
		}
		if (type == 72) // ElectricBoltNew (RadiusSparks) [STRIFE]
		{
			damage = 25 + random(-12,12); // 10 to 40 damage
			extradmg1 = (PlayerAGL * 4.0); // 400% of Agility
			extradmg2 = (PlayerSTR * 0.5); // 50% of Strength 

			damage *= (0.20 + (random(1,5) * 0.01));
			extradmg1 *= (0.20 + (random(1,5) * 0.01));
			extradmg2 *= (0.20 + (random(1,5) * 0.01));

			if (damage < 1) damage = 1;
		}
		if (type == 73) // Popcorn1/2/3/11 & BurntPopcorn1
		{
			damage = 5 * random(1,8); // 5 to 40 damage
			extradmg1 = (PlayerAGL * 2.0); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.0625); // 6.25% of Strength 
			extradmg3 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.125); // 12.5% of Therapeusis 
		}
		if (type == 74) // GoreBalloon666[NoHurt]
		{
			damage = 6 * random(1,8); // 6 to 48 damage
			extradmg1 = (PlayerAGL * 2.4); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.075); // 7.5% of Strength 
			extradmg3 = (PlayerSOR * 4.8); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.15); // 15% of Therapeusis 
		}
		if (type == 75) // FlyingGut[NoHurt]
		{
			damage = 5 * random(1,8); // 5 to 40 damage
			extradmg1 = (PlayerAGL * 2.0); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.0625); // 6.25% of Strength 
			extradmg3 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.125); // 12.5% of Therapeusis 
		}
		if (type == 76) // FlyingGut[NoHurt] (Explosion)
		{
			damage = 128 + (WandMasteryPerkLevel * 6) + (WandMasteryEXPerkLevel * 15) + (SoulMasteryPerkLevel * 6) + (SoulMasteryEXPerkLevel * 15);
			extradmg1 = PlayerAGL * 1.25; // 125% of Agility
			extradmg2 = PlayerSTR * 0.5625; // 56.25% of Strength 
			extradmg3 = PlayerSOR * 3.75; // 375% of Sorcery
			extradmg4 = PlayerSTR * 1.6875; // 168.75% of Therapeusis 

			damage *= 0.375;
			extradmg1 *= 0.375;
			extradmg2 *= 0.375;
			extradmg3 *= 0.375;
			extradmg4 *= 0.375;
		}
		if (type == 77) // CGrenade[NoHurt]
		{
			damage = 2 * random(1,8); // 2 to 16 damage
			extradmg1 = (PlayerAGL * 0.8); // 80% of Agility
			extradmg2 = (PlayerSTR * 0.025); // 2.5% of Strength 
			extradmg3 = (PlayerSOR * 1.6); // 160% of Sorcery
			extradmg4 = (PlayerTHE * 0.0125); // 1.25% of Therapeusis 
		}
		if (type == 78) // CGrenade[NoHurt] (Explosion)
		{
			damage = 128 + (WandMasteryPerkLevel * 6) + (WandMasteryEXPerkLevel * 15) + (SoulMasteryPerkLevel * 6) + (SoulMasteryEXPerkLevel * 15);
			extradmg1 = PlayerAGL * 1.25; // 125% of Agility
			extradmg2 = PlayerSTR * 0.5625; // 56.25% of Strength 
			extradmg3 = PlayerSOR * 3.75; // 375% of Sorcery
			extradmg4 = PlayerSTR * 1.6875; // 168.75% of Therapeusis 
		}
		if (type == 79) // GrenadeSpark[NoHurt]
		{
			damage = 5 * random(1,8); // 5 to 40 damage
			extradmg1 = (PlayerAGL * 2.0); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.0625); // 6.25% of Strength 
			extradmg3 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.125); // 12.5% of Therapeusis

			damage *= 1.6;
			extradmg1 *= 1.6;
			extradmg2 *= 1.6;
			extradmg3 *= 1.6;
			extradmg4 *= 1.6;
		}
		if (type == 80) // GrenadeSpark2[NoHurt]
		{
			damage = 5 * random(1,8); // 5 to 40 damage
			extradmg1 = (PlayerAGL * 2.0); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.0625); // 6.25% of Strength 
			extradmg3 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.125); // 12.5% of Therapeusis

			damage *= 5;
			extradmg1 *= 5;
			extradmg2 *= 5;
			extradmg3 *= 5;
			extradmg4 *= 5;
		}
		if (type == 81) // RevRocket2[NoHurt]
		{
			damage = 5 * random(1,8); // 5 to 40 damage
			extradmg1 = (PlayerAGL * 2.0); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.0625); // 6.25% of Strength 
			extradmg3 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.125); // 12.5% of Therapeusis
		}
		if (type == 82) // RevRocket2[NoHurt] (Explosion)
		{
			damage = 128 + (WandMasteryPerkLevel * 6) + (WandMasteryEXPerkLevel * 15) + (SoulMasteryPerkLevel * 6) + (SoulMasteryEXPerkLevel * 15);
			extradmg1 = PlayerAGL * 1.25; // 125% of Agility
			extradmg2 = PlayerSTR * 0.5625; // 56.25% of Strength 
			extradmg3 = PlayerSOR * 3.75; // 375% of Sorcery
			extradmg4 = PlayerSTR * 1.6875; // 168.75% of Therapeusis 

			damage *= 0.09375;
			extradmg1 *= 0.09375;
			extradmg2 *= 0.09375;
			extradmg3 *= 0.09375;
			extradmg4 *= 0.09375;
		}
		if (type == 83) // HappyCloudPlayer
		{
			perkpts = (WandMasteryPerkLevel * 0.5) + (WandMasteryEXPerkLevel * 1.25) + (SoulMasteryPerkLevel * 0.5) + (SoulMasteryEXPerkLevel * 1.25);
			baserand1 = 1 + (WandMasteryPerkLevel * 0.25) + (WandMasteryEXPerkLevel * 0.625) + (SoulMasteryPerkLevel * 0.25) + (SoulMasteryEXPerkLevel * 0.625); // 1 to 6
			baserand2 = 8 + (WandMasteryPerkLevel * 0.0625) + (WandMasteryEXPerkLevel * 0.15625) + (SoulMasteryPerkLevel * 0.0625) + (SoulMasteryEXPerkLevel * 0.15625); // 8 to 9.25
			
			damage = (1 + (perkpts * 0.2)) * frandom(baserand1,baserand2);
			extradmg1 = ((PlayerAGL * 0.0625) * frandom(baserand1,baserand2)); // 6.25% of Agility
			extradmg2 = ((PlayerSTR * 0.03125) * frandom(baserand1,baserand2)); // 3.125% of Strength
			extradmg3 = ((PlayerSOR * 0.1875) * frandom(baserand1,baserand2)); // 18.75% of Sorcery
			extradmg4 = ((PlayerTHE * 0.09375) * frandom(baserand1,baserand2)); // 9.375% of Therapeusis
		}
		if (type == 84) // CrazyBall [main shot]
		{
			damage = 2 * random(1,8); // 5 to 40 damage
			extradmg1 = (PlayerAGL * 2.0); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.0625); // 6.25% of Strength 
			extradmg3 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.125); // 12.5% of Therapeusis 

			damage *= 0.4;
			extradmg1 *= 0.4;
			extradmg2 *= 0.4;
			extradmg3 *= 0.4;
			extradmg4 *= 0.4;
		}
		if (type == 85) // CrazyBalls[NoHurt]
		{
			damage = 5 * random(1,8); // 5 to 40 damage
			extradmg1 = (PlayerAGL * 2.0); // 200% of Agility
			extradmg2 = (PlayerSTR * 0.0625); // 6.25% of Strength 
			extradmg3 = (PlayerSOR * 4.0); // 400% of Sorcery
			extradmg4 = (PlayerTHE * 0.125); // 12.5% of Therapeusis 

			damage *= 1.8;
			extradmg1 *= 1.8;
			extradmg2 *= 1.8;
			extradmg3 *= 1.8;
			extradmg4 *= 1.8;
		}
		if (type == 86) // CrazyBall Explosion
		{
			damage = 128 + (WandMasteryPerkLevel * 6) + (WandMasteryEXPerkLevel * 15) + (SoulMasteryPerkLevel * 6) + (SoulMasteryEXPerkLevel * 15);
			extradmg1 = PlayerAGL * 1.25; // 125% of Agility
			extradmg2 = PlayerSTR * 0.5625; // 56.25% of Strength 
			extradmg3 = PlayerSOR * 3.75; // 375% of Sorcery
			extradmg4 = PlayerSTR * 1.6875; // 168.75% of Therapeusis 

			damage *= 0.5;
			extradmg1 *= 0.5;
			extradmg2 *= 0.5;
			extradmg3 *= 0.5;
			extradmg4 *= 0.5;
		}
		
		
		//*******************
		// Post Calculations
		//*******************
		if (!(type == 14 || type == 15 || type == 59))
		{
			if (damage > 0) damage *= perkfactor;
			if (extradmg1 > 0) extradmg1 *= perkfactor;
			if (extradmg2 > 0) extradmg2 *= perkfactor;
			if (extradmg3 > 0) extradmg3 *= perkfactor;
			if (extradmg4 > 0) extradmg4 *= perkfactor;
			if (extradmg5 > 0) extradmg5 *= perkfactor;
			if (extradmg6 > 0) extradmg6 *= perkfactor;
		}

		string actorname = GetClassName();
		AetheriusPlayerPawn playpawn;
		if (target) playpawn = AetheriusPlayerPawn(target);
		if (playpawn || puff == 1 || playershot)
		{
			if (debugplayeratkinfo) Console.Printf("Player Shot: %s", actorname);
			
			if (type == 45) // Reduce Sapphire Alt-Fire damage by up to 33% (reduction is lower when Wand Mastery is higher)
			{
				damage *= (0.667 + (WandMasteryPerkLevel * 0.03335));
				extradmg1 *= (0.667 + (WandMasteryPerkLevel * 0.03335));
				extradmg2 *= (0.667 + (WandMasteryPerkLevel * 0.03335));
				extradmg3 *= (0.667 + (WandMasteryPerkLevel * 0.03335));
				extradmg4 *= (0.667 + (WandMasteryPerkLevel * 0.03335));
				extradmg5 *= (0.667 + (WandMasteryPerkLevel * 0.03335));
				extradmg6 *= (0.667 + (WandMasteryPerkLevel * 0.03335));
			}
			
			rand1 = (extradmg1 + extradmg2 + extradmg3 + extradmg4 + extradmg5 + extradmg6) * 0.75;
			rand2 = (extradmg1 + extradmg2 + extradmg3 + extradmg4 + extradmg5 + extradmg6) * 1.25;
			finaldmg = damage + random(rand1,rand2);
			finaldmg *= (1.0 + (PlayerAeonPts * 0.002));
			
			int misc1 = 1000;
			if (ismagicalatk)
			{
				if (CountInv("EvenstarNecklace", AAPTR_PLAYER1)) misc1 += 125;
				if (CountInv("BalrogRing", AAPTR_PLAYER1)) misc1 += 125;
				finaldmg = (finaldmg * misc1) / 1000;
			}
			
			int misc2 = 1000;
			if (type == 52)
			{
				if (CountInv("SauronHelmet", AAPTR_PLAYER1)) misc2 += 125;
				if (CountInv("SauronGauntletsItem", AAPTR_PLAYER1)) misc2 += 125;
				if (CountInv("TheOneRing", AAPTR_PLAYER1)) misc2 += 500;
				finaldmg = (finaldmg * misc2) / 1000;
				
				// Bonus Damage added based on how many enemies have been killed previously by the shot.
				finaldmg *= (1.0 + (EWShieldKills * frandompick(0.002,0.003,0.003,0.003,0.003,0.003,0.004)));
			}

			// Tries to Guarantee Poison Needles inflict at least 1 base damage
			if (type == 59)
			{
				if (finaldmg < 1) finaldmg = 1;
			}

			if (debugplayeratkinfo) Console.Printf("\cxActor Class: %s\c-, \cyType#: %d\c-, Puff?: %d, Base Dmg: %d, Extra Dmg #1: %d, Extra Dmg #2: %d, Extra Dmg #3: %d, Extra Dmg #4: %d, Extra Dmg #5: %d, Extra Dmg #6: %d, Random: %d - %d, BaseRandom: %d - %d, Perkfactor: %.8f, ChargeFactor: %.8f, Misc1: %d, Misc2: %d, \cyFinal Damage: %d\c-", 
											 												actorname, type, puff,
																							damage, extradmg1, extradmg2, extradmg3, extradmg4, extradmg5, extradmg6,
																							rand1, rand2,
																							baserand1, baserand2,
																							perkfactor, chargefactor,
																							misc1, misc2,
																							finaldmg);
		}
		else
		{
			if (debugplayeratkinfo) Console.Printf("Non-Player Shot: %s", actorname);
			finaldmg = damage;
			
			if (debugplayeratkinfo) Console.Printf("Actor Class: %s, Type#: %d, Puff?: %d, Base Dmg: %d, \cyFinal Damage: %d\c-", 
																							actorname, type, puff,
																							damage, finaldmg);
		}
		
		if (CallACS("MiscVarCheckDECORATE",166) > 0)
		{
			int preboostdmg = finaldmg;
			finaldmg *= frandom(1.05,1.15);
			if (debugplayeratkinfo) Console.Printf("[Dash] PreBoost: %d, Total: %d", preboostdmg, finaldmg);
		}
		
		finaldamagedealt = finaldmg;
		return finaldmg;
	}
	
	action int A_GetPunchDamage(int altfire = 0, int shockwave = 0, bool istarget = false)
	{
		Weapon weapon;
		if (istarget && target) weapon = target.player.ReadyWeapon;
		else weapon = player.ReadyWeapon;

		string weaponname;
		weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int CharacterClass = CallACS("CheckCharacterClass");
		int debugmelee = dvdsdebug_showmeleeinformation;
		String nm, nn, no, np;
		nm = "FistAilish";
		nn = "FistPetra";
		no = "SauronGauntletsAilish";
		np = "SauronGauntletsPetra";

		// Character Check [base damage]
		If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is nm || weapon is nn)
		{
			if (altfire == 0)
			{
				if (CharacterClass == 0) damage = random(18,24);
				if (CharacterClass == 1) damage = random(10,16);
				if (CharacterClass == 2) damage = random(8,14);
				if (CharacterClass == 8) damage = random(6,12);
				if (CharacterClass == 9) damage = random(16,24);
			}
			else
			if (altfire == 1)
			{
				if (CharacterClass == 0) damage = random(126,148);
				if (CharacterClass == 1) damage = random(70,112);
				if (CharacterClass == 2) damage = random(48,90);
				if (CharacterClass == 8) damage = random(40,82);
				if (CharacterClass == 9) damage = random(120,148);
			}
		}
		else
		{
			If (weapon is "PoisonNeedle")
			{
				if (CharacterClass == 0) damage = random(18,24);
				if (CharacterClass == 1) damage = random(10,16);
				if (CharacterClass == 2) damage = random(8,14);
				if (CharacterClass == 8) damage = random(6,12);
				if (CharacterClass == 9) damage = random(16,24);
				damage += randompick(1,1,1,1,1,2,2,3);
			}
			else
			{
				if (CharacterClass == 0) damage = random(18,24);
				if (CharacterClass == 1) damage = random(10,16);
				if (CharacterClass == 2) damage = random(8,14);
				if (CharacterClass == 8) damage = random(6,12);
				if (CharacterClass == 9) damage = random(16,24);
			}
		}
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);

		// Gauntlet Check #1 [base damage]
		previousdamage = damage;
		If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || weapon is no || weapon is np)
		{
			if (CharacterClass == 0) damage += random(14,18);
			if (CharacterClass == 1) damage += random(10,14);
			if (CharacterClass == 2) damage += random(8,12);
			if (CharacterClass == 8) damage += random(6,10);
			if (CharacterClass == 9) damage += random(14,20);

			if (debugmelee) Console.Printf("GauntDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		}

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage = floor(damage * (1.0 + (stamdamagefactor * 0.625)));
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);

		// Strength Stat Check [7 pts = roughly double the character's base punch damage]
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
		{
			If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is nm || weapon is nn)
			{
				if (altfire == 0)
				{
					if (CharacterClass == 0) damage += randompick(2,2,3);
					if (CharacterClass == 1) damage += randompick(1,2,2);
					if (CharacterClass == 2) damage += randompick(1,1,2);
					if (CharacterClass == 8) damage += randompick(0,1,2);
					if (CharacterClass == 9) damage += randompick(2,3,3);
				}
				if (altfire == 1)
				{
					if (CharacterClass == 0) damage += randompick(8,10,10);
					if (CharacterClass == 1) damage += randompick(6,8,10);
					if (CharacterClass == 2) damage += randompick(4,6,8);
					if (CharacterClass == 8) damage += randompick(4,4,6);
					if (CharacterClass == 9) damage += randompick(8,10,12);
				}
			}
			else
			{
				If (weapon is "PoisonNeedle")
				{
					if (CharacterClass == 0) damage += randompick(1,2,3);
					if (CharacterClass == 1) damage += randompick(1,1,2);
					if (CharacterClass == 2) damage += randompick(1,1,2);
					if (CharacterClass == 8) damage += randompick(0,1,2);
					if (CharacterClass == 9) damage += randompick(2,2,3);
					damage += randompick(0,0,0,0,1,1,2);
				}
				else
				{
					if (CharacterClass == 0) damage += randompick(1,2,3);
					if (CharacterClass == 1) damage += randompick(1,1,2);
					if (CharacterClass == 2) damage += randompick(1,1,2);
					if (CharacterClass == 8) damage += randompick(0,1,2);
					if (CharacterClass == 9) damage += randompick(2,2,3);
				}
			}
		}
		if (debugmelee) Console.Printf("StrDmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);

		// Gauntlet Check #2 [strength stat check] [7 pts = roughly double the character's base gauntlet punch damage]
		previousdamage = damage;
		If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || weapon is no || weapon is np)
		{
			for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
			{
				if (CharacterClass == 0) damage += randompick(2,2,3);
				if (CharacterClass == 1) damage += randompick(1,2,3);
				if (CharacterClass == 2) damage += randompick(1,2,2);
				if (CharacterClass == 8) damage += randompick(1,1,2);
				if (CharacterClass == 9) damage += randompick(2,3,3);
			}
			if (debugmelee) Console.Printf("Gaunt2Dmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		}

		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1)) damage = floor(damage * 10);
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);

		// Flora Armor Checks
		previousdamage = damage;
		if (CharacterClass == 2)
		{
			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1)) 
			{
				if (dvds_fke_effecttype == 0) damage = floor(damage * 1.667); // +66.7~% Punch Damage
				if (dvds_fke_effecttype == 1) damage = floor(damage * 1.5); // +50% Punch Damage
				if (dvds_fke_effecttype >= 2) damage = floor(damage * 1.334); // +33.3~% Punch Damage
			}
			if (CountInv("AnubisCufflinks", AAPTR_PLAYER1)) damage = floor(damage * 1.75); // +75% Punch Damage
			if (debugmelee) Console.Printf("FloArmorDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		}

		// Gauntlet Check #3
		previousdamage = damage;
		If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || weapon is no || weapon is np)
		{
			if (altfire == 0) damage = floor(damage * 10);
			if (altfire == 1) damage = floor(damage * 25);
			if (debugmelee) Console.Printf("Gaunt3Dmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		}

		double PerkFactor;
		double temp1, temp2;

		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		previousdamage = damage;
		if (shockwave)
		{
			if (altfire == 0) damage = floor(damage * (0.04166667 * randompick(1,2,2,2,2,2,3)));
			if (altfire == 1) damage = floor(damage * (0.05 * randompick(1,2,2,2,2,2,3)));
			if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);

			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0.000;
				if (MartialArtsMastery == 1) temp1 = 0.050;
				if (MartialArtsMastery == 2) temp1 = 0.150;
				if (MartialArtsMastery == 3) temp1 = 0.450;
				if (MartialArtsMastery == 4) temp1 = 1.350;
				if (MartialArtsMastery >= 5) temp1 = 4.050;
				temp1 *= 0.667;
				temp2 = 0.000;
				if (MartialArtsMasteryEX == 1) temp2 = 1.500;
				if (MartialArtsMasteryEX == 2) temp2 = 3.000;
				temp2 *= 0.667;
				PerkFactor = 1.0 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX, PerkFactor);
			}
			if (BerserkerFit > 0)
			{
				temp1 = 0.000;
				if (BerserkerFit == 1) temp1 = 0.050;
				if (BerserkerFit == 2) temp1 = 0.150;
				if (BerserkerFit == 3) temp1 = 0.450;
				if (BerserkerFit == 4) temp1 = 1.350;
				if (BerserkerFit >= 5) temp1 = 4.050;
				temp1 *= 0.5;
				temp2 = 0;
				if (BerserkerFitEX == 1) temp2 = 1.500;
				if (BerserkerFitEX == 2) temp2 = 3.000;
				temp2 *= 0.5;
				PerkFactor = 1.000 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Berserker Fit Perk (Shockwave) (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, BerserkerFit, BerserkerFitEX, PerkFactor);
			}
		}
		else
		{
			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0.000;
				if (MartialArtsMastery == 1) temp1 = 0.025;
				if (MartialArtsMastery == 2) temp1 = 0.075;
				if (MartialArtsMastery == 3) temp1 = 0.225;
				if (MartialArtsMastery == 4) temp1 = 0.675;
				if (MartialArtsMastery >= 5) temp1 = 2.025;
				temp2 = 0.000;
				if (MartialArtsMasteryEX == 1) temp2 = 0.500;
				if (MartialArtsMasteryEX == 2) temp2 = 1.000;
				PerkFactor = 1.000 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX, PerkFactor);
			}
			if (BerserkerFit > 0)
			{
				temp1 = 0.000;
				if (BerserkerFit == 1) temp1 = 0.025;
				if (BerserkerFit == 2) temp1 = 0.075;
				if (BerserkerFit == 3) temp1 = 0.225;
				if (BerserkerFit == 4) temp1 = 0.675;
				if (BerserkerFit >= 5) temp1 = 2.025;
				temp1 *= 0.75;
				temp2 = 0.000;
				if (BerserkerFitEX == 1) temp2 = 0.500;
				if (BerserkerFitEX == 2) temp2 = 1.000;
				temp2 *= 0.75;
				PerkFactor = 1.000 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [Berserker Fit Perk (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, BerserkerFit, BerserkerFitEX, PerkFactor);
			}
		}

		previousdamage = damage;
		If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || weapon is nm || weapon is nn)
		{
			if (altfire == 0) damage = damage;
		}

		if (debugmelee && altfire == 0) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Punch]", weaponname, damage, previousdamage);
		if (debugmelee && altfire == 1) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Uppercut]", weaponname, damage, previousdamage);

		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = 1.000 + ((StamUpPerkLevel * 0.075) + (StamUpEXPerkLevel * 0.1875));
			damage = floor(damage * PerkFactor);
			if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [StamUp Perk (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, StamUpPerkLevel, StamUpEXPerkLevel, PerkFactor);
		}

		if (istarget)
		{
			if (debugmelee && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (debugmelee && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		else
		{
			if (debugmelee && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Punch]\c-", weaponname, actorname, damage, previousdamage);
			if (debugmelee && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Uppercut]\c-", weaponname, actorname, damage, previousdamage);
		}
		
		return damage;
	}

	action int A_GetKickDamage(int altfire = 0, int shockwave = 0, bool istarget = false)
	{
		Weapon weapon;
		if (istarget && target)  weapon = target.player.ReadyWeapon;
		else weapon = player.ReadyWeapon;

		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int CharacterClass = CallACS("CheckCharacterClass");
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (CharacterClass == 0) damage = random(45,60);
		if (CharacterClass == 1) damage = random(30,55);
		if (CharacterClass == 2) damage = random(20,50);
		if (CharacterClass == 8) damage = random(20,45);
		if (CharacterClass == 9) damage = random(45,65);
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage = floor(damage * (1.00 + (stamdamagefactor * 0.75)));
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);

		// Strength Stat Check [7 pts = roughly double the character's base punch damage]
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
		{
			if (CharacterClass == 0) damage += randompick(3,5,8);
			if (CharacterClass == 1) damage += randompick(3,4,6);
			if (CharacterClass == 2) damage += randompick(2,5,8);
			if (CharacterClass == 8) damage += randompick(2,4,6);
			if (CharacterClass == 9) damage += randompick(3,6,9);
		}
		if (debugmelee) Console.Printf("StrDmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);

		// Reduce Check
		previousdamage = damage;
		if (altfire == 0) damage = floor(damage * (1.00 + (0.05 * random(-4,4))));
		if (altfire == 1) damage = floor(damage * (1.00 + (0.075 * random(-4,4))));
		if (debugmelee) Console.Printf("ReduceDmg: %d - (Previous Dmg: %d)", damage, previousdamage);

		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1)) damage = floor(damage * 10);
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);

		// Flora Armor Checks
		previousdamage = damage;
		if (CharacterClass == 2)
		{
			if (CountInv("FalconKnifeEarrings", AAPTR_PLAYER1)) 
			{
				if (dvds_fke_effecttype == 0) damage = floor(damage * 1.667); // +66.7~% Kick Damage
				if (dvds_fke_effecttype == 1) damage = floor(damage * 1.5); // +50% Kick Damage
				if (dvds_fke_effecttype >= 2) damage = floor(damage * 1.334); // +33.3~% Kick Damage
			}
			if (CountInv("SafeTeaShoes", AAPTR_PLAYER1)) damage = floor(damage * 1.75); // +75% Kick Damage
			if (debugmelee) Console.Printf("FloArmorDmg: %d - (Previous Dmg: %d)", damage, previousdamage);
		}

		double PerkFactor;
		double temp1, temp2;

		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		previousdamage = damage;
		if (shockwave)
		{
			if (altfire == 0) damage = floor(damage * (0.04166667 * randompick(1,2,2,2,2,2,3)));
			if (altfire == 1) damage = floor(damage * (0.05 * randompick(1,2,2,2,2,2,3)));
			if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d)]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX);

			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0.000;
				if (MartialArtsMastery == 1) temp1 = 0.050;
				if (MartialArtsMastery == 2) temp1 = 0.150;
				if (MartialArtsMastery == 3) temp1 = 0.450;
				if (MartialArtsMastery == 4) temp1 = 1.350;
				if (MartialArtsMastery >= 5) temp1 = 4.050;
				temp1 *= 0.667;
				temp2 = 0.000;
				if (MartialArtsMasteryEX == 1) temp2 = 1.500;
				if (MartialArtsMasteryEX == 2) temp2 = 3.000;
				temp2 *= 0.667;
				PerkFactor = 1.0 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Shockwave) (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX, PerkFactor);
			}
			if (BerserkerFit > 0)
			{
				temp1 = 0.000;
				if (BerserkerFit == 1) temp1 = 0.050;
				if (BerserkerFit == 2) temp1 = 0.150;
				if (BerserkerFit == 3) temp1 = 0.450;
				if (BerserkerFit == 4) temp1 = 1.350;
				if (BerserkerFit >= 5) temp1 = 4.050;
				temp1 *= 0.5;
				temp2 = 0;
				if (BerserkerFitEX == 1) temp2 = 1.500;
				if (BerserkerFitEX == 2) temp2 = 3.000;
				temp2 *= 0.5;
				PerkFactor = 1.000 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg [Shockwave]: (%s) %d - (Previous Dmg: %d [Berserker Fit Perk (Shockwave) (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, BerserkerFit, BerserkerFitEX, PerkFactor);
			}
		}
		else
		{
			previousdamage = damage;
			if (MartialArtsMastery > 0)
			{
				temp1 = 0.000;
				if (MartialArtsMastery == 1) temp1 = 0.025;
				if (MartialArtsMastery == 2) temp1 = 0.075;
				if (MartialArtsMastery == 3) temp1 = 0.225;
				if (MartialArtsMastery == 4) temp1 = 0.675;
				if (MartialArtsMastery >= 5) temp1 = 2.025;
				temp2 = 0.000;
				if (MartialArtsMasteryEX == 1) temp2 = 0.500;
				if (MartialArtsMasteryEX == 2) temp2 = 1.000;
				PerkFactor = 1.000 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [Martial Arts Mastery Perk (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, MartialArtsMastery, MartialArtsMasteryEX, PerkFactor);
			}
			if (BerserkerFit > 0)
			{
				temp1 = 0.000;
				if (BerserkerFit == 1) temp1 = 0.025;
				if (BerserkerFit == 2) temp1 = 0.075;
				if (BerserkerFit == 3) temp1 = 0.225;
				if (BerserkerFit == 4) temp1 = 0.675;
				if (BerserkerFit >= 5) temp1 = 2.025;
				temp1 *= 0.75;
				temp2 = 0.000;
				if (BerserkerFitEX == 1) temp2 = 0.500;
				if (BerserkerFitEX == 2) temp2 = 1.000;
				temp2 *= 0.75;
				PerkFactor = 1.000 + (temp1 + temp2);
				damage = floor(damage * PerkFactor);
				if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [Berserker Fit Perk (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, BerserkerFit, BerserkerFitEX, PerkFactor);
			}
		}

		previousdamage = damage;
		if (altfire == 0) damage = floor(damage * 1.0);
		if (altfire == 1) damage = floor(damage * 0.25);
		if (debugmelee && altfire == 0) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Kick]", weaponname, damage, previousdamage);
		if (debugmelee && altfire == 1) Console.Printf("MeleeDmgAltCheck: (%s) %d - (Previous Dmg: %d) [Roundhouse Kick]", weaponname, damage, previousdamage);

		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = 1.000 + ((StamUpPerkLevel * 0.075) + (StamUpEXPerkLevel * 0.1875));
			damage = floor(damage * PerkFactor);
			if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [StamUp Perk (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, StamUpPerkLevel, StamUpEXPerkLevel, PerkFactor);
		}

		if (istarget)
		{
			if (debugmelee && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Kick]\c-", weaponname, actorname, damage, previousdamage);
			if (debugmelee && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Roundhouse Kick]\c-", weaponname, actorname, damage, previousdamage);
		}
		else
		{
			if (debugmelee && altfire == 0) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Kick]\c-", weaponname, actorname, damage, previousdamage);
			if (debugmelee && altfire == 1) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Roundhouse Kick]\c-", weaponname, actorname, damage, previousdamage);
		}

		return damage;
	}
	
	action int A_GetSceptreDamage(int attacktype = 0, int attacklevel = 0, int shockwave = 0, bool istarget = false)
	{
		Weapon weapon;
		if (istarget && target) weapon = target.player.ReadyWeapon;
		else weapon = player.ReadyWeapon;
		
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		int previousdamage;
		int strengthcounter;
		int sceptrestrbase;
		int sceptrestrmin;
		int sceptrestrmax;
		int PerkFactor;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int CharacterClass = CallACS("CheckCharacterClass");
		int debugmelee = dvdsdebug_showmeleeinformation;

		int PlayerDFT = CallACS("MiscVarCheckDECORATE",33);
		double DeftnessExpBase = 1.0 / (dvds_deftnessexpbase * 16);
		if (debugmelee) Console.Printf("DeftnessBase: %8f", DeftnessExpBase);
		double SceptreLvlFactor = 1.0 + frandom(-(PlayerDFT * DeftnessExpBase),(PlayerDFT * DeftnessExpBase));
		int initdamage = random(275,325);
		damage = initdamage;
		if (SceptreActualLevel >= 0) damage += (0 * SceptreLvlFactor); // Base Damage Range
		if (SceptreActualLevel >= 1) damage += (5 * SceptreLvlFactor); // +5 Damage Range
		if (SceptreActualLevel >= 2) damage += (10 * SceptreLvlFactor); // +10 Damage Range
		if (SceptreActualLevel >= 3) damage += (30 * SceptreLvlFactor); // +30 Damage Range
		if (SceptreActualLevel >= 4) damage += (20 * SceptreLvlFactor); // +20 Damage Range
		if (SceptreActualLevel >= 5) damage += (25 * SceptreLvlFactor); // +25 Damage Range
		if (SceptreActualLevel >= 6) damage += (60 * SceptreLvlFactor); // +60 Damage Range
		if (SceptreActualLevel >= 7) damage += (0 * SceptreLvlFactor); // +0 Damage Range
		if (SceptreActualLevel >= 8) damage += (120 * SceptreLvlFactor); // +120 Damage Range
		if (SceptreActualLevel >= 9) damage += (45 * SceptreLvlFactor); // +45 Damage Range
		if (SceptreActualLevel >= 10) damage += (50 * SceptreLvlFactor); // +50 Damage Range
		if (SceptreActualLevel >= 11) damage += (110 * SceptreLvlFactor); // +110 Damage Range
		if (SceptreActualLevel >= 12) damage += (60 * SceptreLvlFactor); // +60 Damage Range
		if (SceptreActualLevel >= 13) damage += (65 * SceptreLvlFactor); // +65 Damage Range
		if (SceptreActualLevel >= 14) damage += (140 * SceptreLvlFactor); // +140 Damage Range
		if (SceptreActualLevel >= 15) damage += (0 * SceptreLvlFactor); // +0 Damage Range
		if (SceptreActualLevel >= 16) damage += (240 * SceptreLvlFactor); // +240 Damage Range
		if (damage < initdamage) damage = initdamage;
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);
		
		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage = (damage * (1.0 + (stamdamagefactor * 0.375)));
		if (debugmelee) Console.Printf("StaminaDmg: %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);

		// Strength Stat Check
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		int ScDmgError = (16 + (SceptreActualLevel * (2 + (PlayerSTR / 64))));
		previousdamage = damage;
		for (strengthcounter = 0; strengthcounter < PlayerSTR; strengthcounter++)
		{
			sceptrestrbase = (SceptreActualLevel * (4 + (PlayerSTR / 32)));
			sceptrestrmin = sceptrestrbase - ScDmgError;
			sceptrestrmax = sceptrestrbase + ScDmgError;
			if (sceptrestrmin < 0) sceptrestrmin = 0;
			if (sceptrestrmax < 0) sceptrestrmax = 0;

			if (debugmelee) Console.Printf("StrBase: %d, StrMin: %d, StrMax: %d", sceptrestrbase, sceptrestrmin, sceptrestrmax);

			damage += random(sceptrestrmin,sceptrestrmax);
		}
		if (debugmelee) Console.Printf("StrDmg: %d - (Strength: %d) - (Previous Dmg: %d)", damage, PlayerSTR, previousdamage);
		
		if (attacktype == 1) damage = floor(damage * 2.5); // If performing the Aerial Attack
		if (attacktype == 2)
		{
			if (attacklevel < 0)
			{
				if (SceptreActualLevel <= 0) attacklevel = 0;
				if (SceptreActualLevel == 1) attacklevel = 0;
				if (SceptreActualLevel == 2) attacklevel = 0;
				if (SceptreActualLevel == 3) attacklevel = 0;
				if (SceptreActualLevel == 4) attacklevel = 0;
				if (SceptreActualLevel == 5) attacklevel = 1;
				if (SceptreActualLevel == 6) attacklevel = 1;
				if (SceptreActualLevel == 7) attacklevel = 1;
				if (SceptreActualLevel == 8) attacklevel = 1;
				if (SceptreActualLevel == 9) attacklevel = 1;
				if (SceptreActualLevel == 10) attacklevel = 2;
				if (SceptreActualLevel == 11) attacklevel = 2;
				if (SceptreActualLevel == 12) attacklevel = 2;
				if (SceptreActualLevel == 13) attacklevel = 2;
				if (SceptreActualLevel == 14) attacklevel = 2;
				if (SceptreActualLevel == 15) attacklevel = 3;
				if (SceptreActualLevel >= 16) attacklevel = 3;
			}

			if (attacklevel == 0) damage = floor(damage * 0.5); // If performing the Spinning Attack [50%]
			if (attacklevel == 1) damage = floor(damage * 0.75); // If performing the Spinning Attack [75%]
			if (attacklevel == 2) damage = floor(damage * 0.875); // If performing the Spinning Attack [87.5%]
			if (attacklevel == 3) damage = floor(damage * 0.9375); // If performing the Spinning Attack [93.75%]

			damage = floor(damage * 0.25);
		}
		if (debugmelee) Console.Printf("BaseDmg: %d", damage);
		
		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1)) damage = floor(damage * 10);
		if (debugmelee) Console.Printf("BerserkDmg: %d - (Previous Dmg: %d)", damage, previousdamage);

		// Shockwave Check
		if (shockwave == 1) damage = floor(damage * (0.04166667 * randompick(1,2,2,2,2,2,3,3,3,3,3,4)));
		if (debugmelee) Console.Printf("ShockWave: (%s) %d", weaponname, damage);

		// StamUp Check
		previousdamage = damage;
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = 1.000 + ((StamUpPerkLevel * 0.075) + (StamUpEXPerkLevel * 0.1875));
			damage = floor(damage * PerkFactor);
			if (debugmelee) Console.Printf("MeleeDmg: (%s) %d - (Previous Dmg: %d [StamUp Perk (Lvl: %d + %d), Perkfactor: %8f]", weaponname, damage, previousdamage, StamUpPerkLevel, StamUpEXPerkLevel, PerkFactor);
		}

		if (istarget)
		{
			if (debugmelee) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Puff: %s) %d\c- - \cx(Previous Dmg: %d) [Sceptre]\c-", weaponname, actorname, damage, previousdamage);
		}
		else
		{
			if (debugmelee) Console.Printf("\cyFinalMeleeDmg: (Weapon: %s - Source: %s) %d\c- - \cx(Previous Dmg: %d) [Sceptre]\c-", weaponname, actorname, damage, previousdamage);
		}

		return damage;
	}
}
