class BaseExperiessence : AetheriusCustomInventory
{
	int user_transpulsetype;
	int ActorVar1;
	
	action void A_PickupExperiessence(double percentage = 1.0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int ClearedOfMindPerkLevel = CallACS("MiscVarCheckDECORATE",10055);
		int ClearedOfMindEXPerkLevel = CallACS("MiscVarCheckDECORATE",10056);
		
		if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("percentage: %.8f", percentage);
		double BaseEXPGain = percentage;
		double perkfactor;
		if (random(1,64) == 1) BaseEXPGain *= 2.0;
		if (random(1,256) == 1) BaseEXPGain *= 2.0;
		if (random(1,1024) == 1) BaseEXPGain *= 2.0;
		
		int EXPGiven;
		
		if (PlayerLevel == 0) { EXPGiven = (CallACS("ExpTableCheckDECORATE",PlayerLevel) * BaseEXPGain) / 100; }
		else if (PlayerLevel >= 1) { EXPGiven = ((CallACS("ExpTableCheckDECORATE",PlayerLevel) - CallACS("ExpTableCheckDECORATE",(PlayerLevel-1))) * BaseEXPGain) / 100; }
		if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Base]", EXPGiven);
		
		if (ClearedOfMindPerkLevel > 0)
		{
			perkfactor = 1.00;
			if (ClearedOfMindPerkLevel >= 1) perkfactor += 0.04;
			if (ClearedOfMindPerkLevel >= 2) perkfactor += 0.05;
			if (ClearedOfMindPerkLevel >= 3) perkfactor += 0.06;
			if (ClearedOfMindPerkLevel >= 4) perkfactor += 0.07;
			if (ClearedOfMindPerkLevel >= 5) perkfactor += 0.08;
			if (ClearedOfMindEXPerkLevel >= 1) perkfactor += 0.10;
			if (ClearedOfMindEXPerkLevel >= 2) perkfactor += 0.20;
			EXPGiven *= perkfactor;
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Perks1], PerkFactor: %.8f", EXPGiven, perkfactor);
		}
		if (CallACS("MiscVarCheckDECORATE",11001) > 0)
		{
			if (CallACS("MiscVarCheckDECORATE",11001) == 1)
			{
				if (CharacterClass == 0 | CharacterClass == 1) EXPGiven *= 1.225; // EXP Multiplier Option [122.5%]
				if (CharacterClass == 2) EXPGiven *= 1.15; // EXP Multiplier Option [115%]
			}
			if (CallACS("MiscVarCheckDECORATE",11001) == 2)
			{
				if (CharacterClass == 0 | CharacterClass == 1) EXPGiven *= 1.45; // EXP Multiplier Option [145%]
				if (CharacterClass == 2) EXPGiven *= 1.3; // EXP Multiplier Option [130%]
			}
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Perks2]", EXPGiven);
		}
	
		int ExpMultiplier = dvds_expmultiplier;
		int basemulti;
		if (EXPGiven > 0)
		{
			basemulti = random(25,35) * 25;
			EXPGiven = (EXPGiven * basemulti) / 1000;
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [Factor1], BaseMult: %d / 1000", EXPGiven, basemulti);
	
			EXPGiven = (EXPGiven * ExpMultiplier) / 100;
			if (dvdsdebug_showexpdebugstuff == 1) Console.Printf("Experiessence: %d [ExpMulti], ExpMultiplier: %d / 100", EXPGiven, ExpMultiplier);

			CallACS("ExpCheat",ExpGiven); // Experience += EXPGiven;
		}
	}
}

class BaseSeed : AetheriusCustomInventory
{
	action void A_GrabSeedOther(int SeedType = 0, double SeedAmount = 0, int SeedLimitTypeIncrease = 0)
	{
		int ModType = CallACS("OtherVarCheckDECORATE",8);

		int SkillSeedRuns, MaxSkillSeedRuns, SkillSeedRND, OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE, OldAeonPts, NewAeonPts;
		int SeedMulti;
		
		if (ModType == 0 && dvds_canseedsappear == 0) { }
		else
		{
			if (SeedAmount < 1) SeedAmount = 1;
			
			// "0" is for non-dropped or map-placed seeds as to not impose a limit on those
			if (SeedLimitTypeIncrease == 1) CallACS("MiscVarSetDECORATE",30,1,1); // "1" is Normal Seeds
			if (SeedLimitTypeIncrease == 2) CallACS("MiscVarSetDECORATE",37,1,1); // "2" is Skill Seeds
			if (SeedLimitTypeIncrease == 3) CallACS("MiscVarSetDECORATE",27,1,1); // "3" is Fyggs
			
			if (SeedType < 0) SeedAmount = 0;
			if (SeedType > 7) SeedAmount = 0;
			
			OldAeonPts = CallACS("MiscVarCheckDECORATE",25);
			OldAGL = CallACS("MiscVarCheckDECORATE",31);
			OldDEF = CallACS("MiscVarCheckDECORATE",32);
			OldDFT = CallACS("MiscVarCheckDECORATE",33);
			OldSOR = CallACS("MiscVarCheckDECORATE",34);
			OldSTR = CallACS("MiscVarCheckDECORATE",35);
			OldTHE = CallACS("MiscVarCheckDECORATE",36);
			
			SeedMulti = 1;
			if (random(1,24) >= 24)
			{ 
				SeedMulti += 1;
				if (random(1,24) >= 24)
				{
					SeedMulti += 1;
					if (random(1,24) >= 24) SeedMulti += 1;
				}
			}
			
			if (SeedType == 0) // Seed of Skill [special seed, 4+ AeonPts ]
			{
				SeedAmount = 4;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				SeedAmount *= CallACS("MiscVarCheckDECORATE",86);
				CallACS("MiscVarSetDECORATE",25,SeedAmount,1);
			}
			
			if (SeedType == 1) // Seed of Agility [Speed/Movement]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",31) < 512) CallACS("MiscVarSetDECORATE",31,SeedAmount,1);
			}
			
			if (SeedType == 2) // Seed of Defense [Overall Resistance]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",32) < 512) CallACS("MiscVarSetDECORATE",32,SeedAmount,1);
			}
			
			if (SeedType == 3) // Seed of Deftness [EXP Gain %]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",33) < 512) CallACS("MiscVarSetDECORATE",33,SeedAmount,1);
			}
			
			if (SeedType == 4) // Seed of Sorcery [Magical Attack]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",34) < 512) CallACS("MiscVarSetDECORATE",34,SeedAmount,1);
			}
			
			if (SeedType == 5) // Seed of Strength [Overall Attack]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",35) < 512) CallACS("MiscVarSetDECORATE",35,SeedAmount,1);
			}
			
			if (SeedType == 6) // Seed of Therapeusis [Magical Resistance]
			{
				SeedAmount = SeedAmount * SeedMulti * CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",36) < 512) CallACS("MiscVarSetDECORATE",36,SeedAmount,1);
			}
			
			if (SeedType == 7) // Fygg (extremely rare) [all stats +16]
			{
				SeedAmount = 16;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",31) < 512) CallACS("MiscVarSetDECORATE",31,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",32) < 512) CallACS("MiscVarSetDECORATE",32,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",33) < 512) CallACS("MiscVarSetDECORATE",33,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",34) < 512) CallACS("MiscVarSetDECORATE",34,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",35) < 512) CallACS("MiscVarSetDECORATE",35,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",36) < 512) CallACS("MiscVarSetDECORATE",36,SeedAmount,1);
			}
			
			if (SeedType == 8) // Platinum Fygg (extremely rare) [+16 to all stats & +64 Aeon Points]
			{
				SeedAmount = 64;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				SeedAmount *= CallACS("MiscVarCheckDECORATE",86);
				CallACS("MiscVarSetDECORATE",25,SeedAmount,1);
			
				SeedAmount = 16;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				if (CallACS("MiscVarCheckDECORATE",31) < 512) CallACS("MiscVarSetDECORATE",31,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",32) < 512) CallACS("MiscVarSetDECORATE",32,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",33) < 512) CallACS("MiscVarSetDECORATE",33,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",34) < 512) CallACS("MiscVarSetDECORATE",34,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",35) < 512) CallACS("MiscVarSetDECORATE",35,SeedAmount,1);
				if (CallACS("MiscVarCheckDECORATE",36) < 512) CallACS("MiscVarSetDECORATE",36,SeedAmount,1);
			}
			
			if (SeedType == 9) // Enhanced Seed of Skill [special seed, 16+ AeonPts ]
			{
				SeedAmount = 16;
				SeedAmount *= CallACS("MiscVarCheckDECORATE",87);
				SeedAmount *= CallACS("MiscVarCheckDECORATE",86);
				CallACS("MiscVarSetDECORATE",25,SeedAmount,1);
			}
			
			if (CallACS("MiscVarCheckDECORATE",31) > 512) CallACS("MiscVarSetDECORATE",31,512);
			if (CallACS("MiscVarCheckDECORATE",32) > 512) CallACS("MiscVarSetDECORATE",32,512);
			if (CallACS("MiscVarCheckDECORATE",33) > 512) CallACS("MiscVarSetDECORATE",33,512);
			if (CallACS("MiscVarCheckDECORATE",34) > 512) CallACS("MiscVarSetDECORATE",34,512);
			if (CallACS("MiscVarCheckDECORATE",35) > 512) CallACS("MiscVarSetDECORATE",35,512);
			if (CallACS("MiscVarCheckDECORATE",36) > 512) CallACS("MiscVarSetDECORATE",36,512);
			NewAeonPts = CallACS("MiscVarCheckDECORATE",25);
			NewAGL = CallACS("MiscVarCheckDECORATE",31);
			NewDEF = CallACS("MiscVarCheckDECORATE",32);
			NewDFT = CallACS("MiscVarCheckDECORATE",33);
			NewSOR = CallACS("MiscVarCheckDECORATE",34);
			NewSTR = CallACS("MiscVarCheckDECORATE",35);
			NewTHE = CallACS("MiscVarCheckDECORATE",36);
			
			if (NewAeonPts-OldAeonPts > 0)
			{
				CallACS("MiscVarSetDECORATE",224,(NewAeonPts-OldAeonPts),1); 
				CallACS("MiscVarSetDECORATE",2033,105); 
			}
			if (NewAGL-OldAGL > 0)
			{
				CallACS("MiscVarSetDECORATE",225,(NewAGL-OldAGL),1); 
				CallACS("MiscVarSetDECORATE",2034,105); 
			}
			if (NewDEF-OldDEF > 0)
			{
				CallACS("MiscVarSetDECORATE",226,(NewDEF-OldDEF),1); 
				CallACS("MiscVarSetDECORATE",2035,105); 
			}
			if (NewDFT-OldDFT > 0)
			{
				CallACS("MiscVarSetDECORATE",227,(NewDFT-OldDFT),1); 
				CallACS("MiscVarSetDECORATE",2036,105); 
			}
			if (NewSOR-OldSOR > 0)
			{
				CallACS("MiscVarSetDECORATE",228,(NewSOR-OldSOR),1); 
				CallACS("MiscVarSetDECORATE",2037,105); 
			}
			if (NewSTR-OldSTR > 0)
			{
				CallACS("MiscVarSetDECORATE",229,(NewSTR-OldSTR),1); 
				CallACS("MiscVarSetDECORATE",2038,105); 
			}
			if (NewTHE-OldTHE > 0)
			{
				CallACS("MiscVarSetDECORATE",230,(NewTHE-OldTHE),1); 
				CallACS("MiscVarSetDECORATE",2039,105); 
			}
			
			if (SeedType == 0) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Skill!\n\n\cjAeonPts: %d --> %d", OldAeonPts, NewAeonPts), frandom(1.542,1.08));
			}
			
			if (SeedType == 1) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Agility!\n\n\cjAgility: %d --> %d", OldAGL, NewAGL), frandom(1.028,1.2));
			}
			
			if (SeedType == 2) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Defense!\n\n\cjDefense: %d --> %d", OldDEF, NewDEF), frandom(1.028,1.2));
			}
			
			if (SeedType == 3) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Deftness!\n\n\cjDeftness: %d --> %d", OldDFT, NewDFT), frandom(1.028,1.2));
			}
			
			if (SeedType == 4) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Sorcery!\n\n\cjSorcery: %d --> %d", OldSOR, NewSOR), frandom(1.028,1.2));
			}
			
			if (SeedType == 5) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Strength!\n\n\cjStrength: %d --> %d", OldSTR, NewSTR), frandom(1.028,1.2));
			}
			
			if (SeedType == 6) 
			{
				A_PrintBold(String.Format("\cjYou've Ate a Seed of Therapeusis!\n\n\cjTherapeusis: %d --> %d", OldTHE, NewTHE), frandom(1.028,1.2));
			}
			
			if (SeedType == 7) 
			{
				A_PrintBold(String.Format("\cjZOMG You've Ate a Fygg!!!!\n\n\cjAgility: %d --> %d\n\cjDefense: %d --> %d\n\cjDeftness: %d --> %d\n\cjSorcery: %d --> %d\n\cjStrength: %d --> %d\n\cjTherapeusis: %d --> %d", OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE), frandom(2.057,2.4));
			}
			
			if (SeedType == 8) 
			{
				A_PrintBold(String.Format("\cjZOMG You've Ate a PLATNIUM Fygg!!!!\n\n\cjAeonPts: %d --> %d\n\cjAgility: %d --> %d\n\cjDefense: %d --> %d\n\cjDeftness: %d --> %d\n\cjSorcery: %d --> %d\n\cjStrength: %d --> %d\n\cjTherapeusis: %d --> %d", OldAeonPts, NewAeonPts, OldAGL, NewAGL, OldDEF, NewDEF, OldDFT, NewDFT, OldSOR, NewSOR, OldSTR, NewSTR, OldTHE, NewTHE), frandom(2.057,2.4));
			}
			
			if (SeedType == 9) 
			{
				A_PrintBold(String.Format("\cjYou've Ate an Enhanced Seed of Skill!\n\n\cjAeonPts: %d --> %d", OldAeonPts, NewAeonPts), frandom(1.542,1.08));
			}
		}
	}
	
	action void A_GrabLifeManaSeed(int SeedType = 0, int SeedAmount = 0, int SeedLimitTypeIncrease = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int CurrentMana = CallACS("StatCheck",14);
		int debugseedstuff = dvdsdebug_showseedstuff;
		
		int SkillSeedRuns, SkillSeedRND, OldHP, NewHP, OldMP, NewMP, StatGain1, StatGain2, ArmorHPBonus, PerkFactor;
		
		if (ModType == 0 && dvds_canseedsappear == 0) { }
		else
		{
			SeedAmount = clamp(SeedAmount, 1, SeedAmount);
			SeedType = clamp(SeedType, 1, 2);
			
			OldHP = MaxHealthTrue;
			OldMP = MaxMana;
			
			if (SeedType == 1) // Seed of Life
			{
				StatGain1 = (MaxHealthTrue * 0.0125);
				if (CharacterClass == 0) StatGain1 += randompick(1,1,2,2,2,2,2,3,3);
				if (CharacterClass == 1) StatGain1 += randompick(1,1,1,1,2,2,2,2,2);
				if (CharacterClass == 2) StatGain1 += randompick(1,1,1,1,1,1,2,2,2);
				if (CharacterClass == 8) StatGain1 += randompick(1,1,1,1,1,1,1,1,2);
				if (CharacterClass == 9) StatGain1 += randompick(1,2,2,2,2,3,3,3,3);
				if (debugseedstuff) Console.Printf("StatGain1 [Base]: %d", StatGain1);
			
				SkillSeedRND = random(1,19);
			
				if (SkillSeedRND == 1) StatGain1 = floor(StatGain1 * 1.0);
				if (SkillSeedRND >= 2 && SkillSeedRND <= 6) StatGain1 = floor(StatGain1 * 1.5);
				if (SkillSeedRND >= 7 && SkillSeedRND <= 12) StatGain1 = floor(StatGain1 * 2.0);
				if (SkillSeedRND >= 13 && SkillSeedRND <= 18) StatGain1 = floor(StatGain1 * 2.5);
				if (SkillSeedRND == 19) StatGain1 = floor(StatGain1 * 3.0);
				if (debugseedstuff) Console.Printf("StatGain1 [Randomizer1]: %d", StatGain1);
			
				StatGain1 *= SeedAmount;
				StatGain1 *= CallACS("MiscVarCheckDECORATE",87);
				if (debugseedstuff) Console.Printf("StatGain1 [Multipliers]: %d", StatGain1);
			
				// Flora's Armor Items [up to +45% Max HP gained from Max HP Bonuses]
				if (CharacterClass == 2)
				{
					if (player.mo.CountInv("PearlyCorset")) ArmorHPBonus += 20; // +20%
					if (player.mo.CountInv("KissaBra")) ArmorHPBonus += 10; // +10%
					if (player.mo.CountInv("BalrogRing")) ArmorHPBonus += 15; // +15%
					ArmorHPBonus += 100;
					if (debugseedstuff) Console.Printf("ArmorHPBonus: %d", ArmorHPBonus);
					StatGain1 = StatGain1 * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset
					if (debugseedstuff) Console.Printf("StatGain1 [ArmorHPBonus]: %d", StatGain1);
				}
			
				PerkFactor = ((CallACS("MiscVarCheckDECORATE",10001) * 500) + (CallACS("MiscVarCheckDECORATE",10002) * 1250)) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
				if (debugseedstuff) Console.Printf("StatGain1 [LifeUp Perks]: %d", StatGain1);
			
				PerkFactor = (CallACS("MiscVarCheckDECORATE",317) * 1250) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
				if (debugseedstuff) Console.Printf("StatGain1 [Stamina Upgrade (Strife)]: %d", StatGain1);
			
				StatGain1 = clamp(StatGain1, 1, StatGain1);
				CallACS("MiscVarSetDECORATE",222,StatGain1,1);
				CallACS("MiscVarSetDECORATE",2031,105); 
				
				player.mo.health = player.health += StatGain1;
				MaxHealthTrue += StatGain1;
				CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
			}
			
			if (SeedType == 2) // Seed of Magic
			{
				StatGain1 = MaxMana / 80;
				if (CharacterClass == 0) StatGain1 += randompick(1,1,1,1,1,1,2,2,2);
				if (CharacterClass == 1) StatGain1 += randompick(1,1,1,2,2,2,2,3,3);
				if (CharacterClass == 2) StatGain1 += randompick(2,2,3,3,3,3,3,4,4);
				if (CharacterClass == 8) StatGain1 += randompick(2,2,2,2,3,3,3,3,3);
				if (CharacterClass == 9) StatGain1 += randompick(1,1,1,1,1,1,1,1,2);
				if (debugseedstuff) Console.Printf("StatGain1 [Base]: %d", StatGain1);
			
				SkillSeedRND = random(1,19);
			
				if (SkillSeedRND == 1) StatGain1 = floor(StatGain1 * 1.0);
				if (SkillSeedRND >= 2 && SkillSeedRND <= 6) StatGain1 = floor(StatGain1 * 1.5);
				if (SkillSeedRND >= 7 && SkillSeedRND <= 12) StatGain1 = floor(StatGain1 * 2.0);
				if (SkillSeedRND >= 13 && SkillSeedRND <= 18) StatGain1 = floor(StatGain1 * 2.5);
				if (SkillSeedRND == 19) StatGain1 = floor(StatGain1 * 3.0);
				if (debugseedstuff) Console.Printf("StatGain1 [Randomizer1]: %d", StatGain1);
			
				StatGain1 *= SeedAmount;
				StatGain1 *= CallACS("MiscVarCheckDECORATE",87);
				if (debugseedstuff) Console.Printf("StatGain1 [Multipliers]: %d", StatGain1);
			
				PerkFactor = ((CallACS("MiscVarCheckDECORATE",10003) * 500) + (CallACS("MiscVarCheckDECORATE",10004) * 1250)) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.
				if (debugseedstuff) Console.Printf("StatGain1 [LifeUp Perks]: %d", StatGain1);
			
				PerkFactor = (CallACS("MiscVarCheckDECORATE",317) * 1250) + 10000;
				StatGain1 = StatGain1 * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
				if (debugseedstuff) Console.Printf("StatGain1 [Stamina Upgrade (Strife)]: %d", StatGain1);
			
				StatGain1 = clamp(StatGain1, 1, StatGain1);
				CallACS("MiscVarSetDECORATE",223,StatGain1,1);
				CallACS("MiscVarSetDECORATE",2032,105); 
			
				MaxMana += StatGain1;
				CurrentMana += StatGain1;
				CallACS("OtherVarSetDECORATE",1,MaxMana);
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			
			NewHP = MaxHealthTrue;
			NewMP = MaxMana;
			
			if (SeedType == 1) 
			{
				A_PrintBold(String.Format("\cjYou've Found a Seed of Life!\n\n\cjHP/Health: %d --> %d", OldHP, NewHP), frandom(1.028,1.2));
			}
			
			if (SeedType == 2) 
			{
				A_PrintBold(String.Format("\cjYou've Found a Seed of Magic!\n\n\cjMP/Mana: %d --> %d", OldMP, NewMP), frandom(1.028,1.2));
			}
		}
	}
}

class AetheriusPowerMask : AetheriusPowerIronFeet
{
	Default
	{
		Powerup.Duration -80;
		Powerup.Color "00 00 00", 0;
		+INVENTORY.HUBPOWER
		Inventory.Icon "";
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage)
	{
		if (damageType == 'Magma') newdamage = damage * 0.05;
		if (damageType == 'Slime' || damageType == 'Drowning') newdamage = 0;
	}

	override void DoEffect ()
	{
		if (Owner.player != NULL) Owner.player.mo.ResetAirSupply();
	}
}

class FloraArmorFloorGuard : AetheriusPowerMask 
{
	Default
	{
		Powerup.Duration 2147483646;
		Powerup.Color "00 00 00", 0;
		+INVENTORY.HUBPOWER
		Inventory.Icon "";
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage)
	{
		if (damageType == 'Magma') newdamage = damage * 0.05;
		if (damageType == 'Slime' || damageType == 'Drowning') newdamage = 0;
	}
	
	override void DoEffect ()
	{
	}
}

class AetheriusPowerMaskArmor : AetheriusPowerMask
{
	Default
	{
		Powerup.Duration -80;
		Powerup.Color "00 00 00", 0;
		+INVENTORY.HUBPOWER
		Inventory.Icon "";
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage)
	{
		if (damageType == 'Magma') newdamage = damage * 0.05;
		if (damageType == 'Slime' || damageType == 'Drowning') newdamage = 0;
	}

	override void DoEffect ()
	{
		if (Owner.player != NULL) Owner.player.mo.ResetAirSupply();
	}
}

class AetheriusBaseCustomInventoryZSC : CustomInventory 
{
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	// Spread Aura Function [Projectiles]
	action void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", double spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0) 
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	action void A_ThrowRockBombShard()
	{
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		if (buttons & BT_ZOOM)
		{
			A_SpreadAuraFireProjectile("RockBombShardProjT",0,0,"",0,0,FPF_NOAUTOAIM,-16);
		}
		else
		{
			A_SpreadAuraFireProjectile("RockBombShardProj",0,0,"",0,0,FPF_NOAUTOAIM,-16);
		}
	}
}

class BackPackNew : AetheriusCustomInventory
{
}

class RandomSpawner2 : RandomSpawner
{
	default
	{
		+DONTGIB
		+NOTIMEFREEZE
		-BLOCKEDBYSOLIDACTORS
	}
}

//********************************
//** ACTUAL Item Definitions V: **
//********************************
class RandomHellcoreWeapon : RandomSpawner2 //26902
{
	//$Sprite "RNDCA0"
	//$Category DV-DS Random Spawners
	Default
	{
		Tag "Random Hellcore Soul: Spawns a random Hellcore Soul";
		+DONTGIB;
		DropItem "ImpSoulCI";
		DropItem "DarkImpSoulCI";
		DropItem "CacodemonSoulCI";
		DropItem "CacolanternSoulCI";
		DropItem "AbaddonSoulCI";
		DropItem "KnightSoulCI";
		DropItem "BaronSoulCI";
		DropItem "BelphegorSoulCI";
		DropItem "BruiserSoulCI";
		DropItem "ArchonSoulCI";
		DropItem "PyroDemonSoulCI";
		DropItem "IncarnateSoulCI";
		DropItem "BalrogSoulCI";
		DropItem "ArchvileSoulCI";
		DropItem "DiabloistSoulCI";
	}
}

class BaseItemSpawner : AetheriusBaseZSC
{
	default
	{
		+NOTIMEFREEZE;
	}
	const SpawnerFlags = SXF_TRANSFERPOINTERS | SXF_TRANSFERSPECIAL | SXF_NOCHECKPOSITION;
}

class RandomMagicSpawner : BaseItemSpawner //32109
{
	default
	{
		//$Sprite "RNDMA0"
		//$Category DV-DS Random Spawners
		Tag "Random Magic Spawn: Spawns a random Magic item type";
		RenderStyle "Add";
		Radius 16;
		Height 16;
		Alpha 0.0;
		Scale 1.25;
		+FLOATBOB;
	}

	States
	{
		Spawn:
			RNDH A 0 NoDelay;
			RNDH A 0 A_Jump(256,"Herb1","Herb1","Herb1","Herb2","Herb2","Herb3");
			RNDH A 0 A_FadeOut(1.0);
			Stop;

		Herb1:
			TNT1 A 0 A_SpawnItemEx("MagicWater",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb2:
			TNT1 A 0 A_SpawnItemEx("SageElixir",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb3:
			TNT1 A 0 A_SpawnItemEx("ElfinElixir",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
	}
}

class RandomHerbSpawner : BaseItemSpawner //32110
{
	default
	{
		//$Sprite "RNDHA0"
		//$Category DV-DS Random Spawners
		Tag "Random Herb Spawn: Spawns a random Medicinal Herb type";
		RenderStyle "Add";
		Radius 16;
		Height 16;
		Alpha 0.0;
		Scale 1.25;
		+FLOATBOB;
	}

	States
	{
		Spawn:
			RNDH A 0;
			RNDH A 0 A_Jump(256,"Herb1","Herb1","Herb1","Herb2","Herb2","Herb3");
			RNDH A 0 A_FadeOut(1.0);
			Stop;

		Herb1:
			TNT1 A 0 A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb2:
			TNT1 A 0 A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
		Herb3:
			TNT1 A 0 A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,SpawnerFlags,0,tid);
			TNT1 A 0 A_FadeOut(1.0);
			Stop;
	}
}

class RandomArmorSpawner : AetheriusBaseZSC //32111
{
	default
	{
		//$Category DV-DS Random Spawners
		RenderStyle "Add";
		Alpha 0.0;
		Scale 1.25;
		+FLOATBOB;
	}

	int user_spawntimes;
	int user_roll;

	States
	{
		Spawn:
			FLAR A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2) 
				{ 
					A_SpawnItemEx("HealthBonus2",0,0,0,0,0,0,0,tid,0);
					for (user_spawntimes = 0; user_spawntimes < 63; user_spawntimes++)
					{
						A_SpawnItemEx("HealthBonus2",0,0,0,frandom(-12,12),frandom(-12,12),frandom(-12,12),0,0,8);
					}
					Thing_Remove(0);
				}
				else
				{
					user_roll = random(1,5);
					if (user_roll == 1)
					{
						A_SpawnItemEx("GreenArmorDS",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					if (user_roll == 2)
					{
						A_SpawnItemEx("BlueArmorDS",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					if (user_roll == 3)
					{
						if (random(1,256) <= 8)
						{
							A_SpawnItemEx("StoneSkinGA",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
						}
						else
						{
							A_SpawnItemEx("StoneSkin",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
						}
					}
					if (user_roll == 4)
					{
						if (random(1,256) <= 8)
						{
							A_SpawnItemEx("DiamondSkinGA",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
						}
						else
						{
							A_SpawnItemEx("DiamondSkin",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
						}
					}
					if (user_roll == 5)
					{
						A_SpawnItemEx("ArmorBonus2",0,0,0,0,0,0,0,tid,0);
						for (user_spawntimes = 0; user_spawntimes < 63; user_spawntimes++)
						{
							A_SpawnItemEx("ArmorBonus2",0,0,0,frandom(-12,12),frandom(-12,12),frandom(-12,12),0,0,8);
						}
					}
				}
				Thing_Remove(0);
			}
			Stop;
	}
}

class RandomPowerupSpawner : RandomSpawner2 //32112
{
	default
	{
		+DONTGIB;
		DropItem "SoulSphere2", 256, 10;
		DropItem "MegaSphere2", 256, 10;
		DropItem "InvulnerabilitySphere2", 256, 10;
		DropItem "BlurSphere2", 256, 10;
		DropItem "SpreadSphereSpawner", 256, 10;
		DropItem "DoubleSphere", 256, 10;
		DropItem "GuardSphere", 256, 10;
		DropItem "TimeFreezeSphere", 256, 10;
		DropItem "DivinationSphere", 256, 1;
	}
}

class AetheriusUsableInventory : AetheriusCustomInventory
{
}

//
//
//
class SauronHelmet : AetheriusCustomInventory 
{
	default
	{
		radius 16;
		height 16;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		scale 0.125;
		inventory.icon "SHEMA0";
		Inventory.PickupMessage "\caThis old thing looks like it might have some use!\c-";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				if (CountInv("SauronHelmet",AAPTR_PLAYER1)) { Thing_Remove(0); } else { A_StartSound("SauronHelmet/Hum",CHAN_ITEM); }
			}
		Spawn2:
			SHEM A 1
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 140) 
				{
					A_Stopsound(CHAN_ITEM);
					A_StartSound("SauronHelmet/Hum",CHAN_ITEM);
					A_SetInventory("ActorVar1",0);
				}
				if (GetCVar("dvds_sauronhelmetdrops") <= 0) { Thing_Remove(0); }
				if (CountInv("SauronHelmet",AAPTR_PLAYER1)) { Thing_Remove(0); }
			}
			loop;

		Use:
			TNT1 A 0;
			Stop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0;
			Stop;
	}
}

class TheOneRing : AetheriusCustomInventory
{
	default
	{
		radius 4;
		height 4;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		scale 0.05;
		inventory.icon "LOTRA0";
		Inventory.PickupMessage "You are now the \cfLord of The Rings\c-!! :D";
		Inventory.PickupSound "getonering";
	}

	States
	{
		Spawn:
			LOTR A 0 NoDelay { if (CountInv("TheOneRing",AAPTR_PLAYER1)) { Thing_Remove(0); } }
		SpawnSoundEmit:
			LOTR A 0 
			{
				A_Stopsound(CHAN_ITEM);
				A_StartSound("TheOneRing/Hum",CHAN_ITEM);
				A_SetInventory("ActorVar1",0);
				if (CountInv("TheOneRing",AAPTR_PLAYER1)) { Thing_Remove(0); }
			}
		SpawnPhase1:
			LOTR A 1 bright
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 20) { return resolvestate("SpawnPrePhase2"); }
				if (GetCVar("dvds_theoneringdrops") <= 0) { Thing_Remove(0); }
				if (CountInv("TheOneRing",AAPTR_PLAYER1)) { Thing_Remove(0); }
				return resolvestate(null);
			}
			loop;
		SpawnPrePhase2:
			LOTR A 0 bright A_SetInventory("ActorVar1",0);
		SpawnPhase2:
			LOTR A 1 bright 
			{
				A_FadeOut(0.025,0);
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 40) { return resolvestate("SpawnPrePhase3"); }
				if (GetCVar("dvds_theoneringdrops") <= 0) { Thing_Remove(0); }
				if (CountInv("TheOneRing",AAPTR_PLAYER1)) { Thing_Remove(0); }
				return resolvestate(null);
			}
			loop;
		SpawnPrePhase3:
			LOTR A 0 bright A_SetInventory("ActorVar1",0);
		SpawnPhase3:
			LOTR A 1 bright
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 20) { return resolvestate("SpawnPrePhase4"); }
				if (GetCVar("dvds_theoneringdrops") <= 0) { Thing_Remove(0); }
				if (CountInv("TheOneRing",AAPTR_PLAYER1)) { Thing_Remove(0); }
				return resolvestate(null);
			}
			loop;
		SpawnPrePhase4:
			LOTR A 0 bright A_SetInventory("ActorVar1",0);
		SpawnPhase4:
			LOTR A 1 bright 
			{
				A_FadeIn(0.025,0);
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 40) { return resolvestate("SpawnSoundEmit"); }
				if (GetCVar("dvds_theoneringdrops") <= 0) { Thing_Remove(0); }
				if (CountInv("TheOneRing",AAPTR_PLAYER1)) { Thing_Remove(0); }
				return resolvestate(null);
			}
			loop;

		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0;
			Stop;
		Use:
			TNT1 A 0;
			Stop;
	}
}

class BaseFloraArmorItem : AetheriusCustomInventory
{
	default
	{
		radius 20;
		height 20;
		scale 0.33;
		//Alpha 0.1;
		//RenderStyle "Add";
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
	}

	States
	{
		Spawn:
			FAMR A 0 bright NoDelay;
			goto Looper;
		Looper:
			#### # 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,64); } }
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") <= 1) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,128); } }
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") <= 2) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,192); } }
			}
			#### ## 1 bright;
			#### # 0 
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 21)
				{
					A_Stopsound(CHAN_ITEM);
					A_StartSound("FloraArmor/Hum",CHAN_ITEM);
					A_SetInventory("ActorVar1",0);
					return resolvestate("Spawn");
				}
				return resolvestate(null);
			}
			loop;
		Use:
			TNT1 A 0;
			Stop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0;
			Stop;
	}
}

class RuinousShield : BaseFloraArmorItem 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRL0"
		inventory.icon "FAMRL0";
		Inventory.PickupMessage "Got the \cmRuinous Shield\c-!!";
	}

	States
	{
		Spawn:
			FAMR L 0 bright NoDelay A_CheckFloraArmorCopies(8);
			goto Looper;
		Looper:
			#### # 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("ArmorGlitter2", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,64); } }
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") <= 1) { A_SpawnItemEx("ArmorGlitter2", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,128); } }
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") <= 2) { A_SpawnItemEx("ArmorGlitter2", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,192); } }
			}
			#### ## 1 bright A_CheckFloraArmorCopies(8);
			#### # 0
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 21)
				{
					A_Stopsound(CHAN_ITEM);
					A_StartSound("FloraArmor/Hum",CHAN_ITEM);
					A_SetInventory("ActorVar1",0);
					return resolvestate("Spawn");
				}
				return resolvestate(null);
			}
			loop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,3);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("GetCursed", 6);
			TNT1 A 0;
			Stop;
	}
}
// To give the player the proper "item" to boost their Stamina and Aeon Points upon completing the Training Area [MAP31 of Strife] 
class TrainingMapBonus : AetheriusCustomInventory
{
	default
	{
		Inventory.PickupSound "none";
		Inventory.PickupMessage "";
		radius 20;
		height 20;
		scale 0.25;
		alpha 0.0;
		RenderStyle "None";
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.MaxAmount 0;
	}

	States
	{
		Spawn:
			TOKN A 1
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 10 && CallACS("MiscVarCheckDECORATE",318) >= 10) { Thing_Remove(0); }
			}
			Loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("Combo");
			stop;
	}
}

// To give the player the proper "item" to boost their Stamina and Aeon Points upon destroying the Drone Transmitter [MAP14 of Strife]
class TransmitterBonus : AetheriusCustomInventory
{
	default
	{
		Inventory.PickupSound "none";
		Inventory.PickupMessage "";
		radius 20;
		height 20;
		scale 0.25;
		alpha 0.0;
		RenderStyle "None";
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.MaxAmount 0;
	}
	
	States
	{
		Spawn:
			TOKN A 1
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 10 && CallACS("MiscVarCheckDECORATE",318) >= 10) { Thing_Remove(0); }
			}
			Loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("Combo");
			stop;
	}
}

// To give the player the proper "item" to boost their Stamina and Aeon Points upon destroying the Acolyte Converter [MAP24 of Strife] 
class ConverterBonus : AetheriusCustomInventory
{
	default
	{
		Inventory.PickupSound "none";
		Inventory.PickupMessage "";
		radius 20;
		height 20;
		scale 0.25;
		alpha 0.0;
		RenderStyle "None";
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.MaxAmount 0;
	}
	
	States
	{
		Spawn:
			TOKN A 1
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 10 && CallACS("MiscVarCheckDECORATE",318) >= 10) { Thing_Remove(0); }
			}
			Loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("Combo");
			stop;
	}
}

// To give the player the proper "item" to boost their Stamina and Aeon Points upon destroying the Loremaster's Spectre [MAP27 of Strife] 
class LoreMasterBonus : AetheriusCustomInventory
{
	default
	{
		Inventory.PickupSound "none";
		Inventory.PickupMessage "";
		radius 20;
		height 20;
		scale 0.25;
		alpha 0.0;
		RenderStyle "None";
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.MaxAmount 0;
	}

	States
	{
		Spawn:
			TOKN A 1
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 10 && CallACS("MiscVarCheckDECORATE",318) >= 10) { Thing_Remove(0); }
			}
			Loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("Combo");
			stop;
	}
}

// Strife Unique Items [for changing things like accuracy/stamina upgrades, and health/ammo refills.
class UpgradeStaminaNew : AetheriusCustomInventory replaces UpgradeStamina
{
	default
	{
		Inventory.PickupMessage "";
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.MaxAmount 0;
	}
	
	States
	{
		Spawn:
			TOKN A 1
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { Thing_Remove(0); }
			}
			Loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("Stamina");
			stop;
	}
}

class UpgradeAccuracyNew : AetheriusCustomInventory replaces UpgradeAccuracy
{
	default
	{
		Inventory.PickupMessage "";
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.MaxAmount 0;
	}
	
	States
	{
		Spawn:
			TOKN A 1
			{
				if (CallACS("MiscVarCheckDECORATE",318) >= 10) { Thing_Remove(0); }
			}
			Loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("Accuracy");
			stop;
	}
}

class ExplosiveBarrelNew : ExplosiveBarrel replaces ExplosiveBarrel
{
	default
	{
		Tag "Explosive Barrel";
		+PUSHABLE;
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}
	
	States
	{
		Spawn:
			BAR1 AB 6;
			Loop;
		Death:
			BEXP A 5 Bright;
			BEXP B 5 Bright
			{
				A_Scream();
				A_AlertMonsters();
			}
			BEXP C 5 Bright;
			BEXP D 5 Bright A_Explode(128,128,XF_HURTSOURCE, false,0,0, 10,"BulletPuff","Explosive");
			BEXP E 10 Bright;
			TNT1 A 1050 Bright A_BarrelDestroy();
			TNT1 A 5 A_Respawn();
			Wait;
	}
}

class TestExplosiveBarrel : ExplosiveBarrel
{
	default
	{
		Tag "Explosive Barrel";
		Mass 1000000000;
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}
	
	States
	{
		Spawn:
			BAR1 AB 6;
			Loop;
		Death:
			BEXP A 5 Bright;
			BEXP B 5 Bright
			{
				A_Scream();
				A_AlertMonsters();
			}
			BEXP C 5 Bright;
			BEXP D 5 Bright A_Explode(128,128);
			BEXP E 10 Bright;
			TNT1 A 1050 Bright A_BarrelDestroy();
			TNT1 A 5 A_Respawn();
			Wait;
	}
}

class ExplosiveBarrelTelefraggingNew : ExplosiveBarrelNew 
{
	default
	{
		Tag "Explosive Barrel";
		+TELESTOMP;
		DamageType "Explosive";
		DamageFactor "Dashing", 0;
		Painchance "Dashing", 0;
	}
}

class VitalitySerum : AetheriusCustomInventory
{
	default
	{
		//$Category Powerups
		//$Title "Vitality Serum: Gives one 'Stamina' Level boost [for non-Strife gamemodes]"
		Radius 20;
		Scale 0.9;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.PickupMessage "\cfVitality Serum:\c- \cyStamina Level +10!\c-";
		Inventory.PickupSound "boostitem/pickup";
	}
	
	States
	{
		Spawn:
			VSRM AAAAAABBBBBBCCCCCC 1 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { Thing_Remove(0); }
			}
			loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("Stamina");
			stop;
	}
}

class CarrotusPotion : AetheriusCustomInventory 
{
	default
	{
		//$Category Powerups
		//$Title "Carrotus Potion: Gives one 'Accuracy' Level boost [for non-Strife gamemodes]"
		Radius 20;
		Scale 0.667;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.PickupMessage "\cfCarrotus Potion:\c- \cyAccuracy Level +10!\c-";
		Inventory.PickupSound "boostitem/pickup";
	}
	States
	{
		Spawn:
			CRTS AAABBBCCCBBBAAA 1 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",318) >= 10) { Thing_Remove(0); }
			}
			loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("AccuracyLite");
			stop;
	}
}

class GoldenApple : AetheriusCustomInventory
{
	default
	{
		//$Category Powerups
		//$Title "Golden Apple: Gives one level of both Stamina and Accuracy [for non-Strife gamemodes]"
		Radius 12;
		Scale 0.75;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+DONTGIB;
		Inventory.PickupMessage "\cfGolden Apple:\c- \cyStamina AND Accuracy Increased by 10!\c-";
		Inventory.PickupSound "boostitem/pickup";
	}
	
	States
	{
		Spawn:
			APPL B 1 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 10 && CallACS("MiscVarCheckDECORATE",318) >= 10) { Thing_Remove(0); }
			}
			loop;
		Use:
			TNT1 A 0 A_StrifeStatUpgrade("ComboLite");
			stop;
	}
}

class Experiessence : BaseExperiessence
{
	default
	{
		Radius 20;
		Height 16;
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "GrabExperiessence";
		Inventory.PickupMessage "Found a small dose of \cfExperiessence\c-.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (GetCVar("dvds_expgains") == 0) { return resolvestate("Death"); }
				return resolvestate(null);
			}
		Idle:
			EXPD AABBCCDDEEFFGGHH 1 bright
			{
				if (GetCVar("dvds_expgains") == 0) { return resolvestate("Death"); }
				if (alpha <= 0.25) { A_SetInventory("ActorVar1",1); } // Set to Fade In
				if (alpha >= 0.75) { A_SetInventory("ActorVar1",0); } // Set to Fade Out
				if (CountInv("ActorVar1") == 0) { A_FadeOut(0.05); } // Fading Out
				if (CountInv("ActorVar1") == 1) { A_FadeIn(0.05); } // Fading In
				return resolvestate(null);
			}
			loop;
		Pickup:
			TNT1 A 0 { A_PickupExperiessence(1.0*frandom(4.0,6.0)); }
			Stop;
		Death:
			TNT1 A 0 A_FadeOut(1.0,FTF_REMOVE);
			stop;
	}
}

class LargeExperiessence : BaseExperiessence
{
	default
	{
		Radius 20;
		Height 16;
		Scale 0.556;
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "GrabExperiessence";
		Inventory.PickupMessage "Found a large dose of \cfExperiessence\c-.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (GetCVar("dvds_expgains") == 0) { return resolvestate("Death"); }
				return resolvestate(null);
			}
		Idle:
			EXPD AABBCCDDEEFFGGHH 1 bright
			{
				if (GetCVar("dvds_expgains") == 0) { return resolvestate("Death"); }
				if (alpha <= 0.375) { A_SetInventory("ActorVar1",1); } // Set to Fade In
				if (alpha >= 0.875) { A_SetInventory("ActorVar1",0); } // Set to Fade Out
				if (CountInv("ActorVar1") == 0) { A_FadeOut(0.075); } // Fading Out
				if (CountInv("ActorVar1") == 1) { A_FadeIn(0.075); } // Fading In
				return resolvestate(null);
			}
			loop;
		Pickup:
			TNT1 A 0 { A_PickupExperiessence(2.0*frandom(4.0,6.0)); }
			Stop;
		Death:
			TNT1 A 0 A_FadeOut(1.0,FTF_REMOVE);
			stop;
	}
}

class HugeExperiessence : BaseExperiessence
{
	default
	{
		Radius 20;
		Height 16;
		Scale 0.889;
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "GrabExperiessence";
		Inventory.PickupMessage "Found a massive dose of \cfExperiessence\c-.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (GetCVar("dvds_expgains") == 0) { return resolvestate("Death"); }
				return resolvestate(null);
			}
		Idle:
			EXPD AABBCCDDEEFFGGHH 1 bright
			{
				if (GetCVar("dvds_expgains") == 0) { return resolvestate("Death"); }
				if (alpha <= 0.50) { A_SetInventory("ActorVar1",1); } // Set to Fade In
				if (alpha >= 1.0) { A_SetInventory("ActorVar1",0); } // Set to Fade Out
				if (CountInv("ActorVar1") == 0) { A_FadeOut(0.1); } // Fading Out
				if (CountInv("ActorVar1") == 1) { A_FadeIn(0.1); } // Fading In
				return resolvestate(null);
			}
			loop;
		Pickup:
			TNT1 A 0 { A_PickupExperiessence(4.0*frandom(4.0,6.0)); }
			Stop;
		Death:
			TNT1 A 0 A_FadeOut(1.0,FTF_REMOVE);
			stop;
	}
}

class HealthBonus2 : AetheriusCustomInventory // replaces HealthBonus
{
	default
	{
		//$Sprite "BON1A0"
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "gethealthbonus";
		Inventory.PickupMessage "Picked up a \cnhealth bonus\c-.";
	}
	States
	{
		Spawn:
			BON1 A 0 NoDelay;
			BON1 A 0
			{
				if (random(1,2048) <= 1) { A_SpawnItemEx("MonsterMunchies",0,0,0,0,0,0,0); }
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 192)
					{
						A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,tid);
					}
					else
					{
						if (random(1,256) <= 192)
						{
							A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,0,tid);
						}
						else
						{
							A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,0,tid);
						}
					}
					bCOUNTITEM = false;
					A_Destroy();
				}
				
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 64)
					{
						A_SpawnItemEx("RandomPowerupSpawner",0,0,0,0,0,0,0);
					}
				}
				
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 64)
					{
						A_SpawnItemEx("YggdrasilDew",0,0,0,0,0,0,0);
					}
				}
				
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 104)
					{
						A_SpawnItemEx("PaxaPunch",0,0,0,0,0,0,0);
					}
				}
				
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 104)
					{
						A_SpawnItemEx("MercuryBandana",0,0,0,0,0,0,0);
					}
				}
				
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 16)
					{
						if (random(1,256) <= 64)
						{
							A_SpawnItemEx("GreaterVimstone",0,0,0,0,0,0,0);
						}
						else
						{
							A_SpawnItemEx("LesserVimstone",0,0,0,0,0,0,0);
						}
					}
				}

				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 224) { A_SpawnItemEX("MiraclePotion",0,0,0,0,0,0,0); }
				}

				if (random(1,256) <= 8)
				{
					A_SpawnItemEx("HealthBonusBig",0,0,0,random(-8,8),random(-8,8),random(-8,8),0,0,124);
					A_SpawnItemEx("HealthBonusBig",0,0,0,random(-8,8),random(-8,8),random(-8,8),0,0,248);
					if (random(1,8) == 1) 
					{ 
						A_SpawnItemEx("HealthBonusBig",0,0,0,0,0,0,0);
						return resolvestate("Float"); 
					}
					else
					{
						A_SpawnItemEx("HealthBonusBig",0,0,0,0,0,0,0,0,tid);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			goto Float;

		Float:
			BON1 AABBCCDDCCBB 3 BRIGHT;
			Loop;
		Pickup:
			TNT1 A 0 { A_EmulateGiveHealthBonusACI(1,8,100,1); }
			Stop;
	}
}

class HealthBonusBig : AetheriusCustomInventory
{
	default
	{
		//$Sprite "BON3A0"
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		Scale 1.125;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupsound "gethealthbonus" ;
		Inventory.PickupMessage "Picked up a \cnlarge health bonus\c-.";
	}
	
	States
	{
		Spawn:
			BON3 A 0;
			goto Float;
		Float:
			BON3 ABCDCB 6 BRIGHT;
			Loop;
		Pickup:
			NULL A 0 { A_EmulateGiveHealthBonusACI(10,8,100,1); }
			Stop;
	}
}

class HealthBonusSpawner : AetheriusBaseZSC replaces HealthBonus
{
	default
	{
		Radius 8;
		Height 8;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
		//$Sprite "BON1A0";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("HealthBonus2",0.0,0.0,0.0,0,0,0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 32)
					{
						A_SpawnItemEx("RandomSeedDropForced",0,0,0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,0,0);
					}
				}
			}
		Idle:
			TNT1 A 0;
			stop;
	}
}

//****************
//**Seed Pickups**
//****************
class SeedOfLife : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDG0"
		//Alpha 0.1; RenderStyle "Add";
		Tag "Seed of Life: Extends Maximum HP by a minor amount.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Life\c-!";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED G 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabLifeManaSeed(1,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatHPSeed",CHAN_BODY);
			Stop;
	}
}

class SeedOfMagic : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDH0"
		//Alpha 0.1; RenderStyle "Add";
		Tag "Seed of Magic: Extends Maximum MP by a minor amount.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Magic\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED H 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabLifeManaSeed(2,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatMPSeed",CHAN_BODY);
			Stop;
	}
}

class SeedOfAgility : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDA0";
		Tag "Seed of Agility: Gives the player +1 Agility.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Agility\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(1);
			goto Active;
		Active:
			SEED A 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(1,1,1);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatAGLSeed",CHAN_BODY);
			Stop;
	}
}

// This version does not get removed if seeds exceed limits nor increases seeds towards their limit [for mapper-placed seeds you want to ALWAYS be there for rewards or something]
class SeedOfAgilityForced : SeedOfAgility 
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDA0"
		Tag "Seed of Agility [Forced]: Gives the player +1 Agility. (ignores seed limits)";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED A 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(1,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatAGLSeed",CHAN_BODY);
			Stop;
	}
}

class SeedOfDefense : BaseSeed 
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDB0"
		Tag "Seed of Defense: Gives the player +1 Defense.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Defense\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(1);
			goto Active;
		Active:
			SEED B 0 BRIGHT;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(2,1,1);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatDEFSeed",CHAN_BODY);
			Stop;
	}
}

// This version does not get removed if seeds exceed limits nor increases seeds towards their limit [for mapper-placed seeds you want to ALWAYS be there for rewards or something]
class SeedOfDefenseForced : SeedOfDefense
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDB0"
		Tag "Seed of Defense [Forced]: Gives the player +1 Defense. (ignores seed limits)";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED B 0 BRIGHT;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(2,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatDEFSeed",CHAN_BODY);
			Stop;
	}
}

class SeedOfDeftness : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDC0"
		Tag "Seed of Deftness: Gives the player +1 Deftness.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Deftness\c-!";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(1);
			goto Active;
		Active:
			SEED C 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatDFTSeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(3,1,1);
			Stop;
	}
}

// This version does not get removed if seeds exceed limits nor increases seeds towards their limit [for mapper-placed seeds you want to ALWAYS be there for rewards or something]
class SeedOfDeftnessForced : SeedOfDeftness
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDC0"
		Tag "Seed of Deftness [Forced]: Gives the player +1 Deftness. (ignores seed limits)";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED C 0 BRIGHT;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatDFTSeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(3,1,0);
			Stop;
	}
}

class SeedOfSorcery : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDD0"
		Tag "Seed of Sorcery: Gives the player +1 Sorcery.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Sorcery\c-!";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(1);
			goto Active;
		Active:
			SEED D 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSORSeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(4,1,1);
			Stop;
	}
}

// This version does not get removed if seeds exceed limits nor increases seeds towards their limit [for mapper-placed seeds you want to ALWAYS be there for rewards or something]
class SeedOfSorceryForced : SeedOfSorcery
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDD0"
		Tag "Seed of Sorcery [Forced]: Gives the player +1 Sorcery. (ignores seed limits)";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED D 0 BRIGHT;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSORSeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(4,1,0);
			Stop;
	}
}

class SeedOfStrength : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDE0"
		Tag "Seed of Strength: Gives the player +1 Strength.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Strength\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(1);
			goto Active;
		Active:
			SEED E 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSTRSeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(5,1,1);
			Stop;
	}
}

// This version does not get removed if seeds exceed limits nor increases seeds towards their limit [for mapper-placed seeds you want to ALWAYS be there for rewards or something]
class SeedOfStrengthForced : SeedOfStrength
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDE0"
		Tag "Seed of Strength [Forced]: Gives the player +1 Strength. (ignores seed limits)";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED E 0 BRIGHT;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSTRSeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(5,1,0);
			Stop;
	}
}

class SeedOfTherapeusis : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDF0"
		Tag "Seed of Therapeusis: Gives the player +1 Therapeusis.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Therapeusis\c-!";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(1);
			goto Active;
		Active:
			SEED F 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatTHESeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(6,1,1);
			Stop;
	}
}

class SeedOfTherapeusisForced : SeedOfTherapeusis
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDF0"
		Tag "Seed of Therapeusis [Forced]: Gives the player +1 Therapeusis. (ignores seed limits)";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED F 0 BRIGHT;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatTHESeed",CHAN_BODY);
			TNT1 A 0 A_GrabSeedOther(6,1,0);
			Stop;
	}
}

class SeedOfSkill : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDI0"
		//Alpha 0.1 RenderStyle "Add"
		Tag "Seed of Skill: Gives the player 4 Aeon Points.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a \coSeed of Skill\c-!";
	}
	
	States
	{
		Evolve:
			TNT1 A 0 A_SpawnItemEx("SeedOfSkill2");
			stop;
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(0);
			TNT1 A 0 A_Jump(8,"Evolve");
			goto Active;
		Active:
			SEED I 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(0,1,2);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSKLSeed",CHAN_BODY);
			Stop;
	}
}

// This version does not get removed if seeds exceed limits nor increases seeds towards their limit [for mapper-placed seeds you want to ALWAYS be there for rewards or something]
class SeedOfSkillForced : SeedOfSkill
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDI0"
		Tag "Seed of Skill [Forced]: Gives the player 4 Aeon Points. (ignores seed limits)";
	}
	
	States
	{
		Evolve:
			TNT1 A 0 A_SpawnItemEx("SeedOfSkill2Forced");
			stop;
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			TNT1 A 0 A_Jump(8,"Evolve");
			goto Active;
		Active:
			SEED I 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(0,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSKLSeed",CHAN_BODY);
			Stop;
	}
}

class SeedOfSkill2 : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDJ0"
		//Alpha 0.1; RenderStyle "Add";
		Tag "Enhanced Seed of Skill: Gives the player 16 Aeon Points.";
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate an \co Enhanced Seed of Skill\c-!";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(0);
			goto Active;
		Active:
			SEED J 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,96); } }
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,144); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(9,1,2);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSKLSeed",CHAN_BODY);
			Stop;
	}
}

class SeedOfSkill2Forced : SeedOfSkill2
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "SEEDJ0"
		Tag "Enhanced Seed of Skill [Forced]: Gives the player 16 Aeon Points. (ignores seed limits)";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Active:
			SEED J 0;
			#### ### 2 BRIGHT
			{
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,96); } }
				if (A_CheckRange(1024,"Null")) { } else { if (GetCVar("dvds_gfxeffectlevel") == 0) { A_SpawnItemEx("SeedGlitter", 0, 0, 14, random(-2,2), random(-2,2), random(-2,2) ,144); } }
			}
			Loop;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(9,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatSKLSeed",CHAN_BODY);
			Stop;
	}
}

// Drops a random, unforced seed spawn of any of the six types, or even the Seed of Skill [or on extremely rare occasions a Fygg (if applicable)]
class RandomSeedDrop : AetheriusCustomInventory
{
	default
	{
		//$Sprite "RNDSA0"
		//$Category DV-DS Random Spawners
		Tag "Random Seed Spawn: Has a Chance to spawn a random seed which is enforced by the game's global seed limit.";
		Scale 0.334;
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0 NoDelay;
			FLAR A 1 A_SeedDrop(0,0,0);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			loop;
	}
}

// Drops a random, unforced seed spawn of any of the six types, or even the Seed of Skill [or on extremely rare occasions a Fygg (if applicable)]
class RandomSeedDropAlways : AetheriusCustomInventory
{
	default
	{
		//$Sprite "RNDSA0"
		//$Category DV-DS Random Spawners
		Tag "Random Seed Spawn [Always]: Will always spawn a random seed which is enforced by the game's global seed limit.";
		Scale 0.334;
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0 NoDelay;
			FLAR A 1 A_SeedDrop(2,0,0);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			loop;
	}
}

// Drops a random, forced seed spawn of any of the six types, or even the Seed of Skill [or on extremely rare occasions a Fygg (if applicable)]
class RandomSeedDropForced : AetheriusCustomInventory
{
	default
	{
		//$Sprite "RNDSA0"
		//$Category DV-DS Random Spawners
		Tag "Random Forced Seed Spawn: Has a Chance to spawn a random seed which ignores game's global seed limit.";
		Scale 0.334;
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0 NoDelay;
			FLAR A 1 A_SeedDrop(0,0,1);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			loop;
	}
}

// Drops a random, forced seed spawn of any of the six types, or even the Seed of Skill [or on extremely rare occasions a Fygg (if applicable)]
class RandomSeedDropForcedAlways : AetheriusCustomInventory 
{
	default
	{
		//$Sprite "RNDSA0"
		//$Category DV-DS Random Spawners
		Tag "Random Forced Seed Spawn [Always]: Always spawns a random seed which ignores game's global seed limit.";
		Scale 0.334;
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0 NoDelay;
			FLAR A 1 A_SeedDrop(2,0,1);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			loop;
	}
}

class SeedGlitter : AetheriusBaseTeleGlitter
{
	default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			NULL A 6;
		Travel:
			AHGT ABCDEABCDE 2 Bright
			{
				A_SetScale(scale.X-0.125,scale.Y-0.125);
				A_FadeOut(0.125);
			}
			stop;
	}
}

class GraveSeedRandomizer : RandomSpawner2 
{
	default
	{
		//$Sprite "RNDSA0"
		//$Category DV-DS Random Spawners
		DropItem "SeedOfLife", 32, 1;
		DropItem "SeedOfMagic", 32, 1;
	}
}
// End of Seeds

// Fyggs
class FyggGlitter : AetheriusBaseTeleGlitter
{
	default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			NULL A 8;
		Travel:
			TGLT KLMNO 2 Bright
			{
				A_SetScale(scale.x-0.05,scale.y-0.05);
				A_FadeOut(0.05);
			}
			loop;
	}
}

class FyggGlitter2 : AetheriusBaseTeleGlitter
{
	default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			NULL A 8;
		Travel:
			AHGT ABCDE 2 Bright
			{
				A_SetScale(scale.x-0.05,scale.y-0.05);
				A_FadeOut(0.05);
			}
		loop;
	}
}

// Platinum Fyggs give 64 Aeon pts + 16 to all stats
class Fygg2 : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "FYGGD0"
		Tag "Platinum Fygg [limited by Seed/Fygg limit settings]";
		Scale 0.5;
		//Alpha 0.1; RenderStyle "Add";
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a rare and powerful \cfPlatinum Fygg\c- fruit!!!";
	}

	States
	{
		Active:
			FYGG D 0 BRIGHT;
			#### # 2 BRIGHT
			{
				if (GetCVar("dvds_gfxeffectlevel") == 0) 
				{
					A_SpawnItemEx("FyggGlitter2", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter2", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
				if (GetCVar("dvds_gfxeffectlevel") <= 1) 
				{
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter2", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
			}
			Loop;

		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(2);
			goto Active;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(8,1,3);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatFyggFruit",CHAN_BODY);
			Stop;
  }
}

// "Forced" means the Fygg will stay spawned even if you've picked up the current Fygg for that world [a 'world' in DVII is either Earth [MAP01-MAP05+MAP07], the Moonbase[MAP06] or Hell [MAP08-MAP10B]
class Fygg2Forced : Fygg2
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "FYGGD0"
		Tag "Platinum Fygg [always spawns regardless of Seed/Fygg limits]";
	}
	
	States
	{
		Active:
			FYGG D 0 BRIGHT;
			#### # 2 BRIGHT
			{
				if (GetCVar("dvds_gfxeffectlevel") == 0) 
				{
					A_SpawnItemEx("FyggGlitter2", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter2", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
				if (GetCVar("dvds_gfxeffectlevel") <= 1) 
				{
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter2", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
			}
			Loop;

		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			goto Active;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(8,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatFyggFruit",CHAN_BODY);
			Stop;
	}
}

// Fyggs give 16 pts to all six major stats
class Fygg : BaseSeed
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "FYGGB0"
		Tag "Fygg [limited by Seed/Fygg limit settings]";
		Scale 0.5;
		//Alpha 0.1; RenderStyle "Add";
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You just ate a rare and powerful \cfFygg\c- fruit!!!";
	}
	
	States
	{
		Active:
			FYGG B 0 BRIGHT;
			#### # 2 BRIGHT
			{
				if (GetCVar("dvds_gfxeffectlevel") == 0) 
				{
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
				if (GetCVar("dvds_gfxeffectlevel") <= 1) 
				{
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
			}
			Loop;

		Evolve:
			TNT1 A 0 A_SpawnItemEx("Fygg2");
			stop;
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(2);
			TNT1 A 0 A_Jump(8,"Evolve");
			goto Active;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(7,1,3);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatFyggFruit",CHAN_BODY);
			Stop;
	}
}

// "Forced" means the Fygg will stay spawned even if you've picked up the current Fygg for that world [a 'world' in DVII is either Earth [MAP01-MAP05+MAP07], the Moonbase[MAP06] or Hell [MAP08-MAP10B]
class FyggForced : Fygg
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "FYGGB0"
		Tag "Fygg [always spawns regardless of Seed/Fygg limits]";
	}
	
	States
	{
		Active:
			FYGG B 0 BRIGHT;
			#### # 2 BRIGHT
			{
				if (GetCVar("dvds_gfxeffectlevel") == 0) 
				{
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
				if (GetCVar("dvds_gfxeffectlevel") <= 1) 
				{
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,64);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,128);
					A_SpawnItemEx("FyggGlitter", 0, 0, 40, random(-2,2), random(-2,2), random(-2,2) ,192);
				}
			}
			Loop;

		Evolve:
			TNT1 A 0 A_SpawnItemEx("Fygg2Forced");
			stop;
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 A_SeedLimitChecker(3);
			TNT1 A 0 A_Jump(8,"Evolve");
			goto Active;
		Pickup:
			TNT1 A 0 A_GrabSeedOther(7,1,0);
			TNT1 A 0 A_StartSound("EatingSeed",CHAN_VOICE);
			TNT1 A 0 A_StartSound("EatFyggFruit",CHAN_BODY);
			Stop;
	}
}

class MaxHealthBonus : AetheriusCustomInventory
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "HRTTA0"
		Tag "Max Health Bonus [might turn into a cluster of health bonuses]";
		Scale 1.25;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 
			{
				If (A_MaxHPDropChance() == 0) 
				{
					A_SpawnItemEx("HealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("HealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("HealthBonus",-12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("HealthBonus",0,12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					if (random(1,32) <= 1)
					{
						A_SpawnItemEx("HealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
						A_SpawnItemEx("HealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
						A_SpawnItemEx("HealthBonus",-12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
						A_SpawnItemEx("HealthBonus",0,12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					}
				}
				else
				{
					A_SpawnItemEx("MaxHealthBonusREAL",0,0,0,0,0,0,0,0,0,tid);
				}
				A_Destroy();
			}
			Stop;
	}
}

class MaxHealthBonusREAL : AetheriusCustomInventory
{
	default
	{
		//$Category DV-DS Stat Boosting Items
		//$Sprite "HRT2A0"
		//Alpha 0.1 RenderStyle "Add"
		Tag "Max Health Bonus [always spawns]";
		Scale 1.25;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Picked up a \comax health bonus\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_SeedLimitChecker(3);
			goto Animate2;
		Animate1:
			HRTT A 0
			{
				A_SetInventory("ActorVar3",GetCVar("dvds_gfxeffectlevel"));
			}
			HRTT ABCDABCD 4 BRIGHT
			{
				A_GiveInventory("ActorVar1",1);
				A_GiveInventory("ActorVar2",1);
				if (CountInv("ActorVar1") >= 2)
				{
					if (A_CheckRange(1024,"Null")) { } else { if (CountInv("ActorVar3") == 0) { A_SpawnItemEx("ArmorGlitter2", 0, 0, 32, random(-2,2), random(-2,2), random(-2,2) ,128); } }
					if (A_CheckRange(1024,"Null")) { } else { if (CountInv("ActorVar3") <= 1) { A_SpawnItemEx("ArmorGlitter2", 0, 0, 32, random(-2,2), random(-2,2), random(-2,2) ,128); } }
					A_SetInventory("ActorVar1",0);
				}
				if (CountInv("ActorVar2") >= 8)
				{
					A_StartSound("MaxHPBeat");
					A_SetInventory("ActorVar2",0);
				}
			}
			loop;
		Animate2:
			HRT2 A 0
			{
				A_SetInventory("ActorVar3",GetCVar("dvds_gfxeffectlevel"));
			}
			HRT2 ABCDEFGHIJKLMNABCDEFGHIJKLMN 2 BRIGHT
			{
				A_GiveInventory("ActorVar1",1);
				A_GiveInventory("ActorVar2",1);
				if (CountInv("ActorVar1") >= 4)
				{
					if (A_CheckRange(1024,"Null")) { } else { if (CountInv("ActorVar3") == 0) { A_SpawnItemEx("ArmorGlitter3", 0, 0, 32, random(-2,2), random(-2,2), random(-2,2) ,128); } }
					if (A_CheckRange(1024,"Null")) { } else { if (CountInv("ActorVar3") <= 1) { A_SpawnItemEx("ArmorGlitter3", 0, 0, 32, random(-2,2), random(-2,2), random(-2,2) ,128); } }
					A_SetInventory("ActorVar1",0);
				}
				if (CountInv("ActorVar2") >= 14)
				{
					A_StartSound("MaxHPBeat");
					A_SetInventory("ActorVar2",0);
				}
			}
			loop;
		Pickup:
			TNT1 A 0 
			{
				A_StartSound("MaxHPBonus");
				A_MaxHPBonusPickup();
			}
			Stop;
	}
}

class StimpackSpawner : RandomSpawner2 replaces Stimpack
{
	default
	{
		//$Sprite "STIMA0"
		DropItem "Stimpack2", 256, 99;
		DropItem "MiniBerserk", 256, 1;
	}
}

class Stimpack2 : AetheriusCustomInventory
{
	default
	{
		Inventory.PickupMessage "Picked up a \cpstimpack\c-.";
		// Inventory.PickupSound "getstimpack";
	}
	
	States
	{
		Spawn:
			STIM A 0 NoDelay;
			STIM A 0
			{
				// Vimstones
				if (random(1,1024) <= 1)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
				
				if (random(1,256) <= 36)
				{
					if (random(1,256) <= 144)
					{
						if (random(1,256) <= 112)
						{
							A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,0,0);
							A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
							A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,252);
							A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,255);
							if (random(1,256) > 32) { A_Destroy(); }
						}
						else
						{
							A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,0,0);
							A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
							A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,252);
							A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,255);
							if (random(1,256) > 32) { A_Destroy(); }
						}
					}
					else
					{
						A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,0);
						A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,224);
						A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,252);
						A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,255);
						if (random(1,256) > 32) { A_Destroy(); }
					}
				}
			}
		Idle:
			STIM A -1;
			stop;
		Success:
			TNT1 A 0
			{
				A_PickupMedicalItem(0,0);
				A_StartSound("gethealthkit",5);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(0)) { return resolvestate("Success"); } 
				return resolvestate(null); 
			}
			Fail;
	}
}

class MiniBerserk : AetheriusCustomInventory
{
	default
	{
		//$Sprite "MBSKA0"
		//$Category Powerups
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You have found a \crMini Berserk Pack\c-! Rip and Tear em' apart!";
		Inventory.PickupSound "getberserkpack";
	}
	
	States
	{
		Spawn:
			MBSK A 0 NoDelay;
			MBSK A 0
			{
				// Vimstones
				if (random(1,256) <= 1)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch"); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana"); } // Mercury Bandana
			}
			goto Idle;
		Idle:
			MBSK A -1;
			Stop;
		Pickup:
			TNT1 A 0
			{
				A_GiveBuffsPowerup(23,30);
				A_PickupMedicalItem(4,0);
				if (A_CheckHealthLevels(0)) 
				{
					A_PickupMedicalItem(1,0);
					A_StartSound("gethealthkit",5);
				}

				A_BerserkWeaponSwitch();
			}
			Stop;
	}
}

class MedikitSpawner : RandomSpawner2 replaces Medikit
{
	default
	{
		//$Sprite "MEDIA0"
		DropItem "Medikit2", 256, 99;
		DropItem "Berserk2", 256, 1;
	}
}

class Medikit2 : AetheriusCustomInventory
{
	default
	{
		Inventory.PickupMessage "Picked up a \cpmedikit\c-.";
		// Inventory.PickupSound "getmedikit";
	}
	
	States
	{
		Spawn:
			MEDI A 0 NoDelay;
			MEDI A 0
			{
				// Vimstones
				if (random(1,512) <= 1)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
			}
			MEDI A 0
			{
				if (random(1,256) <= 44)
				{
					if (random(1,256) <= 128)
					{
						if (random(1,256) <= 128)
						{
							A_SpawnItemEx("SpecialMedicine",0,0,0,0,0,0,0,0,0);
							A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,192);
							A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
							A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,252);
							A_SpawnItemEx("SpecialMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,255);
							if (random(1,256) > 32) { A_Destroy(); }
						}
						else
						{
							A_SpawnItemEx("StrongMedicine",0,0,0,0,0,0,0,0,0);
							A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,192);
							A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
							A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,252);
							A_SpawnItemEx("StrongMedicine",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,255);
							if (random(1,256) > 32) { A_Destroy(); }
						}
					}
					else
					{
						A_SpawnItemEx("MedicinalHerb",0,0,0,0,0,0,0,0,0);
						A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,192);
						A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,240);
						A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,252);
						A_SpawnItemEx("MedicinalHerb",0,0,0,random(-3,3),random(-3,3),random(-3,3),0,0,255);
						if (random(1,256) > 32) { A_Destroy(); }
					}
				}
			}
		Idle:
			MEDI A -1;
			Stop;
		Success:
			TNT1 A 0
			{
				A_PickupMedicalItem(1,0);
				A_StartSound("gethealthkit",5);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{
				if (A_CheckHealthLevels(0)) { return resolvestate("Success"); } return resolvestate(null); 
			}
			Fail;
		Die:
			stop;
	}
}

class Berserk2 : AetheriusCustomInventory replaces Berserk
{
	default
	{
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You have found a \crBerserk Pack\c-! Rip and Tear em' apart!";
		Inventory.PickupSound "getberserkpack";
	}
	
	States
	{
		Spawn:
			PSTR A random(1,4) NoDelay 
			{
				if (A_BerserkCheckSceptre() >= 1)
				{
					A_SpawnItemEx("SceptreOfEmpyrea",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			PSTR A 0
			{
				// Vimstones
				if (random(1,256) <= 4)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch"); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana"); } // Mercury Bandana
			}
			goto Idle;
		Idle:
			PSTR A -1;
			Stop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveBuffsPowerup(23,120);
				A_PickupMedicalItem(3,0);
				if (A_CheckHealthLevels(0)) 
				{
					A_PickupMedicalItem(2,0);
					A_StartSound("gethealthkit",5);
				}

				A_BerserkWeaponSwitch();
			}
			Stop;
	}
}
// A more "artifact" style version of the Berserk Pack [for Heretic/Hexen mode, etc]
class BerserkSphere : AetheriusCustomInventory
{
	default
	{
		+FLOATBOB;
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You have found a \crBerserk Supercharge\c-! Rip and Tear em' apart!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			BERS A random(1,4) NoDelay
			{
				if (A_BerserkCheckSceptre() >= 1)
				{
					A_SpawnItemEx("SceptreOfEmpyrea",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			BERS A 0
			{
				// Vimstones
				if (random(1,256) <= 4)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch"); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana"); } // Mercury Bandana
			}
			goto Idle;
		Idle:
			BERS ABCDEFGH 3 Bright;
			loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveBuffsPowerup(23,120);
				A_PickupMedicalItem(3,0);
				if (A_CheckHealthLevels(0)) 
				{
					A_PickupMedicalItem(2,0);
					A_StartSound("gethealthkit", 5);
				}

				A_BerserkWeaponSwitch();
			}
			Stop;
	}
}

class BuffSphereSpawner : RandomSpawner2
{
	default
	{
		DropItem "SpreadSphereSpawner", 256, 25;
		DropItem "DoubleSphere", 256, 25;
		DropItem "GuardSphere", 256, 25;
		DropItem "HasteSphere", 256, 25;
		DropItem "TerrorSphere", 256, 25;
		DropItem "TimeFreezeSphere", 256, 25;
		DropItem "DivinationSphere", 256, 3;
	}
}

class SoulsphereSpawner : AetheriusBaseZSC replaces Soulsphere
{
	default
	{
		//$Sprite "SOULA0"
		Scale 1.25;
		+FLOATBOB;
		//+INVENTORY.ALWAYSPICKUP;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				// Vimstones
				if (random(1,256) <= 1)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch"); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana"); } // Mercury Bandana
				// Random Buff Sphere
				if (random(1,256) <= 12)
				{
					A_SpawnItemEx("BuffSphereSpawner",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("Soulsphere2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
			}
			Stop;
	}
}

class Soulsphere2 : AetheriusCustomInventory
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You graciously accquire the \cnSoulSphere\c-!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SOUL ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GrabSoulsphere(0);
			}
			Stop;
	}
}

class MiniSoulsphere : AetheriusCustomInventory
{
	default
	{
		Height 16;
		Radius 8;
		Scale 0.5;
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You grabbed a \cnMiniature SoulSphere\c-!";
		Inventory.PickupSound "misc/p_pkup2";
	}
	
	States
	{
		Spawn:
			SOUL ABCD 4 Bright
			{
				A_SetTics(random(3,6));
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GrabSoulsphere(1);
			}
			Stop;
	}
}

class MegasphereSpawner : AetheriusBaseZSC Replaces Megasphere
{
	default
	{
		//$Sprite "MEGAA0"
		Scale 1.25;
		+FLOATBOB;
		//+INVENTORY.ALWAYSPICKUP;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				// Vimstones
				if (random(1,256) <= 2)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch"); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana"); } // Mercury Bandana
				// Random Buff Sphere
				if (random(1,256) <= 12)
				{
					A_SpawnItemEx("BuffSphereSpawner",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("Megasphere2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
			}
			Stop;
	}
}

class Megasphere2 : AetheriusCustomInventory 
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You graciously accquire the \cjMegaSphere\c-!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			MEGA ABCD 6 BRIGHT;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_MegaSphereHealth();
				A_MegaSphereArmor();
			}
			Stop;
	}
}

class SpreadSphereSpawner : AetheriusBaseZSC
{
	default
	{
		Scale 1.25;
		+FLOATBOB;
		//+INVENTORY.ALWAYSPICKUP;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				// Vimstones
				if (random(1,256) <= 2)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); }
					else { A_SpawnItemEx("GreaterVimstone",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); } // Mercury Bandana
				// Random Buff Sphere
				if (random(1,256) <= 16)
				{
					A_SpawnItemEx("SpreadSphere2",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("SpreadSphere1",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
			}
			Stop;
	}
}

class SpreadSphere1 : AetheriusCustomInventory
{
	default
	{
		//$Category DV-DS Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You graciously accquire the \cfSpreader Sphere\c-!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SRSH ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_StartSound("CastSpreaderAura1");
				A_GiveBuffsPowerup(8,60);
			}
			Stop;
	}
}

class SpreadSphere2 : AetheriusCustomInventory
{
	default
	{
		//$Category DV-DS Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "You graciously accquire the \cfSpreader Sphere Mk. 2\c-!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			SRSH EFGH 6 Bright; // ABCD 3 Bright
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_StartSound("CastSpreaderAura2");
				A_GiveBuffsPowerup(9,60);
			}
			Stop;
	}
}

class BlurSphereSpawner : AetheriusBaseZSC replaces BlurSphere
{
	default
	{
		//$Sprite "PINSA0"
		Scale 1.25;
		+FLOATBOB;
		//+INVENTORY.ALWAYSPICKUP;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				// Vimstones
				if (random(1,256) <= 2)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); }
					else { A_SpawnItemEx("GreaterVimstone",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); } // Mercury Bandana
				// Random Buff Sphere
				if (random(1,256) <= 160)
				{
					A_SpawnItemEx("BuffSphereSpawner",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("BlurSphere2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
			}
			Stop;
	}
}

class BlurSphere2 : AetheriusCustomInventory
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+VISIBILITYPULSE
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		RenderStyle "Translucent";
		Inventory.PickupMessage "Picked up the \caBlur Sphere\c-!";
		Inventory.PickupSound "powerups/invis";
	}
	
	States
	{
		Spawn:
			PINS ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveBuffsPowerup(1,60);
			}
			Stop;
	}
}

class InvulnerabilitySphereSpawner : AetheriusBaseZSC replaces InvulnerabilitySphere
{
	default
	{
		//$Sprite "PINVA0"
		Scale 1.25;
		+FLOATBOB;
		//+INVENTORY.ALWAYSPICKUP;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				// Vimstones
				if (random(1,256) <= 2)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); }
					else { A_SpawnItemEx("GreaterVimstone",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana",0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0); } // Mercury Bandana
				// Random Buff Sphere
				if (random(1,256) <= 80)
				{
					A_SpawnItemEx("BuffSphereSpawner",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("InvulnerabilitySphere2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
			}
			Stop;
	}
}

class InvulnerabilitySphere2 : AetheriusCustomInventory
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		Inventory.PickupMessage "\Picked up the \cqInvulnerability\c- Sphere!";
		Inventory.PickupSound "powerups/invuln";
	}
	
	States
	{
		Spawn:
			PINV ABCDCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveBuffsPowerup(4,30);
			}
			Stop;
	}
}

class DoubleSphere : AetheriusCustomInventory
{
	default
	{
		//$Category DV-DS Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		Inventory.PickupMessage "Double Damage!";
		Inventory.PickupSound "use_paxa";
	}
	
	States
	{
		Spawn:
			DDMG ABCB 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveBuffsPowerup(10,30);
			}
			Stop;
	}
}


class GuardSphere : AetheriusCustomInventory
{
	default
	{
		//$Category DV-DS Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		Inventory.PickupMessage "Double Defense!";
		Inventory.PickupSound "use_paxa";
	}
	
	States
	{
		Spawn:
			GARD ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveBuffsPowerup(11,30);
			}
			Stop;
	}
}

class HasteSphere : AetheriusCustomInventory
{
	default
	{
		//$Category DV-DS Powerups
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		Inventory.PickupMessage "Speed Up!";
		Inventory.PickupSound "use_paxa";
	}
	
	States
	{
		Spawn:
			HAST ABC 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveBuffsPowerup(12,30);
			}
			Stop;
	}
}

class TerrorSphere : AetheriusCustomInventory
{
	default
	{
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		Inventory.MaxAmount 0;
		Inventory.PickupMessage "The Terrorsphere!";
		Inventory.PickupSound "CastTerrorAura";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				// Vimstones
				if (random(1,256) <= 2)
				{
					if (random(1,4) <= 3) { A_SpawnItemEx("LesserVimstone"); }
					else { A_SpawnItemEx("GreaterVimstone"); }
				}
				if (random(1,2048) <= 80) { A_SpawnItemEx("PaxaPunch"); } // Paxa Punch
				if (random(1,2048) <= 80) { A_SpawnItemEx("MercuryBandana"); } // Mercury Bandana
				// Random Buff Sphere
				if (random(1,256) <= 12)
				{
					A_SpawnItemEx("BuffSphereSpawner",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				}
			}
		Idle:
			TERR ABCDE 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveBuffsPowerup(6,30);
			}
			Stop;
	}
}

class TimeFreezeSphere : AetheriusCustomInventory
{
	default
	{
		+FLOATBOB;
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Found a \chTime Freezing Sphere\c-! The World is your oyster!";
		Inventory.PickupSound "misc/p_pkup";
	}
	
	States
	{
		Spawn:
			TIME ABCD 6 Bright;
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveBuffsPowerup(5,15);
			}
			stop;
	}
}

class DivinationSphere : AetheriusCustomInventory
{
	default
	{
		+FLOATBOB;
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Found the rare \chDivination Sphere\c-! Release your Divine Wrath!";
		Inventory.PickupSound "misc/p_pkup";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Deggaris"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Illucia"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Flora"); }
				return resolvestate(null);
			}
		Flora:
			DVAS AAAAAAAAAAAAAABCDEFFFFFFFFFFFFFFEDCB 2 Bright;
			DVAS A 0 Bright
			{
				A_StartSound("divinationsphere/pulse",CHAN_5);
				A_StartSound("divinationsphere/pulse",CHAN_6);
				A_StartSound("divinationsphere/pulse",CHAN_7);
			}
			goto Spawn;
		Illucia:
			DVAS GGGGGGGGGGGGGGHIJKLLLLLLLLLLLLLLKJIH 2 Bright;
			DVAS G 0 Bright
			{
				A_StartSound("divinationsphere/pulse",CHAN_5);
				A_StartSound("divinationsphere/pulse",CHAN_6);
				A_StartSound("divinationsphere/pulse",CHAN_7);
			}
			goto Spawn;
		Deggaris:
			DVAS MMMMMMMMMMMMMMNOPQRRRRRRRRRRRRRRQPON 2 Bright;
			DVAS M 0 Bright
			{
				A_StartSound("divinationsphere/pulse",CHAN_5);
				A_StartSound("divinationsphere/pulse",CHAN_6);
				A_StartSound("divinationsphere/pulse",CHAN_7);
			}
			goto Spawn;
		Pickup:
			TNT1 A 0 
			{
				A_StartSound("CastDivineAvatar",CHAN_BODY);
				if (CallACS("GetBuffTimer",7) > 0) { A_GiveBuffsPowerup(7,10); }
				else { A_GiveBuffsPowerup(7,30); }
			}
			stop;
	}
}
class Backpack2 : AetheriusCustomInventory replaces Backpack
{
	default
	{
		+DONTGIB;
		Height 26;
		Inventory.PickupMessage "Picked up a \cebackpack full of ammo\c-! \cyAmmo and Inventory Limits increased\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SetScale(frandom(0.667,1));
				if (Random(1,1000) <= 125) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,1000) <= 125) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,1000) <= 125) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,1000) <= 125) { A_SpawnItemEx("MonsterMunchies",0,0,0,random(-5,5),random(-5,5),0); }
	
				if (Random(1,1000) <= 125) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,1000) <= 125) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,1000) <= 125) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				if (Random(1,1000) <= 125) { A_SpawnItemEx("RockBombShard",0,0,0,random(-5,5),random(-5,5),0); }
				
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
					if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
					if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
					if (Random(1,32) <= 1 && CountInv("PoisonNeedle",AAPTR_PLAYER1)) { A_SpawnItemEx("PoisonNeedle",0,0,0,random(-5,5),random(-5,5),0); }
				}
			}
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("DimensionalBag",0,0,0,0,0,0,0,0,0,tid);
					A_FadeOut(1.0,FTF_REMOVE);
				}
			}
		Idle:
			BPAK A -1;
			Stop;
		Pickup:
			TNT1 A 0 
			{
				A_StartSound("GetBullets", 5);
				A_StartSound("GetShells", 6);
				A_StartSound("GetRockets", 7);
				A_StartSound("GetCells", 8);
				A_GrabBackpack();
			}
			Stop;
	}
}

class DimensionalBag : AetheriusCustomInventory
{
	default
	{
		scale 0.8334;
		Height 26;
		height 16;
		Inventory.PickupSound "inv_grab";
		+FLOATBOB;
		Inventory.PickupMessage "Picked up a \cedimensional bag\c-! \cyAmmo and Inventory Limits increased\c-!";
	}
	
	States
	{
		Spawn:
			DBAG B 0 NoDelay
			{
				A_SetScale(frandom(0.667,1));
			}
		Idle:
			DBAG B -1;
			Stop;
		Pickup:
			TNT1 A 0 A_GrabBackpack();
			Stop;
	}
}

class RadSuit2 : AetheriusCustomInventory replaces RadSuit
{
	default
	{
		Height 46;
		+DONTGIB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Picked up the \cdRadiation Suit\c-!";
		Inventory.PickupSound "powerups/suit";
	}
	
	States
	{
		Spawn:
			SUIT A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0
			{
				A_GiveBuffsPowerup(22,60);
			}
			Stop;
	}
}

class Infrared2 : AetheriusCustomInventory replaces Infrared
{
	default
	{
		+COUNTITEM;
		+DONTGIB;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.PickupMessage "Found a \cbLight Amplification Visor\c-!";
		Inventory.PickupSound "powerups/light";
	}
	
	States
	{
		Spawn:
			PVIS A 6 Bright;
			PVIS B 6;
			Loop;
		Pickup:
			TNT1 A 0
			{
				A_GiveBuffsPowerup(0,120);
			}
			Stop;
	}
}

class YellowCard2 : YellowCard Replaces YellowCard
{
	default
	{
		species "YellowCard";
		Inventory.Pickupsound "getkeycard";
		Inventory.PickupMessage "Picked up the \ckYellow Keycard\c-!";
	}
	
	States
	{
		Spawn:
			YKEY ABCDEFGHIJKL 2 Bright;
			Loop;
	}
}

class YellowSkull2 : YellowSkull Replaces YellowSkull
{
	default
	{
		species "YellowSkull";
		Inventory.Pickupsound "getskullkey";
		Inventory.PickupMessage "Picked up the \ckYellow Skull Key\c-!";
	}
}

class BlueCard2 : BlueCard Replaces BlueCard
{
	default
	{
		species "BlueCard";
		Inventory.Pickupsound "getkeycard";
		Inventory.PickupMessage "Picked up the \chBlue Keycard\c-!";
	}
	
	States
	{
		Spawn:
			BKEY ABCDEFGHIJKL 2 Bright;
			Loop;
	}
}

class BlueSkull2 : BlueSkull Replaces BlueSkull
{
	default
	{
		species "BlueSkull";
		Inventory.Pickupsound "getskullkey";
		Inventory.PickupMessage "Picked up the \chBlue Skull Key\c-!";
	}
}

class RedCard2 : RedCard Replaces RedCard
{
	default
	{
		species "RedCard";
		Inventory.Pickupsound "getkeycard";
		Inventory.PickupMessage "Picked up the \caRed Keycard\c-!";
	}
	States
	{
		Spawn:
			RKEY ABCDEFGHIJKL 2 Bright;
			Loop;
	}
}

class RedSkull2 : RedSkull Replaces RedSkull
{
	default
	{
		species "RedSkull";
		Inventory.Pickupsound "getskullkey";
		Inventory.PickupMessage "Picked up the \caRed Skull Key\c-!";
	}
}

class ArmorBonusDSNone : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 0;
		Armor.Saveamount 0;
		Armor.Maxsaveamount 0;
		Inventory.Icon "TNT1A0";
	}
}

class ArmorBonusDSGreen : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 33.3334;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 5000;
		DamageFactor "normal", 0.975;	// -2.5% Damage to HP
		DamageFactor "Bullet", 0.85;	// -15% Bullet Damage
		DamageFactor "Fire", 0.98;		// -2% Fire Damage
		DamageFactor "Magma", 0.98;		// -2% Fire Damage
		DamageFactor "Explosive", 0.99;		// -1% Explosive Damage
		Inventory.Icon "ARM1A1";
	}
}

class ArmorBonusDSBlue : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 50;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 5000;
		DamageFactor "normal", 0.95;	// -5% Damage to HP
		DamageFactor "Bullet", 0.75;	// -25% Bullet Damage
		DamageFactor "Fire", 0.90;		// -10% Fire Damage
		DamageFactor "Magma", 0.90;		// -10% Fire Damage
		DamageFactor "Explosive", 0.96;		// -4% Explosive Damage
		Inventory.Icon "ARM2A1";
	}
}

class ArmorBonusDSStone1 : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE
		Armor.Savepercent 66.6667;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 5000;
		DamageFactor "normal", 0.875;	// -12.5% Damage to HP
		DamageFactor "Bullet", 0.60;	// -40% Bullet Damage
		DamageFactor "Fire", 0.725;		// -27.5% Fire Damage
		DamageFactor "Magma", 0.725;		// -27.5% Fire Damage
		DamageFactor "Ice", 1.125;		// +12.5% Ice Damage
		DamageFactor "Explosive", 0.85;		// -15% Explosive Damage
		Inventory.Icon "STSKA1";
	}
}

class ArmorBonusDSStone2 : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 83.3334;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 5000;
		DamageFactor "normal", 0.75;	// -25% Overall Damage
		DamageFactor "Bullet", 0.60;	// -40% Bullet Damage
		DamageFactor "Fire", 0.725;		// -27.5% Fire Damage
		DamageFactor "Magma", 0.725;		// -27.5% Fire Damage
		DamageFactor "Ice", 1.125;		// +12.5% Ice Damage
		DamageFactor "Explosive", 0.70;		// -30% Explosive Damage
		Inventory.Icon "STSKB1";
	}
}

class ArmorBonusDSDiamond1 : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 90;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 5000;
		DamageFactor "normal", 0.625;	// -37.5% Damage to HP
		DamageFactor "Bullet", 0.525;	// -47.5% Bullet Damage
		DamageFactor "Fire", 0.625;		// -37.5% Fire Damage
		DamageFactor "Magma", 0.625;		// -37.5% Fire Damage
		DamageFactor "Ice", 0.925;		// -7.5% Ice Damage
		DamageFactor "Holy", 0.825;		// -17.5% Holy Damage
		DamageFactor "Explosive", 0.925;		// -7.5% Explosive Damage
		Inventory.Icon "DISKA1";
	}
}

class ArmorBonusDSDiamond2 : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 95;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 5000;
		DamageFactor "normal", 0.25; // -75% Damage to HP
		DamageFactor "Bullet", 0.525;	// -47.5% Bullet Damage
		DamageFactor "Fire", 0.625;		// -37.5% Fire Damage
		DamageFactor "Magma", 0.625;		// -37.5% Fire Damage
		DamageFactor "Ice", 0.925;		// -7.5% Ice Damage
		DamageFactor "Holy", 0.825;		// -17.5% Holy Damage
		DamageFactor "Explosive", 0.65;		// -35% Explosive Damage
		Inventory.Icon "DISKB1";
	}
}

class ArmorBonusDSSpiritualExoskin : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 50;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 2100000000;
		DamageFactor "normal", 0.99; // -1% Damage to HP
		//Inventory.Icon "DISKB0"
	}
}

class ArmorBonusDSSpiritualExoskin2 : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 75;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 2100000000;
		DamageFactor "normal", 0.95; // -5% Damage to HP
		//Inventory.Icon "DISKB0"
	}
}

class ArmorBonusDSSpiritualExoskin3 : BasicArmorBonus
{
	default
	{
		+NOTIMEFREEZE;
		Armor.Savepercent 100;
		Armor.Saveamount 1;
		Armor.Maxsaveamount 2100000000;
		DamageFactor "normal", 0.9; // -10% Damage to HP
		//Inventory.Icon "DISKB0"
	}
}

class ArmorBonusDS2 : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "getarmorbonus" ;
		Inventory.Pickupmessage "Picked up an \cdarmor bonus\c-.";
		Inventory.Icon "ARM1A1";
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
	}
	
	States
	{
		Spawn:
			BON2 A 0 NoDelay A_ArmorBonusEyeGlow();
			BON2 A 0
			{
				if (random(1,2048) <= 1)
				{
					A_SpawnItemEx("MonsterMunchies",0,0,0,0,0,0,0,0,0);
				}
				if (random(1,256) <= 1)
				{
					if (random(1,256) <= 1)
					{
						A_SpawnItemEx("RandomArmorSpawner",0,0,0,0,0,0,0,0,0);
					}
				}

				if (random(1,256) <= 8)
				{
					A_SpawnItemEx("SuperArmorBonus",0,0,0,0,random(-8,8),random(-8,8),random(-8,8),0,124);
					A_SpawnItemEx("SuperArmorBonus",0,0,0,0,random(-8,8),random(-8,8),random(-8,8),0,248);
					if (random(1,8) == 1) 
					{ 
						A_SpawnItemEx("SuperArmorBonus",0,0,0,0,0,0,0);
						return resolvestate("Float"); 
					}
					else
					{
						A_SpawnItemEx("SuperArmorBonus",0,0,0,0,0,0,0,0,tid);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		Float:
			BON2 AABBCCDDCCBB 3 BRIGHT 
			{
				A_ArmorBonusEyeGlow();
			}
			Loop;

		Pickup:
			TNT1 A 0 A_JumpIf(CallACS("CheckCharacterClass") == 0, "Success");
			TNT1 A 0 A_JumpIf(CallACS("CheckCharacterClass") == 1, "Success");
			Fail;
		Success:
			TNT1 A 0 { A_EmulateGiveArmorBonus(1,0,false); }
			Stop;
	}
}

class SuperArmorBonus : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "getarmorbonus";
		Inventory.Icon "BON4A0";
		+FLOATBOB;
		+DONTGIB;
		+COUNTITEM;
		+INVENTORY.ALWAYSPICKUP;
		Inventory.Pickupmessage "Picked up a \cdsuper armor bonus\c-.";
	}

	States
	{
		Spawn:
			BON4 AABBCCDDCCBB 3
			{
				A_ArmorBonusEyeGlow();
			}
			Loop;

		Pickup:
			TNT1 A 0 A_JumpIf(CallACS("CheckCharacterClass") == 0, "Success");
			TNT1 A 0 A_JumpIf(CallACS("CheckCharacterClass") == 1, "Success");
			Fail;
		Success:
			TNT1 A 0 { A_EmulateGiveArmorBonus(10,0,false); }
			Stop;
	}
}

class ArmorBonus2 : AetheriusCustomInventory replaces ArmorBonus
{
	default
	{
		//$Sprite "BON2A0"
		Radius 8;
		Height 8;
		Inventory.Pickupsound "getarmorbonus";
		Inventory.Pickupmessage "Picked up an \cdarmor bonus\c-.";
		Inventory.Icon "ARM1A1";
		+FLOATBOB;
		+DONTGIB;
		-COUNTITEM;
		-INVENTORY.ALWAYSPICKUP;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (A_ClassicDoom2ArmorCheck() == 0 || 
						A_ClassicDoom2ArmorCheck() == 1 || 
						A_ClassicDoom2ArmorCheck() == 3 || 
						A_ClassicDoom2ArmorCheck() == 4) 
				{
					A_SpawnItemEx("ArmorBonusDS2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
					A_Destroy();
				} 
				else if (A_ClassicDoom2ArmorCheck() == 2) 
				{
					if (random(1,256) <= 4)
					{
						if (random(1,256) <= 1)
						{
							A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
						}
						else
						{
							if (random(1,256) <= 8)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
							}
						}
						A_Destroy();
					}
					else
					{
						A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
						A_Destroy();
					}
				}
				else if (A_ClassicDoom2ArmorCheck() == 5) 
				{ 
					if (random(1,256) <= 4)
					{
						if (random(1,256) <= 1)
						{
							A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
						}
						else
						{
							if (random(1,256) <= 8)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
							}
						}
						A_Destroy();
					}
					else
					{
						if (random(1,256) <= 255)
						{
							A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
						}
						else
						{
							A_SpawnItemEx("FloraRandomArmorDoom2a",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_TRANSFERSPECIAL,0,tid);
						}
						A_Destroy();
					}
				} 
			}
			Loop;
	}
}

class GreenArmorSpawner : RandomSpawner2 replaces GreenArmor
{
	default
	{
		//$Sprite "ARM1A0"
		DropItem "GreenArmorDS", 255, 240;
		DropItem "BlueArmorDS", 255, 14;
		DropItem "StoneSkin", 255, 2;
	}
}

class GreenArmorDS : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "GetArmorFull";
		Inventory.Pickupmessage "Picked up the \cdsecurity armor\c-.";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (A_ClassicDoom2ArmorCheck() == 2) 
				{ 
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_Destroy();
				} 
				else 
				if (A_ClassicDoom2ArmorCheck() == 5) 
				{
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_SpawnItemEx("FloraRandomArmorDoom2",0,0,0,0,0,0,0,0,0);
					A_Destroy();
				} 
			}
		Idle:
			ARM1 AAAAAA 1
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(1)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			ARM1 BBBBBB 1 bright
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(1)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			Loop;
		SpiritIdle:
			SAS1 AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIHHHHGGGGFFFFEEEEDDDDCCCCBBBBAAAA 1 bright
			{
				A_SetScale(0.67);
				if (A_CheckArmorLevelsOrb(1)) { return resolvestate("Idle"); }
				return resolvestate(null);
			}
			Loop;
		
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckArmorLevels(1)) 
				{
					return resolvestate("Success"); 
				}
				else
				{
					if (A_PickupArmorMainOrb(2,1,1) > 0) { return resolvestate("OrbSuccess"); }
					else
					{
						if (A_PickupArmorMainOrb(3,1,1) > 0) { return resolvestate("OrbSuccess"); }
						else
						{
							if (A_PickupArmorMainOrb(4,1,1) > 0) { return resolvestate("OrbSuccess"); }
							else
							{
								if (A_PickupArmorMainOrb(5,1,1) > 0) { return resolvestate("OrbSuccess"); }
								else
								{
									if (A_PickupArmorMainOrb(6,1,1) > 0) { return resolvestate("OrbSuccess"); }
									return resolvestate(null); 
								}
								return resolvestate(null); 
							}
							return resolvestate(null); 
						}
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;
		
		Success:
			TNT1 A 0 
			{
				A_StartSound("generalequip",5);
				A_PickupArmorMain(1);
			}
			Stop;
		OrbSuccess:
			TNT1 A 0
			{
				if (A_CheckArmorLevels(2)) { A_PickupArmorMainOrb(2,1); }
				else
				{
					if (A_CheckArmorLevels(3)) { A_PickupArmorMainOrb(3,1); }
					else
					{
						if (A_CheckArmorLevels(4)) { A_PickupArmorMainOrb(4,1); }
						else
						{
							if (A_CheckArmorLevels(5)) { A_PickupArmorMainOrb(5,1); }
							else
							{
								if (A_CheckArmorLevels(6)) { A_PickupArmorMainOrb(6,1); }
							}
						}
					}
				}
			}
			Stop;
	}
}

class BlueArmorSpawner : RandomSpawner2 replaces BlueArmor
{
	default
	{
		//$Sprite "ARM2A0"
		DropItem "BlueArmorDS", 255, 240;
		DropItem "StoneSkin", 255, 14;
		DropItem "DiamondSkin", 255, 2;
	}
}

class BlueArmorDS : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "GetArmorFull";
		Inventory.Pickupmessage "Picked up the \chCombat Armor\c-!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (A_ClassicDoom2ArmorCheck() == 2) 
				{ 
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_Destroy();
				} 
				else 
				if (A_ClassicDoom2ArmorCheck() == 5) 
				{
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,0,0,random(-2,2),random(-2,2),random(-2,2),0,0,0);
					A_SpawnItemEx("FloraRandomArmorDoom2",0,0,0,0,0,0,0,0,0);
					A_SpawnItemEx("FloraRandomArmorDoom2",0,0,0,0,0,0,0,0,0);
					A_Destroy();
				} 
			}
		Idle:
			ARM2 AAAAAA 1
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(2)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			ARM2 BBBBBB 1 bright
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(2)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			Loop;
		SpiritIdle:
			SAS2 AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHGGGGFFFFEEEEDDDDCCCCBBBBAAAA 1 bright
			{
				A_SetScale(0.67);
				if (A_CheckArmorLevelsOrb(2)) { return resolvestate("Idle"); }
				return resolvestate(null);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckArmorLevels(2)) 
				{
					return resolvestate("Success"); 
				}
				else
				{
					if (A_PickupArmorMainOrb(3,2,1) > 0) { return resolvestate("OrbSuccess"); }
					else
					{
						if (A_PickupArmorMainOrb(4,2,1) > 0) { return resolvestate("OrbSuccess"); }
						else
						{
							if (A_PickupArmorMainOrb(5,2,1) > 0) { return resolvestate("OrbSuccess"); }
							else
							{
								if (A_PickupArmorMainOrb(6,2,1) > 0) { return resolvestate("OrbSuccess"); }
								return resolvestate(null); 
							}
							return resolvestate(null); 
						}
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;

		Success:
			TNT1 A 0 
			{
				A_StartSound("generalequip",5);
				A_PickupArmorMain(2);
			}
			Stop;
		OrbSuccess:
			TNT1 A 0
			{
				if (A_CheckArmorLevels(3)) { A_PickupArmorMainOrb(3,2); }
				else
				{
					if (A_CheckArmorLevels(4)) { A_PickupArmorMainOrb(4,2); }
					else
					{
						if (A_CheckArmorLevels(5)) { A_PickupArmorMainOrb(5,2); }
						else
						{
							if (A_CheckArmorLevels(6)) { A_PickupArmorMainOrb(6,2); }
						}
					}
				}
			}
			Stop;
	}
}

class StoneSkin : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "GetArmorFull";
		Inventory.PickupMessage "You have acquired \ccStone Skin\c-!!";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				If (CallACS("CheckCharacterClass") == 2) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
				If (CallACS("CheckCharacterClass") == 8 || CallACS("CheckCharacterClass") == 9) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
			}
		Idle:
			STSK AAAAAA 1 
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(3)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			STSK BBBBBB 1 bright
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(3)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			Loop;
		SpiritIdle:
			SAS3 AAAABBBBCCCCDDDDEEEEFFFFGGGGFFFFEEEEDDDDCCCCBBBBAAAA 1 bright
			{
				A_SetScale(0.67);
				if (A_CheckArmorLevelsOrb(3)) { return resolvestate("Idle"); }
				return resolvestate(null);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckArmorLevels(3)) 
				{
					return resolvestate("Success"); 
				}
				else
				{
					if (A_PickupArmorMainOrb(4,3,1) > 0) { return resolvestate("OrbSuccess"); }
					else
					{
						if (A_PickupArmorMainOrb(5,3,1) > 0) { return resolvestate("OrbSuccess"); }
						else
						{
							if (A_PickupArmorMainOrb(6,3,1) > 0) { return resolvestate("OrbSuccess"); }
							return resolvestate(null); 
						}
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;

		Success:
			TNT1 A 0 
			{
				A_StartSound("generalequip",5);
				A_PickupArmorMain(3);
			}
			Stop;
		OrbSuccess:
			TNT1 A 0
			{
				if (A_CheckArmorLevels(4)) { A_PickupArmorMainOrb(4,3); }
				else
				{
					if (A_CheckArmorLevels(5)) { A_PickupArmorMainOrb(5,3); }
					else
					{
						if (A_CheckArmorLevels(6)) { A_PickupArmorMainOrb(6,3); }
					}
				}
			}
			Stop;
	}
}

class StoneSkinGA : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "GetArmorFull";
		Inventory.PickupMessage "You have acquired \ccStone Skin\c-!!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				If (CallACS("CheckCharacterClass") == 2) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",-12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);

					A_SpawnItemEx("MaxHealthBonus",-12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",-12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
				If (CallACS("CheckCharacterClass") == 8 || CallACS("CheckCharacterClass") == 9) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",-12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
			}
		Idle:
			STSK AAAAAA 1
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(5)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			STSK BBBBBB 1 bright
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(5)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			Loop;
		SpiritIdle:
			SAS5 AAAABBBBCCCCDDDDEEEEFFFFGGGGFFFFEEEEDDDDCCCCBBBBAAAA 1 bright
			{
				A_SetScale(0.67);
				if (A_CheckArmorLevelsOrb(5)) { return resolvestate("Idle"); }
				return resolvestate(null);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckArmorLevels(5)) 
				{
					return resolvestate("Success"); 
				}
				else
				{
					if (A_PickupArmorMainOrb(6,5,1) > 0) { return resolvestate("OrbSuccess"); }
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;

		Success:
			TNT1 A 0 
			{
				A_StartSound("generalequip",5);
				A_PickupArmorMain(5);
			}
			Stop;
		OrbSuccess:
			TNT1 A 0
			{
				if (A_CheckArmorLevels(6)) { A_PickupArmorMainOrb(6,4); }
			}
			Stop;
	}
}

class DiamondSkin : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "GetArmorFull";
		Inventory.PickupMessage "You have acquired \cjDiamond Skin\c-!!!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				If (CallACS("CheckCharacterClass") == 2) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
				If (CallACS("CheckCharacterClass") == 8 || CallACS("CheckCharacterClass") == 9) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
			}
		Idle:
			DISK AAAAAA 1
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(4)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			DISK BBBBBB 1 bright
			{
				A_SetScale(1.0);
				if (A_CheckArmorLevelsOrb(4)) { } else { return resolvestate("SpiritIdle"); }
				return resolvestate(null);
			}
			Loop;
		SpiritIdle:
			SAS4 AAAABBBBCCCCDDDDEEEEFFFFEEEEDDDDCCCCBBBBAAAA 1 bright
			{
				A_SetScale(0.67);
				if (A_CheckArmorLevelsOrb(4)) { return resolvestate("Idle"); }
				return resolvestate(null);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckArmorLevels(4)) 
				{
					return resolvestate("Success"); 
				}
				else
				{
					if (A_PickupArmorMainOrb(5,4,1) > 0) { return resolvestate("OrbSuccess"); }
					else
					{
						if (A_PickupArmorMainOrb(6,4,1) > 0) { return resolvestate("OrbSuccess"); }
						return resolvestate(null); 
					}
					return resolvestate(null); 
				}
				return resolvestate(null); 
			}
			Fail;

		Success:
			TNT1 A 0 
			{
				A_StartSound("generalequip",5);
				A_PickupArmorMain(4);
			}
			Stop;
		OrbSuccess:
			TNT1 A 0
			{
				if (A_CheckArmorLevels(5)) { A_PickupArmorMainOrb(5,4); }
				else
				{
					if (A_CheckArmorLevels(6)) { A_PickupArmorMainOrb(6,4); }
				}
			}
			Stop;
	}
}

class DiamondSkinGA : AetheriusCustomInventory
{
	default
	{
		Radius 20;
		Height 16;
		Inventory.Pickupsound "GetArmorFull";
		Inventory.PickupMessage "You have acquired \cjDiamond Skin\c-!!!";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay;
			DISK AAA 2
			{
				If (CallACS("CheckCharacterClass") == 2) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
				If (CallACS("CheckCharacterClass") == 8 || CallACS("CheckCharacterClass") == 9) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
			}
			DISK BBB 2 bright
			{
				If (CallACS("CheckCharacterClass") == 2) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
				If (CallACS("CheckCharacterClass") == 8 || CallACS("CheckCharacterClass") == 9) 
				{
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,tid);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",12,0,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_SpawnItemEx("MaxHealthBonus",0,-12,0,random(-1,1),random(-1,1),random(-1,1),0,0,0);
					A_Destroy();
				}
			}
			Loop;
		Success:
			TNT1 A 0 
			{
				A_StartSound("generalequip",5);
				A_PickupArmorMain(6);
			}
			Stop;
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckArmorLevels(6)) { return resolvestate("Success"); } 
				return resolvestate(null); 
			}
			Fail;
	}
}
class FarsightScanner : PowerScanner
{
	default
	{
		Powerup.Duration 2147483646;
		-INVENTORY.HUBPOWER;
	}
}

//*************************
//**Inventory-Style Items**
//*************************

class MedicinalHerb : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_MDHR";
		Inventory.PickupMessage "Found a \cdmedicinal herb\c-!";
		Tag "Medicinal Herb: Recovers 25-35 HP & 7.5-10.5% Stamina";
	}
	
	States
	{
		Spawn:
			MDHR A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(1);
			Fail;
	}
}

class StrongMedicine : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_STMD";
		Inventory.PickupMessage "Found a \cdstrong medicinal herb\c-!";
		Tag "Strong Medicinal Herb: Recovers 55-65 HP & 16.5-19.5% Stamina";
	}

	States
	{
		Spawn:
			STMD A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(2);
			Fail;
	}
}

class SpecialMedicine : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_SPMD";
		Inventory.PickupMessage "Found a \cdspecial medicinal herb\c-!";
		Tag "Special Medicinal Herb: Recovers 85-105 HP & 25.5-31.5% Stamina";
	}
	
	States
	{
		Spawn:
			SPMD A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(3);
			Fail;
	}
}

class YggdrasilDew : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INVYGDWA";
		Inventory.PickupMessage "Found a vial of \cdyggdrasil dew\c-!";
		Tag "Yggdrasil Dew: Recovers 90-110% HP (you/allies in long range), 22.5-27.5% Mana (you only) & 90-110% Stamina (you only)";
	}
	
	States
	{
		Spawn:
			YGDW A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(4);
			Fail;
	}
}

class PaxaPunch : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_PAXA";
		Inventory.PickupMessage "Found a bottle of \cdpaxa punch\c-!";
		Tag "Paxa Punch: Doubles Damage and Resistance for 60 Seconds [stacks]";
	}
	
	States
	{
		Spawn:
			PAXA A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(5);
			Fail;
	}
}

class LesserVimstone : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_LSVM";
		Inventory.PickupMessage "Found a \cdlesser vimstone\c-!";
		Tag "Lesser Vimstone: Instantly increases tension by 2 tiers up to '100'";
	}

	States
	{
		Spawn:
			LSVM A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(6);
			Fail;
	}
}

class GreaterVimstone : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_GTVM";
		Inventory.PickupMessage "Found a \cdgreater vimstone\c-!";
		Tag "Greater Vimstone: Instantly increases tension by 4 tiers up to '1000'";
	}
	
	States
	{
		Spawn:
			GTVM A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(7);
			Fail;
	}
}

class MercuryBandana : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_MRBN";
		Inventory.PickupMessage "Found a \cdmercury bandana\c-!";
		Tag "Mercury Bandana: Increases movement-speed by 33% and Evasion by ?% for 60 seconds. [stacks]";
	}
	
	States
	{
		Spawn:
			MRBN A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(8);
			Fail;
	}
}

class MagicWater : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_MGWT";
		Inventory.PickupMessage "Found a \cdMagic Water\c-!";
		Tag "Magic Water: Restores (30 + 5%) MP";
	}

	States
	{
		Spawn:
			MGWT A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(9);
			Fail;
	}
}

class SageElixir : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_SGEL";
		Inventory.PickupMessage "Found a \cdSage Elixir\c-!";
		Tag "Sage Elixir: Restores (90 + 15%) MP";
	}

	States
	{
		Spawn:
			SGEL A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(10);
			Fail;
	}
}

class ElfinElixir : AetheriusUsableInventory
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_EFEL";
		Inventory.PickupMessage "Found an \cdElfin Elixir\c-!";
		Tag "Elfin Elixir: Restores 100% MP up to 112.5% MP";
	}

	States
	{
		Spawn:
			EFEL A 1;
			Loop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(11);
			Fail;
	}
}

class MonsterMunchies : AetheriusBaseCustomInventoryZSC
{
	default
	{
		//$Category DV-DS Inventory Items
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_MNMU";
		Inventory.PickupMessage "Found a bag of \cdMonster Munchies\c-!";
		Tag "Monster Munchies: Seeks a random monster and converts them into an ally.";
	}
	
	States
	{
		Spawn:
			MNMU A 1;
			Loop;
		Use:
			TNT1 A 0 
			{
				if (CountInv("AltItemSpellUseMode",AAPTR_PLAYER1))
				{
					A_SpreadAuraFireProjectile("CharmShotNoSeek", 0.0, 0, "", 0, 0, 1, 0);
				}
				else
				{
					A_SpreadAuraFireProjectile("CharmShot", 0.0, 0," ", 0, 0, 1, 0);
				}
			}
			TNT1 A 0
			{
				if (!(CountInv("RandomInfiniteAmmo",AAPTR_PLAYER1) || CountInv("PowerInfiniteAmmo",AAPTR_PLAYER1)))
				{
					A_TakeInventory("MonsterMunchies",1,0,AAPTR_PLAYER1);
				}
				else
				{
					if (random(1,5) <= 4)
					{
						A_TakeInventory("MonsterMunchies",1,0,AAPTR_PLAYER1);
					}
				}
			}
			Fail;
	}
}

// Charming Shot Launched by the Monster Munchies item :V
class CharmShot : CharmMissile
{
	default
	{
		Radius 3;
		Height 4;
		Speed 24;
		FastSpeed 24;
		DamageFunction (0);
		Projectile;
		+RANDOMIZE;
		+FORCEPAIN;
		+DONTREFLECT;
		+FOILINVUL;
		+CAUSEPAIN;
		+SEEKERMISSILE;
		+STEPMISSILE;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+BOUNCEONACTORS;
		+CANBOUNCEWATER;
		BounceType "Hexen";
		BounceFactor 1.003125;
		WallBounceFactor 1.003125;
		RenderStyle "Add";
		Scale 0.75;
		Alpha 1;
		SeeSound "null";
		DeathSound "null";
		DamageType "Charm";
		+NOBOUNCESOUND;
		-EXPLODEONWATER;
		+DONTBOUNCEONSHOOTABLES;
		+SKYEXPLODE;
		+USEBOUNCESTATE;
	}
	
	States
	{
		Spawn:
			MNMU BBBBCCCCDDDDEEEE 1 Bright 
			{
				if (hascharmed > 0) { Thing_Remove(0); }

				A_ScaleVelocity(1.00003125);
				if (user_noseektimer > 0) { A_CharmCheckNoSeekTimer(16,2); }
														 else { A_CharmSeek(2); }

				user_fuse++;
				if (user_fuse >= 700) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Bounce:
			MNMU A 0 Bright { A_CharmSeekerClearBounce(6,1); }
			goto Spawn;
		Death:
			TNT1 A 1 Bright;
			Stop;
	}
}

// Charming Shot Launched by the Monster Munchies item :V
class CharmShotNoSeek : CharmShot
{
	default
	{
		-SEEKERMISSILE;
	}
	
	States
	{
		Spawn:
			MNMU BBBBCCCCDDDDEEEE 1 Bright 
			{
				if (hascharmed > 0) { Thing_Remove(0); }

				A_ScaleVelocity(1.00003125);
				user_fuse++;
				if (user_fuse >= 700) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Bounce:
			MNMU A 0 Bright;
			goto Spawn;
		Death:
			TNT1 A 1 Bright;
			Stop;
	}
}


// Rockbomb Shard
class RockBombShard : AetheriusBaseCustomInventoryZSC
{
	default
	{
		//$Category DV-DS Inventory Items;
		scale 0.334;
		radius 20;
		height 16;
		+FLOATBOB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		+DONTGIB;
		inventory.maxamount 9999;
		inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		inventory.icon "INV_RBSD";
		Inventory.PickupMessage "Found a \cdRockbomb Shard\c-!";
		Tag "Rockbomb Shard: Thrown as a Grenade with a large blast radius. Will not hurt the thrower.";
	}

	States
	{
		Spawn:
			RBSD E 1;
			loop;
		Use:
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_ThrowRockBombShard();
			}
			TNT1 A 0 
			{
				if (!(CountInv("RandomInfiniteAmmo",AAPTR_PLAYER1) || CountInv("PowerInfiniteAmmo",AAPTR_PLAYER1)))
				{
					A_TakeInventory("RockBombShard",1,0,AAPTR_PLAYER1);
				}
				else
				{
					if (random(1,5) <= 1)
					{
						A_TakeInventory("RockBombShard",1,0,AAPTR_PLAYER1);
					}
				}
			}
			fail;
	}
}

class RockBombShardProj : AetheriusProjectileZSC
{
	int user_timers;
	default
	{
		Tag "Rockbomb Shard";
		PROJECTILE;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+EXPLODEONWATER;
		+DONTREFLECT;
		+FORCERADIUSDMG;
		-NOGRAVITY;
		Obituary "%o was charred to ashes by %k's RockBomb Shard.";
		BounceCount 8;
		BounceFactor 0.875;
		WallBounceFactor 0.875;
		BounceSound "pyro/flamepoof";
		WallBounceSound "pyro/flamepoof";
		Gravity 0.75;
		Friction 1.5;
		DamageFunction (finaldamagedealt);
		DamageType "Fire";
		Radius 5;
		Height 5;
		Speed 20;
		scale 0.334;
		Decal "Scorch";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(69,0);
				if (CountInv("AetheriusPowerStrength", AAPTR_PLAYER1)) { A_ScaleVelocity(2.5); A_SetSize(10,10); }
				A_StartSound("RockBomb/Throw",CHAN_WEAPON);
			}
		Idle:
			RBSD AAAAABBBBBCCCCCDDDDD 1 BRIGHT A_SpawnItemEx("RockBombSmoke",random(-2,2),random(-2,2),random(-2,2));
			Loop;
		Death:
			TNT1 A 0 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(69,0); 
				A_Quake(1, 8, 0, 768, "nosound/silent");
				A_Quake(6, 8, 0, 384, "nosound/silent");
				bNOGRAVITY = true;
				A_SetScale(2.0);
				A_StartSound("pyro/blastexplosion",CHAN_WEAPON);
				
				for (user_timers = 0; user_timers < 30; user_timers++)
				{
					A_SpawnItemEx("RockBombSparks",0,0,0,frandom(4,16),0,frandom(4,16),random(1,360));
				}
				for (user_timers = 0; user_timers < 25; user_timers++)
				{
					A_SpawnItemEx("GreySmokeParticleProjector",0,0,0,frandom(4,16),0,frandom(4,16),random(1,360));
				}
				for (user_timers = 0; user_timers < 20; user_timers++)
				{
					A_SpawnItemEx("BlackSmokeParticle",0,0,0,frandom(4,16),0,frandom(4,16),random(1,360));
				}
				bNOGRAVITY = true;
				A_ChangeVelocity(0,0,4,3);
			}
			RBAL D 5 BRIGHT 
			{
				A_Explode(A_GetPlayerAttackDamage(70)*frandom(1,2),256,0,0,192);
				A_AlertMonsters();
			}
			RBAL DDDDD 1 BRIGHT 
			{
				A_SpawnItemEx("RockBombExplosionAfterEffectD",0,0,0,frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_Explode((A_GetPlayerAttackDamage(70)/2)*frandom(1,2),256,0,0,176);
				A_AlertMonsters();
			}
			RBAL EEEE 1 BRIGHT
			{
				A_SpawnItemEx("RockBombExplosionAfterEffectE",0,0,0,frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_Explode((A_GetPlayerAttackDamage(70)/4)*frandom(1,2),256,0,0,160);
				A_AlertMonsters();
			}
			RBAL FFF 1 BRIGHT
			{
				A_SpawnItemEx("RockBombExplosionAfterEffectF",0,0,0,frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_Explode((A_GetPlayerAttackDamage(70)/8)*frandom(1,2),256,0,0,144);
				A_AlertMonsters();
			}
			RBAL GG 1 BRIGHT
			{
				A_SpawnItemEx("RockBombExplosionAfterEffectG",0,0,0,frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_Explode((A_GetPlayerAttackDamage(70)/16)*frandom(1,2),256,0,0,128);
				A_AlertMonsters();
			}
			RBAL HH 1 BRIGHT
			{
				A_SpawnItemEx("RockBombExplosionAfterEffectH",0,0,0,frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_Explode((A_GetPlayerAttackDamage(70)/32)*frandom(1,2),256,0,0,112);
				A_AlertMonsters();
			}
			RBAL I 1 BRIGHT
			{
				A_SpawnItemEx("RockBombExplosionAfterEffectI",0,0,0,frandom(-1,1),frandom(-1,1),frandom(-1,1));
				A_Explode((A_GetPlayerAttackDamage(70)/64)*frandom(1,2),256,0,0,96);
				A_AlertMonsters();
			}
			Stop;
	}
}
class RockBombShardProjT : RockBombShardProj
{
	default
	{
		-NOTELEPORT;
	}
}

class MiraclePotion : AetheriusUsableInventory
{
	default
	{
		Radius 20;
		Height 16;
		Scale 0.334;
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.INVBAR;
		+INVENTORY.HUBPOWER;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 9999;
		Inventory.InterHubAmount 9999;
		Inventory.PickupSound "inv_grab";
		Inventory.icon "INV_MRPT";
		Inventory.PickupMessage "Found a \cdMiracle Potion\c-!";
		Tag "Miracle Potion: Restores 100% HP, 100% Mana, reduces Hellcore Heat by ~125%";
	}
	
	States
	{
		Spawn:
			MRPT A -1;
			Stop;
		Use:
			TNT1 A 0 A_UseCustomInventoryItem(12);
			fail;
	}
}
// Heal Projectiles [basically a projectile form of the Healing spells to use on other creatures]
class HealGlitter1 : AetheriusBaseTeleGlitter
{
	default
	{
		Scale 0.5;
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
			NULL A 2;
		Travel:
			HLGT ABCDEABCDEABCDE 2 Bright { A_FadeOut(0.0667); A_SetScale(scale.x-0.0667,scale.y-0.0667); }
			Stop;
	}
}
class HealGlitter2 : HealGlitter1
{
	default
	{
		Scale 0.75;
	}
}
class HealGlitter3 : HealGlitter1
{
	default
	{
		Scale 1;
	}
}
class HealGlitter4 : HealGlitter1
{
	default
	{
		Scale 1.25;
	}
}

class Heal1Shot : HealMissile
{
	default
	{
		Radius 4;
		Height 4;
		Speed 60;
		FastSpeed 60;
		DamageFunction (0);
		Projectile;
		+RANDOMIZE;
		+PAINLESS;
		+DONTREFLECT;
		+FOILINVUL;
		//+CAUSEPAIN;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+CANBOUNCEWATER;
		+SEEKERMISSILE;
		BounceType "Hexen";
		BounceFactor 1.00125;
		WallBounceFactor 1.00125;
		RenderStyle "Add";
		Scale 0.5;
		Alpha 0.75;
		SeeSound "null";
		DeathSound "null";
		DamageType "Heal1";
	}
	
	States
	{
		Spawn:
			HLS5 AAABBBCCCDDD 1 Bright
			{
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_ScaleVelocity(1.0025);
				A_HealingSeekerMissile(90,90,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,256,64,0); 
				user_fuse++;
				if (user_fuse >= 350) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
			}
			Stop;
	}
}

class Heal1Spark : AetheriusBaseZSC
{
	default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Scale 0.5;
		Alpha 0.75;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_Warp(AAPTR_PLAYER1,0,0,A_GetPlayerHeight(2),0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			Stop;
	}
}

class Heal2Shot : Heal1Shot
{
	default
	{
		Scale 0.75;
		Alpha 0.875;
		DamageType "Heal2";
	}
	
	States
	{
		Spawn:
			HLS5 AABBCCDD 1 Bright
			{
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_ScaleVelocity(1.0025);
				A_HealingSeekerMissile(90,90,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,256,64,0); 
				user_fuse++;
				if (user_fuse >= 350) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
			}
			Stop;
	}
}

class Heal2Spark : AetheriusBaseZSC
{
	default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Scale 0.75;
		Alpha 0.875;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_Warp(AAPTR_PLAYER1,0,0,A_GetPlayerHeight(2),0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			Stop;
	}
}

class Heal3Shot : Heal1Shot
{
	default
	{
		Scale 1;
		Alpha 1;
		DamageType "Heal3";
	}
	
	States
	{
		Spawn:
			HLS5 ABCD 1 Bright
			{
				//A_SeekerMissile(90,90,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,256,32);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_ScaleVelocity(1.0025);
				A_HealingSeekerMissile(90,90,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,256,64,1); 
				user_fuse++;
				if (user_fuse >= 350) { return resolvestate("Death"); }
				return resolvestate(null);
			}
			Loop;
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
			}
			Stop;
	}
}

class Heal3Spark : AetheriusBaseZSC
{
	default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Scale 1;
		Alpha 1;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_Warp(AAPTR_PLAYER1,0,0,A_GetPlayerHeight(2),0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			Stop;
	}
}

class Heal4Shot : Heal1Shot
{
	default
	{
		Scale 1.25;
		Alpha 1;
		DamageType "Heal4";
	}
	
	States
	{
		Spawn:
			HLS5 ABCD 1 Bright
			{
				//A_SeekerMissile(90,90,SMF_LOOK|SMF_PRECISE|SMF_CURSPEED,256,32);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
			}
			Loop;
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
			}
			Stop;
	}
}

class Heal4Spark : AetheriusBaseZSC
{
	default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Scale 1.25;
		Alpha 1;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter4", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_Warp(AAPTR_PLAYER1,0,0,A_GetPlayerHeight(2),0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			Stop;
	}
}
// Coin Bag
class CoinBag : Coin
{
	default
	{
		Scale 0.1875;
		+DONTGIB;
		Inventory.Amount 250;
		Tag "250 Gold [Bag]";
		Inventory.PickupMessage "You picked up a bag of \cf250 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			GLBG C -1;
			Stop;
	}
}

class CoinBagBig : Coin
{
	default
	{
		Scale 0.2625;
		+DONTGIB;
		Inventory.Amount 500;
		Tag "500 Gold [Bag]";
		Inventory.PickupMessage "You picked up a bag of \cf500 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			GLBG A -1;
			Stop;
	}
}


class CoinBagHuge : Coin
{
	default
	{
		Scale 0.375;
		+DONTGIB;
		Inventory.Amount 1000;
		Tag "1000 Gold [Bag]";
		Inventory.PickupMessage "You picked up a bag of \cf1000 gold\c-.";
		Inventory.PickupSound "Grabbed/Coins";
	}
	
	States
	{
		Spawn:
			GLBG B -1;
			Stop;
	}
}
class ChainsawChecker : AetheriusCustomInventory replaces Chainsaw
{
	default
	{
		//$Sprite "CSAWA0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(160,1);
			TNT1 A 0 A_SigilPieceSpawn(160,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (A_SawCheckSceptre() >= 1) 
					{
						A_SpawnItemEx("SceptreOfEmpyrea",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy();
					}

					if (CountInv("PoisonNeedle",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,8) <= 1) { A_SpawnItemEx("PoisonNeedle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
						else { A_SpawnItemEx("MiniBerserk",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
					}
					else
					{
						if (random(1,32) <= 1) { A_SpawnItemEx("PoisonNeedle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
						else { A_SpawnItemEx("MiniBerserk",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
					}
					A_Destroy();
				}
			}
		Idle:
			TNT1 A 0 
			{
				if (A_CheckChainsaw() == 1) { return resolvestate("HaveSingle"); }
				if (A_CheckChainsaw() == 2) { return resolvestate("HaveDouble"); }
				return resolvestate(null); 
			}
			goto HaveNone;
		HaveNone:
			TNT1 A 0 
			{
				if (random(1,256 <= 32))
				{
					A_SpawnItemEx("DoubleBladedChainsaw",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				else
				{
					A_SpawnItemEx("Chainsaw2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				A_Destroy();
			}
			Loop;
		HaveSingle:
			TNT1 A 0 
			{
				if (random(1,256 <= 32))
				{
					A_SpawnItemEx("DoubleBladedChainsaw",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				else
				{
					A_SpawnItemEx("Berserk2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				A_Destroy();
			}
			Loop;
		HaveDouble:
			TNT1 A 0 
			{
				A_SpawnItemEx("Berserk2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy();
			}
			Loop;
	}
}

class DualPistolsChecker : AetheriusCustomInventory
{
	default
	{
		//$Sprite "PISTC0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(256,1);
			TNT1 A 0 A_SigilPieceSpawn(256,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,96,0);
					A_SpawnItemEx("HealthBonus",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,254,0);
					A_Destroy();
				}
			}
		Idle:
			TNT1 A 0
			{
				A_SpawnItemEx("DualPistols",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy();
			}
			Stop;
	}
}

class PistolChecker : AetheriusCustomInventory replaces Pistol
{
	default
	{
		//$Sprite "PISTC0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(256,1);
			TNT1 A 0 A_SigilPieceSpawn(256,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",12,0,0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,96,0);
					A_SpawnItemEx("HealthBonus",-12,0,0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254,0);
					if (random(1,256) == 1 && dvds_florawandscandrop) 
					{ 
						A_SpawnItemEx("SapphireWandNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0); 
					}
				}
				A_SpawnItemEx("Pistol2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy();
			}
			Loop;
	}
}

class ShotgunChecker : AetheriusCustomInventory replaces Shotgun
{
	default
	{
		//$Sprite "SHOTA0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(128,1);
			TNT1 A 0 A_SigilPieceSpawn(128,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,255);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,255);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,254); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("Shotgun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			Loop;
	}
}

class SuperShotgunChecker : AetheriusCustomInventory replaces SuperShotgun
{
	default
	{
		//$Sprite "SGN2A0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(96,1);
			TNT1 A 0 A_SigilPieceSpawn(96,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,255);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,253); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("SuperShotgun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			Loop;
	}
}

class ChaingunChecker : AetheriusCustomInventory replaces Chaingun
{
	default
	{
		//$Sprite "MGUNA0"
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(112,1);
			TNT1 A 0 A_SigilPieceSpawn(112,1);
			TNT1 A 0
			{
				A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,253);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,253);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,251); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy();
				}
				else
				{
					if (bDROPPED) 
					{ 
						A_SpawnItemEx("Chaingun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy();
					}
					else
					{
						A_UnmakerSpawn(96,1);
						A_SigilPieceSpawn(96,1);
						if (random(1,256) <= 32)
						{
							A_SpawnItemEx("Minigun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy();
						}
						else
						{
							A_SpawnItemEx("Chaingun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy();
						}
					}
				}
			}
			Loop;
	}
}

class MinigunChecker : AetheriusCustomInventory
{
	default
	{
		//$Sprite "MNGNA0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(96,1);
			TNT1 A 0 A_SigilPieceSpawn(96,1);
			TNT1 A 0
			{
				A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,253);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,250);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,251); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,0,0); }
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("Minigun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			Loop;
	}
}

class RocketLauncherChecker : AetheriusCustomInventory replaces RocketLauncher
{
	default
	{
		//$Sprite "LAUNA0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(96,1);
			TNT1 A 0 A_SigilPieceSpawn(96,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,250);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,248); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,0,0); }
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("RocketLauncher2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			Loop;
	}
}

class RailgunChecker : AetheriusCustomInventory
{
	default
	{
		//$Sprite "RAILA0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(48,1);
			TNT1 A 0 A_SigilPieceSpawn(48,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,250);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,248); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,0,0); }
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("Railgun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			Loop;
	}
}

class PlasmaRifleChecker : AetheriusCustomInventory replaces PlasmaRifle
{
	default
	{
		//$Sprite "PLASA0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(80,1);
			TNT1 A 0 A_SigilPieceSpawn(80,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,244);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,244); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy();
				}
				else
				{
					if (bDROPPED) 
					{
						if (random(1,256) <= 2)
						{
							A_UnmakerSpawn(48,1);
							A_SigilPieceSpawn(48,1);
							if (random(1,2) == 1) 
							{
								A_SpawnItemEx("Repeater2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							else
							{
								A_SpawnItemEx("Karasawa2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							A_Destroy();
						}
						else
						{
							A_SpawnItemEx("PlasmaRifle2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy();
						}
					}
					else
					{
						if (random(1,256) <= 32)
						{
							A_UnmakerSpawn(48,1);
							A_SigilPieceSpawn(48,1);
							if (random(1,2) == 1) 
							{
								A_SpawnItemEx("Repeater2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							else
							{
								A_SpawnItemEx("Karasawa2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							A_Destroy();
						}
						else
						{
							A_SpawnItemEx("PlasmaRifle2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy();
						}
					}
				}
			}
			Loop;
	}
}

class KaraSawaChecker : AetheriusCustomInventory
{
	default
	{
		//$Sprite "KSWPA0";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(48,1);
			TNT1 A 0 A_SigilPieceSpawn(48,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,236);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,244); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("KaraSawa2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			Loop;
	}
}

class BFG9000Checker : AetheriusCustomInventory replaces BFG9000
{
	default
	{
		//$Sprite "BFUGA0"
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(8,1);
			TNT1 A 0 A_SigilPieceSpawn(8,1);
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					if (bDROPPED) { }
					else
					{
						A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,236);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,236);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,224);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,224); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy();
				}
				else
				{
					A_SpawnItemEx("BFG90002",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			Loop;
	}
}

class ClipNew : Clip // replaces Clip
{
	default
	{
		Inventory.Pickupsound "getbulletclip";
		Inventory.PickupMessage "Picked up \cua clip of bullets\c-!";
		Inventory.Amount 10;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
					}
					else
					{
						if (random(1,256) <= 64)
						{
							A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
						}
						else
						{
							if (bDROPPED) { }
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CLIP A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ClipSpawner : AetheriusBaseZSC replaces Clip
{
	default
	{
		//$Sprite "CLIPA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ClipNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ClipNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ClipNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ClipNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ClipBoxNew : ClipBox // replaces ClipBox
{
	default
	{
		Inventory.Pickupsound "getbulletbox";
		Inventory.PickupMessage "Picked up \cua box of bullets\c-!";
		Inventory.Amount 50;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
					}
					else
					{
						if (random(1,256) <= 64)
						{
							A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
							A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
						}
						else
						{
							if (bDROPPED) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			AMMO A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ClipBoxSpawner : AetheriusBaseZSC replaces ClipBox
{
	default
	{
		//$Sprite "AMMOA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ClipBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ClipBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ClipBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ClipBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ShellNew : Shell // replaces Shell
{
	default
	{
		Inventory.Pickupsound "getfourshells";
		Inventory.PickupMessage "Picked up \cusome shotgun shells\c-!";
		Inventory.Amount 4;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 6)
					{
						if (random(1,256) <= 6)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (bDROPPED) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			SHEL A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ShellSpawner : AetheriusBaseZSC replaces Shell
{
	default
	{
		//$Sprite "SHELA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ShellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ShellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ShellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ShellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class ShellBoxNew : ShellBox // replaces ShellBox
{
	default
	{
		Inventory.Pickupsound "getshellbox";
		Inventory.PickupMessage "Picked up a \cubox of shotgun shells\c-!";
		Inventory.Amount 20;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 12)
					{
						if (random(1,256) <= 12)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (bDROPPED) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			SBOX A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class ShellBoxSpawner : AetheriusBaseZSC replaces ShellBox
{
	default
	{
		//$Sprite "SBOXA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ShellBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ShellBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ShellBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ShellBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class RocketAmmoNew : RocketAmmo // replaces RocketAmmo
{
	default
	{
		Inventory.Pickupsound "getsinglerocket";
		Inventory.PickupMessage "Picked up \cua single rocket\c-!";
		Inventory.Amount 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 6)
					{
						if (random(1,256) <= 6)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 108) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 36) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 12) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 72) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 24) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 8) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (bDROPPED) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			ROCK A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class RocketSpawner : AetheriusBaseZSC replaces RocketAmmo
{
	default
	{
		//$Sprite "ROCKA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("RocketAmmoNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("RocketAmmoNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("RocketAmmoNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("RocketAmmoNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
		}
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class RocketBoxNew : RocketBox // replaces RocketBox
{
	default
	{
		Inventory.Pickupsound "getrocketbox";
		Inventory.PickupMessage "Picked up \cua box of rockets\c-!";
		Inventory.Amount 5;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 12)
					{
						if (random(1,256) <= 12)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 43) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 14) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 126) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 42) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 14) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 112) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 37) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 12) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 72) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 24) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 8) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 21) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 7) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 63) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 21) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 7) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 56) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 19) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 6) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 36) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 12) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 4) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (bDROPPED) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			BROK A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class RocketBoxSpawner : AetheriusBaseZSC replaces RocketBox
{
	default
	{
		//$Sprite "BROKA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("RocketBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("RocketBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("RocketBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("RocketBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class CellNew : Cell // replaces Cell
{
	default
	{
		Inventory.Pickupsound "getsmallcells";
		Inventory.PickupMessage "Picked up \cua small energy cell\c-!";
		Inventory.Amount 20;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 6)
					{
						if (random(1,256) <= 6)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (bDROPPED) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CELL A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class CellSpawner : AetheriusBaseZSC replaces Cell
{
	default
	{
		//$Sprite "CELLA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("CellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("CellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("CellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("CellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0;
			Stop;
	}
}

class CellPackNew : CellPack // replaces CellPack
{
	default
	{
		Inventory.Pickupsound "getcellpack";
		Inventory.PickupMessage "Picked up \cua large energy cell\c-!";
		Inventory.Amount 100;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 12)
					{
						if (random(1,256) <= 12)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (bDROPPED) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return resolvestate("KillObject");
				}
				return resolvestate(null);
			}
		Idle:
			CELP A -1;
			Stop;
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			Stop;
	}
}

class CellPackSpawner : AetheriusBaseZSC replaces CellPack
{
	default
	{
		//$Sprite "CELPA0"
		Radius 16;
		Height 16;
		Scale 1;
		RenderStyle "None";
		Alpha 0;
		+NOTIMEFREEZE;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("CellPackNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("CellPackNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("CellPackNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("CellPackNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0;
			Stop;
	}
}
