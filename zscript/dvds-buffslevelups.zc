// Used for a base item for all the items that don't do anything themselves but are used for/as detecting flags.
class PlaceholderItem : AetheriusCustomInventory
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 1;
	}
	
	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class PlaceholderItemDepletable : PlaceholderItem
{
	default
	{
		-INVENTORY.KEEPDEPLETED 
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class PlaceholderItemUndrop : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNCLEARABLE
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.HUBPOWER
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class PlaceholderItemMax : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}


class HigherLearningGained : PlaceholderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2; } }
class HigherLearning2Gained : PlaceholderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2; } }
class PerkUseSound : PlaceholderItem { }
class HoldingZoom : PlaceholderItem { }

class IsSkill1 : PlaceholderItem { } // This works as an inventory flag to indicate the exact difficulty level
class IsSkill2 : PlaceholderItem { } // This works as an inventory flag to indicate the exact difficulty level
class IsSkill3 : PlaceholderItem { } // This works as an inventory flag to indicate the exact difficulty level
class IsSkill4 : PlaceholderItem { } // This works as an inventory flag to indicate the exact difficulty level
class IsSkill5 : PlaceholderItem { } // This works as an inventory flag to indicate the exact difficulty level
class IsSkill6 : PlaceholderItem { } // This works as an inventory flag to indicate the exact difficulty level
class IsEasySkill : PlaceholderItem { } // This works as an inventory flag to indicate "Easy" difficulty levels [1 & 2]
class IsHardSkill : PlaceholderItem { } // This works as an inventory flag to indicate "Hard" difficulty levels [4 & 5]

class FloraInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use
class IlluciaInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use
class DeggarisInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use
class AilishInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use
class PetraInPlay : PlaceholderItem { } // This works as an inventory flag to indicate the character in use


class LevelUpAttack : PowerDamage
{
	default
	{
		Powerup.Duration 2147483646;
		inventory.icon "TNT1A0";
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}
}

class LevelUpDefense : PowerProtection
{
	default
	{
		Powerup.Duration 2147483646;
		inventory.icon "TNT1A0";
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}
}
class BasePercentSpeedBonus : PowerSpeed { default { inventory.icon ""; Powerup.Duration 2147483646; +POWERSPEED.NOTRAIL; } }

class SpecterDefense : LevelUpDefense { default { Inventory.MaxAmount 1; damagefactor "normal", 0.0001; } }
class SauravatarGauntResist : LevelUpDefense { default { Inventory.MaxAmount 1; damagefactor "Gauntlets", 0.1; } }

class CharmMonsterAttack : LevelUpAttack { default { Inventory.MaxAmount 1; -Inventory.UNDROPPABLE; damagefactor "normal", 3.0; } }
class CharmMonsterDefense : LevelUpDefense { default { Inventory.MaxAmount 1; -Inventory.UNDROPPABLE; damagefactor "normal", 0.3333; radiusdamagefactor 0.3333; } }
class CharmMonsterSpeed : BasePercentSpeedBonus { default { Inventory.MaxAmount 1; -Inventory.UNDROPPABLE; Speed 1.5; } }

// Tension Trails
class TensionTrail : PowerSpeed { default { Speed 1.0; inventory.icon ""; Powerup.Duration 2147483646; } } // Used to create trails behind the player for higher tension levels

// Dash Trails
class PlayerDashing : PowerSpeed // Used to create trails behind the player for dashing
{
	default
	{
		Speed 1.0;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}

class PlayerSceptreDashing : PowerSpeed // Used to create trails behind the player for dashing
{
	default
	{
		Speed 1.0;
		inventory.icon "";
		Powerup.Duration 2147483646;
	}
}


class MinigunSlowdownWhenFiring : PowerSpeed { default { Speed 1.0; inventory.icon ""; Powerup.Duration 2147483646; -Inventory.NOTELEPORTFREEZE +POWERSPEED.NOTRAIL } }

// Martial Arts Mastery
class MartArtsMaster : PlaceholderItem { default { Inventory.MaxAmount 5; } }

// Buff-Based Items
class SpreaderAura1 : PlaceholderItem { } // Item that Represents the Spreader Aura level 1
class SpreaderAura2 : PlaceholderItem { } // Item that Represents the Spreader Aura level 2

// Uppercut Attack
class UppercutATKBonus : PlaceholderItem { }
class UppercutDEFBonus : PlaceholderItem { }
class UppercutCritBonus : PlaceholderItem { }

// Kick Attack
class KickAttackDEFLvl : PlaceholderItem { }
class KickCritBonus : PlaceholderItem { default { Inventory.MaxAmount 2; } }

class UsingMeleeAttack : PlaceholderItem { }

class RandomInfiniteAmmo : PowerInfiniteAmmo { default { inventory.icon ""; Powerup.Duration 2147483646; } }

class RingGhost : PowerGhost { default { +CANTSEEK inventory.icon ""; Powerup.Strength 87.5; Powerup.Duration 2147483646; } }
class RingShadow : PowerShadow { default { +CANTSEEK inventory.icon ""; Powerup.Strength 87.5; Powerup.Mode "Fuzzy"; Powerup.Duration 2147483646; } }
class RingFullMap : MapRevealer { }
class RingScanner : PowerScanner { default { inventory.icon ""; Powerup.Duration 2147483646; } }

class FlightSpell : PowerFlight { default { inventory.icon ""; Powerup.Duration 2147483646; } }
class NightVisionSpell : PowerLightAmp { default { inventory.icon ""; Powerup.Duration 2147483646; } }
class InvisiblitySpell : PowerInvisibility { default { +GHOST; inventory.icon ""; Powerup.Duration 2147483646; } }
class InvulnerabilitySpell : PowerInvulnerable { default { inventory.icon ""; Powerup.Duration 2147483646; Powerup.Color "3F00DF", 0.333; } }

class SpeedBonus2Percent : BasePercentSpeedBonus { default { Speed 1.02; } }
class SpeedBonus4Percent : BasePercentSpeedBonus { default { Speed 1.04; } }
class SpeedBonus6Percent : BasePercentSpeedBonus { default { Speed 1.06; } }
class SpeedBonus8Percent : BasePercentSpeedBonus { default { Speed 1.08; } }
class SpeedBonus10Percent : BasePercentSpeedBonus { default { Speed 1.10; } }
class SpeedBonus12Percent : BasePercentSpeedBonus { default { Speed 1.12; } }
class SpeedBonus14Percent : BasePercentSpeedBonus { default { Speed 1.14; } }
class SpeedBonus16Percent : BasePercentSpeedBonus { default { Speed 1.16; } }
class SpeedBonus18Percent : BasePercentSpeedBonus { default { Speed 1.18; } }
class SpeedBonus20Percent : BasePercentSpeedBonus { default { Speed 1.20; } }
class SpeedBonus22Percent : BasePercentSpeedBonus { default { Speed 1.22; } }
class SpeedBonus24Percent : BasePercentSpeedBonus { default { Speed 1.24; } }
class SpeedBonus26Percent : BasePercentSpeedBonus { default { Speed 1.26; } }
class SpeedBonus28Percent : BasePercentSpeedBonus { default { Speed 1.28; } }
class SpeedBonus30Percent : BasePercentSpeedBonus { default { Speed 1.30; } }
//
class SpeedBonus75Percent : BasePercentSpeedBonus { default { Speed 1.75; } }
//
class HubbleBubbleSpeedPenalty1 : BasePercentSpeedBonus { default { Speed 0.625; Powerup.Duration 66; Inventory.MaxAmount 1; } }
class HubbleBubbleSpeedPenalty1b : HubbleBubbleSpeedPenalty1 { }
class HubbleBubbleSpeedPenalty2 : HubbleBubbleSpeedPenalty1 { }
class HubbleBubbleSpeedPenalty2b : HubbleBubbleSpeedPenalty1 { }
class HubbleBubbleSpeedPenalty3 : HubbleBubbleSpeedPenalty1 { }
class HubbleBubbleSpeedPenalty3b : HubbleBubbleSpeedPenalty1 { }

class PoisonCloudSpeedPenalty1 : BasePercentSpeedBonus { default { Speed 0.75; Powerup.Duration 49; Inventory.MaxAmount 1; } }
class PoisonCloudSpeedPenalty1b : PoisonCloudSpeedPenalty1 { }
class PoisonCloudSpeedPenalty2 : PoisonCloudSpeedPenalty1 { }
class PoisonCloudSpeedPenalty2b : PoisonCloudSpeedPenalty1 { }
class PoisonCloudSpeedPenalty3 : PoisonCloudSpeedPenalty1 { }
class PoisonCloudSpeedPenalty3b : PoisonCloudSpeedPenalty1 { }
class PoisonCloudATKPenalty1 : PowerDamage { default { damagefactor "normal", 0.9; inventory.icon ""; Powerup.Duration 32; Inventory.MaxAmount 1; } }
class PoisonCloudATKPenalty1b : PoisonCloudATKPenalty1 { }
class PoisonCloudATKPenalty2 : PoisonCloudATKPenalty1 { }
class PoisonCloudATKPenalty2b : PoisonCloudATKPenalty1 { }
class PoisonCloudATKPenalty3 : PoisonCloudATKPenalty1 { }
class PoisonCloudATKPenalty3b : PoisonCloudATKPenalty1 { }
class PoisonCloudDEFPenalty1 : PowerProtection { default { damagefactor "normal", 1.11; inventory.icon ""; Powerup.Duration 32; Inventory.MaxAmount 1; } }
class PoisonCloudDEFPenalty1b : PoisonCloudDEFPenalty1 { }
class PoisonCloudDEFPenalty2 : PoisonCloudDEFPenalty1 { }
class PoisonCloudDEFPenalty2b : PoisonCloudDEFPenalty1 { }
class PoisonCloudDEFPenalty3 : PoisonCloudDEFPenalty1 { }
class PoisonCloudDEFPenalty3b : PoisonCloudDEFPenalty1 { }

class EnemyShadow : PowerShadow { default { inventory.icon ""; Powerup.Strength 50; Powerup.Mode "Translucent"; Powerup.Duration 2147483646; } }
class EnemyShadowLight : PowerShadow { default { inventory.icon ""; Powerup.Strength 25; Powerup.Mode "Translucent"; Powerup.Duration 2147483646; } }

class DMGBonus30Percent : PowerDamage { default { damagefactor "normal", 1.3; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGBonus75Percent : PowerDamage { default { damagefactor "normal", 1.75; inventory.icon ""; Powerup.Duration 2147483646; } }

class DMGWeakness100Percent : PowerProtection { default { damagefactor "normal", 2.00; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGWeakness75Percent : PowerProtection { default { damagefactor "normal", 1.75; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGWeakness50Percent : PowerProtection { default { damagefactor "normal", 1.50; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGWeakness20Percent : PowerProtection { default { damagefactor "normal", 1.20; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGReduction25Percent : PowerProtection { default { damagefactor "normal", 0.75; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGReduction30Percent : PowerProtection { default { damagefactor "normal", 0.70; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGReduction62_5Percent : PowerProtection { default { damagefactor "normal", 0.375; inventory.icon ""; Powerup.Duration 2147483646; } }
class DMGReduction75Percent : PowerProtection { default { damagefactor "normal", 0.25; inventory.icon ""; Powerup.Duration 2147483646; } }

class BaseStaminaUpgrade : PowerProtection { default { inventory.icon ""; Powerup.Duration 2147483646; } }
class StaminaUpgrade0 : BaseStaminaUpgrade { default { damagefactor "normal", 1; damagefactor "Magic", 1; } }
class StaminaUpgrade1 : BaseStaminaUpgrade { default { damagefactor "normal", 0.995; damagefactor "Magic", 0.995; } }
class StaminaUpgrade2 : BaseStaminaUpgrade { default { damagefactor "normal", 0.99; damagefactor "Magic", 0.99; } }
class StaminaUpgrade3 : BaseStaminaUpgrade { default { damagefactor "normal", 0.985; damagefactor "Magic", 0.985; } }
class StaminaUpgrade4 : BaseStaminaUpgrade { default { damagefactor "normal", 0.98; damagefactor "Magic", 0.98; } }
class StaminaUpgrade5 : BaseStaminaUpgrade { default { damagefactor "normal", 0.975; damagefactor "Magic", 0.975; } }
class StaminaUpgrade6 : BaseStaminaUpgrade { default { damagefactor "normal", 0.97; damagefactor "Magic", 0.97; } }
class StaminaUpgrade7 : BaseStaminaUpgrade { default { damagefactor "normal", 0.965; damagefactor "Magic", 0.965; } }
class StaminaUpgrade8 : BaseStaminaUpgrade { default { damagefactor "normal", 0.96; damagefactor "Magic", 0.96; } }
class StaminaUpgrade9 : BaseStaminaUpgrade { default { damagefactor "normal", 0.955; damagefactor "Magic", 0.955; } }
class StaminaUpgrade10 : BaseStaminaUpgrade { default { damagefactor "normal", 0.95; damagefactor "Magic", 0.95; } }

class BaseAccuracyUpgrade : PowerDamage { default { inventory.icon ""; Powerup.Duration 2147483646; } }
class AccuracyUpgrade0 : BaseAccuracyUpgrade { default { damagefactor "normal", 1; damagefactor "Magic", 1; } }
class AccuracyUpgrade1 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.0075; damagefactor "Magic", 1.0075; } }
class AccuracyUpgrade2 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.015; damagefactor "Magic", 1.015; } }
class AccuracyUpgrade3 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.0225; damagefactor "Magic", 1.0225; } }
class AccuracyUpgrade4 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.03; damagefactor "Magic", 1.03; } }
class AccuracyUpgrade5 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.0375; damagefactor "Magic", 1.0375; } }
class AccuracyUpgrade6 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.045; damagefactor "Magic", 1.045; } }
class AccuracyUpgrade7 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.0525; damagefactor "Magic", 1.0525; } }
class AccuracyUpgrade8 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.06; damagefactor "Magic", 1.065; } }
class AccuracyUpgrade9 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.0675; damagefactor "Magic", 1.0675; } }
class AccuracyUpgrade10 : BaseAccuracyUpgrade { default { damagefactor "normal", 1.075; damagefactor "Magic", 1.075; } }

class DivineAvatarHighJump : PowerHighJump { default { Powerup.Strength 2; Powerup.Duration 2147483646; inventory.icon ""; } }
class DivineAvatarDoubleFiringSpeed : PowerDoubleFiringSpeed { default { Powerup.Duration 2147483646; inventory.icon ""; } }

class PowerDoubleDamage : PowerDamage { default { damagefactor "normal", 2; inventory.icon ""; } }
class PowerHalfDamage : PowerProtection { default { damagefactor "normal", 0.5; inventory.icon ""; } }

class PermenantArmor : PowerProtection 
{ 
	default
	{
		Powerup.Duration 2147483646; 
		inventory.icon ""; 
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}
}

class AnubisCufflinksFear : PowerFrightener { default { Powerup.Duration 2147483646; inventory.icon "TNT1A0"; } }

// Emulates "Evading" a dead on attack [via both Agility stat & the Cloak of Evasion]
class EvadeAnAttack : PowerProtection { default { damagefactor "normal", 0; radiusdamagefactor 0; inventory.icon ""; Powerup.Duration 2147483646; } }
class IsInvulnerable : PowerProtection { default { damagefactor "normal", 0; radiusdamagefactor 0; inventory.icon ""; Powerup.Duration 2147483646; } }
class MenuInvulnerability : PowerProtection { default { damagefactor "normal", 0; radiusdamagefactor 0; inventory.icon ""; Powerup.Duration 2147483646; } }

//********************************
//***END OF DQ-Style Seed Buffs***
//********************************

// Sceptre-Related Buffs
class SwingDefense0 : PlaceHolderItem { }
class SwingDefense1 : PlaceHolderItem { }
class SwingDefense2 : PlaceHolderItem { }
class SwingDefense3 : PlaceHolderItem { }
class ShieldDefense : PlaceHolderItem { }
class ShieldDefense2 : PlaceHolderItem { }
class ShieldDefense3 : PlaceHolderItem { }
class SceptreAltFire : PlaceHolderItem { }
class SceptreSpinDefense1 : PlaceHolderItem { }
class SceptreSpinDefense2 : PlaceHolderItem { }
class SceptreSpinDefense3 : PlaceHolderItem { }
class SceptreSpinDefense4 : PlaceHolderItem { }

// Others
class IronFeetNoPoison : PowerProtection { default { damagefactor "PoisonElemental", 0.0; damagefactor "Poison", 0.0; inventory.icon ""; Powerup.Duration 2147483646; } }
class MaskNoFire : PowerProtection { default { damagefactor "Fire", 0.125; damagefactor "Magma", 0.125; inventory.icon ""; Powerup.Duration 2147483646; } }

// Sigil-related
class SigilPhase1 : PowerProtection { default { damagefactor "Sigil", 0.96; damagefactor "SpectralLow", 0.96; } }
class SigilPhase2 : PowerProtection { default { damagefactor "Sigil", 0.92; damagefactor "SpectralLow", 0.92; } }
class SigilPhase3 : PowerProtection { default { damagefactor "Sigil", 0.88; damagefactor "SpectralLow", 0.88; } }
class SigilPhase4 : PowerProtection { default { damagefactor "Sigil", 0.84; damagefactor "SpectralLow", 0.84; } }
class SigilComplete : PowerProtection { default { damagefactor "Sigil", 0.80; damagefactor "SpectralLow", 0.80; } }

class SilentHeal : PlaceholderItem { } // 
class Dedz : PlaceholderItem { } // 
class WandGuard : PlaceholderItem { } // 
class Summon : PlaceholderItem { default { Inventory.MaxAmount 5; } } // 
class Summon2 : PlaceholderItem { default { Inventory.MaxAmount 5; } } // 
class Summon3 : PlaceholderItem { default { Inventory.MaxAmount 5; } } // 
class Summon4 : PlaceholderItem { default { Inventory.MaxAmount 5; } } // 
class Summon5 : PlaceholderItem { default { Inventory.MaxAmount 5; } } // 
class AltItemSpellUseMode : PlaceholderItem { }

class UsingSceptreAltFire : PlaceholderItem { }

class FloraUsingHellcoreWeapon : PlaceholderItem { } // Checks to see if your current selected weapon is "Hellcore Class" [for HUD displays]
class FloraHellcoreNotOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of less than 25%, give this to her inventory [for HUD displays]
class FloraHellcore25PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 24%, give this to her inventory [for HUD displays]
class FloraHellcore50PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 49%, give this to her inventory [for HUD displays]
class FloraHellcore75PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 74%, give this to her inventory [for HUD displays]
class FloraHellcore100PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 99%, give this to her inventory [for HUD displays]
class FloraHellcore250PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 249%, give this to her inventory [for HUD displays]
class FloraHellcore500PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 499%, give this to her inventory [for HUD displays]
class FloraLearnedPistols : PlaceholderItem { } // If Flora has learned pistol usage, give this inventory item to the player

class Missed : PlaceholderItem { } // Placeholder Item given to display "Missed!" on the HUD when successfully evading an attack.

class UsingMeleeWeapon : PlaceholderItem { } // Checks to see if your current selected weapon is "Melee Class" [for HUD displays]

class SigilDrain : PlaceholderItem { default { Inventory.MaxAmount 1; } }
class SigilModeType : PlaceholderItem { default { Inventory.MaxAmount 6; } }
class SigilPieces : PlaceholderItem { default { Inventory.MaxAmount 5; } }

class DrawingDiarisBow : PlaceholderItem 
{
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 1;
	}
} 

class InGameMenu : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 1;
	}
} 

class ArrowRandomizer : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 1;
	}
} 

class PrimingSceptre : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 1;
	}
} 

class MinigunHeat : PlaceholderItem 
{
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 100;
	}
}

class RailgunCharge : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 100;
	}
}

class RailgunZoom : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}

class LongbowZoom : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}

class ActorVarBase : PlaceholderItem 
{
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}

class ActorVar1 : ActorVarBase { }
class ActorVar2 : ActorVarBase { }
class ActorVar3 : ActorVarBase { }
class ActorVar4 : ActorVarBase { }
class ActorVar5 : ActorVarBase { }
class ActorVar6 : ActorVarBase { }
class ActorVar7 : ActorVarBase { }
class ActorVar8 : ActorVarBase { }
class ActorVar9 : ActorVarBase { }
class ActorVar10 : ActorVarBase { }
class ActorVar11 : ActorVarBase { }
class ActorVar12 : ActorVarBase { }
class ActorVar13 : ActorVarBase { }
class ActorVar14 : ActorVarBase { }
class ActorVar15 : ActorVarBase { }
class ActorVar16 : ActorVarBase { }
class ActorVar17 : ActorVarBase { }
class ActorVar18 : ActorVarBase { }
class ActorVar19 : ActorVarBase { }
class ActorVar20 : ActorVarBase { }

class RLMode : PlaceHolderItem
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 100;
	}
}

class PRMode : PlaceHolderItem
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 100;
	}
}

class HSMode : PlaceHolderItem
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 100;
	}
}

class PlasmaBurstLevel : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 100;
	}
}

class MonsterDisplayDMG : PlaceholderItem { } // This works as an inventory flag to indicate a monster can display damage numbers and to prevent them from having multiple copies of the script running
class MonsterLevelCalcs : PlaceholderItem { } // This works as an inventory flag to indicate a monster has gotten their proper level-based buffs

class PlayingDeusVultI : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingDeusVultII : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingDoom1 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingDoom2 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingHeretic : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingHexen : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingStrife : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingDoom64 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingPSXDoom : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingCircus666 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingCircus2 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingKDIZD : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingStrangeAeons : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingTCOTDA : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingTUTNT : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingUnloved : PlaceholderItem { } // This works as an inventory flag to indicate the game mode

class TakeAllStamina : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class TakeAllMPMana : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class IsScriptFrozen : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class IsUnconscious : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class DisableHUD : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class EnableHUD : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class RemoveAllWeapons : PlaceholderItem { } // This works as an inventory flag to indicate the game mode

class SceptreSpinFrameCount : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } } // Hacky workaround for weapon stuff for players. x.x
class FlameCount : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } } // Hacky workaround for weapon stuff for players. x.x
class DualFlameCount : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } } // Hacky workaround for weapon stuff for players. x.x
class SceptreTimer : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } } // Hacky workaround for weapon stuff for players. x.x

class AChristinaAltFireType : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }
class CharacterClassCheck : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }

class WeaponFlashResult : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }
class HellcoreFireFrame : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }

class NormFireManaCost : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }
class AltFireManaCost : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }

class SirenTimerCurrent : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }
class SirenTimerMaximum : PlaceHolderItem { default { +INVENTORY.KEEPDEPLETED; Inventory.MaxAmount 2147483647; } }

class UnmakerAmmoType : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class WeapCrisis : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class SizePulseType : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class TransPulseType : PlaceHolderItem { default { Inventory.MaxAmount 1; } }

class HellWarriorShieldLevel : PlaceHolderItem { default { Inventory.MaxAmount 10; } }

class OnCeiling : PlaceHolderItem { default { Inventory.MaxAmount 1; } }
class ShieldingBuff : PlaceHolderItem { default { Inventory.MaxAmount 1; } }

class CheatCrit : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Makes the game always allow crits [cheating]
class CheatCritUltimate : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Makes the game always allow crits [cheating]
class DealCriticalHit : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Indicates the the holder will deal a critical hit [for damage-indicator script checks]
class ResistCriticalHit : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Indicates the the holder will resist a critical hit [for damage-indicator script checks]
class TookCriticalHit : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
class TookWeaknessHit : PlaceHolderItem { default { Inventory.MaxAmount 3; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
class TookResistanceHit : PlaceHolderItem { default { Inventory.MaxAmount 3; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
class TookNoDamage : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
class TookNoDamageInvuln : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
class AbsorbedDamage : PlaceHolderItem { default { Inventory.MaxAmount 1; } } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
class IsStepping : PlaceholderItemDepletable { default { Inventory.MaxAmount 999999; } }

class SauronGauntletsItem : PlaceholderItem { } // For SBARINFO so the HUD shows the extra icon for having the Gauntlets regardless of which type/character.

class BFG2704Array : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 100;
	}
}

class DSNoArmorClass : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}

	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSGreenArmorClass : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		DamageFactor "normal", 0.975;	// -2.5% Damage to HP
		DamageFactor "Bullet", 0.85;	// -15% Bullet Damage
		DamageFactor "Fire", 0.98;		// -2% Fire Damage
		DamageFactor "Magma", 0.98;		// -2% Fire Damage
		DamageFactor "Explosive", 0.99;		// -1% Explosive Damage
	}
	
	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSBlueArmorClass : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		DamageFactor "normal", 0.95;	// -5% Damage to HP
		DamageFactor "Bullet", 0.75;	// -25% Bullet Damage
		DamageFactor "Fire", 0.90;		// -10% Fire Damage
		DamageFactor "Magma", 0.90;		// -10% Fire Damage
		DamageFactor "Explosive", 0.96;		// -4% Explosive Damage
	}
	
	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSStoneArmorClass1 : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		DamageFactor "normal", 0.875;	// -12.5% Damage to HP
		DamageFactor "Bullet", 0.60;	// -40% Bullet Damage
		DamageFactor "Fire", 0.725;		// -27.5% Fire Damage
		DamageFactor "Magma", 0.725;		// -27.5% Fire Damage
		DamageFactor "Ice", 1.125;		// +12.5% Ice Damage
		DamageFactor "Explosive", 0.85;		// -15% Explosive Damage
	}
	
	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSDiamondArmorClass1 : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		DamageFactor "normal", 0.625; // -37.5% Damage to HP
		DamageFactor "Bullet", 0.525;	// -47.5% Bullet Damage
		DamageFactor "Fire", 0.625;		// -37.5% Fire Damage
		DamageFactor "Magma", 0.625;		// -37.5% Fire Damage
		DamageFactor "Ice", 0.925;		// -7.5% Ice Damage
		DamageFactor "Holy", 0.825;		// -17.5% Holy Damage
		DamageFactor "Explosive", 0.925;		// -7.5% Explosive Damage
	}
	
	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSStoneArmorClass2 : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		DamageFactor "normal", 0.75;	// -25% Overall Damage
		DamageFactor "Bullet", 0.60;	// -40% Bullet Damage
		DamageFactor "Fire", 0.725;		// -27.5% Fire Damage
		DamageFactor "Magma", 0.725;		// -37.5% Fire Damage
		DamageFactor "Ice", 1.125;		// +12.5% Ice Damage
		DamageFactor "Explosive", 0.70;		// -30% Explosive Damage
	}
	
	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSDiamondArmorClass2 : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		DamageFactor "normal", 0.25;	// -75% Damage to HP
		DamageFactor "Bullet", 0.525;	// -47.5% Bullet Damage
		DamageFactor "Fire", 0.625;		// -37.5% Fire Damage
		DamageFactor "Magma", 0.625;		// -37.5% Fire Damage
		DamageFactor "Ice", 0.925;		// -7.5% Ice Damage
		DamageFactor "Holy", 0.825;		// -17.5% Holy Damage
		DamageFactor "Explosive", 0.65;		// -35% Explosive Damage
	}

	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSSpiritualExoskin1 : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}

	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSSpiritualExoskin2 : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}

	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class DSSpiritualExoskin3 : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
	}

	states
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class SwingTimer : AetheriusCustomInventory
{
	default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 24;
	}
}

class IsHaSatanNow : PlaceholderItem { } // This works as an inventory flag to indicate the character is currently the 'HaSatan' of Hell [greatly reduces Hellcore Consumption]

class FullHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "full" or greater health range]
class NormalHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "normal" health range]
class DecentHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "normal" health range]
class LowHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "low" health range]
class CriticalHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "critical" health range]
class PlayerIsDead : PlaceholderItem { } // For HUD Checks [when player is dead]
class PlayerDeathFadeOut : PlaceholderItem { } // For Controlling death-fadeout screens

class TensionAuraFrameBase : CrossbowFX4Base
{
	default
	{
		-SOLID;
		+NOINTERACTION;
		+NOTIMEFREEZE;
		RenderStyle "Add";
		Alpha 0.25;
		Radius 4;
		Height 4;
		XScale 0.667;
		YScale 1;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_JumpIf(TensionLevel == 1,"SetScale5");
			TNT1 A 0 A_JumpIf(TensionLevel == 2,"SetScale20");
			TNT1 A 0 A_JumpIf(TensionLevel == 3,"SetScale50");
			TNT1 A 0 A_JumpIf(TensionLevel == 4,"SetScale100");
			TNT1 A 0 A_JumpIf(TensionLevel == 5,"SetScale250");
			TNT1 A 0 A_JumpIf(TensionLevel == 6,"SetScale500");
			TNT1 A 0 A_JumpIf(TensionLevel == 7,"SetScale1000");
			stop;

		SetScale5:
			TNT1 A 0 A_SetScale(0.5,0.75);
			goto Frame;
		SetScale20:
			TNT1 A 0 A_SetScale(0.5555,0.8333);
			goto Frame;
		SetScale50:
			TNT1 A 0 A_SetScale(0.6111,0.9166);
			goto Frame;
		SetScale100:
			TNT1 A 0 A_SetScale(0.6666,1);
			goto Frame;
		SetScale250:
			TNT1 A 0 A_SetScale(0.7222,1.0833);
			goto Frame;
		SetScale500:
			TNT1 A 0 A_SetScale(0.7777,1.1666);
			goto Frame;
		SetScale1000:
			TNT1 A 0 A_SetScale(0.8333,1.25);
			goto Frame;

		Frame:
			TSNA A 1;
			TSNA A 1;
			stop;
		Frame2:
			TSIN A 1;
			TSIN A 1;
			stop;
	}
}

class TensionAuraLooper : TensionAuraFrameBase
{
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_JumpIf(TensionLevel == 1,"SetScale5");
			TNT1 A 0 A_JumpIf(TensionLevel == 2,"SetScale20");
			TNT1 A 0 A_JumpIf(TensionLevel == 3,"SetScale50");
			TNT1 A 0 A_JumpIf(TensionLevel == 4,"SetScale100");
			TNT1 A 0 A_JumpIf(TensionLevel == 5,"SetScale250");
			TNT1 A 0 A_JumpIf(TensionLevel == 6,"SetScale500");
			TNT1 A 0 A_JumpIf(TensionLevel == 7,"SetScale1000");
			stop;

		SetScale5:
			TNT1 A 0 { A_SetScale(0.5,0.75); }
			goto Frame;
		SetScale20:
			TNT1 A 0 { A_SetScale(0.5555,0.8333); }	
			goto Frame;
		SetScale50:
			TNT1 A 0 { A_SetScale(0.6111,0.9166); }
			goto Frame;
		SetScale100:
			TNT1 A 0 { A_SetScale(0.6666,1); }
			goto Frame;
		SetScale250:
			TNT1 A 0 { A_SetScale(0.7222,1.0833); }
			goto Frame;
		SetScale500:
			TNT1 A 0 { A_SetScale(0.7777,1.1666); }
			goto Frame;
		SetScale1000:
			TNT1 A 0 { A_SetScale(0.8333,1.25); }
			goto Frame;

		Frame:
			TSNA AABBCCDD 1 
			{
				if (GetCVar("dvds_tensionauratype") == 0) { return resolvestate("Frame2"); }
				else
				{
					A_Warp(AAPTR_PLAYER1,4,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE); // |WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION
				}
				return resolvestate(null);
			}
			loop;
		Frame2:
			TSIN ABCDEFGHI 1
			{
				if (GetCVar("dvds_tensionauratype") == 1) { return resolvestate("Frame"); }
				else
				{
					A_Warp(AAPTR_PLAYER1,4,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE); // |WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION
				}
				return resolvestate(null);
			}
			loop;
	}
}

class TensionAuraLightBase : AetheriusBaseZSC
{
	default
	{
		-SOLID;
		+NOINTERACTION;
		+NOTIMEFREEZE;
		RenderStyle "Add";
		Alpha 0.01;
		Scale 0.01;
		Radius 1;
		Height 1;
		XScale 1;
		YScale 1;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 0 A_JumpIf(CallACS("GetBuffTimer",1) > 0,"SpawnInvis");
			goto SpawnNormal;

		SpawnNormal:
			TNT1 A 1; // TSNB A 1 A_Warp(AAPTR_PLAYER1,1,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION);
			goto Spawn;

		SpawnInvis:
			TNT1 B 1; // TSNB B 1 A_Warp(AAPTR_PLAYER1,1,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION);
			goto Spawn;
	}
}

class TensionAuraLight5 : TensionAuraLightBase { }
class TensionAuraLight20 : TensionAuraLightBase { }
class TensionAuraLight50 : TensionAuraLightBase { }
class TensionAuraLight100 : TensionAuraLightBase { }
class TensionAuraLight250 : TensionAuraLightBase { }
class TensionAuraLight500 : TensionAuraLightBase { }
class TensionAuraLight1000 : TensionAuraLightBase { }

class PlayerWhistle : AetheriusBaseZSC
{
	default
	{
		-SOLID;
		+NOBLOCKMAP;
		+NOINTERACTION;
		+NOGRAVITY;
		+NOTELESTOMP;
		+MISSILE;
		Speed 1;
		Height 1;
		Radius 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_StartSound("player/whistle");
			TNT1 A 1 A_AlertMonsters();
			stop;
	}
}

class PlayerMortalBlastRadius : AetheriusBaseZSC
{
	default
	{
		-SOLID;
		+NOBLOCKMAP;
		+NOINTERACTION;
		+NOGRAVITY;
		+NOTELESTOMP;
		+MISSILE;
		Speed 1;
		Height 1;
		Radius 1;
	}

	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(100000,1024,0,1024);
			stop;
	}
}

class PlayerTension5BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(50000,256,0,128); // Pushes things with 1250 mass at 20 units/tic
			stop;
	}
}

class PlayerTension20BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(75000,320,0,160); // Pushes things with 1875 mass at 20 units/tic
			stop;
	}
}

class PlayerTension50BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(100000,384,0,192); // Pushes things with 2500 mass at 20 units/tic
			stop;
	}
}

class PlayerTension100BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(125000,448,0,224); // Pushes things with 3125 mass at 20 units/tic
			stop;
	}
}

class PlayerTension250BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(150000,512,0,256); // Pushes things with 3750 mass at 20 units/tic
			stop;
	}
}

class PlayerTension500BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(200000,640,0,320); // Pushes things with 5000 mass at 20 units/tic
			stop;
	}
}

class PlayerTension1000BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(250000,768,0,384); // Pushes things with 6250 mass at 20 units/tic
			stop;
	}
}

class InvulnerabilityAura : AetheriusBaseZSC
{
	int user_auradamage, user_auraradius, user_perktemp;
	default
	{
		-SOLID;
		+NOINTERACTION;
		+NOTIMEFREEZE;
		+NODAMAGETHRUST;
		+EXTREMEDEATH;
		+PAINLESS;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		ProjectileKickback 0;
		RenderStyle "None";
		DamageType "InvulnerabilityAura";
		Radius 4;
		Height 4;
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 1 
			{
				user_auradamage = 4;
				user_auradamage += (CallACS("StatCheck",1) / 64);
				user_auradamage += (CallACS("StatCheck",10) / 64);
				user_auradamage /= 32;
				user_auradamage = (user_auradamage * random(7,9)) / 8;

				user_auraradius = 96;
				user_perktemp = CallACS("CheckCharacterClass");
				if (user_perktemp == 0) { user_auraradius = 96; }
				if (user_perktemp == 1) { user_auraradius = 84; }
				if (user_perktemp == 2) { user_auraradius = 78; }
				if (user_perktemp == 8) { user_auraradius = 78; }
				if (user_perktemp == 9) { user_auraradius = 78; }

				A_Explode(user_auradamage,user_auraradius,0,0,user_auraradius);
			}
			stop;
	}
}

// Hell Warrior Shield [moved from KDIZD CompatPack]
class HWShieldDefense : ShieldingBuff { }
class HWShieldDefenseExtra : ShieldingBuff { }

// Imp Warlord Shielding
class ImpWarlordShieldDefend : ShieldingBuff { } // 0.5
class ImpWarlordShieldDefendExtra : ShieldingBuff { } // 0.1

// Death Knight Shielding
class DKnightShieldDefend : ShieldingBuff { } // 0.25
class DKnightShieldDefendExtra : ShieldingBuff { } // 0.05

// Acolyte "Shielding"
class AcolyteShieldDefend : ShieldingBuff { } // 0.75
class AcolyteShieldDefendExtra : ShieldingBuff { } // 0.30

// Centaur/Slaughtaur Shielding
class CentaurShieldDefend : ShieldingBuff { } // 0.333
class CentaurShieldDefendExtra : ShieldingBuff { } // 0.0666
class SlaughtaurShieldDefend : ShieldingBuff { } // 0.167
class SlaughtaurShieldDefendExtra : ShieldingBuff { } // 0.0333

// Maulotaur "Shielding"
class MaulotaurChargeDefense : ShieldingBuff { } // 0.25

// Heresiarch "Shielding"
class HeresiarchShieldDefense : ShieldingBuff { } // 0.125

// Heresiarch "Shielding"
class NightmarePhaseOutDefense : ShieldingBuff { } // 0.0625

class INTERMAPChecker : PlaceHolderItem
{
	default
	{
		-INVENTORY.KEEPDEPLETED
	}
}

class PowerNoDrown : PowerProtection
{
	double ticpiece;
	default
	{
		DamageFactor "Drowning", 0;
		Powerup.Color "Black", 0.5;
		Powerup.Duration -180;
		Inventory.Icon "TNT1A0";
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}
	double fadeintensity;
	
	override color GetBlend()
	{
		bool debugblend = false;
		// slowly fade the color out
		int cnt = 128 - (EffectTics>>2);
		int blendclr = BlendColor.a*cnt/256;
		blendclr *= 0.05;

		if (debugblend) Console.Printf("cnt: %d, blendclr: %d, fade: %.2f", cnt, blendclr, fadeintensity);

		if (cnt > 0)
		{
			return Color(blendclr,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		if (debugblend) Console.Printf("EffectTics2: %d, cnt: %d / 256, BlendColor.a: %d, fadeintensity: %.2f", EffectTics2, cnt, BlendColor.a*cnt/256, fadeintensity);
		return 0;
	}
	
	int EffectTics2;
	int Dire;

	override void Tick()
	{
		bool debugtick = false;
		
		int Point1 = 450;
		int Point2 = 1800;
		int increment = random(6,8) * random(6,8);
		
		
		if (debugtick) Console.Printf("EffectTics: %d (%d), Dire: %d, Increment: %d", EffectTics2, EffectTics, Dire, Increment);

		if (Dire == 0)
		{
			if (EffectTics2 <= Point1) { EffectTics2 = Point1; Dire = 1; }
			else if (EffectTics2 >= Point2) { EffectTics2 = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}

		if (Dire == 1)
		{
			if (owner && (owner.CountInv("AetheriusTimeFreezer") <= 0 || owner.CountInv("DebugTimeFreezer") <= 0)) EffectTics2 += increment;
			if (EffectTics2 >= Point2) Dire = 2;
		}
		else
		if (Dire == 2)
		{
			if (owner && (owner.CountInv("AetheriusTimeFreezer") <= 0 || owner.CountInv("DebugTimeFreezer") <= 0)) EffectTics2 -= increment;
			if (EffectTics2 <= Point1) Dire = 1;
		}
		int ticpiecemax;
		int ticwhiletimes = 3;
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		if (owner)
		{
			if (!owner.CountInv("INTERMAPChecker"))
			{
				if (owner.waterlevel >= 3)
				{
					if (owner.CountInv("AetheriusTimeFreezer") || owner.CountInv("DebugTimeFreezer"))
					{
						ticpiecemax = 10;
						if (ticpiecemax > 0)
						{
							ticpiece += frandompick(4.0,4.0,5.0,5.0,5.0,5.0,5.0,5.0,6.0,6.0);
							while (ticpiece >= ticpiecemax && ticwhiletimes)
							{
								EffectTics--;
								ticpiece -= ticpiecemax;
								ticwhiletimes--;
							}
						}
						else
						{
							EffectTics--;
						}
					}
					else
					{
						ticpiece = 0;
						ticpiecemax = 1;
						EffectTics--;
					}
				}
				else
				{
					if (skill <= 0) ticpiecemax = 60;
					if (skill == 1) ticpiecemax = 50;
					if (skill == 2) ticpiecemax = 40;
					if (skill == 3) ticpiecemax = 30;
					if (skill >= 4) ticpiecemax = 20;
					if (owner.CountInv("AetheriusTimeFreezer") || owner.CountInv("DebugTimeFreezer")) ticpiecemax *= 10;
					if (ticpiecemax > 0) 
					{
						ticpiece += 1;
						while (ticpiece >= ticpiecemax && ticwhiletimes)
						{
							EffectTics--;
							ticpiece -= ticpiecemax;
							ticwhiletimes--;
						}
					}
					else
					{
						EffectTics--;
					}
				}
				if (dvdsdebug_showairmeter) 
				{
					if (ticpiecemax > 1) Console.Printf("[PowerNoDrown] - EffectTics: %d, Ticpiece: %d / %d", EffectTics, ticpiece, ticpiecemax);
					else Console.Printf("[PowerNoDrown] - EffectTics: %d", EffectTics);
				}
			}
			if (ticpiece < -ticpiecemax) ticpiece = 0;
			if (ticpiece >= (ticpiecemax*3)) ticpiece = 0;
		}
		
		// Begin fading when 5 seconds remain
		fadeintensity = 1.0 * ((EffectTics * 1.0) / 175.0);
		if (fadeintensity >= 1.00) fadeintensity = 1.00;
		
		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}
	
	override void DoEffect()
	{
		if (Owner.player != NULL)
		{
			Owner.player.mo.ResetAirSupply();
		}
		
		if (dvds_masknoise && owner.waterlevel >= 3 && !(Level.maptime & 0x3f))
		{
			double maskpitch = frandompick(frandom(1.125,1.275),frandom(1.25,1.375),frandom(1.25,1.375),frandom(1.25,1.375),frandom(1.375,1.5));
			if (owner.waterlevel >= 3) maskpitch *= 1.259921885;
			Owner.A_StartSound("misc/mask", CHAN_7, CHANF_DEFAULT, frandom(0.875,1.0), ATTN_NORM, maskpitch);
		}
	}
}

class PlayerStatPlaceholder : PlaceholderItemUndrop
{ 
	override void DoEffect() { }
	override void Tick() { }
}
class ExpPts : PlayerStatPlaceholder { }
class ExpPtsNeeded : PlayerStatPlaceholder { }
class ExpPtsLeft : PlayerStatPlaceholder { }
class PlayerLevel : PlayerStatPlaceholder { }
class PlayerCurrHP : PlayerStatPlaceholder { }
class PlayerMaxHP : PlayerStatPlaceholder { }
class PlayerCurrMP : PlayerStatPlaceholder { }
class PlayerMaxMP : PlayerStatPlaceholder { }
class PlayerSTR : PlayerStatPlaceholder { }
class PlayerDEF : PlayerStatPlaceholder { }
class PlayerAGL : PlayerStatPlaceholder { }
class PlayerTHE : PlayerStatPlaceholder { }
class PlayerSOR : PlayerStatPlaceholder { }
class PlayerDFT : PlayerStatPlaceholder { }
class TimeFreezeTimer : PlayerStatPlaceholder { }
class DashGauge : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashReady : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashCharges : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashMaxCharge : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashCharge : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}


class DashTics : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashCooldown : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class DashCost : PlaceHolderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class NoHUD : PlaceHolderItem { }
class NoRegeneration : PlaceHolderItem { }
class NoDashing : PlaceHolderItem { }
