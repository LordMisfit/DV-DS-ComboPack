// This needs to be registered in MAPINFO.
// See: https://zdoom.org/wiki/MAPINFO/GameInfo_definition#EventHandlers

class DVDS_EventHandler : EventHandler
{
}

class DVDS_StaticEventHandler : StaticEventHandler
{
}

// Alternatively, add the WorldThingDamaged code to an existing EventHandler or StaticEventHandler.
class SingleDamageRipperTracker : StaticEventHandler
{
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.Inflictor is "SingleDamageRipper")
		{
			SingleDamageRipper(e.Inflictor).ActorsAlreadyHit.Push(e.Thing);
			SingleDamageRipper(e.Inflictor).timesrippedoverall++;
			if (SingleDamageRipper(e.Inflictor).timesrippedoverall < 0) SingleDamageFastRipper(e.Inflictor).timesrippedoverall = 0;
		}

		if (e.Inflictor is "SingleDamageFastRipper")
		{
			SingleDamageFastRipper(e.Inflictor).ActorsAlreadyHit.Push(e.Thing);
			SingleDamageFastRipper(e.Inflictor).timesrippedoverall++;
			if (SingleDamageFastRipper(e.Inflictor).timesrippedoverall < 0) SingleDamageFastRipper(e.Inflictor).timesrippedoverall = 0;
		}
	}
}

class FireFloorAdjuster : StaticEventHandler 
{
	override void WorldLoaded(WorldEvent evt) 
	{
		if (gameinfo.gametype & GAME_Raven)
		{
			for (let i = 0, l = level.Sectors.Size(); i < l; i++)
			{
				//Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
				if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava')
						level.Sectors[i].damagetype = 'Magma';
			}
		}
	}
}

class MKeyEvents : EventHandler 
{   
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("MYKEYPRESS", e.KeyScan);
		
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == "MYKEYPRESS")   
		{
			int key1, key2;
/*
			[key1, key2] = Bindings.GetKeysForCommand("Focus");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				// do your stuff
			}

			[key1, key2] = Bindings.GetKeysForCommand("PsycheUp");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				// do your stuff
			}
*/
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				level.total_monsters -= 1;
			}

			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest2");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				level.total_items -= 1;
			}

			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest3");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				level.total_secrets -= 1;
			}
/*
			[key1, key2] = Bindings.GetKeysForCommand("MaxHellCoreWeapons");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				CallACS("MiscVarSetDECORATE",96,9);
				CallACS("MiscVarSetDECORATE",97,9);
				CallACS("MiscVarSetDECORATE",98,9);
				CallACS("MiscVarSetDECORATE",99,9);
				CallACS("MiscVarSetDECORATE",100,9);
				CallACS("MiscVarSetDECORATE",101,9);
				CallACS("MiscVarSetDECORATE",102,9);
				CallACS("MiscVarSetDECORATE",103,9);
				CallACS("MiscVarSetDECORATE",104,9);
				CallACS("MiscVarSetDECORATE",105,9);
				CallACS("MiscVarSetDECORATE",106,9);
				CallACS("MiscVarSetDECORATE",107,9);
				CallACS("MiscVarSetDECORATE",108,9);
				CallACS("MiscVarSetDECORATE",109,9);
				CallACS("MiscVarSetDECORATE",110,9);
				CallACS("MiscVarSetDECORATE",111,9);
				CallACS("MiscVarSetDECORATE",112,9);
			}
*/
		}
	}
}

