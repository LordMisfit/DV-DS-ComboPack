// This needs to be registered in MAPINFO.
// See: https://zdoom.org/wiki/MAPINFO/GameInfo_definition#EventHandlers

class DVDS_EventHandler : EventHandler
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	int TrueGameSkill;
	
	int A_GetPlayerLevel(int type = 0)
	{
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		
		int Level = 0;
		if (MiscItem)
		{
			if (dvds_expgains) Level = MiscItem.PlayerLevel;
		}
		if (dvdsdebug_playerlevelchecks) Console.Printf("\c[green](%s) \c[gold](A_GetPlayerLevel - EventHandler)\c- PlayerLevel: %d [%d]", GetClassName(), level, gametic);
		return Level;
	}

	override void WorldTick()
	{
		if ((level.time >= 3 && level.time <= 35) ||
				(((level.time - 35) % 350) == 0))
		{
			int d = Wads.CheckNumForName("CCARDS", Wads.ns_global, -1, true);
			if (dvdsdebug_worldtick) Console.Printf("d: %d [time: %d]", d, level.time);
			if (d != -1)
			{
				let globalvars = DSGlobalVariables.Get();
				globalvars.PlayingCCards = true;
				actor player = players[0].mo;
				player.A_SetInventory("PlayingCCards",1);
				Actor mo;
				
				string nm = "CCards_Actor_MonsterDisguise";
				ThinkerIterator it = ThinkerIterator.Create(nm);
				while (mo = Actor(it.Next()))
				{
					if (mo.bNORADIUSDMG) mo.bNORADIUSDMG = false; // hahahaha V:<
					if (!mo.bISMONSTER) mo.bISMONSTER = true; // hehehehe >:V
					if (dvdsdebug_worldtick) Console.Printf("LOLE [%p, %s]", mo, mo.GetClassName());
				}
			}
		}
	}
	
	override void NewGame()
	{
		let globalvars = DSGlobalVariables.Get();
		if (globalvars.MapsFinished == 0) globalvars.MapsFinished = -1;
		//if (dvdsdebug_mapfinishcheck) Console.Printf("\c[gold]NewGame() (DS_EventHandler) [%d]", globalvars.MapsFinished);
		Super.NewGame();
	}
	
	void ProjSetSpeed(actor spawnee)
	{
		double spdfactor, oldspdfactor;
		
		if (Level.MapName != "TITLEMAP")
		{
			if (!spawnee.accuracy)
			{
				if (spawnee)
				{
					if (!AetheriusProjectileZSC(spawnee))
					{
						if (spawnee.target)
						{
							if (spawnee.target.bISMONSTER && !PlayerPawn(spawnee.target) && spawnee.target.default.speed != 0)
							{
								spdfactor = spawnee.target.speed / spawnee.target.default.speed;
								oldspdfactor = spdfactor;
								if (spdfactor >= 1.00) 
								{
									spdfactor -= 1.00;
									if (skill <= 0) spdfactor *= 0.25;
									if (skill == 1) spdfactor *= 0.375;
									if (skill == 2) spdfactor *= 0.5;
									if (skill == 3) spdfactor *= 0.625;
									if (skill >= 4) spdfactor *= 0.75;
									spdfactor *= frandom(0.875,1.125);
									spdfactor *= dvds_mprojectilevelmulti;
									if (spdfactor < 0.00) spdfactor = 0.00;
									spdfactor += 1.00;
									spawnee.A_ScaleVelocity(spdfactor);
								}
								if (dvdsdebug_projectiledisplays) Console.Printf("(%s) spdfactor: %.8f (%.8f), spawnee.target.speed: %.8f, spawnee.target.default.speed: %.8f", spawnee.GetClassName(), spdfactor, oldspdfactor, spawnee.target.speed, spawnee.target.default.speed);
							}
						}
					}
					spawnee.accuracy++;
				}
			}
		}
	}
	
	actor, string, int CheckLevelTweaks(actor spawnee, string spawnname, int LevelCheck)
	{
		//
		return spawnee, spawnname, LevelCheck;
	}
	
	void A_MonsterStatsHP_ATK_DEF_SPD(actor spawnee, int type = 0, int extraflags = 0)
	{
		AetheriusMonsterZSC spawnee2;
		spawnee2 = AetheriusMonsterZSC(spawnee);
		TrueGameSkill = dvds_gendifficultycurve + skill;
		double basemaxratio = 6.25;
		double MaxHP, MSpeed, Attack, Defense, Balance;
		double PreMaxHP, PreMSpeed, PreAttack, PreDefense, PreBalance;
		double RangeVar;
		int CurrHP, Temp, LevelCheck, MapCheck;
		int StealthChance;
		int nonstatmonster = 0;
		int debugstatcalc = dvdsdebug_showstatcalcstuff;
		int skilllevelcalctype = dvds_skilllevelcalctype;
		int deathkingsmapcalcmod = dvds_deathkingsmapcalcmod;
		int mapcalcfactorexact = 0;
		int mapcalcfactorpercent = 100;
		int BossEyeCheck = 0;
		int PlayerLevel = CallACS("StatCheck",0);
		int mapdifficultytype = dvds_mapdifficultytype;
		int StrifeStaminaLevel = CallACS("MiscVarCheckDECORATE",317);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		let globalvars = DSGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		int TruePlayerLevel = 0;
		if (dvds_expgains && MiscItem) TruePlayerLevel = MiscItem.PlayerLevel;
		string spawnname = spawnee.GetClassName();
		
		type = clamp(type, 0, 1);
		
		// extraflags
		// & 1 = Always multiply level by 4 instead of a 1/64 chance of it. [basically "Elitifies" the monster all the time when called]
		// & 2 = Multiplies the monsters' level by 4 [again]

		if (spawnee2 && Level.MapName != "TITLEMAP")
		{
			if (type == 0) // Giving Stats
			{
				if (spawnee2.ActorLevelCalcs) { if (debugstatcalc) Console.Printf("ActorLevelCalcs [1]: %d", spawnee2.ActorLevelCalcs); }
				else
				{
					if (spawnee2.user_checkmapskill > 0) { if (debugstatcalc) Console.Printf("user_checkmapskill [2]: %d", spawnee2.user_checkmapskill); }
					else
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("DSBossEye"); Actor mo; while (mo = Actor(Test1.Next())) { BossEyeCheck++; }
						if (debugstatcalc) Console.Printf("DSBossEye (Check): %d", BossEyeCheck);
						
						string ActorName = spawnee2.GetClassName();
						if (debugstatcalc) Console.Printf("\ckActorName: %s", ActorName);
	
						StealthChance = spawnee2.A_GetStealthChance(); // ACS_NamedExecuteWithResult("GetStealthChance");
						if (dvdsdebug_evolvestealthstuff) Console.Printf("Stealth Chance: %d", StealthChance);
						
						nonstatmonster = 0;
						if (spawnee2.MonsterFamily == "PracticeTarget") nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
						if (random(1,256) <= StealthChance && nonstatmonster == 0)
						{
							spawnee2.user_isstealth = spawnee2.user_wasstealth = 1;
							spawnee2.A_RefreshStealthInfo(0); // Runs to check Stealth information [in case something like finding the Ring has happened]
						}
						else
						{
							spawnee2.user_isstealth = spawnee2.user_wasstealth = 0;
						}
						
						//*******************************************************
						//** Calculates Stats By Checking the Difficulty Level **
						//*******************************************************
						int DifficultyChecker = 1;
						if (spawnee2.ModType == 0)
						{
							if (dvds_monsterstatcalc_skill) DifficultyChecker = 1; else DifficultyChecker = 0;
						}
						else DifficultyChecker = 1;
						
						double SpeedFactor = 0.0;
						double AttackFactor = 0.0;
						double DefenseFactor = 0.0;
						double MaxHPFactor = 0.0;
						double BalanceFactor = 0.0;
						if (spawnee2.GetClassName() == "Sauravatar") MSpeed = 32.0; else MSpeed = spawnee2.Speed;
						Attack = 1.0; 
						Defense = 1.0; 
						Balance = spawnee2.Mass;
						if (spawnee2.GetClassName() == "Sauravatar") MaxHP = spawnee2.user_MaxHP; else MaxHP = spawnee2.SpawnHealth();
						PreMSpeed = MSpeed;
						PreAttack = Attack; 
						PreDefense = Defense; 
						PreBalance = Balance; 
						PreMaxHP = MaxHP;
						spawnee2.user_basespeed = spawnee2.Speed;
						spawnee2.user_basemass = spawnee2.Mass;
						if (debugstatcalc) Console.Printf("\chStart Speed: %.8f, \cgStart Attack: %.8f, \cdStart Defense: %.8f, \caStart Max HP: %d, \cpStart Balance: %d", MSpeed, Attack, Defense, MaxHP, Balance);
						
						nonstatmonster = 0;
						if (spawnee2.MonsterFamily == "PracticeTarget") nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
						if (DifficultyChecker == 1 && nonstatmonster == 0) // Difficulty-checking enabled
						{
							if (TrueGameSkill <= SKILL_VERY_EASY)
							{
								AttackFactor = 0.05;
								DefenseFactor = -0.025;
								SpeedFactor = 0.025;
								MaxHPFactor = 0.05;
								BalanceFactor = 0.04;
							}
							else
							if (TrueGameSkill == SKILL_EASY)
							{
								AttackFactor = 0.125;
								DefenseFactor = -0.0625;
								SpeedFactor = 0.0625;
								MaxHPFactor = 0.125;
								BalanceFactor = 0.1;
							}
							else
							if (TrueGameSkill == SKILL_NORMAL)
							{
								AttackFactor = 0.25;
								DefenseFactor = -0.125;
								SpeedFactor = 0.125;
								MaxHPFactor = 0.25;
								BalanceFactor = 0.2;
							}
							else
							if (TrueGameSkill == SKILL_HARD)
							{
								AttackFactor = 0.375;
								DefenseFactor = -0.1875;
								SpeedFactor = 0.1875;
								MaxHPFactor = 0.375;
								BalanceFactor = 0.5;
							}
							else
							if (TrueGameSkill == SKILL_VERY_HARD)
							{
								AttackFactor = 0.5; 
								DefenseFactor = -0.25; 
								SpeedFactor = 0.25; 
								MaxHPFactor = 0.5; 
								BalanceFactor = 0.75;
							}
							else
							if (TrueGameSkill == SKILL_EXTREME)
							{
								AttackFactor = 0.625;
								DefenseFactor = -0.3125;
								SpeedFactor = 0.3125;
								MaxHPFactor = 0.625;
								BalanceFactor = 0.875;
							}
							else
							if (TrueGameSkill == SKILL_HORRIBLE)
							{
								AttackFactor = 0.75;
								DefenseFactor = -0.375;
								SpeedFactor = 0.375;
								MaxHPFactor = 0.75;
								BalanceFactor = 1.0;
							}
							else
							if (TrueGameSkill == SKILL_IMPOSSIBLE)
							{
								AttackFactor = 0.875;
								DefenseFactor = -0.4375;
								SpeedFactor = 0.4375;
								MaxHPFactor = 0.875;
								BalanceFactor = 1.125;
							}
							else
							if (TrueGameSkill >= SKILL_OMEGA)
							{
								AttackFactor = 1.0;
								DefenseFactor = -0.50;
								SpeedFactor = 0.50;
								MaxHPFactor = 1.00;
								BalanceFactor = 1.25;
							}
							if (ActorName == "ReaverNew") SpeedFactor *= 3.0;
							if (skilllevelcalctype == 0)
							{
								AttackFactor *= frandompick(1.5,1.75,1.75,2.0,2.0,2.0,2.0,2.0,2.0,2.25,2.25,2.5);
								DefenseFactor *= frandompick(1.5,1.75,1.75,2.0,2.0,2.0,2.0,2.0,2.0,2.25,2.25,2.5);
								SpeedFactor *= frandompick(1.5,1.75,1.75,2.0,2.0,2.0,2.0,2.0,2.0,2.25,2.25,2.5);
								MaxHPFactor *= frandompick(1.5,1.75,1.75,2.0,2.0,2.0,2.0,2.0,2.0,2.25,2.25,2.5);
								BalanceFactor *= frandompick(1.5,1.75,1.75,2.0,2.0,2.0,2.0,2.0,2.0,2.25,2.25,2.5);
							}
							else
							{
								AttackFactor *= frandompick(0.75,0.875,0.875,1.0,1.0,1.0,1.0,1.0,1.0,1.125,1.125,1.25);
								DefenseFactor *= frandompick(0.75,0.875,0.875,1.0,1.0,1.0,1.0,1.0,1.0,1.125,1.125,1.25);
								SpeedFactor *= frandompick(0.75,0.875,0.875,1.0,1.0,1.0,1.0,1.0,1.0,1.125,1.125,1.25);
								MaxHPFactor *= frandompick(0.75,0.875,0.875,1.0,1.0,1.0,1.0,1.0,1.0,1.125,1.125,1.25);
								BalanceFactor *= frandompick(0.75,0.875,0.875,1.0,1.0,1.0,1.0,1.0,1.0,1.125,1.125,1.25);
							}
							if (debugstatcalc) Console.Printf("\cgAttackFactor [Skill]: %.8f, \cdDefenseFactor [Skill]: %.8f, \chSpeedFactor [Skill]: %.8f, \caMaxHPFactor [Skill]: %.8f, \cpBalanceFactor [Skill]: %.8f", AttackFactor, DefenseFactor, SpeedFactor, MaxHPFactor, BalanceFactor);
	
							SpeedFactor *= dvds_monsterspeedratio_skill;
							SpeedFactor = clamp(SpeedFactor, -basemaxratio, basemaxratio);
							MSpeed *= (1.0 + SpeedFactor);
							spawnee2.Speed = MSpeed;
						
							AttackFactor *= dvds_monsterattackratio_skill;
							AttackFactor = clamp(AttackFactor, -basemaxratio, basemaxratio);
							Attack *= (1.0 + AttackFactor);
							spawnee2.DamageMultiply = Attack;
						
							DefenseFactor *= dvds_monsterdefenseratio_skill;
							DefenseFactor = clamp(DefenseFactor, -basemaxratio, basemaxratio);
							Defense *= (1.0 + DefenseFactor);
							//DamageFactor = Defense; 
						
							MaxHPFactor *= dvds_monstermaxhpratio_skill;
							MaxHPFactor = clamp(MaxHPFactor, -basemaxratio, basemaxratio);
							MaxHP *= (1.0 + MaxHPFactor);
						
							BalanceFactor *= dvds_monsterbalanceratio_skill;
							BalanceFactor = clamp(BalanceFactor, -basemaxratio, basemaxratio);
							Balance *= (1.0 + BalanceFactor);
							spawnee2.Mass = Balance;
						
							Attack = clamp(Attack, 0.0025, 40.00);
							Defense = clamp(Defense, 0.0025, 40.00);
							Balance = clamp(Balance, 1, 5000000);
							MaxHP = clamp(MaxHP, 1, 2147483647);
						
							if (debugstatcalc)
							{
								Console.Printf("\chSpeedFactor [Skill]: %.8f, Speed After Skill: %.8f (%.8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
								Console.Printf("\cgAttackFactor [Skill]: %.8f, Attack After Skill: %.8f (%.8f)", (1.0 + AttackFactor), Attack, PreAttack);
								Console.Printf("\cdDefenseFactor [Skill]: %.8f, Defense After Skill: %.8f (%.8f)", (1.0 + DefenseFactor), Defense, PreDefense);
								Console.Printf("\caMaxHPFactor [Skill]: %.8f, MaxHP After Skill: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
								Console.Printf("\cpBalanceFactor [Skill]: %.8f, Balance After Skill: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
							}
						}
						
						//*************************************************
						//** Calculates Stats By Checking the Map Number **
						//*************************************************
						int MapChecker = 1;
						if (spawnee2.ModType == 0)
						{
							if (dvds_monsterstatcalc_maps) MapChecker = 1; else MapChecker = 0;
						}
						else MapChecker = 1;
						
						nonstatmonster = 0;
						if (spawnee2.MonsterFamily == "PracticeTarget") nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
						if (MapChecker == 1 && nonstatmonster == 0) // Map-checking enabled
						{
							PreMSpeed = MSpeed;
							PreAttack = Attack; 
							PreDefense = Defense; 
							PreBalance = Balance; 
							PreMaxHP = MaxHP;
							if (spawnee2.ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
							{
								if (spawnee2.ClassicDoomType == 1 || spawnee2.ClassicDoomType == 2) // Doom 1 / Heretic [ExMx system]
								{
									if (mapdifficultytype == 0) MapCheck = level.levelnum;
									else MapCheck = CallACS("MiscVarCheckDECORATE",1000);
									
									if (CallACS("MiscVarCheckDECORATE",259) > 0) 
									{
										if (mapdifficultytype == 0) MapCheck += (40 + deathkingsmapcalcmod);
										else MapCheck += deathkingsmapcalcmod;
									}
									MapCheck += CallACS("MiscVarCheckDECORATE",53); // Map Inflation [Stats - Exact]
									MapCheck += CallACS("MiscVarCheckDECORATE",169); // Map Inflation [Overall - Exact]
									MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",2) / 100; // Map Inflation [Stats - Percentile]
									MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",5) / 100; // Map Inflation [Overall - Percentile]
									MapCheck = clamp(MapCheck, 1, 100);
							
									AttackFactor = 0.0;
									if (MapCheck > 1) AttackFactor += (0.02 * (MapCheck - 1));
									if (MapCheck > 2) AttackFactor += (0.001 * (MapCheck - 2));
									if (MapCheck >= 1 && MapCheck <= 10) AttackFactor *= 1.0125;
									if (MapCheck >= 11 && MapCheck <= 20) AttackFactor *= 1.025;
									if (MapCheck >= 21 && MapCheck <= 30) AttackFactor *= 1.0375;
									if (MapCheck >= 31 && MapCheck <= 40) AttackFactor *= 1.05;
									if (MapCheck >= 41 && MapCheck <= 50) AttackFactor *= 1.0625;
									if (MapCheck >= 51 && MapCheck <= 60) AttackFactor *= 1.075;
									if (MapCheck >= 61 && MapCheck <= 70) AttackFactor *= 1.0875;
									if (MapCheck >= 71 && MapCheck <= 80) AttackFactor *= 1.1;
									if (MapCheck >= 81 && MapCheck <= 90) AttackFactor *= 1.1125;
									if (MapCheck >= 91) AttackFactor *= 1.25;
							
									DefenseFactor = 1.0 / (AttackFactor + 1.0);
									DefenseFactor -= 1.0;
							
									SpeedFactor = AttackFactor / 3.2;
									if (ActorName == "ReaverNew") SpeedFactor *= 3.0;
							
									MaxHPFactor = AttackFactor;
							
									BalanceFactor = AttackFactor;
								}
								else // Doom 2 / Hexen / Strife / Doom64 / PSXDoom [MAPxx system]
								{
									if (mapdifficultytype == 0) MapCheck = level.levelnum;
									else MapCheck = CallACS("MiscVarCheckDECORATE",1000);
									
									if (CallACS("MiscVarCheckDECORATE",259) > 0) 
									{
										if (mapdifficultytype == 0) MapCheck += (40 + deathkingsmapcalcmod);
										else MapCheck += deathkingsmapcalcmod;
									}
									MapCheck += CallACS("MiscVarCheckDECORATE",53); // Map Inflation [Stats - Exact]
									MapCheck += CallACS("MiscVarCheckDECORATE",169); // Map Inflation [Overall - Exact]
									MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",2) / 100; // Map Inflation [Stats - Percentile]
									MapCheck = MapCheck * CallACS("MiscVarCheckDECORATE",5) / 100; // Map Inflation [Overall - Percentile]
									MapCheck = clamp(MapCheck, 1, 100);
							
									AttackFactor = 0.0;
									if (MapCheck > 1) AttackFactor += (0.025 * (MapCheck - 1));
							
									if (MapCheck >= 1 && MapCheck <= 6) AttackFactor *= 1.0125;
									if (MapCheck >= 7 && MapCheck <= 11) AttackFactor *= 1.025;
									if (MapCheck >= 12 && MapCheck <= 20) AttackFactor *= 1.0375;
									if (MapCheck == 31) AttackFactor *= 1.0375;
									if (MapCheck == 32) AttackFactor *= 1.0375;
									if (MapCheck >= 21 && MapCheck <= 30) AttackFactor *= 1.05;
									if (MapCheck >= 33 && MapCheck <= 40) AttackFactor *= 1.0625;
									if (MapCheck >= 41 && MapCheck <= 50) AttackFactor *= 1.075;
									if (MapCheck >= 51 && MapCheck <= 60) AttackFactor *= 1.0875;
									if (MapCheck >= 61 && MapCheck <= 70) AttackFactor *= 1.10;
									if (MapCheck >= 71 && MapCheck <= 80) AttackFactor *= 1.125;
									if (MapCheck >= 81 && MapCheck <= 90) AttackFactor *= 1.25;
									if (MapCheck >= 91) AttackFactor *= 1.375;
							
									DefenseFactor = 1.0 / (AttackFactor + 1.0); //(1.0 / (AttackFactor + 1.0)) - 1.0;
									DefenseFactor -= 1.0;
							
									SpeedFactor = AttackFactor / 3.2;
									if (ActorName == "ReaverNew") SpeedFactor *= 3.0;
							
									MaxHPFactor = AttackFactor;
							
									BalanceFactor = AttackFactor;
								}
							}
	
							nonstatmonster = 0;
							if (spawnee2.MonsterFamily == "PracticeTarget") nonstatmonster = 1;
							if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
							if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
							if (spawnee2.ModType == 1 && nonstatmonster == 0) // Deus Vult 1
							{
								MapCheck = level.levelnum;
								MapCheck = clamp(MapCheck, 1101, 1104);
						
								AttackFactor = 0.0;
								if (MapCheck == 1101) AttackFactor = 0.0; // MAP01 - Insurgents
								if (MapCheck == 1102) AttackFactor = 0.25; // MAP02 - Torture Chamber
								if (MapCheck == 1103) AttackFactor = 0.75; // MAP03 - Cathedral
								if (MapCheck == 1104) AttackFactor = 1.5; // MAP04 - End Of Days
						
								DefenseFactor = 1.0 / (AttackFactor + 1.0); //(1.0 / (AttackFactor + 1.0)) - 1.0;
								DefenseFactor -= 1.0;
						
								SpeedFactor = AttackFactor / 4.0;
								if (ActorName == "ReaverNew") SpeedFactor *= 3.0;
						
								MaxHPFactor = AttackFactor / 1.25;
						
								BalanceFactor = AttackFactor / 1.25;
							}
							
							if (spawnee2.ModType == 2 && (spawnee2.MonsterFamily != "PracticeTarget")) // Deus Vult 2
							{
								MapCheck = level.levelnum;
								MapCheck = clamp(MapCheck, 1201, 1212);
						
								// Earth-type Levels
								if (MapCheck == 1201) // MAP01 - Entryway Pass
								{
									AttackFactor = 0.0; DefenseFactor = 0.0; SpeedFactor = 0.0; MaxHPFactor = 0.0; BalanceFactor = 0.0;
								}
								else
								if (MapCheck == 1202) // MAP02 - Mutagen
								{
									AttackFactor = 0.03; DefenseFactor = -0.029126; SpeedFactor = 0.0075; MaxHPFactor = 0.06; BalanceFactor = 0.03;
								}
								else
								if (MapCheck == 1203) // MAP03 - Crouching Demon, Hidden Archvile
								{
									AttackFactor = 0.09; DefenseFactor = -0.082569; SpeedFactor = 0.0225; MaxHPFactor = 0.12; BalanceFactor = 0.09;
								}
								else
								if (MapCheck == 1204) // MAP04 - Minas Morgul
								{
									AttackFactor = 0.18; DefenseFactor = -0.152542; SpeedFactor = 0.045; MaxHPFactor = 0.19; BalanceFactor = 0.18;
								}
								else
								if (MapCheck == 1205) // MAP05 - Eagle's Nest
								{
									AttackFactor = 0.30; DefenseFactor = -0.230769; SpeedFactor = 0.075; MaxHPFactor = 0.26; BalanceFactor = 0.30;
								}
								else
								if (MapCheck == 1206) // MAP05S - The Manliest Level Ever
								{
									AttackFactor = 0.45; DefenseFactor = -0.310345; SpeedFactor = 0.1125; MaxHPFactor = 0.34; BalanceFactor = 0.45;
								}
								else
								if (MapCheck == 1207) // MAP06 - Stargate
								{
									AttackFactor = 0.63; DefenseFactor = -0.386503; SpeedFactor = 0.1575; MaxHPFactor = 0.42; BalanceFactor = 0.63;
								}
								else
								if (MapCheck == 1208) // MAP07 - The Desert Temple
								{
									AttackFactor = 0.84; DefenseFactor = -0.456522; SpeedFactor = 0.21; MaxHPFactor = 0.50; BalanceFactor = 0.84;
								}
								else
								// Hell Levels
								if (MapCheck == 1209) // MAP08 - The Unholy Cathedral
								{
									AttackFactor = 1.14; DefenseFactor = -0.53271; SpeedFactor = 0.285; MaxHPFactor = 0.77; BalanceFactor = 1.14;
								}
								else
								if (MapCheck == 1210) // DV2M09 - You Shall Not Pass!
								{
									AttackFactor = 1.53; DefenseFactor = -0.604743; SpeedFactor = 0.3825; MaxHPFactor = 1.09; BalanceFactor = 1.53;
								}
								else
								if (MapCheck == 1211) // DV2M10 - Hell's Vendetta
								{
									AttackFactor = 2.01; DefenseFactor = -0.667774; SpeedFactor = 0.5025; MaxHPFactor = 1.48; BalanceFactor = 2.01;
								}
								else
								if (MapCheck == 1212) // DV2M10B - attedneV s'lleH
								{
									AttackFactor = 2.58; DefenseFactor = -0.72067; SpeedFactor = 0.645; MaxHPFactor = 1.92; BalanceFactor = 2.58;
								}
								else
								if (MapCheck == 1214) // DV2M12 - "The Wings of The Maiar" [DVI combined level remake]
								{
									AttackFactor = 1.56; DefenseFactor = -0.609375; SpeedFactor = 0.39; MaxHPFactor = 1.41; BalanceFactor = 1.56;
								}
								else
								if (MapCheck == 1215) // DV2M10C - attedneV s'lleH: The True End of All Things... [resurrected Sauron rematch] (if worser endings occur)
								{
									AttackFactor = 2.58; DefenseFactor = -0.72067; SpeedFactor = 0.645; MaxHPFactor = 1.92; BalanceFactor = 2.58;
								}
							}
							if (debugstatcalc) Console.Printf("\cx[MAP] \czMapCheck: %d, \chSpeedFactor: %.8f, \cgAttackFactor: %.8f, \cdDefenseFactor: %.8f, \caMaxHPFactor: %.8f, \cpBalanceFactor: %.8f", MapCheck, SpeedFactor, AttackFactor, DefenseFactor, MaxHPFactor, BalanceFactor);
	
							SpeedFactor *= dvds_monsterspeedratio_maps;
							SpeedFactor = clamp(SpeedFactor, -basemaxratio, basemaxratio);
							MSpeed *= (1.0 + SpeedFactor);
							spawnee2.Speed = MSpeed;
						
							AttackFactor *= dvds_monsterattackratio_maps;
							AttackFactor = clamp(AttackFactor, -basemaxratio, basemaxratio);
							Attack *= (1.0 + AttackFactor);
							spawnee2.DamageMultiply = Attack;
						
							DefenseFactor *= dvds_monsterdefenseratio_maps;
							DefenseFactor = clamp(DefenseFactor, -basemaxratio, basemaxratio);
							Defense *= (1.0 + DefenseFactor);
							//DamageFactor = Defense;
						
							MaxHPFactor *= dvds_monstermaxhpratio_maps;
							MaxHPFactor = clamp(MaxHPFactor, -basemaxratio, basemaxratio);
							MaxHP *= (1.0 + MaxHPFactor);
						
							BalanceFactor *= dvds_monsterbalanceratio_maps;
							BalanceFactor = clamp(BalanceFactor, -basemaxratio, basemaxratio);
							Balance *= (1.0 + BalanceFactor);
							spawnee2.Mass = Balance;
						
							Attack = clamp(Attack, 0.0025, 40.00);
							Defense = clamp(Defense, 0.0025, 40.00);
							Balance = clamp(Balance, 1, 5000000);
							MaxHP = clamp(MaxHP, 1, 2147483647);
	
							if (debugstatcalc)
							{
								Console.Printf("\chSpeedFactor [MAP]: %.8f, Speed After Map: %.8f (%.8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
								Console.Printf("\cgAttackFactor [MAP]: %.8f, Attack After Map: %.8f (%.8f)", (1.0 + AttackFactor), Attack, PreAttack);
								Console.Printf("\cdDefenseFactor [MAP]: %.8f, Defense After Map: %.8f (%.8f)", (1.0 + DefenseFactor), Defense, PreDefense);
								Console.Printf("\caMaxHPFactor [MAP]: %.8f, MaxHP After Map: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
								Console.Printf("\cpBalanceFactor [MAP]: %.8f, Balance After Map: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
							}
						}
						
						//*****************************************************************
						//** Calculates Stats [and Level] By Checking the Player's Level **
						//*****************************************************************
						int LevelErrorRange;
						double TempSkillBase = 0.00075;
						double TempSkillLevel = (TrueGameSkill * 0.25);
						double TempSkillBase2 = 0.00025;
						double LevelBaseMulti = 0.00225;
						LevelBaseMulti += ((TrueGameSkill * (TempSkillBase + ((TrueGameSkill + TempSkillLevel) * TempSkillBase2)))); 
						if (debugstatcalc) Console.Printf("\cyLevelBaseMulti: %.8f, TrueGameSkill: %d, TempSkillLevel: %.8f, TempSkillBase: %.8f, TempSkillBase2: %.8f", LevelBaseMulti, TrueGameSkill, TempSkillLevel, TempSkillBase, TempSkillBase2);
						LevelBaseMulti *= dvds_monsterlevelstatfactor;
						if (debugstatcalc) Console.Printf("\cyLevelBaseMulti: %.8f, dvds_monsterlevelstatfactor: %.8f", LevelBaseMulti, dvds_monsterlevelstatfactor);
					
						int LevelChecker = 1;
						int LevelDifficultyInflation = clamp(dvds_leveldifficultyinflation, -2000, 2000);
						int LevelDifficultyInflationPercent = clamp(dvds_leveldifficultyinflation2, -100, 2000);
					
						if (spawnee2.ModType == 0)
						{
							if (dvds_monsterstatcalc_levels) LevelChecker = 1; else LevelChecker = 0;
						}
						else LevelChecker = 1;
						
						nonstatmonster = 0;
						if (spawnee2.MonsterFamily == "PracticeTarget") nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
						if (LevelChecker == 1 && nonstatmonster == 0)
						{
							PreMSpeed = MSpeed;
							PreAttack = Attack; 
							PreDefense = Defense; 
							PreBalance = Balance; 
							PreMaxHP = MaxHP;
							LevelCheck = spawnee2.user_presetleveladd; // Checks the "Preset" strength of a monster
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [PresetLevel Add]: %d (Add: %d)", LevelCheck, spawnee2.user_presetleveladd, spawnee2.user_presetlevelrand1, spawnee2.user_presetlevelrand2);
	
							LevelCheck += random(spawnee2.user_presetlevelrand1,spawnee2.user_presetlevelrand2); // Checks the "Preset" strength of a monster
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [PresetLevel Rand]: %d (Error: +%d to %d)", LevelCheck, spawnee2.user_presetlevelrand1, spawnee2.user_presetlevelrand2);
	
							LevelCheck += PlayerLevel;
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [PlayerLevel Check]: %d (PlayLvl: +%d)", LevelCheck, PlayerLevel);
					
							LevelCheck += spawnee2.user_ressurrectstr; // Checks the "Resurrect" strength of a monster [Clay Devils in TCOTD:A get stronger each time they resurrect]
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [ResurrectStr Check]: %d (ResStr: +%d)", LevelCheck, spawnee2.user_ressurrectstr);
				
							LevelCheck += LevelDifficultyInflation;
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [inflation-exact]: %d (Difficulty Inflation: +%d)", LevelCheck, LevelDifficultyInflation);
				
							LevelCheck = LevelCheck * (100 + LevelDifficultyInflationPercent) / 100;
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [inflation-percent]: %d (Percent: %d%)", LevelCheck, (100 + LevelDifficultyInflationPercent));
							
							LevelErrorRange = LevelCheck * 0.1667;
							if (LevelErrorRange < 1) LevelErrorRange = random(0,3);
							LevelCheck += random(-LevelErrorRange,LevelErrorRange);
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [error-range]: %d (Error Range: +-%d)", LevelCheck, LevelErrorRange);
							
							int PreviousLevelCheck = LevelCheck;
							if (spawnee2.ModType == 1) // DV1 [general]
							{
								LevelCheck += random(0,10);
							}
							else
							if (spawnee2.ModType == 2) // DV2 [general]
							{
								if (MapCheck >= 1209 && MapCheck <= 1215) // DV2's Hell Levels
								{
									LevelCheck += random(10,25);
								}
								else
								{
									LevelCheck += random(0,10);
								}
							}
							else // Normal Mode
							{
								// Specific Actors
								if (ActorName == "RebelNew" || ActorName == "Rebel1New" || ActorName == "Rebel2New" || ActorName == "Rebel3New" ||
										ActorName == "Rebel4New" || ActorName == "Rebel5New" || ActorName == "Rebel6New") LevelCheck += random(-3,7);
						
								// Specific Monsters
								// Mini-Boss
								if (ActorName == "DSSpiderMastermind") LevelCheck += random(3,6);
								if (ActorName == "Demolisher") LevelCheck += random(3,6);
								if (ActorName == "DSCyberdemon") LevelCheck += random(3,6);
								if (ActorName == "Annihilator") LevelCheck += random(3,6);
								if (ActorName == "MaulotaurNew") LevelCheck += random(3,6);
						
								// Specific Bosses
								// Tier 1 Boss
								if (ActorName == "DSparilMountedNew") LevelCheck += random(9,18);
								if (ActorName == "FighterBossNew") LevelCheck += random(9,18);
								if (ActorName == "ClericBossNew") LevelCheck += random(9,18);
								if (ActorName == "MageBossNew") LevelCheck += random(9,18);
								if (ActorName == "ProgrammerNew") LevelCheck += random(9,18);
								if (ActorName == "StrifeBishopNew") LevelCheck += random(9,18);
								if (ActorName == "OracleNew") LevelCheck += random(9,18);
								if (ActorName == "Macil1New") LevelCheck += random(9,18);
								if (ActorName == "Macil2New") LevelCheck += random(9,18);
								if (ActorName == "LoremasterNew") LevelCheck += random(9,18);
								// Tier 2 Boss
								if (ActorName == "DSBossBrain") { LevelCheck += random(15,30); Thing_ChangeTID(0,1222); }
								if (ActorName == "AlienSpectre1New") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre2New") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre3New") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre4New") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre5New") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre1Model") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre2Model") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre3Model") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre4Model") LevelCheck += random(15,30);
								if (ActorName == "AlienSpectre5Model") LevelCheck += random(15,30);
								if (ActorName == "SourceGuardian") LevelCheck += random(15,30);
								if (ActorName == "NyarlathotepLesser") LevelCheck += random(15,30);
								// Tier 3 Boss
								if (ActorName == "DSparilUnmountedNew") LevelCheck += random(23,45);
								if (ActorName == "Zakachi") LevelCheck += random(23,45);
								if (ActorName == "KoraxNew") LevelCheck += random(23,45);
								if (ActorName == "ThamuzNew") LevelCheck += random(23,45);
								if (ActorName == "AvatarNew") LevelCheck += random(23,45);
								if (ActorName == "TchernobogNew") LevelCheck += random(23,45);
								if (ActorName == "AdolfHitlerDS") LevelCheck += random(23,45);
								if (ActorName == "DSMotherDemon64") LevelCheck += random(23,45);
								// Tier 4 Boss
								if (ActorName == "EntityBossNew") LevelCheck += random(37,75);
								if (ActorName == "EntitySecondNew") LevelCheck += random(37,75);
								if (ActorName == "PennywiseBoss") LevelCheck += random(37,75);
								if (ActorName == "Sauravatar") LevelCheck += random(37,75);
								if (ActorName == "TheSource") LevelCheck += random(37,75);
								// Tier 5 Boss
								if (ActorName == "EntityAscended") LevelCheck += random(75,112);
								if (ActorName == "Nyarlathotep") LevelCheck += random(75,112);
								// Oddball Tier Boss
								if (ActorName == "Benellus1DS") LevelCheck += random(37,75);
								if (ActorName == "Benellus2DS") LevelCheck += random(42,80);
								if (ActorName == "Benellus3DS") LevelCheck += random(47,85);
								if (ActorName == "Magmantis") LevelCheck += random(52,75);
								if (ActorName == "StarSpawn") LevelCheck += random(30,40);
								if (ActorName == "SpiderGod") LevelCheck += random(30,40);
								if (ActorName == "SpiderGodling") LevelCheck += random(15,20);
							}
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [actor-check: %s]: %d (Previous: %d)", ActorName, LevelCheck, PreviousLevelCheck);
		
							// Check if the actor is one of Strife's Peasents [and if so, cancel out most level additions and divide their level by 4]
							If (ActorName == "PeasantNew") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant1New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant2New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant3New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant4New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant5New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant6New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant7New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant8New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant9New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant10New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant11New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant12New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant13New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant14New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant15New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant16New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant17New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant18New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant19New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant20New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant21New") spawnee2.IsAPeasent++;
							If (ActorName == "Peasant22New") spawnee2.IsAPeasent++;
							If (ActorName == "BeggarNew") spawnee2.IsAPeasent++;
							If (ActorName == "Beggar1New") spawnee2.IsAPeasent++;
							If (ActorName == "Beggar2New") spawnee2.IsAPeasent++;
							If (ActorName == "Beggar3New") spawnee2.IsAPeasent++;
							If (ActorName == "Beggar4New") spawnee2.IsAPeasent++;
							If (ActorName == "Beggar5New") spawnee2.IsAPeasent++;
							If (ActorName == "MerchantNew") spawnee2.IsAPeasent++;
							If (ActorName == "WeaponSmithNew") spawnee2.IsAPeasent++;
							If (ActorName == "BarKeepNew") spawnee2.IsAPeasent++;
							If (ActorName == "ArmorerNew") spawnee2.IsAPeasent++;
							If (ActorName == "MedicNew") spawnee2.IsAPeasent++;
							
							if (ActorName == "RebelNew") spawnee2.IsARebel++;
							if (ActorName == "Rebel1New") spawnee2.IsARebel++;
							if (ActorName == "Rebel2New") spawnee2.IsARebel++;
							if (ActorName == "Rebel3New") spawnee2.IsARebel++;
							if (ActorName == "Rebel4New") spawnee2.IsARebel++;
							if (ActorName == "Rebel5New") spawnee2.IsARebel++;
							if (ActorName == "Rebel6New") spawnee2.IsARebel++;
							
							If (spawnee2.IsAPeasent > 0) LevelCheck /= 4;
							else
							{
								if (random(1,10) <= 1)
								{
									if (random(1,10) <= 1)
									{
										if (random(1,10) <= 1)
										{
											if (ActorName == "ClayDevilNew") LevelCheck += random(8,12);
											else if (ActorName == "Skeleton") LevelCheck += random(16,24);
											else LevelCheck += random(64,96);
										}
										else
										{
											if (ActorName == "ClayDevilNew") LevelCheck += random(2,3);
											else if (ActorName == "Skeleton") LevelCheck += random(4,6);
											else LevelCheck += random(16,24);
										}
									}
									else
									{
										if (ActorName == "ClayDevilNew") LevelCheck += randompick(0,0,0,0,0,1);
										else if (ActorName == "Skeleton") LevelCheck += random(0,2);
										else LevelCheck += random(4,6);
									}
								}
								if (extraflags & 1) 
								{
									if (ActorName == "ClayDevilNew") LevelCheck *= 1.5;
									else if (ActorName == "Skeleton") LevelCheck *= 2;
									else LevelCheck *= 4; 
								} 
								else 
								{ 
									if (random(1,64) == 1) 
									{
										if (ActorName == "ClayDevilNew") LevelCheck *= 1.5;
										else if (ActorName == "Skeleton") LevelCheck *= 2;
										else LevelCheck *= 4; 
									}
								}
								if (extraflags & 2) 
								{
									if (ActorName == "ClayDevilNew") LevelCheck *= 1.5;
									else if (ActorName == "Skeleton") LevelCheck *= 2;
									else LevelCheck *= 4;
								}
							}
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [peasent-checking]: %d, (IsAPeasent: %d)", LevelCheck, spawnee2.IsAPeasent);
							
							PreviousLevelCheck = LevelCheck;
							LevelCheck = clamp(LevelCheck, 0, 2000);
							if (debugstatcalc) Console.Printf("\ckMonsterLevel [final calc]: %d (Previous: %d)", LevelCheck, PreviousLevelCheck);
							spawnee2.user_monsterlevel = spawnee2.user_lastmonsterlevel = LevelCheck;
							
							AttackFactor = 0.0;
							if (LevelCheck > 0) AttackFactor += (LevelBaseMulti * (LevelCheck));
					
							DefenseFactor = 1.0 / (AttackFactor + 1.0); //(1.0 / (AttackFactor + 1.0)) - 1.0;
							DefenseFactor -= 1.0;
					
							SpeedFactor = AttackFactor / 4.0;
							if (ActorName == "ReaverNew") SpeedFactor *= 3.0;
					
							MaxHPFactor = AttackFactor / 1.25;
					
							BalanceFactor = AttackFactor / 1.25;
					
							if (debugstatcalc) Console.Printf("\cgAttackFactor [MonLevel]: %.8f, \cdDefenseFactor [MonLevel]: %.8f, \chSpeedFactor [MonLevel]: %.8f, \caMaxHPFactor [MonLevel]: %.8f, \cpBalanceFactor [MonLevel]: %.8f", AttackFactor, DefenseFactor, SpeedFactor, MaxHPFactor, BalanceFactor);
							
							SpeedFactor *= dvds_monsterspeedratio_levels;
							SpeedFactor = clamp(SpeedFactor, -basemaxratio, basemaxratio);
							MSpeed *= (1.0 + SpeedFactor);
							spawnee2.Speed = MSpeed;
						
							AttackFactor *= dvds_monsterattackratio_levels;
							AttackFactor = clamp(AttackFactor, -basemaxratio, basemaxratio);
							Attack *= (1.0 + AttackFactor);
							spawnee2.DamageMultiply = Attack;
						
							DefenseFactor *= dvds_monsterdefenseratio_levels;
							DefenseFactor = clamp(DefenseFactor, -basemaxratio, basemaxratio);
							Defense *= (1.0 + DefenseFactor);
							//DamageFactor = Defense; 
						
							MaxHPFactor *= dvds_monstermaxhpratio_levels;
							MaxHPFactor = clamp(MaxHPFactor, -basemaxratio, basemaxratio);
							MaxHP *= (1.0 + MaxHPFactor);
						
							BalanceFactor *= dvds_monsterbalanceratio_levels;
							BalanceFactor = clamp(BalanceFactor, -basemaxratio, basemaxratio);
							Balance *= (1.0 + BalanceFactor);
							spawnee2.Mass = Balance;
						
							Attack = clamp(Attack, 0.0025, 40.00);
							Defense = clamp(Defense, 0.0025, 40.00);
							Balance = clamp(Balance, 1, 5000000);
							MaxHP = clamp(MaxHP, 1, 2147483647);
						
							if (debugstatcalc)
							{
								Console.Printf("\chSpeedFactor [LEVELS]: %.8f, Speed After Levels: %.8f (%.8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
								Console.Printf("\cgAttackFactor [LEVELS]: %.8f, Attack After Levels: %.8f (%.8f)", (1.0 + AttackFactor), Attack, PreAttack);
								Console.Printf("\cdDefenseFactor [LEVELS]: %.8f, Defense After Levels: %.8f (%.8f)", (1.0 + DefenseFactor), Defense, PreDefense);
								Console.Printf("\caMaxHPFactor [LEVELS]: %.8f, MaxHP After Levels: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
								Console.Printf("\cpBalanceFactor [LEVELS]: %.8f, Balance After Levels: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
							}
						}
						
						//**********************************************
						//** Calculates Stats Based on Varience/Error **
						//**********************************************
						int ErrorChecker = 1;
						if (spawnee2.ModType == 0)
						{
							if (dvds_monsterstatcalc_varience > 0) ErrorChecker = 1; else ErrorChecker = 0;
						}
						else ErrorChecker = 1;
					
						nonstatmonster = 0;
						if (spawnee2.MonsterFamily == "PracticeTarget") nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && dvds_improvediconofsin <= 0) nonstatmonster = 1;
						if (ActorName == "DSBossBrain" && BossEyeCheck <= 0) nonstatmonster = 1;
						if (ErrorChecker == 1 && nonstatmonster == 0)
						{
							PreMSpeed = MSpeed;
							PreAttack = Attack; 
							PreDefense = Defense; 
							PreBalance = Balance; 
							PreMaxHP = MaxHP;
							// HP Error
							double MaxHPErrorRange = (MaxHP * dvds_monstermaxhpvarience);
							MaxHP += random(-MaxHPErrorRange,MaxHPErrorRange);
							MaxHP = clamp(MaxHP, 1, 2147483647);
						
							double SpeedErrorRange = (MSpeed * dvds_monsterspeedvarience);
							MSpeed += frandom(-SpeedErrorRange,SpeedErrorRange);
							spawnee2.actorbasespeed = spawnee2.Speed = MSpeed; //Set's Final Speed values
						
							double AttackErrorRange = (Attack * dvds_monsterattackvarience);
							Attack += frandom(-AttackErrorRange,AttackErrorRange);
							spawnee2.DamageMultiply = Attack;
						
							double DefenseErrorRange = (Defense * dvds_monsterdefensevarience);
							Defense += frandom(-DefenseErrorRange,DefenseErrorRange);
							
							if (debugstatcalc) Console.Printf("DamageFactor [old]: %.8f", spawnee2.DamageFactor);
							spawnee2.DamageFactor *= Defense;
							if (debugstatcalc) Console.Printf("DamageFactor [new]: %.8f", spawnee2.DamageFactor);
						
							double BalanceErrorRange = (Balance * dvds_monsterbalancevarience);
							Balance += random(-BalanceErrorRange,BalanceErrorRange);
							spawnee2.Mass = Balance; 
						
							if (debugstatcalc) 
							{
								Console.Printf("\caMaxHP Error Range: %d, \chSpeed Error Range: %.8f, \cgAttack Error Range: %.8f, \cdDefense Error Range: %.8f, \cpBalance Error Range: %.8f", MaxHPErrorRange, SpeedErrorRange, AttackErrorRange, DefenseErrorRange, BalanceErrorRange);
								Console.Printf("\chSpeedFactor [ERROR]: %.8f, Speed After Error: %.8f (%.8f)", (1.0 + SpeedFactor), MSpeed, PreMSpeed);
								Console.Printf("\cgAttackFactor [ERROR]: %.8f, Attack After Error: %.8f (%.8f)", (1.0 + AttackFactor), Attack, PreAttack);
								Console.Printf("\cdDefenseFactor [ERROR]: %.8f, Defense After Error: %.8f (%.8f)", (1.0 + DefenseFactor), Defense, PreDefense);
								Console.Printf("\caMaxHPFactor [ERROR]: %.8f, MaxHP After Error: %d (%d)", (1.0 + MaxHPFactor), MaxHP, PreMaxHP);
								Console.Printf("\cpBalanceFactor [ERROR]: %.8f, Balance After Error: %d (%d)", (1.0 + BalanceFactor), Balance, PreBalance);
							}
						}
						
						//****************************
						//** Specialized Situations **
						//****************************
						// Strife Rebels
						if (ActorName == "RebelNew" || ActorName == "Rebel1New" || ActorName == "Rebel2New" || ActorName == "Rebel3New" ||
								ActorName == "Rebel4New" || ActorName == "Rebel5New" || ActorName == "Rebel6New") spawnee2.IsARebel++;
						if (spawnee2.IsARebel > 0)
						{
							int OldMaxHP = MaxHP;
							// Rebels get an HP boost dependant on the Player's "Stamina" stat in Strife [to reflect them having undergone the process as the player does to "keep up"] :V
							MaxHP *= floor(1.0 + (StrifeStaminaLevel * 0.1));
							if (debugstatcalc) Console.Printf("\caPre Stamina Max HP: %d, \caPost Stamina Max HP: %d, \cgPlayer's Stamina Level: %d", OldMaxHP, MaxHP, StrifeStaminaLevel);
	
							string StaminaUpgradeItem = "StaminaUpgrade";
							StaminaUpgradeItem.AppendFormat("%d", StrifeStaminaLevel);
							spawnee2.A_SetInventory(StaminaUpgradeItem,1);
						
							string AccuracyUpgradeItem = "AccuracyUpgrade";
							AccuracyUpgradeItem.AppendFormat("%d", StrifeAccuracyLevel);
							spawnee2.A_SetInventory(AccuracyUpgradeItem,1);
						}
						
						//*******************************************************************
						//** Specialized Boss Options [D'Sparil/Korax/Spectres/Entity/etc] **
						//*******************************************************************
						int OldMaxHP = MaxHP;
						// Doom2
						if (ActorName == "DSBossBrain" && dvds_improvediconofsin && BossEyeCheck > 0)
						{
							MaxHP *= 8;
							if (debugstatcalc) Console.Printf("\caMaxHP (Icon of Sin): %d (%d)", MaxHP, OldMaxHP);
						}
					
						// DUMP3
						if (ActorName == "AdolfHitlerDS")
						{
							MaxHP *= 5;
							if (debugstatcalc) Console.Printf("\caMaxHP (Hitler [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "Benellus1DS")
						{
							MaxHP *= 5;
							if (debugstatcalc) Console.Printf("\caMaxHP (Benellus 1 [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "Benellus2DS")
						{
							MaxHP *= 5;
							if (debugstatcalc) Console.Printf("\caMaxHP (Benellus 2 [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "Benellus3DS")
						{
							MaxHP *= 4;
							if (debugstatcalc) Console.Printf("\caMaxHP (Benellus 3 [DUMP3]): %d (%d)", MaxHP, OldMaxHP);
						}
						// KDIZD
						if (ActorName == "Magmantis")
						{
							MaxHP *= 7;
							if (debugstatcalc) Console.Printf("\caMaxHP (Magmantis): %d (%d)", MaxHP, OldMaxHP);
						}
						// Unloved
						if (ActorName == "AvatarNew")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Avatar): %d (%d)", MaxHP, OldMaxHP);
						}
						// Doom 64 Retribution
						if (ActorName == "DSMotherDemon64")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Mother Demon): %d (%d)", MaxHP, OldMaxHP);
						}
						// TCOTD:A
						if (ActorName == "ThamuzNew")
						{
							MaxHP *= 1.5;
							if (debugstatcalc) Console.Printf("\caMaxHP (Thamuz): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "TchernobogNew")
						{
							MaxHP *= 1.5;
							if (debugstatcalc) Console.Printf("\caMaxHP (Tchernobog): %d (%d)", MaxHP, OldMaxHP);
						}
						// HTC II
						if (ActorName == "PennywiseBoss")
						{
							MaxHP *= 1.5;
							if (debugstatcalc) Console.Printf("\caMaxHP (Pennywise): %d (%d)", MaxHP, OldMaxHP);
						}
						// Strange Aeons
						if (ActorName == "Nyarlathotep" || ActorName == "NyarlathotepLesser")
						{
							MaxHP = (MaxHP * random(6,7)) / 4;
							if (debugstatcalc) Console.Printf("\caMaxHP (Nyarlathotep): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "StarSpawn")
						{
							MaxHP = (MaxHP * random(6,8)) / 5;
							if (debugstatcalc) Console.Printf("\caMaxHP (StarSpawn): %d (%d)", MaxHP, OldMaxHP);
						}
						// TUTNT
						if (ActorName == "SourceGuardian")
						{
							MaxHP = (MaxHP * random(4,5)) / 4;
							if (debugstatcalc) Console.Printf("\caMaxHP (Source Guardian [TUTNT]): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "TheSource")
						{
							MaxHP *= 4;
							if (debugstatcalc) Console.Printf("\caMaxHP (The Source of All Evil [TUTNT]): %d (%d)", MaxHP, OldMaxHP);
						}
					
						// Strife
						if (ActorName == "ProgrammerNew")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (The Programmer): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "StrifeBishopNew")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (The Bishop): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "OracleNew")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (The Oracle): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "Macil1New")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Macil1): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "Macil2New")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Macil2): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "LoremasterNew")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (The Loremaster): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre1New")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Programmer's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre2New")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Bishop's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre3New")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Oracle's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre4New")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Macil's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre5New")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Loremaster's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre1Model")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Programmer's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre2Model")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Bishop's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre3Model")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Oracle's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre4Model")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Macil's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "AlienSpectre5Model")
						{
							MaxHP *= 16;
							if (debugstatcalc) Console.Printf("\caMaxHP (Loremaster's Spectre): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "EntityBossNew")
						{
							MaxHP *= 24;
							if (debugstatcalc) Console.Printf("\caMaxHP (The Entity): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "EntitySecondNew")
						{
							MaxHP *= 24;
							if (debugstatcalc) Console.Printf("\caMaxHP (Mini Entity): %d (%d)", MaxHP, OldMaxHP);
						}
						if (ActorName == "EntityAscended")
						{
							MaxHP *= 24;
							if (debugstatcalc) Console.Printf("\caMaxHP (ASCENDED Entity): %d (%d)", MaxHP, OldMaxHP);
						}
						
						Attack = clamp(Attack, 0.005, 20.00);
						Defense = clamp(Defense, 0.005, 20.00);
						MaxHP = clamp(MaxHP, 1, 2147483647);
						
						// Hexen Class Bosses
						if (spawnee2.GetClassName() == "ClericBossNew" || GetClassName() == "FighterBossNew" || GetClassName() == "MageBossNew")
						{
							if (multiplayer && !deathmatch)
							{
								if (!spawnee2.special1)
								{
									MaxHP *= 5;
									spawnee2.special1 = true;
								}
							}
						}
						
						//** Set's Final MaxHP and Current HP values **
						spawnee2.health = MaxHP;
						if (debugstatcalc) Console.Printf("\chFinal Speed: %.8f, \cgFinal Attack: %.8f, \cdFinal Defense: %.8f, \caFinal Max HP: %d, \cpFinal Balance: %d, \ck[Actor-Check: %s]", MSpeed, Attack, Defense, MaxHP, Balance, ActorName);
						
						spawnee2.user_MaxHP = MaxHP; 
						if (ActorName == "HeresiarchNew") spawnee2.Score = MaxHP;
						
						// Sets the monster's "Buff" level. The level it must fall below in order to gain it's unique buffs
						RangeVar = 0.375;
						if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.250; // 25.0%
						if (TrueGameSkill == SKILL_EASY) RangeVar = 0.313; // 31.3%
						if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.375; // 37.5%
						if (TrueGameSkill == SKILL_HARD) RangeVar = 0.437; // 43.7%
						if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.500; // 50.0%
						if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.563; // 56.3%
						if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.625; // 62.5%
						if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.687; // 68.7%
						if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.750; // 75%
						Temp = MaxHP * RangeVar;
						Temp = Temp + 1;
						if (Temp < 2) Temp = 2;
						spawnee2.user_HPBuffRange = Temp;
						if (debugstatcalc) Console.Printf("user_HPBuffRange [%s]: %d", ActorName, spawnee2.user_HPBuffRange);
	
						// Sets the monster's "Desperation Buff" level. The level it must fall below in order to gain it's unique buffs
						RangeVar = 0.375;
						if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.250; // 25.0%
						if (TrueGameSkill == SKILL_EASY) RangeVar = 0.313; // 31.3%
						if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.375; // 37.5%
						if (TrueGameSkill == SKILL_HARD) RangeVar = 0.437; // 43.7%
						if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.500; // 50.0%
						if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.563; // 56.3%
						if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.625; // 62.5%
						if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.687; // 68.7%
						if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.750; // 75%
						RangeVar /= 3;
						Temp = MaxHP * RangeVar;
						Temp = Temp + 1;
						if (Temp < 2) Temp = 2;
						spawnee2.user_HPLowBuffRange = Temp;
						if (debugstatcalc) Console.Printf("user_HPLowBuffRange [%s]: %d", ActorName, spawnee2.user_HPLowBuffRange);
						
						// Sets the monster's "Low Range" of HP, meaning there is a 25% chance it will execute a "crisis" attack
						RangeVar = 0.160;
						if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.080; // 8.0%
						if (TrueGameSkill == SKILL_EASY) RangeVar = 0.120; // 12.0%
						if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.160; // 16.0%
						if (TrueGameSkill == SKILL_HARD) RangeVar = 0.200; // 20.0%
						if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.240; // 24.0%
						if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.320; // 32.0%
						if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.400; // 40.0%
						if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.450; // 45.0%
						if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.500; // 50%
						Temp = MaxHP * RangeVar;
						Temp = Temp + 1;
						if (Temp < 2) Temp = 2;
						spawnee2.user_HPLowRange = Temp;
						if (ActorName == "HeresiarchNew") spawnee2.Accuracy = Temp;
						if (debugstatcalc) Console.Printf("user_HPLowRange [%s]: %d", ActorName, spawnee2.user_HPLowRange);
						
						// Sets the monster's "Critical Range" of HP, meaning there is a 100% chance it will execute a "crisis" attack
						RangeVar = 20;
						if (TrueGameSkill <= SKILL_VERY_EASY) RangeVar = 0.010; // 1.0%
						if (TrueGameSkill == SKILL_EASY) RangeVar = 0.015; // 1.5%
						if (TrueGameSkill == SKILL_NORMAL) RangeVar = 0.020; // 2.0%
						if (TrueGameSkill == SKILL_HARD) RangeVar = 0.025; // 2.5%
						if (TrueGameSkill == SKILL_VERY_HARD) RangeVar = 0.030; // 3.0%
						if (TrueGameSkill == SKILL_EXTREME) RangeVar = 0.040; // 4.0%
						if (TrueGameSkill == SKILL_HORRIBLE) RangeVar = 0.050; // 5.0%
						if (TrueGameSkill == SKILL_IMPOSSIBLE) RangeVar = 0.060; // 6.0%
						if (TrueGameSkill >= SKILL_OMEGA) RangeVar = 0.080; // 8.0%
						Temp = MaxHP * RangeVar;
						Temp = Temp + 1;
						if (Temp < 2) Temp = 2;
						spawnee2.user_HPCritRange = Temp;
						if (ActorName == "HeresiarchNew") spawnee2.Stamina = Temp;
						if (debugstatcalc) Console.Printf("user_HPCritRange [%s]: %d", ActorName, spawnee2.user_HPCritRange);
						
						// Sets the monster's "Extreme Death" range of HP, determining how much it takes to gib most monsters (or permenantly kill a Death Incarnate)
						Temp = MaxHP * -1; // -100.0%
						if (Temp > 0) Temp = 0;
						spawnee2.user_HPXDeathRange = Temp;
						if (GetClassName() == "BloodZombieNew") spawnee2.user_HPXDeathRange2 = spawnee2.user_HPXDeathRange / 2;
						
						// Reaction Time
						spawnee2.basereactiontime = spawnee2.reactiontime;
						if (dvds_monsterstatcalc_reactiontime)
						{
							double reactdivfactor = 0.5;
							if (TrueGameSkill >= 0 && TrueGameSkill <= 1) reactdivfactor = 0.375;
							if (TrueGameSkill >= 2 && TrueGameSkill <= 3) reactdivfactor = 0.3125;
							if (TrueGameSkill >= 4 && TrueGameSkill <= 5) reactdivfactor = 0.25;
							if (TrueGameSkill >= 6 && TrueGameSkill <= 7) reactdivfactor = 0.1875;
							if (TrueGameSkill >= 8 && TrueGameSkill <= 9) reactdivfactor = 0.125;
							spawnee2.maxreactiontime = spawnee2.basereactiontime * reactdivfactor;
							if (spawnee2.maxreactiontime < 1) spawnee2.maxreactiontime = 1;
							spawnee2.levelsperreacttic = 300 / (spawnee2.basereactiontime - spawnee2.maxreactiontime);
							if (spawnee2.levelsperreacttic < 1) spawnee2.levelsperreacttic = 1;
							spawnee2.reactiontime -= (spawnee2.user_monsterlevel / spawnee2.levelsperreacttic);
							if (spawnee2.reactiontime < spawnee2.maxreactiontime) spawnee2.reactiontime = spawnee2.maxreactiontime;
							if (debugstatcalc) Console.Printf("\cy(%s)\c- \cxReactionTime: %d\c-, basereactiontime: %d, maxreactiontime: %d, level: %d (/ %d), reactdivfactor: %.8f", spawnee2.GetClassName(), spawnee2.reactiontime, spawnee2.basereactiontime, spawnee2.maxreactiontime, spawnee2.user_monsterlevel, spawnee2.levelsperreacttic, reactdivfactor);
						}
						
						spawnee2.user_legendaryevolved = 0;
						
						// Excutes Lifebar-Related Code
						spawnee2.ActorDisplayDMG = true;
						//ACS_NamedExecuteAlways("DamageDisplays",0,0,0,0);
						
						spawnee2.ActorLevelCalcs = true;
						spawnee2.user_checkmapskill += 1;
						if (spawnee2.bFRIENDLY) 
						{
							if (!(spawnee2.IsAPeasent || spawnee2.IsARebel))
							{
								spawnee2.ChangeTID(1000);
								//Console.Printf("ActorName: %s: TID set to 1000", ActorName);
							}
						}
					}
				}
			}
			else
			{
				if (!spawnee2.ActorLevelCalcs) { }
				else
				{
					if (spawnee2.user_checkmapskill < 1) { }
					else
					{
						if (spawnee2.bFRIENDLY) spawnee2.ChangeTID(0);
						spawnee2.speed = spawnee2.user_basespeed;
						spawnee2.mass = spawnee2.user_basemass;

						// Reaction Time
						spawnee2.reactiontime = spawnee2.basereactiontime;
						if (debugstatcalc) Console.Printf("\cy(%s)\c- \cxReactionTime: %d\c-, basereactiontime: %d", spawnee2.GetClassName(), spawnee2.reactiontime, spawnee2.basereactiontime);
					
						spawnee2.ActorDisplayDMG = false;
						spawnee2.ActorLevelCalcs = false;
						spawnee2.user_monsterlevel = 0;
						spawnee2.user_checkmapskill = 0;
						spawnee2.user_isstealth = 0;
					}
				}
			}
		}
	}
	
	void A_AetheriusStats(actor spawnee, int type)
	{
		AetheriusMonsterZSC spawnee2;
		spawnee2 = AetheriusMonsterZSC(spawnee);
		int debugstatcalc = dvdsdebug_showstatcalcstuff;
		// 0 = Set special stats
		// 1 = Unset special stats
		int flagsbaselevel;
		if (spawnee2)
		{
			spawnee2.levelbehavior = dvds_monsterlevelbehavior;
			if (type == 0 && !spawnee2.ActorLevelCalcs) 
			{
				if (debugstatcalc) Console.Printf("StatCalc type %d!", type);
				A_MonsterStatsHP_ATK_DEF_SPD(spawnee2, type);
				if (spawnee2.levelbehavior)
				{
					if (debugstatcalc) Console.Printf("Level %d!", spawnee2.user_monsterlevel);
					if (spawnee2.user_monsterlevel > spawnee2.AggressionLevelThreshold3) { spawnee2.bMISSILEEVENMORE = true; spawnee2.bMISSILEMORE = true; }
					else if (spawnee2.user_monsterlevel > spawnee2.AggressionLevelThreshold2) { spawnee2.bMISSILEEVENMORE = true; spawnee2.bMISSILEMORE = false; }
					else if (spawnee2.user_monsterlevel > spawnee2.AggressionLevelThreshold1) { spawnee2.bMISSILEEVENMORE = false; spawnee2.bMISSILEMORE = true; }
				}
				spawnee2.timesrevivedamonster = 0;
			}

			if (type != 0 && spawnee2.ActorLevelCalcs) 
			{
				if (debugstatcalc) Console.Printf("StatCalc type %d!", type);
				A_MonsterStatsHP_ATK_DEF_SPD(spawnee2, type);
			}
		}
	}
	
	void A_LegendaryCheck(actor spawnee)
	{
		class<Inventory> LDLPreload, LDLToken, LDLCheck, MiscCheck, MiscCheck2, MiscCheck3, MiscCheck4;
		AetheriusMonsterZSC spawnee2;
		spawnee2 = AetheriusMonsterZSC(spawnee);
		if (spawnee2)
		{
			String nm = "LDLegendaryMonsterPickupEasy";
			LDLPreload = nm;
			
			if (!(GetClassName() == "PeasantNew" ||
						GetClassName() == "Peasant1New" ||
						GetClassName() == "Peasant2New" ||
						GetClassName() == "Peasant3New" ||
						GetClassName() == "Peasant4New" ||
						GetClassName() == "Peasant5New" ||
						GetClassName() == "Peasant6New" ||
						GetClassName() == "Peasant7New" ||
						GetClassName() == "Peasant8New" ||
						GetClassName() == "Peasant9New" ||
						GetClassName() == "Peasant10New" ||
						GetClassName() == "Peasant11New" ||
						GetClassName() == "Peasant12New" ||
						GetClassName() == "Peasant13New" ||
						GetClassName() == "Peasant14New" ||
						GetClassName() == "Peasant15New" ||
						GetClassName() == "Peasant16New" ||
						GetClassName() == "Peasant17New" ||
						GetClassName() == "Peasant18New" ||
						GetClassName() == "Peasant19New" ||
						GetClassName() == "Peasant20New" ||
						GetClassName() == "Peasant21New" ||
						GetClassName() == "Peasant22New" ||
						GetClassName() == "BeggarNew" ||
						GetClassName() == "Beggar1New" ||
						GetClassName() == "Beggar2New" ||
						GetClassName() == "Beggar3New" ||
						GetClassName() == "Beggar4New" ||
						GetClassName() == "Beggar5New" ||
						GetClassName() == "MerchantNew" ||
						GetClassName() == "WeaponSmithNew" ||
						GetClassName() == "BarKeepNew" ||
						GetClassName() == "ArmorerNew" ||
						GetClassName() == "MedicNew"))
			{
				if (TrueGameSkill <= SKILL_VERY_EASY) { nm = "LDLegendaryMonsterPickupEasy"; LDLPreload = nm; }
				if (TrueGameSkill == SKILL_EASY) { nm = "LDLegendaryMonsterPickupNormal"; LDLPreload = nm; }
				if (TrueGameSkill == SKILL_NORMAL) { nm = "LDLegendaryMonsterPickupHard"; LDLPreload = nm; }
				if (TrueGameSkill == SKILL_HARD) { nm = "LDLegendaryMonsterPickupUV"; LDLPreload = nm; }
				if (TrueGameSkill == SKILL_VERY_HARD) { nm = "LDLegendaryMonsterPickupNightmare"; LDLPreload = nm; }
				if (TrueGameSkill == SKILL_EXTREME) { nm = "LDLegendaryMonsterPickupExtreme"; LDLPreload = nm; }
				if (TrueGameSkill == SKILL_HORRIBLE) { nm = "LDLegendaryMonsterPickupHorrible"; LDLPreload = nm; }
				if (TrueGameSkill == SKILL_IMPOSSIBLE) { nm = "LDLegendaryMonsterPickupImpossible"; LDLPreload = nm; }
				if (TrueGameSkill >= SKILL_OMEGA) { nm = "LDLegendaryMonsterPickupOmega"; LDLPreload = nm; }
				spawnee2.A_GiveInventory(LDLPreload,1);
			}
		}
	}
	
	void A_FirstTicInit(actor spawnee, int type = 0)
	{
		AetheriusMonsterZSC spawnee2;
		spawnee2 = AetheriusMonsterZSC(spawnee);
		if (spawnee2)
		{
			if (spawnee2.health > 0 && !spawnee2.ActorLevelCalcs) 
			{
				if (spawnee2.GetClassName() != "Sauravatar") A_AetheriusStats(spawnee2, 0); 

				spawnee2.health = clamp(spawnee2.health, spawnee2.User_MaxHP, spawnee2.health);
				if (spawnee2.diedasafriendly && !spawnee2.bFRIENDLY)
				{
					if (dvdsdebug_actorresurrectdisplays && type == 0) Console.Printf("diedasafriendly [PostBeginPlay()]");
					if (dvdsdebug_actorresurrectdisplays && type == 1) Console.Printf("diedasafriendly [tick()]");
					spawnee2.bFRIENDLY = true;
					spawnee2.diedasafriendly = 0;
					if (spawnee2.diedasacharmed)
					{
						spawnee2.user_charmed = 1;
						spawnee2.diedasacharmed = 0;
					}
				}
				
				// LDL
				A_LegendaryCheck(spawnee2);
			}
		}
	}
	
	void A_SetMonsterProjNameTags(actor spawnee)
	{
		let globalvars = DSGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		string spawnname = spawnee.GetClassName();
		
		//A_BloomMonsterNames(spawnee);
		
		if (spawnname == "DoomImpBall") 
		{
			spawnee.SetTag("Imp Fireball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "CacodemonBall") 
		{
			spawnee.SetTag("Lightning Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "RevenantTracer") 
		{
			spawnee.SetTag("Tracer Missile");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArachnotronPlasma")
		{
			spawnee.SetTag("Plasma Ball");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "ArchvileFire")
		{
			spawnee.SetTag("Vile FireHex");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "BaronBall")
		{
			spawnee.SetTag("HellNoble Plasma");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "FatShot")
		{
			spawnee.SetTag("Flamer Shot");
			ProjSetSpeed(spawnee);
		}
		if (spawnname == "Rocket")
		{
			spawnee.SetTag("Rocket");
			ProjSetSpeed(spawnee);
		}
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		let globalvars = DSGlobalVariables.Get();
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		class<Actor> extracheck, extracheck2, extracheck3, extracheck4;
		string nm, nn, no, np;
		actor spawnee = e.thing;
		actor source;
		actor mastor;
		source = spawnee.target;
		mastor = spawnee.master;
		string spawnname = spawnee.GetClassName();
		
		if (spawnee)
		{
			if (spawnee.bCOUNTITEM ||
					Ammo(spawnee) || 
					Weapon(spawnee) ||
					Medikit(spawnee) ||
					Stimpack(spawnee) ||
					Berserk(spawnee)) spawnee.bDONTGIB = true;
			
			if (ExplosiveBarrel(spawnee) ||
					ExplosiveBarrel2(spawnee) ||
					Pod(spawnee)) spawnee.bPUSHABLE = true;
			
			if (DoomImpBall(spawnee) || 
					FatShot(spawnee)) 
			{
				spawnee.DamageType = 'Fire';
			}
			if (CacodemonBall(spawnee)) 
			{
				spawnee.DamageType = 'Lightning';
			}
			if (ArachnotronPlasma(spawnee))
			{
				spawnee.DamageType = 'Plasma';
			}
			
			//
			Inventory invspawnee;
			invspawnee = Inventory(spawnee);
			if (invspawnee)
			{
				string invspawnname = invspawnee.GetClassName();
				string nm, nn, no, np, nq, nr;

				nm = "KDIZDGreenKey";
				nn = "KDIZDSilverKey";
				no = "KDIZDOrangeKey";
				np = "KDIZDRedKey";
				nq = "KDIZDBlueKey";
				nr = "KDIZDYellowKey";
				if (invspawnname == nm ||
						invspawnname == nn || 
						invspawnname == no || 
						invspawnname == np || 
						invspawnname == nq || 
						invspawnname == nr) invspawnee.PickupSound = "getkeycard";
				
				if (invspawnname == "RedCard" ||
						invspawnname == "BlueCard" ||
						invspawnname == "YellowCard")
				{
					invspawnee.Pickupsound = "getkeycard";
				}
				if (invspawnname == "RedSkull" ||
						invspawnname == "BlueSkull" ||
						invspawnname == "YellowSkull")
				{
					invspawnee.Pickupsound = "getskullkey";
				}
				if (invspawnname == "Clip")
				{
					invspawnee.Pickupsound = "getbulletclip";
				}
				if (invspawnname == "ClipBox")
				{
					invspawnee.Pickupsound = "getbulletbox";
				}
				if (invspawnname == "Shell")
				{
					invspawnee.Pickupsound = "getfourshells";
				}
				if (invspawnname == "ShellBox")
				{
					invspawnee.Pickupsound = "getshellbox";
				}
				if (invspawnname == "RocketAmmo")
				{
					invspawnee.Pickupsound = "getsinglerocket";
				}
				if (invspawnname == "RocketBox")
				{
					invspawnee.Pickupsound = "getrocketbox";
				}
				if (invspawnname == "Cell")
				{
					invspawnee.Pickupsound = "getsmallcells";
				}
				if (invspawnname == "CellPack")
				{
					invspawnee.Pickupsound = "getcellpack";
				}
				if (invspawnname == "GreenArmor" ||
						invspawnname == "BlueArmor")
				{
					invspawnee.Pickupsound = "GetArmorFull";
				}
				if (invspawnname == "Stimpack" ||
						invspawnname == "Medikit")
				{
					invspawnee.Pickupsound = "gethealthkit";
				}
				if (invspawnname == "HealthBonus")
				{
					invspawnee.Pickupsound = "gethealthbonus";
				}
				if (invspawnname == "ArmorBonus")
				{
					invspawnee.Pickupsound = "getarmorbonus";
				}
			}
			
			if (true)
			{
				bool practicetarget;
				if (PracticeTarget(spawnee) || PracticeTarget2(spawnee)) practicetarget = true;

				// Tags
				double spdfactor;
				
				// Hell Ground
				if (level.GetChecksum() == 'dc9933f75206c48826563ee6ba6c069a' && spawnname == "TechPillar") spawnee.SetTag("Netherhell Imp");

				// SiGiL
				if (level.GetChecksum() == '61b546375618d619ab39eafd28f03c87' ||
						level.GetChecksum() == '0742076f6c57ed4d1174ebf8f0933b76' ||
						level.GetChecksum() == '3417a4859c8fece797c9daa715d14d63' ||
						level.GetChecksum() == 'aebf219bf02aaec549ba3ef8cb3f715b' ||
						level.GetChecksum() == '4e5d482364f6f787cb8efc17bde5d64d' ||
						level.GetChecksum() == '8e3fe80ae1440b38747853dab05dd62d' ||
						level.GetChecksum() == '8c35efba700537035c84f5e1ad35c064' ||
						level.GetChecksum() == '6ead80da1f30b4b3546fa294eef9f87c' ||
						level.GetChecksum() == '2a6b4d277f526bfb3adb122609feead7')
				{
					if (EvilEye(spawnee)) spawnee.bSOLID = false;
				}
				
				A_SetMonsterProjNameTags(spawnee);
				//
			}
		}
		
		Super.WorldThingSpawned(e);
	}
	
	override void WorldThingRevived(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			let globalvars = DSGlobalVariables.Get();
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			//
			//
			//
		}
		Super.WorldThingRevived(e);
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			if (dvdsdebug_hitsounds) Console.Printf("hitsounds (WorldThingDamaged check)");
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			//
			//
			//
		}
		Super.WorldThingDamaged(e);
	}
	
	override void WorldThingDied(WorldEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			actor player = players[0].mo;
			let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
			//
			//
			//
		}
		Super.WorldThingDied(e);
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (dvdsdebug_checksumprintout) Console.Printf("\cyMapCheckSum:\cx %s", level.GetChecksum());
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
		let globalvars = DSGlobalVariables.Get();
		//
		//
		//
		Super.WorldLoaded(e);
	}
	
	override void PlayerDied(PlayerEvent e) 
	{
		actor Player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		//
		//
		//
		Super.PlayerDied(e);
	}
	
	override void PlayerRespawned(PlayerEvent e) 
	{
		S_ChangeMusic("*", 0, true, true);
		Super.PlayerRespawned(e);
	}
	
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("AAAX", e.KeyScan);
		
		return false;
	}
	/*
	override void NetworkProcess(ConsoleEvent e)
	{
		Actor player = players[consoleplayer].mo;
		int buttons = player.GetPlayerInput(INPUT_BUTTONS);
		if (e.Name == "AAAX")   
		{
			int key1, key2;

			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_monsters += 1;
													 else level.total_monsters -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest2");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_items += 1;
													 else level.total_items -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest3");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (buttons & BT_SPEED) level.total_secrets += 1;
													 else level.total_secrets -= 1;
			}
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest4");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (level.mapname == "E1M8") Floor_LowerToLowest(666, 8);
			}

			[key1, key2] = Bindings.GetKeysForCommand("UseArmorIP");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				if (player.CountInv("KnightGownItem"))
				{
					player.A_SetInventory("KnightGown1IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem2"))
				{
					player.A_SetInventory("KnightGown2IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem3"))
				{
					player.A_SetInventory("KnightGown3IPItem",1);
				}
				else
				if (player.CountInv("KnightGownItem4"))
				{
					player.A_SetInventory("KnightGown4IPItem",1);
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("Whistl");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = PlayerStatItem(player.FindInventory("PlayerStatItem"));
				if (MiscItem)
				{
					if (player.health > 0 && MiscItem.whistlecooldown == 0)
					{
						player.A_SpawnItemEx("PlayerWhistle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						if (player.CountInv("PowerStrength") || 
								player.CountInv("AetheriusPowerStrength")) MiscItem.whistlecooldown = random(28,33);
																																									 else MiscItem.whistlecooldown = random(42,49);
					}
				}
			}
			[key1, key2] = Bindings.GetKeysForCommand("RecallAll");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				let MiscItem = DDPlayerPawn(player);
				if (DDPlayerPawn(player))
				{
					if (!automapactive) MiscItem.recalledall = true;
				}
			}
		}
	}
	*/
	
	override void UiTick()
	{
		super.UiTick();
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		super.RenderOverlay(e);
	}
	
}

class DVDS_StaticEventHandler : StaticEventHandler
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	//If any world has loaded, then we're done handling new games case
	override void WorldLoaded(WorldEvent e) 
	{
		actor player = players[0].mo;
		array<int> fs_textures;
		array<string> fs_sndinfo;
		string defaultSndinfo;
		
		array<string> allSF;
		StringTable.Localize("$STEP_FLATS").Split(allSF,":");
		Console.Printf("Default Footsteps TXT Loaded");
		/*
		StringTable.Localize("$STEP_FLATSOTEX").Split(allSF,":");
		Console.Printf("OTex Footsteps TXT Loaded");
		*/
		// Other CompatPacks
		if (Wads.CheckNumForName("DS-CIRCUS2", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSCIRCUS2").Split(allSF,":");
			Console.Printf("Circus2 Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("DS-KDIZD", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSKDIZD").Split(allSF,":");
			Console.Printf("KDIZD Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("DS-TCOTDA", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSTCOTDA").Split(allSF,":");
			Console.Printf("TCOTDA Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("DS-TUTNT", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSTUTNT").Split(allSF,":");
			Console.Printf("Ultimate Torment and Torture Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("DS-STAEONS", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSSTAEONS").Split(allSF,":");
			Console.Printf("Strange Aeons Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("DS-EPIC2", Wads.ns_global, -1, true) != -1)
		{
			StringTable.Localize("$STEP_FLATSEPIC2").Split(allSF,":");
			Console.Printf("Epic2 Footsteps TXT Loaded");
		}
		if (Wads.CheckNumForName("DS-HELLG", Wads.ns_global, -1, true) != -1) 
		{
			StringTable.Localize("$STEP_FLATSHELLG").Split(allSF,":");
			Console.Printf("Hell Ground Footsteps TXT Loaded");
		}
		
		for (int j = allSF.Size() - 1; j >= 0; j -= 1)
		{
			string s = StringTable.Localize(String.Format("$STEP_%s", allSF[j]));
			//Console.Printf("[EVENT] j: %d, %s, string: %s [Length: %d]", j, allSF[j], s, s.Length());
			
			if (s.Length() != 0)
			{
				textureid t = TexMan.CheckForTexture(allSF[j], TexMan.TYPE_ANY);
				if (t.Exists())
				{
					//Console.Printf("[EVENT 2] j: %d, %s", j, allSF[j]);
					fs_textures.Push(int(t));
					
					fs_sndinfo.Push(s);
				}
			}
		}
		defaultSndinfo = StringTable.Localize("$STEP_DEFAULT");
		
		int nofsttxts = 0;
		int nofsttxts2 = 0;
		for (let i = 0, l = level.Sectors.Size(); i < l; i++)
		{
			int idx;
			int textfound = 0;
			string texname;
			
			texname = texman.GetName(level.Sectors[i].GetTexture(sector.floor));
			idx = fs_textures.Find(int(level.Sectors[i].GetTexture(sector.floor)));
			if (idx != fs_textures.Size()) textfound = 1;
			else 
			{
				if (texname == "" || 
						texname == "-NOFLAT-") textfound = -1;
				if (texname == "DOPE2 R") textfound = -1;
				if (texname == "STEP1" || 
						texname == "STEP2" || 
						texname == "STEP3" ||
					texname == "A-DAN1" ||
					texname == "A-DAN2" ||
					texname == "A-DAN3" ||
					texname == "A-DAN4" ||
					texname == "A-DAN5" ||
					texname == "GRNROCK") textfound = -1;
				else nofsttxts++;
			}
			
			//if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava') level.Sectors[i].damagetype = 'Magma';
			if (level.Sectors[i].damagetype == 'Ice') level.Sectors[i].damagetype = 'IceWater';
			if (dvdsdebug_worldloaded) Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
			if (dvdsdebug_worldloaded) Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
			
			int damageamt = level.Sectors[i].damageamount;
			int damageint = level.Sectors[i].damageinterval;
			int leakdam = level.Sectors[i].leakydamage;
			string damagetyp = level.Sectors[i].damagetype;
			double sectgrav = level.Sectors[i].gravity;
			
			if (dvdsdebug_footsteps || dvdsdebug_footsteps2)
			{
				String SecPrint = "Sector #: ";
				SecPrint.AppendFormat("%d, ", i);
				if (textfound > 0) SecPrint.AppendFormat("\c[green]-floorpic: %s\c-", texname);
				else if (textfound < 0) SecPrint.AppendFormat("\c[yellow]=floorpic: %s\c-", texname);
				else SecPrint.AppendFormat("\c[red]~floorpic: %s\c-", texname);
				if (sectgrav != 1.0) SecPrint.AppendFormat("\c[green]gravity: %.4f\c-, ", sectgrav);
				if (damagetyp != 'None' || damageamt > 0 || damageint) SecPrint.AppendFormat(", \c[brick]damagetype: %s, damageamount: %d, damageinterval: %d, leakydamage: %d / 256", damagetyp, damageamt, damageint, leakdam);
				Console.Printf(SecPrint);
			}
		}
		if (nofsttxts > 0)
		{
			if (dvdsdebug_footsteps || dvdsdebug_footsteps2) player.A_StartSound("step/squeaky1",1002);
			Console.Printf("# of textures found with no footstep definitions [\cy%s\c-]: \c[red]%d\c-", level.mapname, nofsttxts);
		}
	}
}

// Alternatively, add the WorldThingDamaged code to an existing EventHandler or StaticEventHandler.
class SingleDamageRipperTracker : StaticEventHandler
{
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.Inflictor is "SingleDamageRipper")
		{
			SingleDamageRipper(e.Inflictor).ActorsAlreadyHit.Push(e.Thing);
			SingleDamageRipper(e.Inflictor).timesrippedoverall++;
			if (SingleDamageRipper(e.Inflictor).timesrippedoverall < 0) SingleDamageFastRipper(e.Inflictor).timesrippedoverall = 0;
		}

		if (e.Inflictor is "SingleDamageFastRipper")
		{
			SingleDamageFastRipper(e.Inflictor).ActorsAlreadyHit.Push(e.Thing);
			SingleDamageFastRipper(e.Inflictor).timesrippedoverall++;
			if (SingleDamageFastRipper(e.Inflictor).timesrippedoverall < 0) SingleDamageFastRipper(e.Inflictor).timesrippedoverall = 0;
		}
	}
}

class FireFloorAdjuster : StaticEventHandler 
{
	override void WorldLoaded(WorldEvent evt) 
	{
		if (gameinfo.gametype & GAME_Raven)
		{
			for (let i = 0, l = level.Sectors.Size(); i < l; i++)
			{
				//Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
				if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava')
						level.Sectors[i].damagetype = 'Magma';
			}
		}
	}
}

class MKeyEvents : EventHandler 
{   
	override bool InputProcess (InputEvent e)
	{
		if (e.Type == InputEvent.Type_KeyDown)
			SendNetworkEvent("MYKEYPRESS", e.KeyScan);
		
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		String nm, nn, no, np, nq;
		String pm, pn, po, pp, pq;
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		if (e.Name == "MYKEYPRESS")   
		{
			int key1, key2;
/*
			[key1, key2] = Bindings.GetKeysForCommand("Focus");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				// do your stuff
			}

			[key1, key2] = Bindings.GetKeysForCommand("PsycheUp");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				// do your stuff
			}
*/
			[key1, key2] = Bindings.GetKeysForCommand("QuickHeal");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				Inventory arti;
				int MaxHealthTrue = MiscItem.MaxHealthTrue;
				int HealthDiff = (MaxHealthTrue - playera.health);
				int SurgKitThreshold = (MaxHealthTrue * 0.75);
				int MedKitThreshold = random(20,30) + (MaxHealthTrue * frandom(0.2,0.3));
				int MedPatchThreshold = random(8,12) + (MaxHealthTrue * frandom(0.08,0.12));
				int QFlaskThreshold = (MaxHealthTrue * frandom(0.25,0.30));
				int MUrnThreshold = (MaxHealthTrue * 0.75);
				int Herb3Threshold = random(85,105) + (MaxHealthTrue * frandom(0.255,0.315));
				int Herb2Threshold = random(55,65) + (MaxHealthTrue * frandom(0.165,0.195));
				int Herb1Threshold = random(25,35) + (MaxHealthTrue * frandom(0.075,0.105));
				
				int itemtier = 0;
				if (MiscItem && 
						(playera.CountInv("ArtiHealthNew") ||
						 playera.CountInv("ArtiSuperHealthNew") ||
						 playera.CountInv("MedPatchNew") ||
						 playera.CountInv("MedicalKitNew") ||
						 playera.CountInv("SurgeryKitNew") ||
						 playera.CountInv("MedicinalHerb") ||
						 playera.CountInv("StrongMedicine") ||
						 playera.CountInv("SpecialMedicine")))
				{
					if (HealthDiff > 0)
					{
						if (HealthDiff > Herb3Threshold) itemtier = 3;
						else if (HealthDiff > Herb2Threshold) itemtier = 2;
						else if (HealthDiff > Herb1Threshold) itemtier = 1;

						arti = playera.FindInventory("");
						if (arti != null && arti.amount > 0) playera.UseInventory(arti);
						else
						{
							playera.A_StopSound(104);
							playera.A_StartSound("inv_fail",104,CHANF_NOSTOP);
							playera.A_Print(String.Format("You're not in need of healing!", 1.125, "SMALLFONT"));
						}
					}
					else
					{
						playera.A_StopSound(104);
						playera.A_StartSound("inv_fail",104,CHANF_NOSTOP);
						playera.A_Print(String.Format("You're not in need of healing!", 1.125, "SMALLFONT"));
					}
				}
			}
			
			[key1, key2] = Bindings.GetKeysForCommand("QuickMana");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				Inventory arti;
				int MaxMana = MiscItem.MaxMana;
				int CurrentMana = MiscItem.CurrentMana;
				int ManaDiff = (MaxMana - CurrentMana);
				int SExliThreshold = random(90,90) + (MaxMana * frandom(0.1425,0.1575));
				int WaterThreshold = random(30,30) + (MaxMana * frandom(0.05,0.05));

				if (MiscItem && 
						(playera.CountInv("MagicWater") ||
						 playera.CountInv("SageElixir") ||
						 playera.CountInv("ElfinElixir")))
				{
					if (ManaDiff > 0)
					{
						if (CurrentMana <= 0) // Use Elfin Elixir First
						{
							arti = playera.FindInventory("ElfinElixir");
							if (arti != null && arti.amount > 0) playera.UseInventory(arti);
							else
							{
								arti = playera.FindInventory("SageElixir");
								if (arti != null && arti.amount > 0) playera.UseInventory(arti);
								else
								{
									arti = playera.FindInventory("MagicWater");
									if (arti != null && arti.amount > 0) playera.UseInventory(arti);
									else 
									{
										playera.A_StopSound(104);
										playera.A_StartSound("inv_fail",104,CHANF_NOSTOP);
										playera.A_Print(String.Format("No MP Restoration Items Available!", 1.125, "SMALLFONT"));
									}
								}
							}
						}
						else
						if (ManaDiff > SExliThreshold)
						{
							arti = playera.FindInventory("SageElixir");
							if (arti != null && arti.amount > 0) playera.UseInventory(arti);
							else
							{
								arti = playera.FindInventory("MagicWater");
								if (arti != null && arti.amount > 0) playera.UseInventory(arti);
								else
								{
									arti = playera.FindInventory("ElfinElixir");
									if (arti != null && arti.amount > 0) playera.UseInventory(arti);
									else 
									{
										playera.A_StopSound(104);
										playera.A_StartSound("inv_fail",104,CHANF_NOSTOP);
										playera.A_Print(String.Format("No MP Restoration Items Available!", 1.125, "SMALLFONT"));
									}
								}
							}
						}
						else
						{
							arti = playera.FindInventory("MagicWater");
							if (arti != null && arti.amount > 0) playera.UseInventory(arti);
							else
							{
								arti = playera.FindInventory("SageElixir");
								if (arti != null && arti.amount > 0) playera.UseInventory(arti);
								else
								{
									arti = playera.FindInventory("ElfinElixir");
									if (arti != null && arti.amount > 0) playera.UseInventory(arti);
									else 
									{
										playera.A_StopSound(104);
										playera.A_StartSound("inv_fail",104,CHANF_NOSTOP);
										playera.A_Print(String.Format("No MP Restoration Items Available!", 1.125, "SMALLFONT"));
									}
								}
							}
						}
					}
					else
					{
						playera.A_StopSound(104);
						playera.A_StartSound("inv_fail",104,CHANF_NOSTOP);
						playera.A_Print(String.Format("You have enough MP!", 1.125, "SMALLFONT"));
					}
				}
			}
			
			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				level.total_monsters -= 1;
			}

			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest2");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				level.total_items -= 1;
			}

			[key1, key2] = Bindings.GetKeysForCommand("MKeyTest3");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				level.total_secrets -= 1;
			}
/*
			[key1, key2] = Bindings.GetKeysForCommand("MaxHellCoreWeapons");
			if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
			{
				CallACS("MiscVarSetDECORATE",96,9);
				CallACS("MiscVarSetDECORATE",97,9);
				CallACS("MiscVarSetDECORATE",98,9);
				CallACS("MiscVarSetDECORATE",99,9);
				CallACS("MiscVarSetDECORATE",100,9);
				CallACS("MiscVarSetDECORATE",101,9);
				CallACS("MiscVarSetDECORATE",102,9);
				CallACS("MiscVarSetDECORATE",103,9);
				CallACS("MiscVarSetDECORATE",104,9);
				CallACS("MiscVarSetDECORATE",105,9);
				CallACS("MiscVarSetDECORATE",106,9);
				CallACS("MiscVarSetDECORATE",107,9);
				CallACS("MiscVarSetDECORATE",108,9);
				CallACS("MiscVarSetDECORATE",109,9);
				CallACS("MiscVarSetDECORATE",110,9);
				CallACS("MiscVarSetDECORATE",111,9);
				CallACS("MiscVarSetDECORATE",112,9);
			}
*/
		}
	}
}

class DVDSWaterHandler : StaticEventHandler 
{
	override void RenderOverlay(RenderEvent e)
	{
		// set the player's timer up correctly (more-than-1-tick precision)
		PlayerInfo p = players[consoleplayer];
		actor player = players[0].mo;
		let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
		PPShader.SetUniform1f("DVDSwatershader", "timer", gametic + e.FracTic);
		int playbloom; // = Wads.CheckNumForName("EE-BLOOM", Wads.ns_global, -1, true);
		int winetics;
		int maxwinetics;
		double winefactor;
		
		bool chasecam = false;
		if (p.cheats & CF_CHASECAM) chasecam = true;
		if (!chasecam)
		{
			if ((playbloom == -1 && p.mo.waterlevel >= 3))
			{
				if (dvdsdebug_shader)
				{
					PPShader.SetEnabled("DVDSwatershader", false);
					PPShader.SetEnabled("DVDSwatershader", false);
				}
				else
				{
					PPShader.SetEnabled("DVDSwatershader", true);
					PPShader.SetEnabled("DVDSwatershader", true);
					double effectSize = CVar.GetCVar("dvds_uweffectsize", p).GetFloat();
					//Console.Printf("effectSize: %.8f", effectSize);
					if (MiscItem)
					{
						double tempeffectsize = 1.0;
						
						if (playbloom == -1 && p.mo.waterlevel >= 3) tempeffectsize += 1.0;
						effectSize *= tempeffectsize;
					}
					if ((playbloom == -1 && p.mo.waterlevel >= 3) && p.mo.CountInv("PowerNoDrown")) effectSize *= frandom(0.045,0.055);
					//Console.Printf("effectSize: %.8f, zoom: %.8f [tic: %d]", effectSize, (1 - (effectSize * 2)), gametic);
					PPShader.SetUniform1f("DVDSwatershader", "waterFactor", effectSize);
					PPShader.SetUniform1f("DVDSwatershader", "zoomFactor", 1 - (effectSize * 2));
				}
			}
			else 
			{
				PPShader.SetEnabled("DVDSwatershader", false);
				PPShader.SetEnabled("DVDSwatershader", false);
			}
		}
		else 
		{
			PPShader.SetEnabled("DVDSwatershader", false);
			PPShader.SetEnabled("DVDSwatershader", false);
		}
	}
}

class EVP_FootstepsInit : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		if (Level.MapName != "TITLEMAP")
		{
			int numfound;
			ThinkerIterator FStepFinder = ThinkerIterator.Create("EVP_Footsteps");
			EVP_Footsteps mo;
			while (mo = EVP_Footsteps(FStepFinder.Next()))
			{
				mo.Destroy();
				numfound++;
				if (dvdsdebug_footsteps) Console.Printf("Destroying Old EVP_Footsteps Item #%d", numfound);
			}
			if (e.playerNumber == 0)
			{
				let fs = EVP_Footsteps(Actor.Spawn("EVP_Footsteps"));
				if (fs) fs.Init(players[0].mo);
				if (dvdsdebug_footsteps) Console.Printf("Adding New EVP_Footsteps Item");
			}
		}
	}
}