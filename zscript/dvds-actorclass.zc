// Base class
class AetheriusBaseZSC : Actor abstract
{
	mixin HellcoreChecker;
	mixin EGArmorBonus;
	mixin GetPlayerHeight;
	mixin DamageMessages;
	mixin MapCheck;

	double ATracerFactor, ATracerFactorDiff;
	double expshare;
	float user_tempvar1, user_tempvar2, user_tempvar3, user_tempvar4, user_tempvar5;
	double basealpha;
	int user_bormpainreact;
	int user_hyperlvl1, user_hyperlvl2;
	int user_theta, user_dormant, user_isstealth, user_wasstealth, user_baseattack, user_basedefense, user_basemass; 
	int user_monsterlevel, user_lastmonsterlevel;
	int user_extraevolvechance, user_extrastealthchance;
	int user_monsterrating, user_lastmonsterrating;
	int user_willbecomelegendary, user_legendaryevolved;
	int user_MaxHP, user_HPCritRange, user_HPBuffRange, user_HPLowBuffRange, user_HPXDeathRange, user_HPXDeathRange2, user_HPLowRange;
	int user_deathcounter, user_truekill;
	int user_checkmapskill, user_ressurrectstr, user_resurrectedtimes, user_canusecrisisatk;
	int user_presetleveladd, user_presetlevelrand1, user_presetlevelrand2;
	int user_barragecounter, user_shotsfired, user_shotsfiredmax;
	float user_shotaccuracy, user_shotaccuracy1, user_shotaccuracy2; 
	float user_shotzaccuracy, user_shotzaccuracy1, user_shotzaccuracy2; 
	float user_randominaccuracy, user_randominaccuracy2;
	float user_basespeed;
	int user_pelletsfired, user_currenttracer, user_aimangleorigin; 
	int user_ammotype, user_gravitytype, user_shotangle, user_chargeinterval, user_pulseinterval;
	int user_spread, user_spread1, user_spread2;
	int user_attacktype, user_attacks, user_attackmax, user_fastchasechance, user_fastchaseextra, user_painfastchase;
	int user_paintomissile;
	int user_painreacttimer;
	int user_fastchasetimer, user_fastchasetimermax;
	int user_walksound;
	double user_attacktypef;

	int user_nolegendarytrans;
	int user_golddrop;
	int user_crisisprojectile;
	int user_defendtimer, user_defendtimermax, user_defendcycles;
	int user_autorestimer;
	int user_firevolleys, user_firevolleymax;
	int user_random, user_random1, user_ailment1, user_ailmentmaxchance, user_attackpoint;
	int user_chargechance; 
	int user_charmchance, user_charmed;
	int user_summoned;
	int user_regencycles, user_regencyclemax;
	int IsACrisisExplosion;
	
	//Array<Actor> DroppedItems;
	// DroppedItems.Push(myActor);
	
	default
	{
		+CASTSPRITESHADOW;
		-NOSPRITESHADOW;
	}
	
	override void PostBeginPlay()
	{
		ATracerFactor = 1.00;
		ATracerFactorDiff = 0.00;

		//This space for rent.
		super.PostBeginPlay(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}
	
	double A_GetMonsterRatingRatio(double monsterrating, int type)
	{
		double mult = 0.0;
		if (monsterrating >= 0) mult += 0.00; // [-]
		if (monsterrating >= 1) mult += 0.0125; // [E]
		if (monsterrating >= 2) mult += 0.0125; // [D]
		if (monsterrating >= 3) mult += 0.01875; // [C]
		if (monsterrating >= 4) mult += 0.025; // [B]
		if (monsterrating >= 5) mult += 0.025; // [A]
		if (monsterrating >= 6) mult += 0.03125; // [S]
		if (monsterrating >= 7) mult += 0.0375; // <SS>
		if (monsterrating >= 8) mult += 0.0375; // <SSS>
		if (type <= -1) mult *= 1.5;
		if (type >= 1) mult *= 0.67;
		mult += 1.0;
		//Console.Printf("[A_GetMonsterRatingRatio] - mult: %.8f, type: %d", mult, type);
		return mult;
	}
	
	double A_CheckMonsterLevelDiv(double basecheck = 0, bool userating = true, actor act = null)
	{
		if (!act) act = self;
		double newcheck = basecheck;
		newcheck *= (1.0 / A_GetMonsterRatingRatio(user_monsterrating,0));
		//Console.Printf("[A_CheckMonsterLevelDiv] - basecheck: %d, newcheck: %d", basecheck, newcheck);
		return newcheck;
	}
	
	double A_CheckMonsterLevelMult(double basecheck = 0, bool userating = true, actor act = null)
	{
		if (!act) act = self;
		double newcheck = basecheck;
		newcheck *= A_GetMonsterRatingRatio(user_monsterrating,0);
		//Console.Printf("[A_CheckMonsterLevelMult] - basecheck: %d, newcheck: %d", basecheck, newcheck);

		return newcheck;
	}
	
	bool A_CheckMonsterLevel(double basecheck = 0, int checktype = 0, bool userating = true, actor act = null)
	{
		if (!act) act = self;
		double newcheck = basecheck;
		newcheck *= (1.0 / A_GetMonsterRatingRatio(user_monsterrating,-1));
		newcheck = int(newcheck);
		//Console.Printf("[A_CheckMonsterLevel] - basecheck: %d, newcheck: %d", basecheck, newcheck);
		
		bool check = false;
		if (checktype == 10)
		{
			if (user_monsterlevel != newcheck) check = true;
		}
		else
		{
			if (checktype <= -2)
			{
				if (user_monsterlevel < newcheck) check = true;
			}
			else
			if (checktype == -1)
			{
				if (user_monsterlevel <= newcheck) check = true;
			}
			else
			if (checktype == 0)
			{
				if (user_monsterlevel == newcheck) check = true;
			}
			else
			if (checktype == 1)
			{
				if (user_monsterlevel >= basecheck) check = true;
			}
			else
			if (checktype >= 2)
			{
				if (user_monsterlevel > newcheck) check = true;
			}
		}
		return check;
	}
	
	int A_CheckMonsterLevelRValue(double basecheck = 0, bool userating = true, actor act = null)
	{
		if (!act) act = self;
		double newcheck = basecheck;
		newcheck *= (1.0 / A_GetMonsterRatingRatio(user_monsterrating,-1));
		newcheck = int(newcheck);
		//Console.Printf("[A_CheckMonsterLevel] - basecheck: %d, newcheck: %d", basecheck, newcheck);
		
		return newcheck;
	}
	
	action bool A_CheckBerserk()
	{
		actor playera = players[0].mo;
		let MiscItem = PlayerStatItem(playera.FindInventory("PlayerStatItem"));
		bool check = false;
		if (playera.CountInv("PowerStrength") || 
				playera.CountInv("AetheriusPowerStrength")) check = true;
		return check;
	}
	
	action double A_SetShieldPieceDist(double basedist = 32.0)
	{
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		double result = basedist;
		if (ClassicDoomType == 5) result *= 1.2; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		return result;
	}

	void A_TimeBomb()
	{
		AddZ(32, false);
		A_SetRenderStyle(1., STYLE_Add);
		A_Explode();
	}

	// Altered A_Explode to have automatic Crisis Attack support. :V
	int A_DVDSExplode(int damage = -1, int distance = -1, int flags = XF_HURTSOURCE, bool alert = false, int fulldamagedistance = 0, int nails = 0, int naildamage = 10, class<Actor> pufftype = "BulletPuff", name damagetype = "none")
	{
		AetheriusMonsterZSC DVDSActor;
		DVDSActor = AetheriusMonsterZSC(tracer);
		AetheriusProjectileZSC UniqueProjectile;
		UniqueProjectile = AetheriusProjectileZSC(self);
		AetheriusFastProjectileZSC UniqueProjectileFast;
		UniqueProjectileFast = AetheriusFastProjectileZSC(self);
		int CheckForCrisis = 0;

		IsACrisisExplosion = false;
		if (DVDSActor) 
		{
			if (flags & XF_NOTMISSILE)
			{
				CheckForCrisis = 1;
			}
			else
			{
				if (UniqueProjectile) CheckForCrisis = 2;
			}
		}
		
		if (CheckForCrisis > 0)
		{
			DVDSActor.user_canusecrisisatk = 0;
			if (DVDSActor.health <= DVDSActor.user_HPLowRange) 
			{ 
				if (DVDSActor.health <= DVDSActor.user_HPCritRange) 
				{ 
					DVDSActor.user_canusecrisisatk = 1; 
					//Console.Printf("user_HPCritRange");
				} 
				else 
				{ 
					if (random(1,4) == 4) DVDSActor.user_canusecrisisatk = 1;
					//Console.Printf("user_HPLowRange");
				} 
			}
			if (dvds_monstercrisisattacks == 0) { DVDSActor.user_canusecrisisatk = 0; }
			//Console.Printf("user_canusecrisisatk: %d", user_canusecrisisatk);
			if (DVDSActor.user_canusecrisisatk)
			{
				DVDSActor.A_StartSound("crisisattack", 9, CHANF_DEFAULT, frandom(1.25,1.5), ATTN_NORM, frandom(0.75,1.25));
				DVDSActor.A_StartSound("crisisattack2", 10, CHANF_DEFAULT, frandom(1.25,1.5), ATTN_NORM, frandom(0.75,1.25));
				IsACrisisExplosion = true;
			}
		}


		if (damage < 0)	// get parameters from metadata
		{
			damage = ExplosionDamage;
			distance = ExplosionRadius;
			flags = !DontHurtShooter;
			alert = false;
		}
		if (distance <= 0) distance = damage;
		
		if (IsACrisisExplosion) damage *= dvds_monstercrisismulti;

		// NailBomb effect, from SMMU but not from its source code: instead it was implemented and
		// generalized from the documentation at http://www.doomworld.com/eternity/engine/codeptrs.html

		if (nails)
		{
			if (IsACrisisExplosion) naildamage *= dvds_monstercrisismulti; //

			double ang;
			for (int i = 0; i < nails; i++)
			{
				ang = i*360./nails;
				// Comparing the results of a test wad with Eternity, it seems A_NailBomb does not aim
				LineAttack(ang, MISSILERANGE, 0.,
					//P_AimLineAttack (self, ang, MISSILERANGE), 
					naildamage, 'Hitscan', pufftype, bMissile ? LAF_TARGETISSOURCE : 0);
			}
		}

		if (!(flags & XF_EXPLICITDAMAGETYPE) && damagetype == 'None')
		{
			damagetype = self.DamageType;
		}

		int pflags = 0;
		if (flags & XF_HURTSOURCE)	pflags |= RADF_HURTSOURCE;
		if (flags & XF_NOTMISSILE)	pflags |= RADF_SOURCEISSPOT;

		int count = RadiusAttack (target, damage, distance, damagetype, pflags, fulldamagedistance);
		if (!(flags & XF_NOSPLASH)) CheckSplash(distance);
		if (alert && target != NULL && target.player != NULL)
		{
			SoundAlert(target);
		}
		return count;
	}
	
	// New Health Bonus Script :P
	action void A_EmulateGiveHealthBonusSource (Actor Source, int multiplier = 1, int givemanachance = 8, int staminagive = 100, int hellcorecool = 1)
	{
		AetheriusPlayerPawn playpawn;
		playpawn = AetheriusPlayerPawn(source);
		if (playpawn)
		{
			int CharacterClass = CallACS("CheckCharacterClass");
			int PlayerLevel = CallACS("StatCheck",0);
			int MaxHealthTrue = CallACS("StatCheck",1);
			int MaxMana = CallACS("StatCheck",2);
			int CurrentMana = CallACS("StatCheck",14);
			int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
			int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
			int MaxStamina5X = MaxStamina * 5;
			int StamToGain = CallACS("MiscVarCheckDECORATE",165);
			int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
			int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
			int MaxHealthLimit = MaxHealthTrue * 2;
			int MaxManaLimit = MaxMana * 2;
			int temp1, temp2;
			int ptemp1, ptemp2;
			int PerkFactor;
			int CurrentHealth, TempHealAmount, TempHealAmount2, TempHealAmount3;
			
			if (multiplier < 1) multiplier = 1;
			CurrentHealth = playpawn.player.mo.health;
			
			if (CurrentHealth < MaxHealthLimit)
			{
				TempHealAmount = MaxHealthTrue / 100;
				if (TempHealAmount < 1) TempHealAmount = 1;
			
				TempHealAmount2 = (PlayerLevel * 0.04);
				TempHealAmount += TempHealAmount2;
				TempHealAmount *= multiplier;
				if ((dvds_showdamagemessages & 1) && TempHealAmount > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(playpawn, TempHealAmount);
				CurrentHealth += TempHealAmount;
				if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;

				playpawn.player.mo.health = playpawn.player.health = CurrentHealth;
			}
			ptemp1 = 0;
			for (int i = 0; i < multiplier; i++) 
			{
				ptemp2 = randompick(4,5,5,5,6);
				CallACS("MiscVarSetDECORATE",92,ptemp2,1); // HPRegenBonPenTimer
				ptemp1 += ptemp2;
			}
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [HealthBonusSource]: %d", ptemp1);
			
			if (random(1,100) <= givemanachance)
			{
				if (CurrentMana < MaxManaLimit)
				{
					TempHealAmount = MaxMana / 100;
					if (TempHealAmount < 1) TempHealAmount = 1;
				
					TempHealAmount2 = (PlayerLevel * 0.04);
					TempHealAmount += TempHealAmount2;
					TempHealAmount *= multiplier;
					CurrentMana += TempHealAmount;
					if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;

					CallACS("OtherVarSetDECORATE",2,CurrentMana);
					ptemp1 = 0;
					for (int i = 0; i < multiplier; i++)
					{
						ptemp2 = randompick(3,4,4,4,5);
						CallACS("MiscVarSetDECORATE",93,ptemp2,1); // MPRegenBonPenTimer
						ptemp1 += ptemp2;
					}
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd [HealthBonusSource]: %d", ptemp1);
				}
			}
			
			if (staminagive)
			{
				// Add 0.5% to Stamina Value [up to 500%]
				StamToGain = MaxStamina / 200;
				StamToGain *= multiplier;
				int perktemp1 = StamToGain;
				
				PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
				perktemp1 = perktemp1 * PerkFactor / 10000;
				if (playpawn.player.mo.CountInv("WaterFlyingDress")) perktemp1 *= 1.6667;
				if (dvdsdebug_healitemdisplays) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, StamToGain);
				StamToGain = perktemp1;
				
				// Tweaks the multiplier for Stamina Recovery.
				StamToGain = StamToGain * staminagive / 100;
				
				if (CurrentStamina < MaxStamina5X) CurrentStamina += StamToGain; 
				if (CurrentStamina > MaxStamina5X) CurrentStamina = MaxStamina5X;
				
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				ptemp1 = 0;
				for (int i = 0; i < multiplier; i++)
				{
					ptemp2 = randompick(3,4,4,4,5);
					CallACS("MiscVarSetDECORATE",94,ptemp2,1); // StamRegenBonPenTimer
					ptemp1 += ptemp2;
				}
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [HealthBonusSource]: %d", ptemp1);
			}
			
			int HellcoreRestored;
			int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
			int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
			int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
			if (CharacterClass == 2 && hellcorecool) // Flora's Hellcore Heating will also marginally go down with each Health Bonus grabbed
			{
				if (HellcoreOverheatLevel > 0)
				{
					TempHealAmount = 2500; // 0.25% [10000000 is 1000.00% (maximum)]
					TempHealAmount *= multiplier;
					TempHealAmount2 = PlayerLevel * 10;
					TempHealAmount3 = random(-500,500);
					HellcoreRestored = TempHealAmount + TempHealAmount2 + TempHealAmount3;
					if (playpawn.player.mo.CountInv("WaterFlyingDress")) HellcoreRestored *= 1.6667;
					if (SoulMasteryPerkLevel > 0)
					{
						temp1 = 0;
						temp2 = 0;
						if (SoulMasteryPerkLevel <= 0) temp1 = 0;
						if (SoulMasteryPerkLevel == 1) temp1 = 1;
						if (SoulMasteryPerkLevel == 2) temp1 = 2;
						if (SoulMasteryPerkLevel == 3) temp1 = 3;
						if (SoulMasteryPerkLevel == 4) temp1 = 4;
						if (SoulMasteryPerkLevel >= 5) temp1 = 5;
						if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
						if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
						if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
						PerkFactor = 16 + (temp1 + temp2);
						HellcoreRestored = HellcoreRestored * PerkFactor / 16;
					}
					HellcoreRestored = clamp(HellcoreRestored, 1, 10000000);
				
					HellcoreOverheatLevel -= HellcoreRestored;
					if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
					
					CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
				}
				if (CharacterClass == 2) 
				{
					ptemp1 = 0;
					for (int i = 0; i < multiplier; i++)
					{
						ptemp2 = randompick(3,4,4,4,5);
						CallACS("MiscVarSetDECORATE",95,ptemp2,1); // HLCRCoolBonPenTimer
						ptemp1 += ptemp2;
					}
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRBonusTimeAdd [HealthBonusSource]: %d", ptemp1);
				}
			}
		}
	}
	
	action void A_SauronGauntletsHit(Actor source, int Amount = 0, int HitType = 0)
	{
		AetheriusPlayerPawn playpawn;
		playpawn = AetheriusPlayerPawn(source);
		if (playpawn)
		{
			int GMultiplier;
			int check;
			int PlayerLevel = CallACS("StatCheck",0);
			int CharacterClass = CallACS("CheckCharacterClass");
			int MaxHealthTrue = CallACS("StatCheck",1);
			int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
			int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
			int CurrentMana = CallACS("StatCheck",14);
			int MaxMana = CallACS("StatCheck",2);
			int MaxManaLimit = MaxMana * 2;
			bool gaveAnything = false;
			
			HitType = clamp(HitType, 1, 2);
			
			if (HitType == 1) Amount = (Amount / 250) + 1; // Give some life when hurting a monster [1+(Damage/250)]
			if (HitType == 2) Amount = (Amount / 50) + 5; // Give more life when killing a monster [5+(Damage/50)]
		
			Amount = clamp(Amount, 1, 64);
			
			// Restore Health & Stamina
			int giveHealth = dvds_saurongauntlets_givehealth;
			int giveStamina = dvds_saurongauntlets_givestamina;
			int previousHealth = playpawn.player.mo.health;
			int previousStamina = CurrentStamina;
			if (giveHealth || giveStamina)
			{
				int giveStaminaAmount = 50;
				if (giveStamina <= 0) giveStaminaAmount = 0;
				
				A_EmulateGiveHealthBonusSource(playpawn,Amount,0,giveStaminaAmount,0);
				
				if (giveHealth <= 0) playpawn.player.mo.health = playpawn.player.health = previousHealth;
				else if (givehealth < 2 && playpawn.player.mo.health > MaxHealthTrue) playpawn.player.mo.health = playpawn.player.health = MaxHealthTrue;
				
				if (previousHealth > playpawn.player.mo.health) playpawn.player.mo.health = playpawn.player.health = previousHealth;
				
				if (giveStamina > 0 && giveStamina < 2 && CurrentStamina > MaxStamina) CurrentStamina = MaxStamina;
				
				if (previousStamina > CurrentStamina) CurrentStamina = previousStamina;
				
				if (CurrentStamina > previousStamina || playpawn.player.mo.health > previousHealth) gaveAnything = true;
			}
			
			// Restore Armor [Flora Cannot Gain Armor from it though]
			if (CharacterClass != 2 && dvds_saurongauntlets_givearmor)
			{
				if (playpawn.player.mo.CountInv("Armor") < dvds_saurongauntlets_givearmor)
				{
					int ArmorAmount = (Amount * random(6,9)) / 15;
					if (ArmorAmount < 1) ArmorAmount = 1;
					A_EmulateGiveArmorBonus(ArmorAmount,1,true,playpawn);
					gaveAnything = true;
				}
			}

			// Restore Mana
			if (dvds_saurongauntlets_givemana)
			{
				int MaxManaLimit = MaxMana;
				if (dvds_saurongauntlets_givemana > 1) MaxManaLimit *= 2;
				
				if (CurrentMana < MaxManaLimit)
				{
					int prevMana = CurrentMana;
					int ManaAmount = (Amount * random(6,9)) / 9;
					GMultiplier = (PlayerLevel * 4) + 100;
					ManaAmount = Amount;
					ManaAmount = ManaAmount * GMultiplier / 100;
					if (CharacterClass == 2) ManaAmount = ManaAmount * random(5,7) / 4; // Flora will gain Extra Mana from a Gauntlet punch to make up for not being able to get armor.
					else if (CharacterClass == 8) ManaAmount = ManaAmount * random(4,6) / 4; // Ailish will gain Extra Mana from a Gauntlet punch as well.
					else ManaAmount = ManaAmount * random(9,15) / 12;
					if (ManaAmount < 1) ManaAmount = 1;
					CurrentMana += ManaAmount;
					if (CurrentMana > MaxManaLimit) CurrentMana = MaxManaLimit;
					
					if (CurrentMana > prevMana)
						gaveAnything = true;
				}
			}
			
			if (gaveAnything)
			{
				// Only do this if the player actually received something (health, mana, armor, and/or stamina).
				if (CharacterClass == 2) playpawn.player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				else playpawn.player.mo.A_StartSound("HealSpell1",83,CHANF_DEFAULT,1.0,ATTN_NORM); 
				
				playpawn.player.mo.A_SetBlend("E0 E0 E0",0.33,random(17,18),"E0 E0 E0",0.0); // FadeRange(224,224,224,0.33,224,224,224,0,0.5);
			}
			
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			
		}
	}
	
	void A_Tracer2(double traceang = 19.6875)
	{
		double dist;
		double slope;
		Actor dest;
				
		// adjust direction
		dest = tracer;
		
		if (!dest || 
				dest.health <= 0 || 
				Speed == 0 || 
				!CanSeek(dest))
		{
			return;
		}

		if (dest &&
				dest.CountInv("PlayerDashing") && 
				tracer &&
				random(1,16) <= 1) 
		{
			tracer = null;
			return;
		}
	
		// change angle
		if (!tracer || !dest) return;
		
		bool debugtracer = false;
		double dashfactor1 = 0.667;
		double dashfactor2 = 0.834;
		double dashfactorex = 1;
		if (dest && dest.CountInv("PlayerDashing"))
		{
			dashfactorex *= frandom(dashfactor1,dashfactor2);
			if (random(1,2) <= 1)
			{
				dashfactorex *= frandom(dashfactor1,dashfactor2);
				if (random(1,3) <= 1)
				{
					dashfactorex *= frandom(dashfactor1,dashfactor2);
					if (random(1,4) <= 1)
					{
						dashfactorex *= frandom(dashfactor1,dashfactor2);
						if (random(1,5) <= 1)
						{
							dashfactorex *= frandom(dashfactor1,dashfactor2);
							if (random(1,6) <= 1)
							{
								dashfactorex *= frandom(dashfactor1,dashfactor2);
								if (random(1,7) <= 1)
								{
									dashfactorex *= frandom(dashfactor1,dashfactor2);
									if (random(1,8) <= 1)
									{
										dashfactorex *= frandom(dashfactor1,dashfactor2);
										if (random(1,9) <= 1)
										{
											dashfactorex *= frandom(dashfactor1,dashfactor2);
											if (random(1,10) <= 1)
											{
												dashfactorex *= frandom(dashfactor1,dashfactor2);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (debugtracer) Console.Printf("dashfactorex: %.8f", dashfactorex);
			ATracerFactor *= dashfactorex;
			ATracerFactorDiff = (1.00 - ATracerFactor);
		}
		else
		{
			if (ATracerFactor < 1.00 && 
					ATracerFactorDiff > 0.00)
			{
				ATracerFactor += (ATracerFactorDiff * 0.125);
				if (ATracerFactor >= 1.00)
				{
					ATracerFactor = 1.00;
					ATracerFactorDiff = 0.00;
				}
			}
		}
		
		double exact = AngleTo(dest);
		double diff = deltaangle(angle, exact);
		
		if (debugtracer) Console.Printf("ATracerFactor: %.8f, ATracerFactorDiff: %.8f", ATracerFactor, ATracerFactorDiff);

		traceang *= ATracerFactor;
		if (debugtracer) Console.Printf("traceang: %.8f", traceang);
		if (diff < 0)
		{
			angle -= traceang;
			if (deltaangle(angle, exact) > 0)
				angle = exact;
		}
		else if (diff > 0)
		{
			angle += traceang;
			if (deltaangle(angle, exact) < 0.)
				angle = exact;
		}

		VelFromAngle();

		if (!bFloorHugger && !bCeilingHugger)
		{
			// change slope
			dist = DistanceBySpeed(dest, Speed);

			if (dest.Height >= 56.)
			{
				slope = (dest.pos.z + 40. - pos.z) / dist;
			}
			else
			{
				slope = (dest.pos.z + Height*(2./3) - pos.z) / dist;
			}
			
			slope *= ATracerFactor;
			if (debugtracer) Console.Printf("slope: %.8f", slope);
			
			if (slope < Vel.Z)
				Vel.Z -= 1. / 8;
			else
				Vel.Z += 1. / 8;
		}
	}
	
	void A_Destroy()
	{
		self.Destroy();
	}
}

class AetheriusAfterimageZSC : AetheriusBaseZSC abstract
{
	override void Tick()
	{
		

		//This space for rent.
		super.Tick(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}
}

class AetheriusSpawnedItem : AetheriusBaseZSC abstract
{
	bool IsACrisisSpawnedItem;
	int CrisisMultiplier;
	
	override void PostBeginPlay()
	{
		basealpha = alpha;
		if (GetClassName() == "DSFX3") basealpha *= 0.90;

		//This space for rent.
		super.PostBeginPlay(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}
}

class AetheriusCustomGib : AetheriusBaseZSC abstract
{
	int deathcounter;
	int fadecounter;
	int ownedgib;

	override void Tick()
	{
		if (GetAge() >= 0 && GetAge() <= 4) { if (target != null) ownedgib = 1; }
		if (ownedgib)
		{
			if (target && target.health > 0) A_FadeOut(0.0625);

			if (dvds_gibswillfade)
			{
				if (GetAge() >= (dvds_gibsbeforefadetimer*35))
				{
					fadecounter++;
					A_FadeOut((1.0/random(32,38)),FTF_REMOVE);
					if (fadecounter > 39) Destroy();
					if (dvdsdebug_deathgibfadedisplays) Console.Printf("\cy%s\c- alpha: \cx%.8f\c- - fadecounter: %d / 40", GetClassName(), alpha, fadecounter);
				}
				else
				{
					if (dvdsdebug_deathgibfadedisplays) Console.Printf("\cy%s\c- deathcounter: \cx%d\c-", GetClassName(), GetAge());
				}
			}
		}

		//This space for rent.
		super.Tick(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}
}

class CustomInventoryExt : CustomInventory abstract
{
	int user_theta;
	int allowexperiessence, gfxeffectlevel;
	int animationtimer, heartbeattimer;
	int skilllevel;
	int frametimer;
	int autousemode;
	int NoOfBackPacks;
	
	string pickupmsg;
	mixin EGArmorBonus;
	mixin Tension;
	mixin DamageMessages;
	
	// General
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4;
	
	property AutoUse: autousemode;
	
	default
	{
		+DONTGIB;
	}
	
	override void DoEffect()
	{
		actor playera = players[0].mo;
		double value1a, value1b;
		double value2a, value2b;
		double value3a, value3b;
		double value4a, value4b;
		string tagedit = GetTag("");
		int CharacterClass = CallACS("CheckCharacterClass");
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		double perkbasemulti = 16;
		double PerkFactor;
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		bool changed = false;
		int buttons = GetPlayerInput(0, INPUT_BUTTONS);
		
		if (GetClassName() == "MedicinalHerb")
		{
			value1a = 25; value1b = 35;
			value2a = 7.5; value2b = 10.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (playera && playera.CountInv("WaterFlyingDress")) 
			{
				value2a *= 1.667;
				value2b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value2a *= PerkFactor;
			value2b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Medicinal Herb: Recovers %d-%d HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "StrongMedicine")
		{
			value1a = 55; value1b = 65;
			value2a = 16.5; value2b = 19.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (playera && playera.CountInv("WaterFlyingDress")) 
			{
				value2a *= 1.667;
				value2b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value2a *= PerkFactor;
			value2b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Strong Medicinal Herb: Recovers %d-%d HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "SpecialMedicine")
		{
			value1a = 85; value1b = 105;
			value2a = 25.5; value2b = 31.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (playera && playera.CountInv("WaterFlyingDress")) 
			{
				value2a *= 1.667;
				value2b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value2a *= PerkFactor;
			value2b *= PerkFactor;
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Special Medicinal Herb: Recovers %d-%d HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "MagicWater")
		{
			value1a = 30; value1b = 30;
			value2a = 5.0; value2b = 5.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Magic Water: Restores (%d + %.1f%) MP", value1a, value2a);
			changed = true;
		}
		if (GetClassName() == "SageElixir")
		{
			value1a = 90; value1b = 90;
			value2a = 14.25; value2b = 15.75;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Sage Elixir: Restores (%d + %.1f-%.1f%) MP", value1a, value2a, value2b);
			changed = true;
		}
		if (GetClassName() == "ElfinElixir")
		{
			value1a = 100.0; value1b = 100.0;
			value2a = 112.5; value2b = 112.5;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Elfin Elixir: Restores %.1f% MP up to %.1f% MP", value1a, value2a);
			changed = true;
		}
		if (GetClassName() == "MiraclePotion")
		{
			value1a = 100.0; value1b = 100.0;
			value2a = 100.0; value2b = 100.0;
			value3a = 125.0; value3b = 125.0;
			
			if (buttons & BT_ZOOM)
			{
			}
			else
			{
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				if (CharacterClass == 8) // Ailish gets 25% more healing to both HP/MP [so up to 125% of maximum :V]
				{
					value2a *= 1.25;
					value2b *= 1.25;
				}

				if (playera && playera.CountInv("WaterFlyingDress")) 
				{
					value3a *= 1.667;
					value3b *= 1.667;
				}
				if (CharacterClass == 2)
				{
					int temp1, temp2;
					if (SoulMasteryPerkLevel > 0)
					{
						temp1 = 0;
						temp2 = 0;
						if (SoulMasteryPerkLevel <= 0) temp1 = 0;
						if (SoulMasteryPerkLevel == 1) temp1 = 1;
						if (SoulMasteryPerkLevel == 2) temp1 = 2;
						if (SoulMasteryPerkLevel == 3) temp1 = 3;
						if (SoulMasteryPerkLevel == 4) temp1 = 4;
						if (SoulMasteryPerkLevel >= 5) temp1 = 5;
						if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
						if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
						if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
						PerkFactor = 16 + (temp1 + temp2);
						value3a = value3a * PerkFactor / 16;
						value3b = value3b * PerkFactor / 16;
					}
				}
			}
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Miracle Potion: Restores %.1f% HP, %.1f% Mana, reduces Hellcore Heat by %.1f%%", value1a, value2a, value3a);
			changed = true;
		}
		if (GetClassName() == "YggdrasilDew")
		{
			value1a = 90.0; value1b = 110.0;
			value2a = 22.5; value2b = 27.5;
			value3a = 90.0; value3b = 110.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (playera && playera.CountInv("WaterFlyingDress")) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Yggdrasil Dew: Recovers %.1f-%.1f% HP (you/allies in long range), %.1f-%.1f% Mana (you only) & %.1f-%.1f% Stamina (you only)", value1a, value1b, value2a, value2b, value3a, value3b);
			changed = true;
		}
		if (GetClassName() == "PaxaPunch")
		{
			value1a = 60.0; value1b = 60.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2a = 180.0; value2b = 180.0;
			value2a = value2a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2b = value2b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Paxa Punch: Doubles Damage and Resistance for %.1f Seconds, up to a maximum of over %.1f Seconds [timer stacks]", value1a, value2a);
			changed = true;
		}
		if (GetClassName() == "MercuryBandana")
		{
			value1a = 60.0; value1b = 60.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2a = 180.0; value2b = 180.0;
			value2a = value2a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value2b = value2b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Mercury Bandana: Increases movement-speed by 33%% for %.1f Seconds, up to a maximum of over %.1f Seconds [timer stacks]", value1a, value2a);
			changed = true;
		}
		// Heretic/Hexen
		if (GetClassName() == "ArtiHealthNew")
		{
			value1a = 25.0; value1b = 30.0;
			value2a = 112.5; value2b = 112.5;
			value3a = 12.5; value3b = 12.5;
			value4a = 112.5; value4b = 112.5;
			
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (playera && playera.CountInv("WaterFlyingDress")) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value4a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value4b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (playera && playera.CountInv("WaterFlyingDress")) 
			{
				value4a *= 1.667;
				value4b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value4a *= PerkFactor;
			value4b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);
			round(value4a);
			round(value4b);

			tagedit = String.Format("Quartz Flask: Recovers %.1f-%.1f% HP to %.1f%% of Maximum, and %.1f%% Stamina up to %.1f%%", value1a, value1b, value2a, value3a, value4a);
			changed = true;
		}
		if (GetClassName() == "ArtiSuperHealthNew")
		{
			value1a = 100.0; value1b = 110.0;
			value2a = 192.5; value2b = 192.5;
			value3a = 62.5; value3b = 62.5;
			
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2a = clamp(value2a, value2a, 200.0);
			value2b = clamp(value2b, value2b, 200.0);

			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (playera && playera.CountInv("WaterFlyingDress")) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);
			round(value4a);
			round(value4b);

			tagedit = String.Format("Mystic Urn: Recovers %.1f-%.1f% HP to %.1f%% of Maximum, and %.1f%% Stamina up to 500%", value1a, value1b, value2a, value3a);
			changed = true;
		}
		if (GetClassName() == "ArtiHealingRadiusNew")
		{
			value1a = 62.5; value1b = 62.5;
			value2a = 62.5; value2b = 62.5;
			value3a = 125.0; value3b = 125.0;

			if ((playera && playera.CountInv("WaterFlyingDress")) && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a *= PerkFactor;
			value3b *= PerkFactor;

			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);

			tagedit = String.Format("Mystic Ambit Incant: Recovers %.1f% HP (you/allies in moderate range), %.1f% MP (you only) and %.1f% Stamina (you only) up to 200%/500%% of Maximums", value1a, value2a, value3a);
			changed = true;
		}
		if (GetClassName() == "ArtiInvulnerabilityNew")
		{
			value1a = 45.0; value1b = 45.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Valador's Ring of Invincibility: Gives %.1f Seconds of Invulnerability", value1a);
			changed = true;
		}
		if (GetClassName() == "ArtiInvulnerability2New")
		{
			value1a = 45.0; value1b = 45.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Icon of the Defender: Gives %.1f Seconds of Invulnerability", value1a);
			changed = true;
		}
		if (GetClassName() == "ArtiInvisibilityNew")
		{
			value1a = 90.0; value1b = 90.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("ShadowSphere: Gives partial invisiblity for %.1f seconds", value1a);
			changed = true;
		}

		// Strife
		if (GetClassName() == "MedPatchNew")
		{
			value1a = 8.0; value1b = 12.0;
			value2a = 8.0; value2b = 12.0;
			value3a = 18.75; value3b = 21.25;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if ((playera && playera.CountInv("WaterFlyingDress")) && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a = value3a * PerkFactor;
			value3b = value3b * PerkFactor;
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Medical Patch: Restores (%d-%d + %.1f-%.1f%) HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b, value3a, value3b);
			changed = true;
		}
		if (GetClassName() == "MedicalKitNew")
		{
			value1a = 20.0; value1b = 30.0;
			value2a = 20.0; value2b = 30.0;
			value3a = 45.0; value3b = 55.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value1b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value2a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value2b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value3a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			value3b *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if ((playera && playera.CountInv("WaterFlyingDress")) && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a = value3a * PerkFactor;
			value3b = value3b * PerkFactor;
			round(value1a);
			round(value1b);
			round(value2a);
			round(value2b);
			round(value3a);
			round(value3b);

			tagedit = String.Format("Medical Kit: Restores (%d-%d + %.1f-%.1f%) HP & %.1f-%.1f% Stamina", value1a, value1b, value2a, value2b, value3a, value3b);
			changed = true;
		}
		if (GetClassName() == "SurgeryKitNew")
		{
			value1a = 200.0; value1b = 200.0;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			value1a *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			if ((playera && playera.CountInv("WaterFlyingDress")) && CharacterClass == 2) 
			{
				value3a *= 1.667;
				value3b *= 1.667;
			}
			PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
			value3a = value3a * PerkFactor;
			value3b = value3b * PerkFactor;
			round(value1a);

			tagedit = String.Format("Surgery Kit: Fully restores all HP and gives %.1f% Stamina.", value1a);
			changed = true;
		}
		if (GetClassName() == "ShadowArmorNew")
		{
			value1a = 80.0; value1b = 80.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Shadow Armor: Gives player invisibility for %.1f seconds", value1a);
			changed = true;
		}
		if (GetClassName() == "EnvironmentalSuitNew")
		{
			value1a = 80.0; value1b = 80.0;
			value1a = value1a * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			value1b = value1b * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			tagedit = String.Format("Environmental Suit: Protects from Hazardous Waste, as well as Fire, for %.1f seconds", value1a);
			changed = true;
		}

		if (changed) SetTag(tagedit);
		super.DoEffect();
	}

	action void A_SeedDrop(int type = 0, int OldRand0 = 0, int Forced = 0)
	{
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int Rand0, Rand1, Rand2, PX, PY, PZ, FullOnSkill, FullOnSeeds, spawnedaitem, SeedDropChance;
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		
		if (ModType == 0 && CallACS("MiscVarCheckDECORATE",110005) == 0) return;
		
		if (Forced == 0)
		{
			if (CallACS("MiscVarCheckDECORATE",37) >= CallACS("MiscVarCheckDECORATE",28)) FullOnSkill = 1;
			if (CallACS("MiscVarCheckDECORATE",30) >= CallACS("MiscVarCheckDECORATE",29)) FullOnSeeds = 1;
		}
		
		// Spawn Occurance Rate
		if (type == 2)
		{
			Rand0 = 1;
		}
		else
		if (type == 1)
		{
			Rand0 = OldRand0;
		}
		else
		{
			if (CallACS("MiscVarCheckDECORATE",27) < CallACS("MiscVarCheckDECORATE",26))
			{
				// "MiscellaneousVars[6]" is a randomly picked ID number that DV-DS will pick at the Very-First-Run, from (1 to "MiscellaneousVars[7]")
				if (random(1,CallACS("MiscVarCheckDECORATE",7)) == CallACS("MiscVarCheckDECORATE",6))
				{
					if (Forced == 1) 
					{
						A_SpawnItemEx("FyggForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("Fygg",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					Thing_Remove(0);
					return;
				}
			}
	
			if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,70); // 92
			if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,80); // 104
			if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,90); // 116
			if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,100); // 128
			if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,120); // 152 
			if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,132); // 152 
			if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,144); // 152 
			if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,156); // 152 
			if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,180); // 152 
			Rand0 *= 2.5;
		}
		
		SeedDropChance = 1 + (CallACS("MiscVarCheckDECORATE",33) / 64);
		
		while (spawnedaitem == 0)
		{
			if (Rand0 <= SeedDropChance)
			{
				if (FullOnSkill == 1)
				{
					if (FullOnSeeds == 1) Rand1 = random(31,40);
					else Rand1 = random(1,40);
				}
				else
				{
					if (FullOnSeeds == 1) Rand1 = random(31,41);
					else Rand1 = random(1,41);
				}
			
				if (Rand1 > 0 && Rand1 < 6) // Seed of Agility
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfAgilityForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfAgility",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 5 && Rand1 < 11) // Seed of Defense
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfDefenseForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfDefense",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 10 && Rand1 < 16) // Seed of Deftness
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfDeftnessForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfDeftness",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 15 && Rand1 < 21) // Seed of Sorcery
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfSorceryForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfSorcery",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 20 && Rand1 < 26)// Seed of Strength
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfStrengthForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfStrength",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 25 && Rand1 < 31) // Seed of Therapeusis
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfTherapeusisForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfTherapeusis",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 30 && Rand1 < 36) // Seed of Life
				{
					A_SpawnItemEx("SeedOfLife",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 > 35 && Rand1 < 41) // Seed of Magic
				{
					A_SpawnItemEx("SeedOfMagic",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			
				if (Rand1 == 41) // Seed of Skill
				{
					if (Forced == 1) 
					{ 
						A_SpawnItemEx("SeedOfSkillForced",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					else 
					{
						A_SpawnItemEx("SeedOfSkill",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
					}
					spawnedaitem++;
					Thing_Remove(0);
					return;
				}
			}
			else // No spawn
			{
				Thing_Remove(0);
				return;
			}
		}
	}

	action void A_GrabBackpack()
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);

		if (invoker)
		{
			invoker.NoOfBackPacks = CallACS("MiscVarCheckDECORATE",80);
			invoker.NoOfBackPacks += 1;
			if (invoker.NoOfBackPacks > 512) invoker.NoOfBackPacks = 512;
			CallACS("MiscVarSetDECORATE",80,invoker.NoOfBackPacks);
		}
	}

	action void A_UCIIHealSpark(actor DVDSActor, string sparkname = "Heal1SparkAlly", double xscal = 1.0, double yscal = 1.0, string glittertype = "HealGlitter1", int glitterspawns = 0, double gxscal = 1.0, double gyscal = 1.0, double gspeed = 1.0)
	{
		Vector3 healpos = (DVDSActor.pos.x, DVDSActor.pos.y, DVDSActor.pos.z);
		Vector3 healpos2 = (DVDSActor.pos.x, DVDSActor.pos.y, (DVDSActor.pos.z)+(DVDSActor.height/2));
		Actor healspark = Spawn("Heal1SparkAlly", healpos, ALLOW_REPLACE); 
		CustomHealSpark iscustomspark;
		if (healspark != null)
		{
			iscustomspark = CustomHealSpark(healspark);
			healspark.SetOrigin(healpos2,false);
			healspark.target = DVDSActor;
			healspark.scale.x = xscal;
			healspark.scale.y = yscal;
			if (iscustomspark != null)
			{
				iscustomspark.glittertype = glittertype;
				iscustomspark.glitterspawns = glitterspawns;
				iscustomspark.glitterxscale = gxscal;
				iscustomspark.glitteryscale = gyscal;
				iscustomspark.glitterxspeed = gspeed;
				iscustomspark.glitteryspeed = gspeed;
				iscustomspark.glitterzspeed = gspeed;
			}
		}
	}

	action void A_UseCustomInventoryItem(int type = 0, bool check = false)
	{
		String nm;
		double temp1, temp2, temp3, check1, check2, check3;
		double healmax;
		double perktemp1, perktemp2, perktemp3, perktemp4;
		double perkhealthlimit, perkstaminalimit, perkmanalimit;
		double PerkFactor;
		double perkbasemulti = 16;
		int CurrentHealth = player.mo.health;
		int CurrentMana = CallACS("StatCheck",14); 
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int PowerupTimeMulti = dvds_invpoweruptimemultiplier;
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int TempHealAmount, TempHealAmount2, TempHealAmount3;
		int HellcoreRestored;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		int frienditemusedistance = 256;
		int ptemp1, ptemp2;

		int HealMsgAmount;
		int HealMsgAmount2;
		string username = GetClassName();
		if (dvds_showdamagemessageactortags) username = GetTag("");
		
		AetheriusMonsterZSC DVDSActor;
		DVDSActor = AetheriusMonsterZSC(player.mo.AimTarget());
		
		nm = "EnvironmentalSuitNew"; invoker.iDTech1Check = nm;
		if (type == -12 && player.mo.CountInv(invoker.iDTech1Check)) // Environmental Suit [Strife]
		{
			perktemp4 = (35 * 80);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",22,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}

		nm = "ShadowArmorNew"; invoker.iDTech1Check = nm;
		if (type == -11 && player.mo.CountInv(invoker.iDTech1Check)) // Shadow Armor [Strife]
		{
			perktemp4 = (35 * 80);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",1,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}

		nm = "SurgeryKitNew"; invoker.iDTech1Check = nm;
		if (type == -10 && player.mo.CountInv(invoker.iDTech1Check)) // Medical Kit [Strife]
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [100%]
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP;
							if (temp1 < perkhealthlimit)
							{
								temp2 = perkhealthlimit;
								perktemp1 = temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",0.875,0.875,"Heal3Glitter",4);
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [100%]
				temp1 = CurrentHealth;
				perkhealthlimit = MaxHealthTrue;
				
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (temp1 < perkhealthlimit)
				{
					check1 += 1;
					temp2 = perkhealthlimit;
					perktemp1 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
					temp1 += perktemp1;
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
					player.mo.health = player.health = temp1;
				}
				// Heal Stamina [200%]
				perkstaminalimit = MaxStamina * 2;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (CurrentStamina < perkstaminalimit)
				{
					check1 += 1;
					temp2 = MaxStamina * 2;
					perktemp2 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 *= 1.667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp2 = perktemp2 * PerkFactor;
					CurrentStamina += perktemp2;

					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, perkstaminalimit);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				if (check1 > 0)
				{
					ptemp1 = (210*frandom(0.999,1.001));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (105*frandom(1.999,2.001));
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);

					A_UCIIHealSpark(player.mo,"CustomHealSpark",0.875,0.875,"Heal3Glitter",4);
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		nm = "MedicalKitNew"; invoker.iDTech1Check = nm;
		if (type == -9 && player.mo.CountInv(invoker.iDTech1Check)) // Medical Kit [Strife]
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [~20-30 HP + 20-30%]
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP;
							if (temp1 < perkhealthlimit)
							{
								temp2 = random(20,30);
								perktemp1 = temp2;
								temp2 = DVDSActor.user_MaxHP * (0.01 * random(20,30));
								perktemp1 += temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",0.75,0.75,"Heal2Glitter",2);
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [~20-30 HP + 20-30%]
				temp1 = CurrentHealth;
				perkhealthlimit = MaxHealthTrue;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (temp1 < perkhealthlimit)
				{
					check1 += 1;
					temp2 = random(20,30);
					perktemp1 = temp2;
					temp2 = MaxHealthTrue * (0.01 * random(20,30));
					perktemp1 += temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
					temp1 += perktemp1;
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
					player.mo.health = player.health = temp1;
				}
				// Heal Stamina [~45%-55%]
				perkstaminalimit = MaxStamina;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (CurrentStamina < perkstaminalimit)
				{
					check1 += 1;
					temp2 = MaxStamina * frandom(0.45,0.55);
					perktemp2 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 *= 1.667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp2 = perktemp2 * PerkFactor;
					CurrentStamina += perktemp2;

					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, perkstaminalimit);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				if (check1 > 0)
				{
					ptemp1 = (210*frandom(0.20,0.30));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (105*frandom(0.45,0.55));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer

					A_UCIIHealSpark(player.mo,"CustomHealSpark",0.75,0.75,"Heal2Glitter",2);
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		nm = "MedPatchNew"; invoker.iDTech1Check = nm;
		if (type == -8 && player.mo.CountInv(invoker.iDTech1Check)) // Medical Patch [Strife]
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [~8-12 HP + 8-12%]
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP;
							if (temp1 < perkhealthlimit)
							{
								temp2 = random(8,12);
								perktemp1 = temp2;
								temp2 = DVDSActor.user_MaxHP * (0.01 * random(8,12));
								perktemp1 += temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",0.50,0.50,"Heal1Glitter",2);
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [~8-12 HP + 8-12%]
				temp1 = CurrentHealth;
				perkhealthlimit = MaxHealthTrue;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (temp1 < perkhealthlimit)
				{
					check1 += 1;
					temp2 = random(8,12);
					perktemp1 = temp2;
					temp2 = MaxHealthTrue * (0.01 * random(8,12));
					perktemp1 += temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
					temp1 += perktemp1;
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
					player.mo.health = player.health = temp1;
				}
				// Heal Stamina [~18.75%-21.25%]
				perkstaminalimit = MaxStamina;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (CurrentStamina < perkstaminalimit)
				{
					check1 += 1;
					temp2 = MaxStamina * frandom(0.1875,0.2125);
					perktemp2 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 *= 1.667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp2 = perktemp2 * PerkFactor;
					CurrentStamina += perktemp2;

					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, perkstaminalimit);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				if (check1 > 0)
				{
					ptemp1 = (210*frandom(0.08,0.12));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (105*frandom(0.1875,0.2125));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer

					A_UCIIHealSpark(player.mo,"CustomHealSpark",0.50,0.50,"Heal1Glitter",2);
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		nm = "ArtiInvisibilityNew"; invoker.iDTech1Check = nm;
		if (type == -7 && player.mo.CountInv(invoker.iDTech1Check)) // Icon of the Defender
		{
			perktemp4 = (35 * 90);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",1,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerabilityNew"; invoker.iDTech1Check = nm;
		if (type == -6 && player.mo.CountInv(invoker.iDTech1Check)) // Ring of Invincibility
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerability2New"; invoker.iDTech1Check = nm;
		if (type == -5 && player.mo.CountInv(invoker.iDTech1Check)) // Icon of the Defender
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "ArtiHealingRadiusNew"; invoker.iDTech1Check = nm;
		if (type == -4 && player.mo.CountInv(invoker.iDTech1Check)) // Mystic Ambit Incant
		{
			double incantdistance = 512.0;
			int actorshealed = 0;
			incantdistance *= (1.0 
												+ (CallACS("MiscVarCheckDECORATE",10049) * 0.4) // +2.0
												+ (CallACS("MiscVarCheckDECORATE",10003) * 0.15) // +0.75 
												+ (CallACS("MiscVarCheckDECORATE",10004) * 0.375) // +0.75
												+ (CallACS("MiscVarCheckDECORATE",10055) * 0.1) // +0.5
												+ (CallACS("MiscVarCheckDECORATE",10056) * 0.25) // +0.5
												+ (CallACS("MiscVarCheckDECORATE",10053) * 0.05) // +0.25
												+ (CallACS("MiscVarCheckDECORATE",10054) * 0.125)); // +0.25
			//***************
			//** ALLY SIDE **
			//***************
			ActorIterator it = Level.CreateActorIterator(1000);
			Actor recallee;
			while (recallee = it.Next())
			{
				DVDSActor = AetheriusMonsterZSC(recallee);
				if (DVDSActor && DVDSActor.bFRIENDLY && DVDSActor.health > 0 && DVDSActor.Distance3D(player.mo) <= incantdistance)
				{
					// Heal HP/Health [62.5%] up to 200%
					temp1 = DVDSActor.health;
					perkhealthlimit = DVDSActor.user_MaxHP * 2;
					if (temp1 < perkhealthlimit)
					{
						temp2 = DVDSActor.user_MaxHP * 0.625;
						perktemp1 = temp2;
					
						if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
						temp1 += perktemp1;
						HealMsgAmount2 = (temp1 - DVDSActor.health);
						if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
						if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
						DVDSActor.health = temp1;
						DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_UCIIHealSpark(DVDSActor,"CustomHealSpark",1.125,1.125,"Heal3Glitter",4);
						actorshealed++;
					}
				}
			}

			//*****************
			//** PLAYER SIDE **
			//*****************
			// Heal HP/Health [62.5%] up to 200%
			temp1 = CurrentHealth;
			healmax = MaxHealthLimit;
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += (MaxHealthTrue * 5 / 8);
				HealMsgAmount = (temp1 - CurrentHealth);
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = player.health = temp1;
			}
			
			// Heal MP/Mana [62.5%] up to 200%
			healmax = MaxMana * 2;
			if (CurrentMana < healmax)
			{
				check1 += 1;
				CurrentMana += (MaxMana * 0.625);
				CurrentMana = clamp(CurrentMana, CurrentMana, healmax);
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			
			// Heal Stamina [125%] up to 500%
			healmax = MaxStamina * 5;
			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 1.25;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp1 *= 1.6667;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				CurrentStamina = clamp(CurrentStamina, CurrentStamina, healmax);
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			
			if (check1 > 0)
			{
				ptemp1 = (420*frandom(0.6249,0.6251));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
				ptemp1 = (420*frandom(0.6249,0.6251));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer
				ptemp1 = (420*frandom(1.2499,1.2501));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer

				A_UCIIHealSpark(player.mo,"CustomHealSpark",1.125,1.125,"Heal3Glitter",4);
				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_SetBlend("C0 80 C0",0.55,27); // FadeRange(192,128,192,0.55,192,128,192,0.01,0.77);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				if (actorshealed > 0)
				{
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		
		nm = "ArtiBoostManaNew"; invoker.iDTech1Check = nm;
		if (type == -3 && player.mo.CountInv(invoker.iDTech1Check)) // Krater of Might [Hexen]
		{
			if (player.mo.CountInv("Mana1") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana1",500);
			}
			if (player.mo.CountInv("Mana2") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana2",500);
			}
			if (CurrentMana < MaxMana * 2)
			{
				check1 += 1;
				CurrentMana = MaxMana * 2;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			if (check1 > 0)
			{
				ptemp1 = (420*frandom(1.999,2.001));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer

				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "ArtiSuperHealthNew"; invoker.iDTech1Check = nm;
		if (type == -2 && player.mo.CountInv(invoker.iDTech1Check)) // Mystic Urn [Heretic AND Hexen]
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [~100 to 110% HP] up to 192.5% Max HP
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP * 1.925;
							if (temp1 < perkhealthlimit)
							{
								temp2 = DVDSActor.user_MaxHP * frandom(1.0,1.1);
								perktemp1 = temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",1.125,1.125,"Heal3Glitter",6);
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [~100 to 110% HP] up to 192.5% Max HP
				temp1 = CurrentHealth;
				healmax = MaxHealthTrue * 1.925;
				if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				healmax *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				healmax = clamp(healmax, healmax, MaxHealthLimit);
				
				if (temp1 < healmax)
				{
					check1 += 1;
					temp1 += MaxHealthTrue * frandom(1.0,1.1);
					if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					temp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > healmax) temp1 = healmax;
					player.mo.health = player.health = temp1;
				}
				// Heal Stamina [62.50%] up to 500%
				healmax = MaxStamina * 5;
				if (CurrentStamina < healmax)
				{
					check1 += 1;
					temp2 = MaxStamina * 0.625;
					perktemp1 = temp2;
					if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 *= 1.6667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp1 = perktemp1 * PerkFactor;
					if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
					temp2 = perktemp1;
					CurrentStamina += temp2;
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, healmax);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				// Hellcore
				if (HellcoreOverheatLevel > 0)
				{
					TempHealAmount = HellcoreOverheatLevel * frandom(0.50,0.60); // ~55% [10000000 is 1000.00% (maximum)]
					TempHealAmount2 = PlayerLevel * ((HellcoreOverheatLevel * frandom(0.50,0.60)) / 1000);
					TempHealAmount3 = ((HellcoreOverheatLevel * frandom(0.50,0.60)) / 1000) * random(-50,50);
					HellcoreRestored = TempHealAmount + TempHealAmount2 + TempHealAmount3;
					if (player.mo.CountInv("WaterFlyingDress")) HellcoreRestored *= 1.667;
					if (SoulMasteryPerkLevel > 0)
					{
						temp1 = 0;
						temp2 = 0;
						if (SoulMasteryPerkLevel <= 0) temp1 = 0;
						if (SoulMasteryPerkLevel == 1) temp1 = 1;
						if (SoulMasteryPerkLevel == 2) temp1 = 2;
						if (SoulMasteryPerkLevel == 3) temp1 = 3;
						if (SoulMasteryPerkLevel == 4) temp1 = 4;
						if (SoulMasteryPerkLevel >= 5) temp1 = 5;
						if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
						if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
						if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
						PerkFactor = 16 + (temp1 + temp2);
						HellcoreRestored = HellcoreRestored * PerkFactor / 16;
					}
					HellcoreRestored = clamp(HellcoreRestored, 1, 10000000);
					if (dvdsdebug_healitemdisplays) Console.Printf ("Hellcore Restored: %d (BaseOverHeatLevel: %d)", HellcoreRestored, HellcoreOverheatLevel);
				
					HellcoreOverheatLevel -= HellcoreRestored;
					if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
					
					CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
				}

				if (check1 > 0)
				{
					ptemp1 = (420*frandom(1.0,1.1));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (420*frandom(0.6249,0.6251));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
					ptemp1 = (420*frandom(0.50,0.60));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",95,ptemp1,1); // HLCRCoolBonPenTimer

					A_UCIIHealSpark(player.mo,"CustomHealSpark",1.125,1.125,"Heal3Glitter",6);
					player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		
		nm = "ArtiHealthNew"; invoker.iDTech1Check = nm;
		if (type == -1 && player.mo.CountInv(invoker.iDTech1Check)) // Mystic Urn [Heretic AND Hexen]
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [~25 to 30% HP] up to 112.5% Max HP
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP * 1.125;
							if (temp1 < perkhealthlimit)
							{
								temp2 = DVDSActor.user_MaxHP * frandom(0.25,0.30);
								perktemp1 = temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("pickup/qpotion",82,CHANF_DEFAULT,1.0,ATTN_NORM);
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",0.625,0.625,"Heal2Glitter",3);
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [~25 to 30% HP] up to 112.5% Max HP
				temp1 = CurrentHealth;
				healmax = MaxHealthTrue * 1.125;
				if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				healmax *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				healmax = clamp(healmax, healmax, MaxHealthLimit);
				
				if (temp1 < healmax)
				{
					check1 += 1;
					temp1 += MaxHealthTrue * frandom(0.25,0.30);
					if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					temp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > healmax) temp1 = healmax;
					player.mo.health = player.health = temp1;
				}

				// Heal Stamina [12.5%] up to 112.5%
				healmax = MaxStamina * 1.125;
				if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				healmax *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));

				if (CurrentStamina < healmax)
				{
					check1 += 1;
					temp2 = MaxStamina * 0.125;
					perktemp1 = temp2;
					if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp1 *= 1.6667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp1 = perktemp1 * PerkFactor;
					if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //Console.Printf("Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
					temp2 = perktemp1;
					CurrentStamina += temp2;
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, healmax);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}

				// Hellcore
				if (HellcoreOverheatLevel > 0)
				{
					TempHealAmount = HellcoreOverheatLevel * frandom(0.125,0.15); // ~13.75% [10000000 is 1000.00% (maximum)]
					TempHealAmount2 = PlayerLevel * ((HellcoreOverheatLevel * frandom(0.125,0.15)) / 1000);
					TempHealAmount3 = ((HellcoreOverheatLevel * frandom(0.125,0.15)) / 1000) * random(-50,50);
					HellcoreRestored = TempHealAmount + TempHealAmount2 + TempHealAmount3;
					if (player.mo.CountInv("WaterFlyingDress")) HellcoreRestored *= 1.667;
					if (SoulMasteryPerkLevel > 0)
					{
						temp1 = 0;
						temp2 = 0;
						if (SoulMasteryPerkLevel <= 0) temp1 = 0;
						if (SoulMasteryPerkLevel == 1) temp1 = 1;
						if (SoulMasteryPerkLevel == 2) temp1 = 2;
						if (SoulMasteryPerkLevel == 3) temp1 = 3;
						if (SoulMasteryPerkLevel == 4) temp1 = 4;
						if (SoulMasteryPerkLevel >= 5) temp1 = 5;
						if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
						if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
						if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
						PerkFactor = 16 + (temp1 + temp2);
						HellcoreRestored = HellcoreRestored * PerkFactor / 16;
					}
					HellcoreRestored = clamp(HellcoreRestored, 1, 10000000);
					if (dvdsdebug_healitemdisplays) Console.Printf ("Hellcore Restored: %d (BaseOverHeatLevel: %d)", HellcoreRestored, HellcoreOverheatLevel);
				
					HellcoreOverheatLevel -= HellcoreRestored;
					if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
					
					CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
				}
				if (check1 > 0)
				{
					ptemp1 = (420*frandom(0.25,0.30));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (420*frandom(0.1249,0.1251));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
					ptemp1 = (420*frandom(0.125,0.15));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",95,ptemp1,1); // HLCRCoolBonPenTimer

					A_UCIIHealSpark(player.mo,"CustomHealSpark",0.625,0.625,"Heal2Glitter",3);
					player.mo.A_StartSound("pickup/qpotion",82,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		
		nm = "MedicinalHerb"; invoker.iDTech1Check = nm;
		if (type == 1 && player.mo.CountInv(invoker.iDTech1Check)) // Medicinal Herb
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [~25-35 HP]
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP;
							if (temp1 < perkhealthlimit)
							{
								temp2 = random(25,35);
								perktemp1 = temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",0.5,0.5,"Heal1Glitter",2);
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [~25-35 HP]
				temp1 = CurrentHealth;
				perkhealthlimit = MaxHealthTrue;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (temp1 < perkhealthlimit)
				{
					check1 += 1;
					temp2 = random(25,35);
					perktemp1 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
					temp1 += perktemp1;
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
					player.mo.health = player.health = temp1;
				}
				// Heal Stamina [~7.5% - ~10.5%]
				perkstaminalimit = MaxStamina;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (CurrentStamina < perkstaminalimit)
				{
					check1 += 1;
					temp2 = MaxStamina * frandom(0.075,0.105);
					perktemp2 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp2 *= 1.667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp2 = perktemp2 * PerkFactor;
					CurrentStamina += perktemp2;

					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, perkstaminalimit);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				if (check1 > 0)
				{
					ptemp1 = (40*frandom(0.999,1.001));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (30*frandom(0.999,1.001));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer

					A_UCIIHealSpark(player.mo,"CustomHealSpark",0.5,0.5,"Heal1Glitter",2);
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		
		nm = "StrongMedicine"; invoker.iDTech1Check = nm;
		if (type == 2 && player.mo.CountInv(invoker.iDTech1Check)) // Medicinal Herb
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [~55-65 HP]
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP;
							if (temp1 < perkhealthlimit)
							{
								temp2 = random(55,65);
								perktemp1 = temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",0.75,0.75,"Heal2Glitter",random(3,4));
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [~55-65 HP]
				temp1 = CurrentHealth;
				perkhealthlimit = MaxHealthTrue;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (temp1 < perkhealthlimit)
				{
					check1 += 1;
					temp2 = random(55,65);
					perktemp1 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
					temp1 += perktemp1;
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
					player.mo.health = player.health = temp1;
				}
				
				// Heal Stamina [~16.5% - ~19.5%]
				perkstaminalimit = MaxStamina;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (CurrentStamina < perkstaminalimit)
				{
					check1 += 1;
					temp2 = MaxStamina * frandom(0.165,0.195);
					perktemp2 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp2 *= 1.667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp2 = perktemp2 * PerkFactor;
					CurrentStamina += perktemp2;

					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, perkstaminalimit);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				if (check1 > 0)
				{
					ptemp1 = (40*frandom(2.499,2.501));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (30*frandom(2.499,2.501));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer

					A_UCIIHealSpark(player.mo,"CustomHealSpark",0.75,0.75,"Heal2Glitter",random(3,4));
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		
		nm = "SpecialMedicine"; invoker.iDTech1Check = nm;
		if (type == 3 && player.mo.CountInv(invoker.iDTech1Check)) // Medicinal Herb
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Heal Health [~85-105 HP]
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP;
							if (temp1 < perkhealthlimit)
							{
								temp2 = random(85,105);
								perktemp1 = temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",0.875,0.875,"Heal3Glitter",random(4,5));
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				// Heal Health [~85-105 HP]
				temp1 = CurrentHealth;
				perkhealthlimit = MaxHealthTrue;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (temp1 < perkhealthlimit)
				{
					check1 += 1;
					temp2 = random(85,105);
					perktemp1 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
					temp1 += perktemp1;
					HealMsgAmount = (temp1 - CurrentHealth);
					if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
					player.mo.health = player.health = temp1;
				}
				
				// Heal Stamina [~25.5% - ~31.5%]
				perkstaminalimit = MaxStamina;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (CurrentStamina < perkstaminalimit)
				{
					check1 += 1;
					temp2 = MaxStamina * frandom(0.225,0.315);
					perktemp2 = temp2;
				
					if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
					perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				
					if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp2 *= 1.667;
					PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
					perktemp2 = perktemp2 * PerkFactor;
					CurrentStamina += perktemp2;

					if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
					CurrentStamina = clamp(CurrentStamina, CurrentStamina, perkstaminalimit);
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				}
				if (check1 > 0)
				{
					ptemp1 = (40*frandom(3.499,3.501));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					ptemp1 = (30*frandom(3.499,3.501));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer

					A_UCIIHealSpark(player.mo,"CustomHealSpark",0.875,0.875,"Heal3Glitter",random(4,5));
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.77,31,"10 FF 10",0.01); // FadeRange(12,255,12,0.77,16,255,16,0.01,0.77);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		
		nm = "YggdrasilDew"; invoker.iDTech1Check = nm;
		if (type == 4 && player.mo.CountInv(invoker.iDTech1Check)) // Yggdrasil Dew
		{
			double incantdistance = 1024.0;
			int actorshealed = 0;
			incantdistance *= (1.0 
												+ (CallACS("MiscVarCheckDECORATE",10049) * 0.4) // +2.0
												+ (CallACS("MiscVarCheckDECORATE",10003) * 0.15) // +0.75 
												+ (CallACS("MiscVarCheckDECORATE",10004) * 0.375) // +0.75
												+ (CallACS("MiscVarCheckDECORATE",10055) * 0.1) // +0.5
												+ (CallACS("MiscVarCheckDECORATE",10056) * 0.25) // +0.5
												+ (CallACS("MiscVarCheckDECORATE",10053) * 0.05) // +0.25
												+ (CallACS("MiscVarCheckDECORATE",10054) * 0.125)); // +0.25
			//***************
			//** ALLY SIDE **
			//***************
			ActorIterator it = Level.CreateActorIterator(1000);
			Actor recallee;
			while (recallee = it.Next())
			{
				DVDSActor = AetheriusMonsterZSC(recallee);
				if (DVDSActor && DVDSActor.bFRIENDLY && DVDSActor.health > 0 && DVDSActor.Distance3D(player.mo) <= incantdistance)
				{
					// Heal Health [90.0% - 110.0%]
					temp1 = DVDSActor.health;
					perkhealthlimit = DVDSActor.user_MaxHP;
					if (temp1 < perkhealthlimit)
					{
						temp2 = ((perkhealthlimit * random(900,1100)) / 1000);
						perktemp1 = temp2;
					
						if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
						temp1 += perktemp1;
						HealMsgAmount2 = (temp1 - DVDSActor.health);
						if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
						if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
						DVDSActor.health = temp1;
						DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_UCIIHealSpark(DVDSActor,"CustomHealSpark",1.375,1.375,"Heal3Glitter",6);
						actorshealed++;
					}
				}
			}

			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
			if (temp1 < perkhealthlimit)
			{
				// Heal Health [90.0% - 110.0%]
				check1 += 1;
				temp2 = ((MaxHealthTrue * random(900,1100)) / 1000);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				temp1 += perktemp1;
				if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				HealMsgAmount = (temp1 - CurrentHealth);
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = player.health = temp1;
			}
			
			// Heal Mana [22.5% - 27.5%]
			perkmanalimit = MaxMana;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perkmanalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
			if (CurrentMana < perkmanalimit)
			{
				check1 += 1;
				temp2 = MaxMana * frandom(0.225,0.275);
				perktemp3 = temp2;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp3 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				temp3 = perktemp3;
				CurrentMana += temp3;
			
				if (dvdsdebug_healitemdisplays) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
				CurrentMana = clamp(CurrentMana, CurrentMana, perkmanalimit);
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			
			// Heal Stamina [90.0% - 110.0%]
			perkstaminalimit = MaxStamina;
			
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perkstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.9,1.1);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp2 *= 1.667;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;
			
				if (dvdsdebug_healitemdisplays) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				CurrentStamina = clamp(CurrentStamina, CurrentStamina, perkstaminalimit);
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				ptemp1 = (420*frandom(0.9,1.1));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
				ptemp1 = (420*frandom(0.225,0.275));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer
				ptemp1 = (420*frandom(0.9,1.1));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer

				A_UCIIHealSpark(player.mo,"CustomHealSpark",1.375,1.375,"Heal3Glitter",6);
				player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.85,39,"10 FF 10",0.02); // FadeRange(12,255,12,0.85,16,255,16,0.02,1.12);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				if (actorshealed > 0)
				{
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
			}
		}
		
		nm = "PaxaPunch"; invoker.iDTech1Check = nm;
		if (type == 5 && player.mo.CountInv(invoker.iDTech1Check)) // Paxa Punch
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && 
					CallACS("GetBuffTimer",10) < perktemp2 && 
					CallACS("GetBuffTimer",11) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("GetBuffTimer",10,2,perktemp4);
				CallACS("GetBuffTimer",11,2,perktemp4);
				player.mo.A_StartSound("use_paxa",19,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_StartSound("use_paxa2",20,CHANF_DEFAULT,1.0,ATTN_NONE);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,3);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "LesserVimstone"; invoker.iDTech1Check = nm;
		if (type == 6 && player.mo.CountInv(invoker.iDTech1Check)) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 4) // Cooldown Timer is 0 and Tension is less than "100" [tier 4]
			{
				A_SetTensionLevel(2,1);
				player.mo.A_StartSound("use_lesservimstone",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				if (!(player.mo.CountInv("RandomInfiniteAmmo") || player.mo.CountInv("PowerInfiniteAmmo")))
				{
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					if (random(1,10) <= 9)
					{
						player.mo.A_TakeInventory(invoker.iDTech1Check,1);
					}
				}
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "GreaterVimstone"; invoker.iDTech1Check = nm;
		if (type == 7 && player.mo.CountInv(invoker.iDTech1Check)) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 7) // Cooldown Timer is 0 and Tension is less than "1000" [tier 7]
			{
				A_SetTensionLevel(4,2);
				player.mo.A_StartSound("use_greatervimstone",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				if (!(player.mo.CountInv("RandomInfiniteAmmo") || player.mo.CountInv("PowerInfiniteAmmo")))
				{
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
				else
				{
					if (random(1,10) <= 9)
					{
						player.mo.A_TakeInventory(invoker.iDTech1Check,1);
					}
				}
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "MercuryBandana"; invoker.iDTech1Check = nm;
		if (type == 8 && player.mo.CountInv(invoker.iDTech1Check)) // Mercury Bandana
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && CallACS("GetBuffTimer",12) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("GetBuffTimer",12,2,perktemp4);
				player.mo.A_StartSound("use_mercurybandana",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,2);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "MagicWater"; invoker.iDTech1Check = nm;
		if (type == 9 && player.mo.CountInv(invoker.iDTech1Check)) // Magic Water
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perkmanalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(30,35) + (MaxMana * 0.05));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (dvdsdebug_healitemdisplays) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				CurrentMana = clamp(CurrentMana, CurrentMana, perkmanalimit);
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				ptemp1 = (35*frandom(0.999,1.001));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer

				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.14,12,"10 FF 10",0.01); // FadeRange(12,255,12,0.14,16,255,16,0.01,0.33);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "SageElixir"; invoker.iDTech1Check = nm;
		if (type == 10 && player.mo.CountInv(invoker.iDTech1Check)) // Sage Elixir
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perkmanalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(90,105) + (MaxMana * frandom(0.1425,0.1575)));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (dvdsdebug_healitemdisplays) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				CurrentMana = clamp(CurrentMana, CurrentMana, perkmanalimit);
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				ptemp1 = (105*frandom(0.999,1.001));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer

				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.28,15,"10 FF 10",0.01); // FadeRange(12,255,12,0.28,16,255,16,0.01,0.44);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "ElfinElixir"; invoker.iDTech1Check = nm;
		if (type == 11 && player.mo.CountInv(invoker.iDTech1Check)) // Elfin Elixir
		{
			temp1 = MaxMana * 1.125;
			perkmanalimit = temp1;
		
			if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perkmanalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = MaxMana;
				perktemp1 = temp1;
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (dvdsdebug_healitemdisplays) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				CurrentMana = clamp(CurrentMana, CurrentMana, perkmanalimit);
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				ptemp1 = (210*frandom(0.999,1.001));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
				CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer

				player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
				player.mo.A_TakeInventory(invoker.iDTech1Check,1);
			}
			else
			{
				player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		nm = "MiraclePotion"; invoker.iDTech1Check = nm;
		if (type == 12 && player.mo.CountInv(invoker.iDTech1Check)) // Miracle Potion
		{
			if (buttons & BT_ZOOM)
			{
				if (DVDSActor)
				{
					if (DVDSActor.bFRIENDLY || DVDSActor.IsAPeasent || DVDSActor.IsARebel)
					{
						if (Distance3D(DVDSActor) < frienditemusedistance)
						{
							// Full Heal
							temp1 = DVDSActor.health;
							perkhealthlimit = DVDSActor.user_MaxHP;
							if (temp1 < perkhealthlimit)
							{
								temp2 = perkhealthlimit;
								perktemp1 = temp2;
							
								if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit (ally heal): %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
								temp1 += perktemp1;
								HealMsgAmount2 = (temp1 - DVDSActor.health);
								if ((dvds_showdamagemessages & 2) && HealMsgAmount2 > 0) A_PrintHealingMessage(DVDSActor,HealMsgAmount2,self);
								if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
								DVDSActor.health = temp1;
								DVDSActor.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_UCIIHealSpark(DVDSActor,"CustomHealSpark",1.375,1.375,"Heal3Glitter",6);
								player.mo.A_TakeInventory(invoker.iDTech1Check,1);
							}
							else
							{
								player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
								A_PrintBold(String.Format("\cgHeal Item Failed: Ally is at/above Maximum HP!"), frandom(0.685,0.8));
							}
						}
						else
						{
							player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
							A_PrintBold(String.Format("\cgHeal Item Failed: Ally is too far away!"), frandom(0.685,0.8));
						}
					}
					else
					{
						player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgHeal Item Failed: Creature is Hostile!"), frandom(0.685,0.8));
					}
				}
				else
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgHeal Item Failed: No Ally/Creature in LOS!"), frandom(0.685,0.8));
				}
			}
			else
			{
				perkhealthlimit = MaxHealthTrue;
				perkmanalimit = MaxMana;
			
				if (CharacterClass == 8) // Ailish gets 25% more healing to both HP/MP [so up to 125% of maximum :V]
				{
					perkhealthlimit *= 1.25;
					perkmanalimit *= 1.25;
				}
			
				if (CharacterClass == 2 || CharacterClass == 8) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
				perkmanalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				if (CurrentHealth >= perkhealthlimit && (CurrentMana >= perkmanalimit) && HellcoreOverheatLevel <= 0)
				{
					player.mo.A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				}
				else
				{
					if (CurrentHealth < perkhealthlimit)
					{
						HealMsgAmount = (perkhealthlimit - CurrentHealth);
						player.mo.health = player.health = perkhealthlimit;
					}
					if (CurrentMana < perkmanalimit) CurrentMana = perkmanalimit;
					CallACS("OtherVarSetDECORATE",2,CurrentMana);
					if (dvdsdebug_healitemdisplays) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
					if (dvdsdebug_healitemdisplays) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
					
					// Hellcore
					if (HellcoreOverheatLevel > 0)
					{
						TempHealAmount = 1250000; // 100% [10000000 is 1000.00% (maximum)]
						TempHealAmount2 = PlayerLevel * 1250;
						TempHealAmount3 = random(-62500,62500);
						HellcoreRestored = TempHealAmount + TempHealAmount2 + TempHealAmount3;
						if (player.mo.CountInv("WaterFlyingDress")) HellcoreRestored *= 1.667;
						if (SoulMasteryPerkLevel > 0)
						{
							temp1 = 0;
							temp2 = 0;
							if (SoulMasteryPerkLevel <= 0) temp1 = 0;
							if (SoulMasteryPerkLevel == 1) temp1 = 1;
							if (SoulMasteryPerkLevel == 2) temp1 = 2;
							if (SoulMasteryPerkLevel == 3) temp1 = 3;
							if (SoulMasteryPerkLevel == 4) temp1 = 4;
							if (SoulMasteryPerkLevel >= 5) temp1 = 5;
							if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
							if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
							if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
							PerkFactor = 16 + (temp1 + temp2);
							HellcoreRestored = HellcoreRestored * PerkFactor / 16;
						}
						HellcoreRestored = clamp(HellcoreRestored, 1, 10000000);
					
						HellcoreOverheatLevel -= HellcoreRestored;
						if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
						
						CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
					}

					ptemp1 = (350*frandom(0.999,1.001));
					if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
					CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
					if (CharacterClass == 2) 
					{
						ptemp1 = (350*frandom(0.999,1.001));
						if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRBonusTimeAdd: %d, itemname: %s", ptemp1, nm);
						CallACS("MiscVarSetDECORATE",95,ptemp1,1); // HLCRCoolBonPenTimer
					}

					A_UCIIHealSpark(player.mo,"CustomHealSpark",1.375,1.375,"Heal3Glitter",6);
					player.mo.A_StartSound("misc/invuse",81,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_StartSound("healing_dq",83,CHANF_DEFAULT,1.0,ATTN_NORM);
					player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
					player.mo.A_TakeInventory(invoker.iDTech1Check,1);
				}
			}
		}
		
		// Healing Messages (Player)
		if ((dvds_showdamagemessages & 1) && HealMsgAmount > 0) A_PrintHealingMessage(self, HealMsgAmount);
	}
	
	// New Health Bonus Script [no source actor] :P
	action void A_EmulateGiveHealthBonusACI (int multiplier = 1, int givemanachance = 8, int staminagive = 100, int hellcorecool = 1)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int CurrentMana = CallACS("StatCheck",14);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStamina5X = MaxStamina * 5;
		int StamToGain = CallACS("MiscVarCheckDECORATE",165);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int MaxManaLimit = MaxMana * 2;
		int temp1, temp2;
		int ptemp1, ptemp2;
		int PerkFactor;
		int CurrentHealth, TempHealAmount, TempHealAmount2, TempHealAmount3;
		
		multiplier = clamp(multiplier, 1, multiplier);
		CurrentHealth = player.mo.health;
		//Console.Printf("multiplier: %d", multiplier);
		
		if (CurrentHealth < MaxHealthLimit)
		{
			TempHealAmount = MaxHealthTrue / 100;
			if (TempHealAmount < 1) TempHealAmount = 1;
		
			TempHealAmount2 = (PlayerLevel * 0.04);
			TempHealAmount += TempHealAmount2;
			TempHealAmount *= multiplier;
			if ((dvds_showdamagemessages & 1) && TempHealAmount > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, TempHealAmount);
			CurrentHealth += TempHealAmount;
			if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
			//Console.Printf("TempHealAmount: %d, TempHealAmount2: %d", TempHealAmount, TempHealAmount2, multiplier);

			player.mo.health = player.health = CurrentHealth;
		}
		ptemp1 = 0;
		for (int i = 0; i < multiplier; i++) 
		{
			ptemp2 = randompick(4,5,5,5,6);
			CallACS("MiscVarSetDECORATE",92,ptemp2,1); // HPRegenBonPenTimer
			ptemp1 += ptemp2;
		}
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [HealthBonusACI]: %d", ptemp1);
		
		//Console.Printf("TempHealAmount: %d / MaxHealthLimit: %d", TempHealAmount, MaxHealthLimit);
		if (random(1,100) <= givemanachance)
		{
			if (CurrentMana < MaxManaLimit)
			{
				TempHealAmount = (MaxMana * 0.01);
				if (TempHealAmount < 1) TempHealAmount = 1;
			
				TempHealAmount2 = (PlayerLevel * 0.04);
				TempHealAmount += TempHealAmount2;
				TempHealAmount *= multiplier;
				CurrentMana += TempHealAmount;
				CurrentMana = clamp(CurrentMana, CurrentMana, MaxManaLimit);

				CallACS("OtherVarSetDECORATE",2,CurrentMana);
				ptemp1 = 0;
				for (int i = 0; i < multiplier; i++)
				{
					ptemp2 = randompick(3,4,4,4,5);
					CallACS("MiscVarSetDECORATE",93,ptemp2,1); // MPRegenBonPenTimer
					ptemp1 += ptemp2;
				}
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd [HealthBonusACI]: %d", ptemp1);
			}
		}
		
		if (staminagive)
		{
			// Add 0.5% to Stamina Value [up to 500%]
			StamToGain = MaxStamina * 0.005;
			StamToGain *= multiplier;
			int perktemp1 = StamToGain;
			
			PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
			perktemp1 = perktemp1 * PerkFactor / 10000;
			if (player.mo.CountInv("WaterFlyingDress")) perktemp1 *= 1.6667;
			if (dvdsdebug_healitemdisplays) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, StamToGain);
			StamToGain = perktemp1;
			
			// Tweaks the multiplier for Stamina Recovery.
			StamToGain = StamToGain * staminagive / 100;
			
			if (CurrentStamina < MaxStamina5X) CurrentStamina += StamToGain; 
			if (CurrentStamina > MaxStamina5X) CurrentStamina = MaxStamina5X;
			
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			ptemp1 = 0;
			for (int i = 0; i < multiplier; i++)
			{
				ptemp2 = randompick(3,4,4,4,5);
				CallACS("MiscVarSetDECORATE",94,ptemp2,1); // StamRegenBonPenTimer
				ptemp1 += ptemp2;
			}
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [HealthBonusACI]: %d", ptemp1);
		}
		
		int HellcoreRestored;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		if (CharacterClass == 2 && hellcorecool) // Flora's Hellcore Heating will also marginally go down with each Health Bonus grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				TempHealAmount = 2500; // 0.25% [10000000 is 1000.00% (maximum)]
				TempHealAmount *= multiplier;
				TempHealAmount2 = PlayerLevel * 10;
				TempHealAmount3 = random(-500,500);
				HellcoreRestored = TempHealAmount + TempHealAmount2 + TempHealAmount3;
				if (player.mo.CountInv("WaterFlyingDress")) HellcoreRestored *= 1.6667;
				if (SoulMasteryPerkLevel > 0)
				{
					temp1 = 0;
					temp2 = 0;
					if (SoulMasteryPerkLevel <= 0) temp1 = 0;
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel >= 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
				HellcoreRestored = clamp(HellcoreRestored, 1, 10000000);
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
				
				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
			if (CharacterClass == 2) 
			{
				ptemp1 = 0;
				for (int i = 0; i < multiplier; i++)
				{
					ptemp2 = randompick(3,4,4,4,5);
					CallACS("MiscVarSetDECORATE",95,ptemp2,1); // HLCRCoolBonPenTimer
					ptemp1 += ptemp2;
				}
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRBonusTimeAdd [HealthBonusACI]: %d", ptemp1);
			}
		}
	}
	
	// ManaCube Pickup script
	action void A_PickupManaCube(int type = 0, int overmana = 0)
	{
		actor playera = players[0].mo;
		String nm, nn, no, np;
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int GiveManaAmount;
		int MaxManaDouble = MaxMana * 2;
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		
		if (type <= 1) GiveManaAmount = (20 + (MaxMana * 0.075)); // Small (0.75)
		if (type == 2) GiveManaAmount = (60 + (MaxMana * 0.1875)); // Medium (1.875)
		if (type >= 3) GiveManaAmount = (100 * (MaxMana * 0.30)); // Large (3)
		
		if (clearofmind > 0)
		{
			if (clearofmind == 1) GiveManaAmount *= 1.02;
			if (clearofmind == 2) GiveManaAmount *= 1.045;
			if (clearofmind == 3) GiveManaAmount *= 1.075;
			if (clearofmind == 4) GiveManaAmount *= 1.11;
			if (clearofmind == 5) GiveManaAmount *= 1.15;
		}
		
		if (playera)
		{
			if (playera.CountInv("SauronHelmet")) GiveManaAmount = GiveManaAmount * 9 / 8; // Sauron Helmet = 112.5%
			if (playera.CountInv("SauronGauntletsItem")) // Sauron Gauntlets = 125%
			if (playera.CountInv("TheOneRing"))
			{
				if (CharacterClass == 2 || CharacterClass == 8) GiveManaAmount = floor(GiveManaAmount * 1.25);	// The One Ring [Flora & Ailish] = 125%
													else if (CharacterClass == 9) GiveManaAmount = floor(GiveManaAmount * 0.875);	// The One Ring [Petra] = 87.5%
																									 else GiveManaAmount = floor(GiveManaAmount * 0.5);		// The One Ring [Marines] = 50%
			}
		}
		
		GiveManaAmount = GiveManaAmount * dvds_manaitemmultiplier / 100;
		
		CurrentMana += GiveManaAmount;
		if (overmana == 0 && CurrentMana > MaxMana) CurrentMana = MaxMana;
		if (overmana == 1 && CurrentMana > MaxManaDouble) CurrentMana = MaxManaDouble;
		
		CallACS("OtherVarSetDECORATE",2,CurrentMana);
		//CallACS("MiscVarSetDECORATE",243,CurrentMana);
		//CallACS("MiscVarSetDECORATE",238,CurrentMana);
		
		int temp;
		if (type <= 1) temp = randompick(25,30,35) * 1;
		if (type == 2) temp = randompick(25,30,35) * 3;
		if (type >= 3) temp = randompick(25,30,35) * 5;
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd: %d", temp);
		CallACS("MiscVarSetDECORATE",93,temp,1); // MPRegenBonPenTimer
	}
	
	// Mana Recovery Items
	action int A_CheckManaLevels(int overmana = 0)
	{
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int MaxManaLimit = MaxMana * 2;
		int ManaThreshold;

		if (overmana == 0) ManaThreshold = MaxMana;
		if (overmana == 1) ManaThreshold = MaxManaLimit;

		int result = 0;
		if (CurrentMana < ManaThreshold) result = 1;
		return result;
	}
	
	// New Soulsphere script :P
	action void A_GrabSoulsphere(int type = 0)
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int ptemp1, ptemp2;

		if (CurrentHealth < MaxHealthLimit)
		{
			HealthValue = MaxHealthTrue;
			if (type == 1) HealthValue *= 0.5;
			if ((dvds_showdamagemessages & 1) && HealthValue > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealthValue);
			CurrentHealth += HealthValue;
			if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;

			player.mo.health = player.health = CurrentHealth;
		}
		
		// Add 25% to Stamina Value [up to 500%]
		TrueStamValue = MaxStamina / 4;
		if (type == 1) TrueStamValue *= 0.5;
		perktemp1 = TrueStamValue;
		if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp1 *= 1.6667;
		PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
		perktemp1 = perktemp1 * PerkFactor / 10000;
		
		if (CurrentStamina != MaxStaminaLimit)
		{
			if (debughealitems) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, TrueStamValue);
			if (CurrentStamina < MaxStaminaLimit) CurrentStamina += TrueStamValue;
			CurrentStamina = clamp(CurrentStamina, CurrentStamina, MaxStaminaLimit);

			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		// Add 50% MP/Mana to Deggaris/Illucia/Flora, 200% Max MP/Mana.
		MaxManaLimit = MaxMana * 2;
		if (CurrentMana < MaxManaLimit)
		{
			ManaValue = MaxMana / 2;
			if (type == 1) ManaValue *= 0.5;
			CurrentMana += ManaValue;
			CurrentMana = clamp(CurrentMana, CurrentMana, MaxManaLimit);

			CallACS("OtherVarSetDECORATE",2,CurrentMana);
		}
	
		int HellcoreRestored;
		if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				temp1 = 0;
				temp2 = 0;
				HellcoreRestored = 250000 + (PlayerLevel * 2500) + random(-50000,50000);
				if (type == 1) HellcoreRestored *= 0.5;
				if (player.mo.CountInv("WaterFlyingDress") > 0) HellcoreRestored *= 1.6667;
				if (SoulMasteryPerkLevel > 0)
				{
					temp1 = 0;
					temp2 = 0;
					if (SoulMasteryPerkLevel <= 0) temp1 = 0;
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel >= 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
			
				HellcoreRestored = clamp(HellcoreRestored, 1, 10000000);
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
		}

		ptemp1 = randompick(300,400,400,400,500);
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [SoulSphere]: %d", ptemp1);
		CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
		ptemp1 = randompick(300,400,400,400,500);
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd [SoulSphere]: %d", ptemp1);
		CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer
		ptemp1 = randompick(300,400,400,400,500);
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [SoulSphere]: %d", ptemp1);
		CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
		if (CharacterClass == 2)
		{
			ptemp1 = randompick(300,400,400,400,500);
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRBonusTimeAdd [SoulSphere]: %d", ptemp1);
			CallACS("MiscVarSetDECORATE",95,ptemp1,1); // HLCRCoolBonPenTimer
		}
	}
	
	// New Megasphere Script [for health/stamina half] :P
	action void A_MegaSphereHealth()
	{
		int debughealitems = dvdsdebug_healitemdisplays;
		int MaxManaLimit;
		int temp1, temp2;
		int PerkFactor;
		int perktemp1;
		int TrueStamValue;
		int HealthValue, ManaValue;
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentHealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CurrentMana = CallACS("StatCheck",14); 
		int MaxMana = CallACS("StatCheck",2);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxStaminaLimit = MaxStamina * 5;
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int HealAmount;
		int ptemp1, ptemp2;
		
		if (CurrentHealth < MaxHealthLimit)
		{
			HealAmount = MaxHealthLimit;
			if ((dvds_showdamagemessages & 1) && HealAmount > 0 && CurrentHealth < MaxHealthLimit) A_PrintHealingMessage(self, HealAmount);
			CurrentHealth += HealAmount;
			if (CurrentHealth > MaxHealthLimit) CurrentHealth = MaxHealthLimit;
		
			player.mo.health = player.health = CurrentHealth;
		}
		
		// Increase MP/Mana
		if (CharacterClass == 9) // Petra gets no armor from a Soul Sphere, but gets Mana and Force Gauge refill.
		{
			CurrentMana = MaxMana * 2;
			//Insert code for refilling force gauge here
		}
		else
		if (CharacterClass == 2 || CharacterClass == 8) // Flora and Ailish do not get armor from a Soul Sphere, but instead gets Mana up to 200% of their maximum
		{
			CurrentMana = MaxMana * 2;
		}
		else
		if (CharacterClass <= 1)
		{
			MaxManaLimit = MaxMana * 2;
			CurrentMana = MaxManaLimit;
		}
		CallACS("OtherVarSetDECORATE",2,CurrentMana);

		// Add 50% to Stamina Value [up to 200%]
		TrueStamValue = MaxStamina / 2;
		perktemp1 = TrueStamValue;
		if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 *= 1.6667;
		PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
		perktemp1 = perktemp1 * PerkFactor / 10000;

		if (CurrentStamina != MaxStaminaLimit)
		{
			if (debughealitems) Console.Printf("Stamina Restored: %d VS [%d]", perktemp1, TrueStamValue);
			if (CurrentStamina < MaxStaminaLimit) CurrentStamina += TrueStamValue; 
			CurrentStamina = clamp(CurrentStamina, CurrentStamina, MaxStaminaLimit);

			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		int HellcoreRestored;
		if (CharacterClass == 2) // Flora's Hellcore Heating will also go down with each SoulSphere grabbed
		{
			if (HellcoreOverheatLevel > 0)
			{
				HellcoreRestored = 750000 + (PlayerLevel * 7500) + random(-150000,150000);
				if (player.mo.CountInv("WaterFlyingDress")) HellcoreRestored *= 1.6667;
				if (SoulMasteryPerkLevel > 0)
				{
					temp1 = 0;
					temp2 = 0;
					if (SoulMasteryPerkLevel <= 0) temp1 = 0;
					if (SoulMasteryPerkLevel == 1) temp1 = 1;
					if (SoulMasteryPerkLevel == 2) temp1 = 2;
					if (SoulMasteryPerkLevel == 3) temp1 = 3;
					if (SoulMasteryPerkLevel == 4) temp1 = 4;
					if (SoulMasteryPerkLevel >= 5) temp1 = 5;
					if (SoulMasteryEXPerkLevel <= 0) temp2 = 0;
					if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
					if (SoulMasteryEXPerkLevel >= 2) temp2 = 5;
					PerkFactor = 16 + (temp1 + temp2);
					HellcoreRestored = HellcoreRestored * PerkFactor / 16;
				}
				HellcoreRestored = clamp(HellcoreRestored, 1, 10000000);
			
				HellcoreOverheatLevel -= HellcoreRestored;
				if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;

				CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			}
		}

		ptemp1 = randompick(600,800,800,800,1000);
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [MegaSphere]: %d", ptemp1);
		CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
		ptemp1 = randompick(600,800,800,800,1000);
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPBonusTimeAdd [MegaSphere]: %d", ptemp1);
		CallACS("MiscVarSetDECORATE",93,ptemp1,1); // MPRegenBonPenTimer
		ptemp1 = randompick(600,800,800,800,1000);
		if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [MegaSphere]: %d", ptemp1);
		CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
		if (CharacterClass == 2)
		{
			ptemp1 = randompick(600,800,800,800,1000);
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRBonusTimeAdd [MegaSphere]: %d", ptemp1);
			CallACS("MiscVarSetDECORATE",95,ptemp1,1); // HLCRCoolBonPenTimer
		}
	}
	
	// MegaSphere Armor [Deggaris & Illucia Only] or Mana [All Three Characters]
	action void A_MegaSphereArmor()
	{
		int PlayerLevel = CallACS("StatCheck",0);
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int ArmorClearValue, RawArmorValue;
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		
		if (CharacterClass == 0 || CharacterClass == 1)
		{
			// Saves original raw Armor Value
			RawArmorValue = player.mo.CountInv("BasicArmor");
			if (dvdsdebug_armorbonusdisplays) Console.Printf("BasicArmor: %d", RawArmorValue);
		
			// Clears Armor Types
			player.mo.A_SetInventory("BasicArmor", 0);
			player.mo.A_SetInventory("Armor", 0);
			player.mo.A_SetInventory("ArmorBonusDSGreen",0);
			player.mo.A_SetInventory("ArmorBonusDSBlue",0);
			player.mo.A_SetInventory("ArmorBonusDSStone1",0);
			player.mo.A_SetInventory("ArmorBonusDSStone2",0);
			player.mo.A_SetInventory("ArmorBonusDSDiamond1",0);
			player.mo.A_SetInventory("ArmorBonusDSDiamond2",0);
		
			// Reinitalizes the proper Armor Class after the previous code above clears it
			if (CurrentArmorClass <= 1) 
			{ 
				CurrentArmorClass = 2;
				RawArmorValue = 200;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSBlue", 1); }
			}
			else if (CurrentArmorClass == 2) 
			{ 
				CurrentArmorClass = 3; 
				RawArmorValue = 500;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone1", 1); }
			}
			else if (CurrentArmorClass == 3) 
			{ 
				CurrentArmorClass = 4;
				RawArmorValue = 1250;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
			}
			else if (CurrentArmorClass == 4) 
			{ 
				CurrentArmorClass = 5;
				RawArmorValue = 2000;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone2", 1); }
			}
			else if (CurrentArmorClass >= 5) 
			{ 
				CurrentArmorClass = 6; 
				RawArmorValue = 5000;
				for (int i = 0; i < RawArmorValue; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
			}
			
			CurrentMaxArmor = 0;
			player.mo.A_SetInventory("DSNoArmorClass",0);
			player.mo.A_SetInventory("DSGreenArmorClass",0);
			player.mo.A_SetInventory("DSBlueArmorClass",0);
			player.mo.A_SetInventory("DSStoneArmorClass1",0);
			player.mo.A_SetInventory("DSDiamondArmorClass1",0);
			player.mo.A_SetInventory("DSStoneArmorClass2",0);
			player.mo.A_SetInventory("DSDiamondArmorClass2",0);

			if (CurrentArmorClass == 1) { CurrentMaxArmor = 100; player.mo.A_SetInventory("DSGreenArmorClass",1); }
			if (CurrentArmorClass == 2) { CurrentMaxArmor = 200; player.mo.A_SetInventory("DSBlueArmorClass",1); }
			if (CurrentArmorClass == 3) { CurrentMaxArmor = 500; player.mo.A_SetInventory("DSStoneArmorClass1",1); }
			if (CurrentArmorClass == 4) { CurrentMaxArmor = 1250; player.mo.A_SetInventory("DSDiamondArmorClass1",1); }
			if (CurrentArmorClass == 5) { CurrentMaxArmor = 2000; player.mo.A_SetInventory("DSStoneArmorClass2",1); }
			if (CurrentArmorClass == 6) { CurrentMaxArmor = 5000; player.mo.A_SetInventory("DSDiamondArmorClass2",1); }
		}
		if (dvdsdebug_armorbonusdisplays || dvdsdebug_armortrackdisplays) Console.Printf("CurrentArmorClass: %d, CurrentMaxArmor: %d", CurrentArmorClass, CurrentMaxArmor);
		CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
		CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
	}
	
	// Stimpacks/Medikits/Berserk Packs (All games)
	action void A_PickupMedicalItem(int HealItemType = 0, int maxhealtype = 0) //
	{
		int HealAmount, ExtraHeal, CurrentHP;
		int tempstaminalimit;
		int perktemp1, perktemp2, perktemp3;
		double PerkFactor;
		double perkbasemulti = 16;
		int debughealitems = dvdsdebug_healitemdisplays;
		CurrentHP = player.mo.health;
		int CharacterClass = CallACS("CheckCharacterClass");
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int TrueStamValue;
		int ptemp1, ptemp2;

		int HealMsgAmount;

		if (debughealitems) Console.Printf("HealItemType: %d", HealItemType);
		if (HealItemType == -1) // Source Guardian Lifeseed
		{
			HealAmount = MaxHealthTrue * 0.25;
			perktemp2 = HealAmount;
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		
			tempstaminalimit = MaxStamina * 5;
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			tempstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		
			if (CurrentStamina < tempstaminalimit)
			{
				TrueStamValue = MaxStamina * 0.125; // 12.5%
				perktemp1 = TrueStamValue;
				if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp1 *= 1.6667;
				PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
				perktemp1 = perktemp1 * PerkFactor / 10;
			
				if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				CurrentStamina += perktemp1;
			
				if (debughealitems) Console.Printf("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, MaxStamina, perktemp1, TrueStamValue);
				CurrentStamina = clamp(CurrentStamina, CurrentStamina, tempstaminalimit);
				
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			ptemp1 = (420*frandom(0.2499,0.2501));
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [Lifeseed]: %d", ptemp1);
			CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
			ptemp1 = (420*frandom(0.1249,0.1251));
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [Lifeseed]: %d", ptemp1);
			CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
		}

		if (HealItemType == 0 || HealItemType == 1) // Stimpack / Crystal Vial (1) and Medikit / Mini Berserk Pack (2) [Health]
		{
			if (HealItemType == 0) HealAmount = MaxHealthTrue * 10 / 100; // [Stimpack]
			if (HealItemType == 1) HealAmount = MaxHealthTrue * 25 / 100; // [Medikit/Mini-Berserk]
			perktemp2 = HealAmount;
			if (CharacterClass == 0 || CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		
			tempstaminalimit = MaxStamina;
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			tempstaminalimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		
			if (CurrentStamina < tempstaminalimit)
			{
				if (HealItemType == 0) TrueStamValue = MaxStamina / 20; // 5.0% [Stimpack/Vial]
				if (HealItemType == 1) TrueStamValue = MaxStamina / 8; // 12.5% [Medikit/Flask]
				perktemp1 = TrueStamValue;
				if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp1 *= 1.6667;
				PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
				perktemp1 = perktemp1 * PerkFactor / 10;
			
				if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
				perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
				CurrentStamina += perktemp1;
			
				if (debughealitems) Console.Printf("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, MaxStamina, perktemp1, TrueStamValue);
				CurrentStamina = clamp(CurrentStamina, CurrentStamina, tempstaminalimit);

				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (HealItemType == 0) // Stimpack / Crystal Vial
			{
				ptemp1 = (420*frandom(0.0999,0.1001));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [StimVial]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
				ptemp1 = (420*frandom(0.0499,0.0501));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [StimVial]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
			}
			if (HealItemType == 1) // Medikit / Mini Berserk Pack
			{
				ptemp1 = (420*frandom(0.2499,0.2501));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [MediMBer]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
				ptemp1 = (420*frandom(0.1249,0.1251));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [MediMBer]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
			}
		}
		
		if (HealItemType == 2) // Berserk Pack [Health]
		{
			HealAmount = MaxHealthTrue;
			perktemp2 = HealAmount;
			
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perktemp2 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		}
		if (HealItemType == 3 || HealItemType == 4) // Full Berserk Pack (3) and Mini Berserk Pack (4) [Stamina]
		{
			if (HealItemType == 3) 
			{
				TrueStamValue = MaxStamina * 1; // 100% [Full Berserk Pack]
				ptemp1 = (420*frandom(1.2499,1.2501));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [FullBers]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
				ptemp1 = (420*frandom(1.2499,1.2501));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [FullBers]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
			}
			if (HealItemType == 4) 
			{
				TrueStamValue = MaxStamina * 0.25; // 25% [Mini Berserk Pack]
				ptemp1 = (420*frandom(0.2499,0.2501));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [MiniBers]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
				ptemp1 = (420*frandom(0.2499,0.2501));
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamBonusTimeAdd [MiniBers]: %d", ptemp1);
				CallACS("MiscVarSetDECORATE",94,ptemp1,1); // StamRegenBonPenTimer
			}
			perktemp1 = TrueStamValue;
			if (player.mo.CountInv("WaterFlyingDress") && CharacterClass == 2) perktemp1 *= 1.6667;
			PerkFactor = ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5)) + 10;
			perktemp1 = perktemp1 * PerkFactor / 10;
		
			if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
			perktemp1 *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
			
			tempstaminalimit = MaxStamina * 5;
		
			if (debughealitems) Console.Printf("Stamina Limit: [%d], Stamina Restored: %d VS [%d]", tempstaminalimit, perktemp1, TrueStamValue);
			if (CurrentStamina < tempstaminalimit) CurrentStamina += perktemp1;
			CurrentStamina = clamp(CurrentStamina, CurrentStamina, tempstaminalimit);
			
			CallACS("MiscVarSetDECORATE",21,CurrentStamina);
		}
		
		int temphealthlimit = MaxHealthTrue;
		if (maxhealtype > 0) temphealthlimit *= 2;
		
		if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
		temphealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		if (temphealthlimit > (MaxHealthTrue*2)) temphealthlimit = (MaxHealthTrue*2);

		if (CurrentHP <= temphealthlimit)
		{
			CurrentHP += perktemp2;
			HealMsgAmount = perktemp2;
			if (CurrentHP > temphealthlimit) CurrentHP = temphealthlimit;
			if (debughealitems) Console.Printf("Health Limit: %d VS [%d], Health Restored: %d VS [%d]", temphealthlimit, MaxHealthTrue, perktemp2, HealAmount);
			player.mo.health = player.health = CurrentHP;
		}

		if ((dvds_showdamagemessages & 1) && HealMsgAmount > 0) A_PrintHealingMessage(self, HealMsgAmount);
	}
	
	// Check if Health is above or below normal max [for customized "normal" health item checks] (All games)
	action bool A_CheckHealthLevels(int maxhealtype = 0)
	{
		int currenthealth = player.mo.health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int CharacterClass = CallACS("CheckCharacterClass");
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int perkhealthlimit = MaxHealthTrue;
		double perkbasemulti = 16;
		
		if (CharacterClass == 0 || CharacterClass == 1 || CharacterClass == 9) { perkbasemulti = 0.125; } else { perkbasemulti = 0.0625; }
		perkhealthlimit *= (1.0 + (MedicinalProwessPerkLevel * perkbasemulti));
		if (maxhealtype > 0) perkhealthlimit *= 2;
		perkhealthlimit = clamp(perkhealthlimit, perkhealthlimit, (MaxHealthTrue*2));
		
		int result = false;
		if (currenthealth < perkhealthlimit) result = true;

		return result;
	}
	
	// Max Health Bonus Script
	action void A_MaxHPBonusPickup()
	{
		int HPError, IncreaseMultiplier, LevelExtraHealth, BonusMaxHP, CurrentHP, PerkFactor; 
		int ArmorHPBonus = 0;
		int MapNoBonus = 0;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int debugseedstuff = dvdsdebug_showseedstuff;
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerLevel = CallACS("StatCheck",0);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int StrifeStaminaLevel = CallACS("MiscVarCheckDECORATE",317);
		int LifeUpPerkLvl = CallACS("MiscVarCheckDECORATE",10001);
		int LifeUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10002);
		int ptemp1, ptemp2;
		
		if (ModType == 0 && dvds_canseedsappear == 0) { }
		else
		{
			if (CharacterClass == 0) BonusMaxHP = MaxHealthTrue / random(390,410);
			if (CharacterClass == 1) BonusMaxHP = MaxHealthTrue / random(410,430);
			if (CharacterClass == 2) BonusMaxHP = MaxHealthTrue / random(430,450);
			if (CharacterClass == 8) BonusMaxHP = MaxHealthTrue / random(440,460);
			if (CharacterClass == 9) BonusMaxHP = MaxHealthTrue / random(400,420);
			if (debugseedstuff) Console.Printf("BonusMaxHP [Base]: %d", BonusMaxHP);
			
			HPError = BonusMaxHP / 3;
			HPError += 1;
			if (debugseedstuff) Console.Printf("HPError: %d", HPError);

			BonusMaxHP = BonusMaxHP + random(-HPError,HPError);
			if (debugseedstuff) Console.Printf("BonusMaxHP [After HPError]: %d", BonusMaxHP);
			
			if (CharacterClass == 0) { IncreaseMultiplier = random(18,21); } // Deggaris receives 2nd most HP from a bonus
			if (CharacterClass == 1) { IncreaseMultiplier = random(15,17); } // Illucia receives less HP from a bonus than Petra & Deggaris, but more than Flora & Ailish
			if (CharacterClass == 2) { IncreaseMultiplier = random(12,14); } // Flora receives the 2nd least HP from a bonus
			if (CharacterClass == 8) { IncreaseMultiplier = random(10,12); } // Ailish receives the least HP from a bonus
			if (CharacterClass == 9) { IncreaseMultiplier = random(20,23); } // Petra receives most HP from a bonus
			BonusMaxHP = BonusMaxHP * IncreaseMultiplier / 16;
			if (debugseedstuff) Console.Printf("Randomizer IncreaseMultiplier: %d / 16, BonusMaxHP [After HPError]: %d", IncreaseMultiplier, BonusMaxHP);
			
			// Flora's Armor Items [up to +55% Max HP gained from Max HP Bonuses]
			if (CharacterClass == 2)
			{
				if (player.mo.CountInv("PearlyCorset")) ArmorHPBonus += 20; // +20%
				if (player.mo.CountInv("KissaBra")) ArmorHPBonus += 10; // +10%
				if (player.mo.CountInv("BalrogRing")) ArmorHPBonus += 15; // +25%
				ArmorHPBonus += 100;
				BonusMaxHP = BonusMaxHP * ArmorHPBonus / 100; // Flora is the only one who can use the Pearly Corset / Kissa Bra / Balrog Ring
				if (debugseedstuff) Console.Printf("ArmorHPBonus [Flora]: %d / 100, BonusMaxHP [After ArmorHPBonus]: %d", ArmorHPBonus, BonusMaxHP);
			}
			
			PerkFactor = ((LifeUpPerkLvl * 500) + (LifeUpExPerkLvl * 1250)) + 10000;
			BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
			if (debugseedstuff) Console.Printf("BonusMaxHP [LifeUp Perk]: %d", BonusMaxHP);
			
			PerkFactor = (StrifeStaminaLevel * 1250) + 10000;
			BonusMaxHP = BonusMaxHP * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded
			if (debugseedstuff) Console.Printf("BonusMaxHP [StaminaUpgrade (Strife)]: %d", BonusMaxHP);
			
			// Overall Modifier
			MapNoBonus = (level.levelnum * 9) / 20; // 45%
			if (debugseedstuff) Console.Printf("MapNoBonus: %d", MapNoBonus);
			BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
			if (TrueGameSkill <= SKILL_VERY_EASY)		BonusMaxHP = BonusMaxHP * (random(90,100) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_EASY)				BonusMaxHP = BonusMaxHP * (random(80,90) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_NORMAL)			BonusMaxHP = BonusMaxHP * (random(75,85) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_HARD)				BonusMaxHP = BonusMaxHP * (random(70,80) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_VERY_HARD)		BonusMaxHP = BonusMaxHP * (random(65,75) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_EXTREME)			BonusMaxHP = BonusMaxHP * (random(60,70) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_HORRIBLE)		BonusMaxHP = BonusMaxHP * (random(55,65) + MapNoBonus) / 100;
			if (TrueGameSkill == SKILL_IMPOSSIBLE)	BonusMaxHP = BonusMaxHP * (random(50,60) + MapNoBonus) / 100;
			if (TrueGameSkill >= SKILL_OMEGA)	BonusMaxHP = BonusMaxHP * (random(45,55) + MapNoBonus) / 100;
			if (debugseedstuff) Console.Printf("BonusMaxHP [After MapNoBonus]: %d", BonusMaxHP);
			
			PerkFactor = 1;
			PerkFactor += (((LifeUpPerkLvl * 1) / 10) + ((StrifeStaminaLevel * 1) / 4));
			if (BonusMaxHP < PerkFactor) BonusMaxHP = PerkFactor;
			if (debugseedstuff) Console.Printf("BonusMaxHP [Final]: %d", BonusMaxHP);
			
			CallACS("MiscVarSetDECORATE",222,BonusMaxHP,1);
			CallACS("MiscVarSetDECORATE",2031,105); 
			
			CurrentHP = player.mo.health;
			player.mo.health = player.health = (CurrentHP + BonusMaxHP);
			

			MaxHealthTrue += BonusMaxHP;
			int MaxHealthLimit = MaxHealthTrue * 2;
			CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
			
			// Max HP Bonus also heals extra HP dependant on the character in use.
			int extraheal;
			CurrentHP = player.mo.health;
			if (CharacterClass == 0) extraheal = random(2,4) + BonusMaxHP; // Deggaris receives the Least Healed HP from a bonus
			if (CharacterClass == 1) extraheal = random(3,6) + BonusMaxHP; // Illucia receives a Median of Healed HP from a bonus
			if (CharacterClass == 2) extraheal = random(5,10) + BonusMaxHP; // Flora used to receive the Most Healed HP from a bonus
			if (CharacterClass == 8) extraheal = random(6,12) + BonusMaxHP; // Ailish receives the Most Healed HP from a bonus
			if (CharacterClass == 9) extraheal = random(1,3) + BonusMaxHP; // Petra receives the Least Healed HP from a bonus
			CurrentHP += extraheal;
			
			int ExtraHP;
			ExtraHP = (MaxHealthTrue * 0.01);
			if (ExtraHP < 1) ExtraHP = 1;
			
			LevelExtraHealth = (PlayerLevel * 0.1);
			ExtraHP += LevelExtraHealth;
			CurrentHP += ExtraHP;
			int HealMsgAmount = ((CurrentHP - player.mo.health) + BonusMaxHP);
			if ((dvds_showdamagemessages & 1) && HealMsgAmount > 0) A_PrintHealingMessage(self, HealMsgAmount);
			if (CurrentHP > MaxHealthLimit) CurrentHP = MaxHealthLimit;
			
			player.mo.health = player.health = CurrentHP;

			ptemp1 = (randompick(3,4,4,4,5)*extraheal);
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPBonusTimeAdd [MaxHPBonus]: %d", ptemp1);
			CallACS("MiscVarSetDECORATE",92,ptemp1,1); // HPRegenBonPenTimer
		}
	}

	// Checks Whether a Full Armor Item can be picked up or not
	action int A_CheckArmorLevels(int ArmorType = 0)
	{
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		int result = 0;
		if (CharacterClass != 2)
		{
			RawArmorValue = player.mo.CountInv("BasicArmor");
			if (ArmorType == 1 && CurrentArmorClass <= 1 && RawArmorValue < 100) result = 1;
			if (ArmorType == 2 && CurrentArmorClass <= 2 && RawArmorValue < 200) result = 1;
			if (ArmorType == 3 && CurrentArmorClass <= 3 && RawArmorValue < 500) result = 1;
			if (ArmorType == 4 && CurrentArmorClass <= 4 && RawArmorValue < 1250) result = 1;
			if (ArmorType == 5 && CurrentArmorClass <= 5 && RawArmorValue < 2000) result = 1;
			if (ArmorType == 6 && CurrentArmorClass <= 6 && RawArmorValue < 5000) result = 1;
		}
		//Console.Printf("ArmorType: %d, CurrentArmorClass: %d, RawArmorValue: %d, Result: %d", ArmorType, CurrentArmorClass, RawArmorValue, result);
		return result;
	}

	action int A_CheckArmorLevelsOrb(int ArmorType = 0)
	{
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		int result = 0;
		if (CharacterClass != 2)
		{
			if (ArmorType == 1 && CurrentArmorClass <= 1) result = 1;
			if (ArmorType == 2 && CurrentArmorClass <= 2) result = 1;
			if (ArmorType == 3 && CurrentArmorClass <= 3) result = 1;
			if (ArmorType == 4 && CurrentArmorClass <= 4) result = 1;
			if (ArmorType == 5 && CurrentArmorClass <= 5) result = 1;
			if (ArmorType == 6 && CurrentArmorClass <= 6) result = 1;
		}
		//Console.Printf("ArmorType: %d, CurrentArmorClass: %d, RawArmorValue: %d, Result: %d", ArmorType, CurrentArmorClass, RawArmorValue, result);
		return result;
	}

	// Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
	action void A_PickupArmorMain(int ArmorType = 0)
	{
		int GiveArmorAmount;
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);

		// Saves original raw Armor Value
		RawArmorValue = player.mo.CountInv("BasicArmor");
		
		player.mo.A_SetInventory("BasicArmor",0);
		player.mo.A_SetInventory("Armor",0);
		player.mo.A_SetInventory("ArmorBonusDSGreen",0);
		player.mo.A_SetInventory("ArmorBonusDSBlue",0);
		player.mo.A_SetInventory("ArmorBonusDSStone1",0);
		player.mo.A_SetInventory("ArmorBonusDSStone2",0);
		player.mo.A_SetInventory("ArmorBonusDSDiamond1",0);
		player.mo.A_SetInventory("ArmorBonusDSDiamond2",0);
		
		if (ArmorType == 1 && CurrentArmorClass <= 1) { CurrentArmorClass = 1; GiveArmorAmount = 100; }
		if (ArmorType == 2 && CurrentArmorClass <= 2) { CurrentArmorClass = 2; GiveArmorAmount = 200; }
		if (ArmorType == 3 && CurrentArmorClass <= 3) { CurrentArmorClass = 3; GiveArmorAmount = 500; }
		if (ArmorType == 4 && CurrentArmorClass <= 4) { CurrentArmorClass = 4; GiveArmorAmount = 1250; }
		if (ArmorType == 5 && CurrentArmorClass <= 5) { CurrentArmorClass = 5; GiveArmorAmount = 2000; }
		if (ArmorType == 6 && CurrentArmorClass <= 6) { CurrentArmorClass = 6; GiveArmorAmount = 5000; }
		
		player.mo.A_SetInventory("DSNoArmorClass",0);
		player.mo.A_SetInventory("DSGreenArmorClass",0);
		player.mo.A_SetInventory("DSBlueArmorClass",0);
		player.mo.A_SetInventory("DSStoneArmorClass1",0);
		player.mo.A_SetInventory("DSDiamondArmorClass1",0);
		player.mo.A_SetInventory("DSStoneArmorClass2",0);
		player.mo.A_SetInventory("DSDiamondArmorClass2",0);
		if (CurrentArmorClass == 1)
		{
			GiveInventory("DSGreenArmorClass", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSGreen", 1); }
			CurrentMaxArmor = 100;
		}
		if (CurrentArmorClass == 2)
		{
			GiveInventory("DSGreenArmorClass", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSBlue", 1); }
			CurrentMaxArmor = 200;
		}
		if (CurrentArmorClass == 3)
		{
			GiveInventory("DSStoneArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone1", 1); }
			CurrentMaxArmor = 500;
		}
		if (CurrentArmorClass == 4)
		{
			GiveInventory("DSDiamondArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
			CurrentMaxArmor = 1250;
		}
		if (CurrentArmorClass == 5)
		{
			GiveInventory("DSStoneArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone2", 1); }
			CurrentMaxArmor = 2000;
		}
		if (CurrentArmorClass == 6)
		{
			GiveInventory("DSDiamondArmorClass1", 1);
			for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
			CurrentMaxArmor = 5000;
		}

		CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
		CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
	}
	
	// Emulates Main Armor Item Pickups [Applies Only to Deggaris and Illucia]
	action int A_PickupArmorMainOrb(int ArmorType = 0, int OrbType = 0, int check = 0)
	{
		//Console.Printf("\ArmorType: %d, OrbType: %d, check: %d", ArmorType, OrbType, check);

		int GiveArmorAmount;
		int RawArmorValue, ArmorClearValue;
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);

		// Saves original raw Armor Value
		RawArmorValue = player.mo.CountInv("BasicArmor");
		
		if (ArmorType <= 1 && CurrentArmorClass >= 1) { GiveArmorAmount = (100 - RawArmorValue); }
		if (ArmorType == 2 && CurrentArmorClass >= 2) { GiveArmorAmount = (200 - RawArmorValue); }
		if (ArmorType == 3 && CurrentArmorClass >= 3) { GiveArmorAmount = (500 - RawArmorValue); }
		if (ArmorType == 4 && CurrentArmorClass >= 4) { GiveArmorAmount = (1250 - RawArmorValue); }
		if (ArmorType == 5 && CurrentArmorClass >= 5) { GiveArmorAmount = (2000 - RawArmorValue); }
		if (ArmorType >= 6 && CurrentArmorClass >= 6) { GiveArmorAmount = (5000 - RawArmorValue); }
		if (GiveArmorAmount > 0)
		{
			if (OrbType == 1) GiveArmorAmount *= 0.35; // Green Tier [35%]
			if (OrbType == 2) GiveArmorAmount *= 0.525; // Blue Tier [52.5%]
			if (OrbType == 3) GiveArmorAmount *= 0.7084; // Stone Tier [70.84%]
			if (OrbType == 4) GiveArmorAmount *= 0.9375; // Diamond Tier [93.75%]
			if (OrbType == 5) GiveArmorAmount *= 0.875; // Divine Stone Tier [87.5%]
			if (OrbType == 6) GiveArmorAmount *= 0.9875; // Divine Diamond Tier [98.75%]
		}
		
		if (GiveArmorAmount > 0)
		{
			if (check > 0) return 1;
			else
			{
				//Console.Printf("\czGiveAmt: %d\c-", GiveArmorAmount);

				GiveArmorAmount += RawArmorValue;
				//Console.Printf("\cxRawArmorValue: %d\c-, \cyGiveArmorAmount: %d\c-", RawArmorValue, GiveArmorAmount);
				
				player.mo.A_SetInventory("BasicArmor",0);
				player.mo.A_SetInventory("Armor",0);
				player.mo.A_SetInventory("ArmorBonusDSGreen",0);
				player.mo.A_SetInventory("ArmorBonusDSBlue",0);
				player.mo.A_SetInventory("ArmorBonusDSStone1",0);
				player.mo.A_SetInventory("ArmorBonusDSStone2",0);
				player.mo.A_SetInventory("ArmorBonusDSDiamond1",0);
				player.mo.A_SetInventory("ArmorBonusDSDiamond2",0);
			
				player.mo.A_SetInventory("DSNoArmorClass",0);
				player.mo.A_SetInventory("DSGreenArmorClass",0);
				player.mo.A_SetInventory("DSBlueArmorClass",0);
				player.mo.A_SetInventory("DSStoneArmorClass1",0);
				player.mo.A_SetInventory("DSDiamondArmorClass1",0);
				player.mo.A_SetInventory("DSStoneArmorClass2",0);
				player.mo.A_SetInventory("DSDiamondArmorClass2",0);
				if (CurrentArmorClass == 1)
				{
					GiveInventory("DSGreenArmorClass", 1);
					for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSGreen", 1); }
					CurrentMaxArmor = 100;
				}
				if (CurrentArmorClass == 2)
				{
					GiveInventory("DSGreenArmorClass", 1);
					for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSBlue", 1); }
					CurrentMaxArmor = 200;
				}
				if (CurrentArmorClass == 3)
				{
					GiveInventory("DSStoneArmorClass1", 1);
					for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone1", 1); }
					CurrentMaxArmor = 500;
				}
				if (CurrentArmorClass == 4)
				{
					GiveInventory("DSDiamondArmorClass1", 1);
					for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond1", 1); }
					CurrentMaxArmor = 1250;
				}
				if (CurrentArmorClass == 5)
				{
					GiveInventory("DSStoneArmorClass1", 1);
					for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSStone2", 1); }
					CurrentMaxArmor = 2000;
				}
				if (CurrentArmorClass == 6)
				{
					GiveInventory("DSDiamondArmorClass1", 1);
					for (int i = 0; i < GiveArmorAmount; i++) { player.mo.A_GiveInventory("ArmorBonusDSDiamond2", 1); }
					CurrentMaxArmor = 5000;
				}

				CallACS("OtherVarSetDECORATE",5,CurrentArmorClass);
				CallACS("OtherVarSetDECORATE",9,CurrentMaxArmor);
				A_StartSound("generalequip",5);
			}
		}
		return 0;
	}
	
	// Sets the "glowing eyes" in the "Armor Bonus" items to a specific color based on the current Armor Class of Deggaris or Illucia [does not apply to Flora as she can't use Armor Bonuses and they aren't supposed to "appear" when she is in play]
	action void A_ArmorBonusEyeGlow()
	{
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int CurrentMaxArmor = CallACS("OtherVarCheckDECORATE",9);
		int CharacterClass = CallACS("CheckCharacterClass");

		if (CharacterClass != 2 && CharacterClass != 8 && CharacterClass != 9)
		{
			if (CurrentArmorClass == 0) { A_SetTranslation("GreenArmor"); } // If you have no Armor Class
			if (CurrentArmorClass == 1) { A_SetTranslation("GreenArmor"); } // If you have Green Armor Class
			if (CurrentArmorClass == 2) { A_SetTranslation("BlueArmor"); } // If you have Blue Armor Class
			if (CurrentArmorClass == 3) { A_SetTranslation("StoneSkin"); } // If you have Stone Armor [1] Class
			if (CurrentArmorClass == 4) { A_SetTranslation("DiamondSkin"); } // If you have Diamond Armor [1] Class
			if (CurrentArmorClass == 5) { A_SetTranslation("StoneSkin"); } // If you have Stone Armor [2] Class
			if (CurrentArmorClass == 6) { A_SetTranslation("DiamondSkin"); } // If you have Diamond Armor [2] Class
		}
		else
		{
			A_Destroy();
			level.total_items -= 1;
		}
	}
	
	action int A_CheckChainsaw()
	{
		int result = 0;
		actor playera = players[0].mo;
		if (playera)
		{
			if (playera.CountInv("DoubleBladedChainsaw")) result = 2;
			else if (playera.CountInv("Chainsaw2")) result = 1;
		}
		return result;
	}
	
	// Makes Armor Bonuses check for Flora's presence in the game in order to change them over to other items [this version is for when playing classic Doom 1/2]
	action int A_ClassicDoom2ArmorCheck()
	{
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int result = 0;
		
		if (ModType == 0) // Classic Doom 1/2 / Heretic / Hexen / Strife
		{
			if (CharacterClass == 0) result = 3;
			if (CharacterClass == 1) result = 4;
			if (CharacterClass == 2 || CharacterClass == 8 || CharacterClass == 9) result = 5;
		}
		else
		{
			if (CharacterClass == 0) result = 0;
			if (CharacterClass == 1) result = 1;
			if (CharacterClass == 2 || CharacterClass == 8 || CharacterClass == 9) result = 2;
		}
		return result;
	}
	
	// Checks and Removes "Copies" of Flora's armor items on maps [when she already has these items]
	action void A_CheckFloraArmorCopies(int Armortype = 0)
	{
		actor playera = players[0].mo;
		int CharacterClass = CallACS("CheckCharacterClass");

		if (playera && CharacterClass == 2)
		{
			if (Armortype == 1 && playera.CountInv("SafeTeaShoes")) Thing_Remove(0); // SafeTeaShoes
			if (Armortype == 2 && playera.CountInv("PearlyCorset")) Thing_Remove(0); // PearlyCorset
			if (Armortype == 3 && playera.CountInv("WaterFlyingDress")) Thing_Remove(0); // WaterFlyingDress
			if (Armortype == 4 && playera.CountInv("EvenstarNecklace")) Thing_Remove(0); // EvenstarNecklace
			if (Armortype == 5 && playera.CountInv("CloakOfEvasion")) Thing_Remove(0); // CloakOfEvasion
			if (Armortype == 6 && playera.CountInv("AnubisCufflinks")) Thing_Remove(0); // AnubisCufflinks
			if (Armortype == 7 && playera.CountInv("KissaBra")) Thing_Remove(0); // KissaBra
			if (Armortype == 8) 
			{
				if (playera.CountInv("DivineShield")) Thing_Remove(0);
				else if (playera.CountInv("RuinousShield")) Thing_Remove(0);
			}
			if (Armortype == 9 && playera.CountInv("DivineShield")) Thing_Remove(0); // DivineShield 
			if (Armortype == 10 && playera.CountInv("BalrogRing")) Thing_Remove(0); // BalrogRing
			if (Armortype == 11 && playera.CountInv("DoveRibbon")) Thing_Remove(0); // DoveRibbon
			if (Armortype == 12 && playera.CountInv("FalconKnifeEarrings")) Thing_Remove(0); // FalconKnifeEarrings
		}
		else
		{
			Thing_Remove(0);
		}
	}
	
	// Checks and Removes Hellcore weapons when Deggaris or Illucia are detected as the current character
	action void A_HellcoreWeaponCheckCharacter(int Weapontype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int IsWeaponLevelMaxed;
		int MaxHellCoreLevel = HellCoreLevelDefine;

		if (CharacterClass == 2)
		{
			IsWeaponLevelMaxed = 0;
			
			if (Weapontype == 0 && CallACS("MiscVarCheckDECORATE",96) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Imp Soul [4]
			if (Weapontype == 1 && CallACS("MiscVarCheckDECORATE",97) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Dark Imp Soul [4]
			if (Weapontype == 2 && CallACS("MiscVarCheckDECORATE",98) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // CacoDemon Soul [4]
			if (Weapontype == 3 && CallACS("MiscVarCheckDECORATE",99) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Cacolantern Soul [4]
			if (Weapontype == 4 && CallACS("MiscVarCheckDECORATE",100) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Abaddon Soul [4]
			if (Weapontype == 5 && CallACS("MiscVarCheckDECORATE",101) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Knight Soul [5]
			if (Weapontype == 6 && CallACS("MiscVarCheckDECORATE",102) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Baron Soul [5]
			if (Weapontype == 7 && CallACS("MiscVarCheckDECORATE",103) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Belphegor Soul [5]
			if (Weapontype == 8 && CallACS("MiscVarCheckDECORATE",104) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Bruiser Soul [5]
			if (Weapontype == 9 && CallACS("MiscVarCheckDECORATE",105) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Archon Soul [5]
			if (Weapontype == 10 && CallACS("MiscVarCheckDECORATE",106) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Pyro Soul [5]
			if (Weapontype == 11 && CallACS("MiscVarCheckDECORATE",107) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Incarnate Soul [6]
			if (Weapontype == 12 && CallACS("MiscVarCheckDECORATE",108) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Archvile Soul [6]
			if (Weapontype == 13 && CallACS("MiscVarCheckDECORATE",109) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Diabloist Soul  [6]
			if (Weapontype == 14 && CallACS("MiscVarCheckDECORATE",110) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Balrog Fist [6]
			if (Weapontype == 15 && CallACS("MiscVarCheckDECORATE",111) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Elemental's Soul [6]
			if (Weapontype == 16 && CallACS("MiscVarCheckDECORATE",112) >= MaxHellCoreLevel) IsWeaponLevelMaxed = 1; // Overlord's Soul [6]

			if (IsWeaponLevelMaxed != 0) 
			{
				A_SpawnItemEx("MiniSoulsphere",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
				Thing_Remove(0);
			}
		}
		else 
		{
			A_SpawnItemEx("MiniSoulsphere",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			Thing_Remove(0);
		}
	}
	
	// Checks to Remove Seeds on the Map if too many have been picked up already.
	action void A_SeedLimitChecker(int SeedType = 0)
	{
		int ModType = CallACS("OtherVarCheckDECORATE",8);

		if (ModType == 0 && dvds_canseedsappear == 0) Thing_Remove(0);
		if (SeedType == 0 && CallACS("MiscVarCheckDECORATE",37) >= CallACS("MiscVarCheckDECORATE",28)) Thing_Remove(0); // Seed of Skill
		if (SeedType == 1 && CallACS("MiscVarCheckDECORATE",30) >= CallACS("MiscVarCheckDECORATE",29)) Thing_Remove(0); // Seed of Agility/Defense/Deftness/Sorcery/Strength/Therapeusis
		if (SeedType == 2 && CallACS("MiscVarCheckDECORATE",27) >= CallACS("MiscVarCheckDECORATE",26)) Thing_Remove(0); // Fygg Fruit
		// SeedType == 3 is a 'blank' type for other Seed type items that aren't covered above, so it will run the script checker
	}
	
	// For Increasing the Strength Level of a Hellcore-type weapon when picking it up
	action void A_IncreaseHellcoreLevel(int HellcoreWeapon = 0)
	{
		int HellCoreID; int HellCoreLevel;
		int MaxHellCoreLevel = HellCoreLevelDefine;

		HellCoreID = HellcoreWeapon + 95;
		HellCoreLevel = CallACS("MiscVarCheckDECORATE",HellCoreID);
		HellCoreLevel += 1;
		HellCoreLevel = clamp(HellCoreLevel, HellCoreLevel, MaxHellCoreLevel);
		CallACS("MiscVarSetDECORATE",HellCoreID,HellCoreLevel);
	}
	
	action int A_MaxHPDropChance()
	{
		int Chance, roll;
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		
		if (TrueGameSkill <= SKILL_VERY_EASY) Chance = 72;
		else if (TrueGameSkill == SKILL_EASY) Chance = 64;
		else if (TrueGameSkill == SKILL_NORMAL) Chance = 56;
		else if (TrueGameSkill == SKILL_HARD) Chance = 48;
		else if (TrueGameSkill == SKILL_VERY_HARD) Chance = 32;
		else if (TrueGameSkill == SKILL_EXTREME) Chance = 28;
		else if (TrueGameSkill == SKILL_HORRIBLE) Chance = 24;
		else if (TrueGameSkill == SKILL_IMPOSSIBLE) Chance = 20;
		else if (TrueGameSkill >= SKILL_OMEGA) Chance = 16;
		else Chance = 56;
		
		roll = random(1,256);
		int result = 0;
		if (roll <= Chance) result = 1;
		if (ModType == 0 && dvds_canseedsappear == 0) result = 0;
		
		return result;
	}
	
	// Checks the first Chainsaw to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
	action int A_SawCheckSceptre()
	{
		int Result, SceptreCheck = 0;
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);

		ThinkerIterator Test1 = ThinkerIterator.Create("SceptreOfEmpyrea"); Actor mo; while (mo = Actor(Test1.Next())) { SceptreCheck++; }

		if (CharacterClass == 2) 
		{
			actor playera = players[0].mo;
			if (playera)
			{
				if (dvds_florastartsceptre == 0 && dvds_florasceptrecandrop != 0 && playera.CountInv("SceptreOfEmpyrea") == 0 && ClassicDoomType != 4 && SceptreCheck < 1) Result = 1;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0 || playera.CountInv("PlayingUnloved")) Result = 0;
			}
		}
		
		if (dvdsdebug_weaponspawndisplays) Console.Printf("SceptreOfEmpyrea (BerserkCheck): %d", SceptreCheck);
		if (dvdsdebug_weaponspawndisplays) Console.Printf("Result: %d", Result);
		return result;
	}
	
	// Checks the Berserk Pack to become the Sceptre of Empyrea if playing on a Sceptre-less start mode.
	action int A_BerserkCheckSceptre()
	{
		int Result, SceptreCheck = 0;
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);

		ThinkerIterator Test1 = ThinkerIterator.Create("SceptreOfEmpyrea"); Actor mo; while (mo = Actor(Test1.Next())) { SceptreCheck++; }

		if (CharacterClass == 2) 
		{
			actor playera = players[0].mo;
			if (playera)
			{
				if (dvds_florastartsceptre == 0 && dvds_florasceptrecandrop != 0 && playera.CountInv("SceptreOfEmpyrea") == 0 && ClassicDoomType != 4 && SceptreCheck < 1) Result = 1;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0 || playera.CountInv("PlayingUnloved")) Result = 0;
			}
		}
		
		//Console.Printf("SceptreOfEmpyrea (BerserkCheck): %d", SceptreCheck);
		//Console.Printf("Result: %d", Result);
		return result;
	}
	
	action void A_FloraRandomArmorDrop(int type = 0, int OldRand0 = 0, int DVIIMode = 0)
	{
		actor playera = players[0].mo;
		int Rand0, Rand1, Rand2, PX, PY, PZ, DVIIRandVal, spawnedaitem;
		int CharacterClass = CallACS("CheckCharacterClass");
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		
		if (playera)
		{
			DVIIRandVal = 1 + (CallACS("MiscVarCheckDECORATE",33) / 32); // Default value for randomizer

			if (dvdsdebug_armordropdisplays) Console.Printf("DVIIRandVal: %d, Type: %d, OldRand0: %d, DVIIMode: %d", DVIIRandVal, type, OldRand0, DVIIMode);
			// Do not run script if Flora is not the character in play
			if (CharacterClass != 2) { return; }
			else
			{
				// Do not run script if the game is Deus Vult II
				if (ModType == 2)
				{
					if (DVIIMode == 0) { return; }
					else DVIIRandVal = 1024; // Randomizer will ALWAYS roll positive in DVII-AltMode
				}
			}
				
			// Spawn Occurance Rate
			if (type == 5) // Given by an armorer in Strife [random]
			{
				DVIIRandVal = 1024;
				Rand0 = 0;
			}
			else
			if (type == 4) // ALWAYS SPAWNS [no random failure rate]
			{
				DVIIRandVal = 1024;
				Rand0 = 0;
			}
			else
			if (type == 3) // Doom2-Armor Bonuses
			{
				Rand0 = random(1,3072);
				if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,2208);
				if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,2496);
				if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,2784);
				if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,3072);
				if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,3648);
				if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,4096);
				if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,4608);
				if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,5120);
				if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,6144);
			}
			else
			if (type == 2) // Doom2-Armors
			{
				Rand0 = random(1,128);
				if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,92);
				if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,104);
				if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,116);
				if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,128);
				if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,152);
				if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,164);
				if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,178);
				if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,202);
				if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,226);
			}
			else
			if (type == 1)
			{
				Rand0 = OldRand0;
			}
			else
			{
				if (ModType == 1) // DVI has 4 levels
				{
					Rand0 = random(1,256);
					if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,184);
					if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,208);
					if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,232);
					if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,256);
					if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,304);
					if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,328);
					if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,356);
					if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,404);
					if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,452);
				}
				else // Classic has 32 levels [1/4th the spawn rate of DVI mode]
				{
					Rand0 = random(1,768);
					if (TrueGameSkill <= SKILL_VERY_EASY) Rand0 = random(1,552);
					if (TrueGameSkill == SKILL_EASY) Rand0 = random(1,624);
					if (TrueGameSkill == SKILL_NORMAL) Rand0 = random(1,696);
					if (TrueGameSkill == SKILL_HARD) Rand0 = random(1,768);
					if (TrueGameSkill == SKILL_VERY_HARD) Rand0 = random(1,912);
					if (TrueGameSkill == SKILL_EXTREME) Rand0 = random(1,984);
					if (TrueGameSkill == SKILL_HORRIBLE) Rand0 = random(1,1068);
					if (TrueGameSkill == SKILL_IMPOSSIBLE) Rand0 = random(1,1212);
					if (TrueGameSkill >= SKILL_OMEGA) Rand0 = random(1,1356);
				}
			}
			
			if (dvdsdebug_armordropdisplays) Console.Printf("DVIIRandVal / Rand0: %d / %d", DVIIRandVal, Rand0);
			if (Rand0 <= DVIIRandVal)
			{
				Rand1 = 0;
				if (CountInv("SafeTeaShoes")) Rand1 += 1;
				if (CountInv("PearlyCorset")) Rand1 += 1;
				if (CountInv("WaterFlyingDress")) Rand1 += 1;
				if (CountInv("EvenstarNecklace")) Rand1 += 1;
				if (CountInv("CloakOfEvasion")) Rand1 += 1;
				if (CountInv("FalconKnifeEarrings")) Rand1 += 1;
				if (CountInv("AnubisCufflinks")) Rand1 += 1;
				if (CountInv("KissaBra")) Rand1 += 1;
				if (CountInv("RuinousShield")) Rand1 += 1;
				if (CountInv("DivineShield")) Rand1 += 1;
				if (CountInv("BalrogRing")) Rand1 += 1;
				if (CountInv("DoveRibbon")) Rand1 += 1;
				if (dvdsdebug_armordropdisplays) Console.Printf("Rand1: %d / 11", Rand1);
				if (Rand1 > 10) { return; } // If all 11 items or more are detected on Flora, this script will not run past this point.
				
				int runtimes;
				int TempArmorCheck = 0;
				while (spawnedaitem == 0)
				{
					Rand2 = random(1,100);
					if (dvdsdebug_armordropdisplays) Console.Printf("Rand2: %d", Rand2);
					// PrintBold(d:Rand2,s:" / (",d:Rand0,s:") / [",d:Rand1,s:"]\n\n X",d:PX,s:" Y",d:PY,s:" Z",d:PZ);
					
					TempArmorCheck = 0;
					if (Rand2 > 0 && Rand2 < 10)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("SafeTeaShoes"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("SafeTeaShoes") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("SafeTeaShoes",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("SafeTeaShoes",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 9 && Rand2 < 19)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("PearlyCorset"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("PearlyCorset") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("PearlyCorset",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("PearlyCorset",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 18 && Rand2 < 28)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("WaterFlyingDress"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("WaterFlyingDress") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("WaterFlyingDress",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("WaterFlyingDress",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 27 && Rand2 < 37)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("EvenstarNecklace"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("EvenstarNecklace") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("EvenstarNecklace",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("EvenstarNecklace",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 36 && Rand2 < 46)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("CloakOfEvasion"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("CloakOfEvasion") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("CloakOfEvasion",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("CloakOfEvasion",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 45 && Rand2 < 55)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("FalconKnifeEarrings"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("FalconKnifeEarrings") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("FalconKnifeEarrings",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("FalconKnifeEarrings",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 54 && Rand2 < 64)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("AnubisCufflinks"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("AnubisCufflinks") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("AnubisCufflinks",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("AnubisCufflinks",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 63 && Rand2 < 73)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("KissaBra"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("KissaBra") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("KissaBra",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("KissaBra",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 72 && Rand2 < 82)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("DivineShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("DivineShield") == 0 && TempArmorCheck < 1)
						{
							ThinkerIterator Test1 = ThinkerIterator.Create("RuinousShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
							if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck (2): %d", TempArmorCheck);
							if (playera.CountInv("RuinousShield") == 0 && TempArmorCheck < 1)
							{
								if (type == 5) // Directly GIVE armor to the player instead of spawning it
								{
									playera.A_GiveInventory("RuinousShield",1);
									spawnedaitem++;
								}
								else // Spawn it
								{
									A_SpawnItemEx("RuinousShield",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
									spawnedaitem++;
									Thing_Remove(0);
								}
							}
						}
					}
					if (Rand2 > 81 && Rand2 < 91)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("BalrogRing"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("BalrogRing") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("BalrogRing",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("BalrogRing",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 90 && Rand2 < 100)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("DoveRibbon"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("DoveRibbon") == 0 && TempArmorCheck < 1)
						{
							if (type == 5) // Directly GIVE armor to the player instead of spawning it
							{
								playera.A_GiveInventory("DoveRibbon",1);
								spawnedaitem++;
							}
							else // Spawn it
							{
								A_SpawnItemEx("DoveRibbon",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
								spawnedaitem++;
								Thing_Remove(0);
							}
						}
					}
					if (Rand2 > 99)
					{
						ThinkerIterator Test1 = ThinkerIterator.Create("RuinousShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
						if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck: %d", TempArmorCheck);
						if (playera.CountInv("RuinousShield") == 0 && TempArmorCheck < 1)
						{
							ThinkerIterator Test1 = ThinkerIterator.Create("DivineShield"); Actor mo; while (mo = Actor(Test1.Next())) { TempArmorCheck++; }
							if (dvdsdebug_armordropdisplays) Console.Printf("TempArmorCheck (2): %d", TempArmorCheck);
							if (playera.CountInv("DivineShield") == 0 && TempArmorCheck < 1)
							{
								if (type == 5) // Directly GIVE armor to the player instead of spawning it
								{
									A_GiveInventory("DivineShield",1);
									spawnedaitem++;
								}
								else // Spawn it
								{
									A_SpawnItemEx("DivineShield",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
									spawnedaitem++;
									Thing_Remove(0);
								}
							}
						}
					}
					runtimes++;

					if (dvdsdebug_armordropdisplays) Console.Printf("runtimes: %d / 64", runtimes);
					if (runtimes > 63) { return; }
				}
			}
			else // No spawn
			{
				Thing_Remove(0);
			}
		}
		else
		{
			return;
		}
	}
	
	action void A_GiveBuffsPowerup(int powertype = 0, int powertimeadd = 0, int msgpopuptime = 0)
	{
		actor playera = players[0].mo;
		// powertype = Powerup Type
		// powertimeadd = Powerup Timer Additive
		if (playera)
		{
			powertimeadd = (powertimeadd * dvds_poweruptimemultiplier) / 100; // Checks Powerup Time Multiplier

			powertimeadd *= 35;
			powertimeadd = powertimeadd * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;

			if (powertype == 0) // Light/Infared
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",0,2,powertimeadd);
				if (CallACS("GetBuffTimer",0) > 0) playera.A_SetInventory("NightVisionSpell",1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-7);
			}
			if (powertype == 1) // Invisibility
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",1,2,powertimeadd);
				if (CallACS("GetBuffTimer",1) > 0) playera.A_SetInventory("InvisiblitySpell",1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-1);
			}
			if (powertype == 2) // Flight
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",2,2,powertimeadd);
				if (CallACS("GetBuffTimer",2) > 0) playera.A_SetInventory("FlightSpell",1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-2);
			}
			if (powertype == 3) // Stealth
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",3,2,powertimeadd);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-6);
			}
			if (powertype == 4) // Invulnerability
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",4,2,powertimeadd);
				if (CallACS("GetBuffTimer",4) > 0) playera.A_SetInventory("InvulnerabilitySpell",1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-5);
			}
			if (powertype == 5) // Time Freeze
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",5,2,powertimeadd);
				if (CallACS("GetBuffTimer",5) > 0) playera.A_SetInventory("AetheriusTimeFreezer",1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-4);
			}
			if (powertype == 6) // Fear Aura
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",6,2,powertimeadd);
				if (CallACS("GetBuffTimer",6) > 0) playera.A_SetInventory("PowerFrightener",1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-3);
			}
			if (powertype == 7) // Divine Avatar
			{
				if (msgpopuptime <= 0) msgpopuptime = 105;
				CallACS("GetBuffTimer",7,2,powertimeadd);
				if (CallACS("GetBuffTimer",7) > 0) 
				{
					playera.A_SetInventory("DivineAvatarDoubleFiringSpeed",1);
					playera.A_SetInventory("DivineAvatarHighJump",1);
				}
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-9);
			}
			if (powertype == 8) // Spreader Aura Lv. 1
			{
				if (CallACS("GetBuffTimer",9) == 0) // If lacking the Lv. 2 Aura, add to the Lv. 1
				{
					if (msgpopuptime <= 0) msgpopuptime = 70;
					CallACS("GetBuffTimer",8,2,powertimeadd);
					if (CallACS("GetBuffTimer",8) > 0) playera.A_SetInventory("SpreaderAura1",1);
					CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
					CallACS("MiscVarCheckDECORATE",2045,6);
				}
				else // If possessing Lv. 2 aura, give the player the timer divided by 5 or 6 instead and add to the second level aura.
				{
					if (msgpopuptime <= 0) msgpopuptime = 70;
					if (CallACS("GetBuffTimer",8) > 0) 
					{
						CallACS("GetBuffTimer",8,1,0);
						A_SetInventory("SpreaderAura1",0);
					}
					powertimeadd = powertimeadd / random(5,6);
					CallACS("GetBuffTimer",9,2,powertimeadd);
					if (CallACS("GetBuffTimer",9) > 0) playera.A_SetInventory("SpreaderAura2",1);
					CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
					CallACS("MiscVarCheckDECORATE",2045,7);
				}
			}
			if (powertype == 9) // Spreader Aura Lv. 2
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",9,2,powertimeadd);
				if (CallACS("GetBuffTimer",9) > 0) playera.A_SetInventory("SpreaderAura2",1);
				if (CallACS("GetBuffTimer",8) > 0) 
				{ 
					A_SetInventory("SpreaderAura1", 0);
					CallACS("GetBuffTimer",8,1,0); 
				}
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,7);
			}
			if (powertype == 10) // Oomph [double damage from player]
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",10,2,powertimeadd);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,0);
			}
			if (powertype == 11) // Buff [-50% damage to player]
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",11,2,powertimeadd);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,1);
			}
			if (powertype == 12) // Acceleratle [+33% speed for player]
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",12,2,powertimeadd);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,2);
			}
			
			if (powertype == 22) // RadSuit [IronFeet, protection from most damage floors]
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",22,2,powertimeadd);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,-8);
			}
			if (powertype == 23) // Berserk [10x damage on exertion based melee attacks]
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",23,2,powertimeadd);
				if (CallACS("GetBuffTimer",23) > 0) playera.A_GiveInventory("AetheriusPowerStrength",1);
				CallACS("MiscVarCheckDECORATE",2040,msgpopuptime);
				CallACS("MiscVarCheckDECORATE",2045,4);
			}
			if (powertype == 129) // GoE??
			{
				if (msgpopuptime <= 0) msgpopuptime = 70;
				CallACS("GetBuffTimer",129,2,powertimeadd);
			}
		}
	}
	
	action void A_SigilPieceSpawn(int maxchance = 256, int chancethreshold = 1)
	{
		actor playera = players[0].mo;
		if (playera)
		{
			if (bDROPPED) maxchance *= 16;
			if (playera.CountInv("SigilPieces") >= 5) { return; }

			int roll = random(1,maxchance);
			if (dvdsdebug_weaponspawndisplays) Console.Printf("[\cx%s\c-] Sigil PreSpawn Check 1 [Dropped: %d] (%d/%d) [%d] ", GetClassName(), bDROPPED, chancethreshold, maxchance, roll);

			if (roll <= chancethreshold) 
			{
				if (dvdsdebug_weaponspawndisplays) Console.Printf("Sigil PreSpawn Check Succeeded");
				A_SpawnItemEx("SigilPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				Thing_Remove(0);
				SetStateLabel("Null");
			}
		}
	}

	action void A_UnmakerSpawn(int maxchance = 256, int chancethreshold = 1)
	{
		actor playera = players[0].mo;
		if (playera)
		{
			if (bDROPPED) maxchance *= 8;
			if (playera.CountInv("UnmakerDVDS") > 0) maxchance *= frandom(1.0,1.2);
			if (playera.CountInv("UnmakerUpgrades") >= 1) maxchance *= frandom(1.0,1.4);
			if (playera.CountInv("UnmakerUpgrades") >= 2) maxchance *= frandom(1.0,1.4);
			if (playera.CountInv("UnmakerUpgrades") >= 3) { return; }

			int roll = random(1,maxchance);
			if (dvdsdebug_weaponspawndisplays) Console.Printf("[\cx%s\c-] Unmaker PreSpawn Check 1 [Dropped: %d] (%d/%d) [%d] ", GetClassName(), bDROPPED, chancethreshold, maxchance, roll);

			if (roll <= chancethreshold) 
			{
				if (dvdsdebug_weaponspawndisplays) Console.Printf("Unmaker PreSpawn Check Succeeded");
				A_SpawnItemEx("UnmakerDVDS",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
				Thing_Remove(0);
				SetStateLabel("Null");
			}
		}
	}
	
	action void A_BerserkWeaponSwitch()
	{
		actor playera = players[0].mo;
		if (playera)
		{
			if (dvds_berserkweaponswitch)
			{
				int CharacterClass = CallACS("CheckCharacterClass");
				if (CharacterClass == 0)
				{
					if (playera.CountInv("SauronGauntlets")) { A_SelectWeapon("SauronGauntlets"); } 
					else { if (playera.CountInv("FistDeggaris")) { A_SelectWeapon("FistDeggaris"); } }
				}
				else
				if (CharacterClass == 1)
				{
					if (playera.CountInv("SauronGauntletsIllucia")) { A_SelectWeapon("SauronGauntletsIllucia"); } 
					else { if (playera.CountInv("FistIllucia")) { A_SelectWeapon("FistIllucia"); } }
				}
				else
				if (CharacterClass == 2)
				{
					if (playera.CountInv("SceptreOfEmpyrea")) { A_SelectWeapon("SceptreOfEmpyrea"); }
					else 
					{
						if (playera.CountInv("SauronGauntletsFlora")) { A_SelectWeapon("SauronGauntletsFlora"); } 
						else 
						{ 
							if (playera.CountInv("FistFlora")) { A_SelectWeapon("FistFlora"); } 
						}
					}
				}
			}
		}
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}
	
	action void A_StrifeStatUpgrade(string type = "Combo")
	{
		int OldStamina;
		int NewStamina;
		int OldAccuracy;
		int NewAccuracy;
		if (type == "Stamina" || type == "Combo" || type == "ComboLite")
		{
			int StrifeStaminaLevel = CallACS("MiscVarCheckDECORATE",317);
			OldStamina = StrifeStaminaLevel * 10;
			
			StrifeStaminaLevel += 1;
			StrifeStaminaLevel = clamp(StrifeStaminaLevel, 0, 10);
			
			NewStamina = StrifeStaminaLevel * 10;
			CallACS("MiscVarSetDECORATE",317,StrifeStaminaLevel);
		}
		if (type == "Accuracy" || type == "AccuracyLite" || type == "Combo" || type == "ComboLite")
		{
			OldAccuracy = invoker.owner.accuracy;
			NewAccuracy = OldAccuracy + 10;
			NewAccuracy = clamp(NewAccuracy, NewAccuracy, 100);
			invoker.owner.accuracy = NewAccuracy;
			
			int tempaeonpts;
			int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
	
			StrifeAccuracyLevel += 1;
			StrifeAccuracyLevel = clamp(StrifeAccuracyLevel, 0, 10);
			
			if (type == "Accuracy" || type == "Combo")
			{
				double baseaeonpts = 9;
				double extraaeonpts = 2;
				baseaeonpts += (StrifeAccuracyLevel * extraaeonpts);
				tempaeonpts += baseaeonpts;
			}
			
			CallACS("MiscVarSetDECORATE",318,StrifeAccuracyLevel);
			tempaeonpts *= CallACS("MiscVarCheckDECORATE",86);
			CallACS("MiscVarSetDECORATE",25,tempaeonpts,1);
			CallACS("MiscVarSetDECORATE",2033,105);
		}
		
		if (type == "Stamina") A_PrintBold(String.Format("\c[gold]Stamina Level increased from %d to %d!", OldStamina, NewStamina));
		if (type == "Accuracy" || type == "AccuracyLite") A_PrintBold(String.Format("\c[gold]Accuracy Level increased from %d to %d!", OldAccuracy, NewAccuracy));
		if (type == "Combo" || type == "ComboLite")
		{
			A_PrintBold(String.Format("\c[gold]Stamina Level increased from %d to %d!\n\c[gold]Accuracy Level increased from %d to %d!", OldStamina, NewStamina, OldAccuracy, NewAccuracy));
		}
	}

	states
	{
		KillObject:
			NULL A 0 { Destroy(); }
			stop;
	}
}

// Custom Powerups/Items that obey the effect of "AetheriusTimeFreezer" that might be used for monsters [buffs/debuffs/cooldowns]
class AetheriusPowerup : Powerup
{
	override void Tick()
	{
		// Powerups cannot exist outside an inventory
		if (Owner == NULL)
		{
			Destroy();
		}

		if (CallACS("MenuVarCheckDECORATE",0) == 0 && CallACS("GetBuffTimer",5) == 0)
		{
			//Console.Printf("EffectTics: %d", EffectTics);
			EffectTics--;
		}
		if (EffectTics <= 0)
		{
			Destroy();
		}
	}
}

class AetheriusPowerIronFeet : PowerIronFeet
{
	Default
	{
		Powerup.Duration -60;
		Powerup.Color "00 ff 00", 0.125;
	}
	
	override void AbsorbDamage (int damage, Name damageType, out int newdamage)
	{
		if (damageType == 'Drowning')
		{
			newdamage = 0;
		}
	}

	override void DoEffect()
	{
		if (Owner.player != NULL)
		{
			Owner.player.mo.ResetAirSupply();
		}
	}
}

class AetheriusPowerStrength : PowerStrength
{
	Default
	{
		Powerup.Duration 1;
		Powerup.Color "ff 00 00", 0.5;
		+INVENTORY.HUBPOWER
	}
	
	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	//===========================================================================
	//
	// APowerStrength :: DoEffect
	//
	//===========================================================================
	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		int Point1 = 300; // 75
		int Point2 = Point1 + 120; // 105
		int increment = random(6,8);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, Increment: %d", EffectTics, Dire, Increment);

		if (Dire == 1)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0 && CallACS("GetBuffTimer",5) == 0) EffectTics += increment;
			if (EffectTics >= Point2) Dire = 2;
		}
		else
		if (Dire == 2)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0 && CallACS("GetBuffTimer",5) == 0) EffectTics -= increment;
			if (EffectTics <= Point1) Dire = 1;
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();

	}

	//===========================================================================
	//
	// APowerStrength :: GetBlend
	//
	//===========================================================================

	override color GetBlend()
	{
		// slowly fade the berserk out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class ShadowSplitCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

class HadesTeleportCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

class HSphereTeleportCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -3;
		+INVENTORY.UNTOSSABLE;
	}
}

class PyroDemonTeleportCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class ChaingunCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class MinigunCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -4;
		+INVENTORY.UNTOSSABLE;
	}
}

class SpidMastChaingunCooldown : AetheriusPowerup
{
	default
	{
		Powerup.Duration -2;
		+INVENTORY.UNTOSSABLE;
	}
}

// Keeps Sounds/Music active during time Freeze powerups
class AetheriusTimeFreezerMenu : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
		EffectTics = 350;
	}
}
class AetheriusTimeFreezer : AetheriusTimeFreezerMenu
{
	default
	{
		Powerup.Color "8f 8f 8f", 0.5;
	}

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		PowerTimeFreezer.Tick();
		S_ResumeSound(false);
		int Point1 = 128; // 32
		int Point2 = Point1 + 256; // 96
		int increment = (randompick(20,22,24,26,28) / 2);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, increment: %d", EffectTics, Dire, increment);

		if (Dire == 1)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0) EffectTics += increment;
			if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
		}
		else
		if (Dire == 2)
		{
			if (CallACS("MenuVarCheckDECORATE",0) == 0) EffectTics -= increment;
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();

	}

	override color GetBlend()
	{
		// slowly fade the tint out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class DebugTimeFreezer : AetheriusTimeFreezerMenu
{
}

// Keeps Sounds/Music active during time Freeze powerups
class TimeFreezerKeepSound : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
		EffectTics = 350;
	}
}

class DashTimeFreezer : TimeFreezerKeepSound
{
	default
	{
		Inventory.Icon "";
		Powerup.Color "8f 8f 8f", 0.0;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.HUBPOWER;
		+INVENTORY.ADDITIVETIME;
	}

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		PowerTimeFreezer.Tick();
		S_ResumeSound(false);
		int Point1 = 128; // 32
		int Point2 = Point1 + 256; // 96
		int increment = (randompick(20,22,24,26,28) / 2);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, increment: %d", EffectTics, Dire, increment);

		if (Dire == 1)
		{
			EffectTics += increment;
			if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
		}
		else
		if (Dire == 2)
		{
			EffectTics -= increment;
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}

	override color GetBlend()
	{
		// slowly fade the tint out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class ShieldSpawnerBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTELESTOMP
	}
}

class TensionAuraLightPlayer : AetheriusBaseZSC
{
	int TensionLevel;

	default
	{
		-SOLID
		+NOINTERACTION
		+NOTIMEFREEZE
		RenderStyle "Add";
		Alpha 0.01;
		Scale 0.01;
		Radius 1;
		Height 1;
	}
	
	override void Tick()
	{
		TensionLevel = CallACS("MiscVarCheckDECORATE",181);

		Super.Tick();
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_Warp(AAPTR_PLAYER1,1,0,(0+A_GetPlayerHeight(2)),0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION);
				if (CallACS("GetBuffTimer",1) > 0)
				{
					if (TensionLevel == 0) { return ResolveState("NoLight"); }
					if (TensionLevel == 1) { return resolvestate("Spawn5Invis"); }
					if (TensionLevel == 2) { return resolvestate("Spawn20Invis"); }
					if (TensionLevel == 3) { return resolvestate("Spawn50Invis"); }
					if (TensionLevel == 4) { return resolvestate("Spawn100Invis"); }
					if (TensionLevel == 5) { return resolvestate("Spawn250Invis"); }
					if (TensionLevel == 6) { return resolvestate("Spawn500Invis"); }
					if (TensionLevel >= 7) { return resolvestate("Spawn1000Invis"); }
					return resolvestate(null);
				}
				else
				{
					if (TensionLevel == 0) { return ResolveState("NoLight"); }
					if (TensionLevel == 1) { return resolvestate("Spawn5Vis"); }
					if (TensionLevel == 2) { return resolvestate("Spawn20Vis"); }
					if (TensionLevel == 3) { return resolvestate("Spawn50Vis"); }
					if (TensionLevel == 4) { return resolvestate("Spawn100Vis"); }
					if (TensionLevel == 5) { return resolvestate("Spawn250Vis"); }
					if (TensionLevel == 6) { return resolvestate("Spawn500Vis"); }
					if (TensionLevel >= 7) { return resolvestate("Spawn1000Vis"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			loop;
		
		NoLight: 
			TNT1 A 1;
			goto Spawn;
		Spawn5Vis: 
			TSNA A 1 Light("TensionAuraLight5"); // { Console.Printf("TensionAuraLight5"); }
			goto Spawn;
		Spawn5Invis: 
			TSNB A 1 Light("TensionAuraInvis5"); // { Console.Printf("TensionAuraInvis5"); }
			goto Spawn;
		Spawn20Vis: 
			TSNA A 1 Light("TensionAuraLight20"); // { Console.Printf("TensionAuraLight20"); }
			goto Spawn;
		Spawn20Invis: 
			TSNB A 1 Light("TensionAuraInvis20"); // { Console.Printf("TensionAuraInvis20"); }
			goto Spawn;
		Spawn50Vis: 
			TSNA A 1 Light("TensionAuraLight50"); // { Console.Printf("TensionAuraLight50"); }
			goto Spawn;
		Spawn50Invis: 
			TSNB A 1 Light("TensionAuraInvis50"); // { Console.Printf("TensionAuraInvis50"); }
			goto Spawn;
		Spawn100Vis: 
			TSNA A 1 Light("TensionAuraLight100"); // { Console.Printf("TensionAuraLight100"); }
			goto Spawn;
		Spawn100Invis: 
			TSNB A 1 Light("TensionAuraInvis100"); // { Console.Printf("TensionAuraInvis100"); }
			goto Spawn;
		Spawn250Vis: 
			TSNA A 1 Light("TensionAuraLight250"); // { Console.Printf("TensionAuraLight250"); }
			goto Spawn;
		Spawn250Invis: 
			TSNB A 1 Light("TensionAuraInvis250"); // { Console.Printf("TensionAuraInvis250"); }
			goto Spawn;
		Spawn500Vis: 
			TSNA A 1 Light("TensionAuraLight500"); // { Console.Printf("TensionAuraLight500"); }
			goto Spawn;
		Spawn500Invis: 
			TSNB A 1 Light("TensionAuraInvis500"); // { Console.Printf("TensionAuraInvis500"); }
			goto Spawn;
		Spawn1000Vis: 
			TSNA A 1 Light("TensionAuraLight1000"); // { Console.Printf("TensionAuraLight1000"); }
			goto Spawn;
		Spawn1000Invis: 
			TSNB A 1 Light("TensionAuraInvis1000"); // { Console.Printf("TensionAuraInvis1000"); }
			goto Spawn;
	}
}

class AetheriusBaseTeleGlitter : Actor
{
	int user_fuse;
	
	Default
	{
		+NOBLOCKMAP +NOGRAVITY +MISSILE +ZDOOMTRANS
		RenderStyle "Add";
		Damage 0;
	}

	States
	{
		Spawn:
			TGLT A 2 BRIGHT;
			TGLT B 2 BRIGHT A_AccTeleGlitter;
			TGLT C 2 BRIGHT;
			TGLT D 2 BRIGHT A_AccTeleGlitter;
			TGLT E 2 BRIGHT;
			Loop;
	}
	
	//----------------------------------------------------------------------------
	//
	// PROC A_AccTeleGlitter
	//
	//----------------------------------------------------------------------------

	void A_AccTeleGlitter ()
	{
		if (++health > 35) Vel.Z *= 1.5;
	}
}

class ShieldPartBase : AetheriusBaseZSC
{
	// Perks
	int MartialArtsMastery;
	int MartialArtsMasteryEX;
	int BerserkerFit;
	int BerserkerFitEX;
	
	Actor oldtarget;
	
	double attachx, attachy, attachz, attachang, attachptc;
	actor shieldee;
	default
	{
		Species "Players"; // IMPORTANT FRACKIN' NOTE MISFIT: SET YOUR DAMN PLAYERPAWN'S SPECIES TO THE SAME AS YOUR SHIELDPARTBASE[s], YOU DINGLEPUFFEROO! >:V
		Health 2147483646;
		Painchance 256;
		Radius 16; // out of 32
		Height 32; // out of 32
		Scale 0.5;
		RenderStyle "Add"; // Add
		Alpha 0.0; // 0.003125
		+NOTARGET; 
		+NEVERTARGET;
		+BUDDHA;
		+DONTBLAST;
		+SOLID; 
		//+SHOOTABLE;
		+NOGRAVITY;
		+NOTELEPORT;
		+NODAMAGE;
		+DONTRIP;
		+NOBLOOD;
		+NOBLOODDECALS;
		+FLOORCLIP;
		+NOTELESTOMP;
		+NOTIMEFREEZE;
		+THRUSPECIES;
		+MTHRUSPECIES;
		-CASTSPRITESHADOW;
		+NOSPRITESHADOW;
		+DONTSPLASH;
		+CANNOTPUSH;
		+DONTTHRUST;
	}
/*
	override void PostBeginPlay()
	{
		MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		
		Super.PostBeginPlay();
	}
*/
	
	override void Tick()
	{
		if (level.time % 4 == random(1,2)) bSOLID = true; else bSOLID = false;
		if (dvdsdebug_showvisibleshieldparts) A_FadeTo(0.25,0.25);
		if (shieldee && target)
		{
			target = shieldee;
			if (dvdsdebug_showvisibleshieldparts) Console.Printf("[ShieldPartBase (Tick)]: %p [%p]", shieldee, target);
			if (target) 
			{
				A_Warp(AAPTR_TARGET,attachx,attachy,attachz,attachang,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,null,0,0,attachptc);
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("A_Warp [ShieldPartBase (Tick)]: %d", GetAge());
			}
		}
		Super.Tick();
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		AetheriusPlayerPawn playpawn;
		AetheriusPlayerPawn playpawn2;
		AetheriusMonsterZSC DVDSActor;
		AetheriusProjectileZSC UniqueProjectile;
		AetheriusFastProjectileZSC UniqueProjectileFast;
		AetheriusDoomSpellZSC DoomSpellProj;
		AetheriusFastDoomSpellZSC DoomSpellProjFast;
		playpawn = AetheriusPlayerPawn(other);
		DVDSActor = AetheriusMonsterZSC(other);
		UniqueProjectile = AetheriusProjectileZSC(other);
		UniqueProjectileFast = AetheriusFastProjectileZSC(other);
		DoomSpellProj = AetheriusDoomSpellZSC(other);
		DoomSpellProjFast = AetheriusFastDoomSpellZSC(other);

		if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyShieldPart [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			if (other.GetClassName() == "RockBombShardProj" || other.GetClassName() == "RockBombShardProjT" || other.GetClassName() == "CharmShot" || other.GetClassName() == "CharmShotNoSeek") return false;
			if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyShieldPart (gametic %d):\c- passive: %s", gametic, GetClassName());
			// Pass through different species of select types.
			if (playpawn) return false; // Player Checking
			// Monster Checking
			if (DVDSActor)
			{
				if (DVDSActor.bFRIENDLY) return false;
				if (DVDSActor.health <= 0) return false;
				if (GetClassName() == "ShieldPartMeleeReflect" || GetClassName() == "ShieldPartMeleeNoReflect") return false;
				return true;
			}
			// Projectile Checking
			if (DoomSpellProj)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- DoomSpellProj: %s", gametic, UniqueProjectile.GetClassName());
				return false;
			}
			if (DoomSpellProjFast)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- DoomSpellProjFast: %s", gametic, UniqueProjectile.GetClassName());
				return false;
			}
			if (UniqueProjectile)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyShieldPart (gametic %d):\c- UniqueProjectile: %s", gametic, UniqueProjectile.GetClassName());
				playpawn = AetheriusPlayerPawn(other.target);
				playpawn2 = AetheriusPlayerPawn(master);
				if (playpawn && playpawn2) return false;

				//Console.Printf("BFGShot (%d)", passive);
				BFGBallBase bfgshot;
				bfgshot = BFGBallBase(other);
				if (bfgshot && bfgshot.GetClassName() != "BFGBallPlayer" && !bREFLECTIVE)
				{
					bfgshot.SetStateLabel("ShotDown");
					bfgshot.bMISSILE = false;
					bfgshot.A_ScaleVelocity(0);
					bfgshot.A_SetScale(bfgshot.scale.x*0.5,bfgshot.scale.y*0.5);
					return false;
				}

				if (!UniqueProjectile.projtouchedshieldactor) 
				{
					if (bREFLECTIVE && random(1,256) <= 252) A_StartSound("SceptreBlocked",random(91,95),CHANF_DEFAULT,1.0,ATTN_NORM);
					UniqueProjectile.projtouchedshieldactor++;
					if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyShieldPart (gametic %d):\c- UniqueProjectile.touched: %d", gametic, UniqueProjectile.projtouchedshieldactor);
					return true;
				}
			}
			// Fast Projectile Checking
			if (UniqueProjectileFast)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyShieldPart (gametic %d):\c- UniqueProjectileFast: %s", gametic, UniqueProjectileFast.GetClassName());
				playpawn = AetheriusPlayerPawn(other.target);
				playpawn2 = AetheriusPlayerPawn(master);
				if (playpawn && playpawn2) return false;

				if (bREFLECTIVE && random(1,256) <= 252) A_StartSound("SceptreBlocked",random(91,95),CHANF_DEFAULT,1.0,ATTN_NORM);
				UniqueProjectileFast.projtouchedshieldactor++;
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyShieldPart (gametic %d):\c- UniqueProjectileFast.touched: %d", gametic, UniqueProjectileFast.projtouchedshieldactor);
				return true;
			}
			
			if (other)
			{
			}
			
			playpawn = AetheriusPlayerPawn(other.target);
			playpawn2 = AetheriusPlayerPawn(master);
			if (playpawn && playpawn2) return false;
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyShieldPart (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			playpawn = AetheriusPlayerPawn(other.target);
			playpawn2 = AetheriusPlayerPawn(master);
			if (playpawn && playpawn2) return false;

			return true;
		}
		// We don't really care about others making the check.
		return true;
	}
}

// Shield Parts [Melee]
class ShieldPartMeleeNoReflect : ShieldPartBase
{
	States
	{
		Spawn:
			HEXA C 0 bright NoDelay	
			{
				if (dvdsdebug_showvisibleshieldparts) { A_FadeTo(0.25,0.25); }
				if (random(1,16) == 1) { bREFLECTIVE = true; bAIMREFLECT = true; } 
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (MartialArtsMastery == 0) { A_SetSize(32,32,0); A_SetScale(1.0); }
					if (MartialArtsMastery == 1) { A_SetSize(33,33,0); A_SetScale(1.03125); }
					if (MartialArtsMastery == 2) { A_SetSize(34,34,0); A_SetScale(1.0625); }
					if (MartialArtsMastery == 3) { A_SetSize(36,36,0); A_SetScale(1.125); }
					if (MartialArtsMastery == 4) { A_SetSize(38,38,0); A_SetScale(1.1875); }
					if (MartialArtsMastery >= 5) { A_SetSize(41,41,0); A_SetScale(1.28125); }
				}
				else
				{
					if (BerserkerFit == 0) { A_SetSize(32,32,0); A_SetScale(1.0); }
					if (BerserkerFit == 1) { A_SetSize(33,33,0); A_SetScale(1.03125); }
					if (BerserkerFit == 2) { A_SetSize(34,34,0); A_SetScale(1.0625); }
					if (BerserkerFit == 3) { A_SetSize(36,36,0); A_SetScale(1.125); }
					if (BerserkerFit == 4) { A_SetSize(38,38,0); A_SetScale(1.1875); }
					if (BerserkerFit >= 5) { A_SetSize(41,41,0); A_SetScale(1.28125); }
				}
			}
			HEXA C 1 bright;
			Stop;
		Pain:
			TNT1 A 0 bright { if (A_CheckBerserk()) { A_StartSound("fisthitberserkwall", 57); } else { A_StartSound("FistHitWall", 57); } }
			Stop;
	}
}

class ShieldPartMeleeReflect : ShieldPartMeleeNoReflect
{
	default
	{
		+REFLECTIVE;
		+AIMREFLECT;
	}
}

class Heal1SparkAlly : AetheriusBaseZSC
{
	default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Scale 0.5;
		Alpha 0.75;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter1", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_Warp(AAPTR_TARGET,0.0,0.0,0.0+(target.height/2),0.0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			Stop;
	}
}

class Heal2SparkAlly : AetheriusBaseZSC
{
	default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Scale 0.75;
		Alpha 0.875;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter2", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_Warp(AAPTR_TARGET,0.0,0.0,0.0+(target.height/2),0.0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			Stop;
	}
}

class Heal3SparkAlly : AetheriusBaseZSC
{
	default
	{
		Radius 4;
		Height 4;
		RenderStyle "Add";
		Scale 1;
		Alpha 1;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_SpawnItemEx("HealGlitter3", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2) ,128);
				A_Warp(AAPTR_TARGET,0.0,0.0,0.0+(target.height/2),0.0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			Stop;
	}
}

class CustomHealSpark : AetheriusBaseZSC
{
	default
	{
		Radius 4; // 52/39/66/62/81/70/93/92/100/97 = avg 75.2px
		Height 4; // 52/39/66/62/81/70/93/92/100/97 = avg 75.2px
		RenderStyle "Add";
		Scale 1;
		Alpha 1;
		SeeSound "null";
		DeathSound "null";
		+NOINTERACTION;
		+NOBLOCKMAP;
		+NOCLIP;
	}
	
	int glitterspawns;
	string glittertype;
	double glitterxscale;
	double glitteryscale;
	double glitterxspeed;
	double glitteryspeed;
	double glitterzspeed;
	
	void A_GlitterSpawn(string glittertype, double xscal = 1.0, double yscal = 1.0)
	{
		bool success;
		Actor spawnedglitter;
		
		[success, spawnedglitter] = A_SpawnItemEx(glittertype, 0, 0, 0, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0) , 128, SXF_NOCHECKPOSITION);
		if (spawnedglitter && success)
		{
			spawnedglitter.scale.x *= xscal;
			spawnedglitter.scale.y *= yscal;
			spawnedglitter.vel.x *= glitterxspeed;
			spawnedglitter.vel.y *= glitteryspeed;
			spawnedglitter.vel.z *= glitterzspeed;
		}
	}
	
	States
	{
		Spawn:
		Death:
			HHI2 ABCDEFGHIJ 1 Bright
			{
				for (int i = 0; i < glitterspawns; i++)
				{
					A_GlitterSpawn(glittertype, glitterxscale, glitteryscale);
				}
				if (target)
				{
					A_Warp(AAPTR_TARGET,0.0,0.0,0.0+(target.height/2),0.0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
				}
			}
			Stop;
	}
}


class DiarisArrowGuard : AetheriusBaseZSC
{
	Default
	{
		Radius 32; // 6
		Height 16; // 2
		Health 2;
		Speed 0;
		DamageFactor "Normal", 0.0;
		Species "Player";
		Scale 0.5;
		RenderStyle "Add"; // Add
		Alpha 0.0; // 0.003125
		+SOLID
		+THRUSPECIES
		//+SHOOTABLE
		+BUDDHA
		+NOBLOOD
		+DONTSPLASH
		+NOCLIP
		-NOBLOCKMAP
		+DONTBLAST
		+DONTTHRUST
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		AetheriusPlayerPawn playpawn;
		AetheriusPlayerPawn playpawn2;
		AetheriusMonsterZSC DVDSActor;
		AetheriusProjectileZSC UniqueProjectile;
		AetheriusFastProjectileZSC UniqueProjectileFast;
		AetheriusDoomSpellZSC DoomSpellProj;
		AetheriusFastDoomSpellZSC DoomSpellProjFast;
		playpawn = AetheriusPlayerPawn(other);
		DVDSActor = AetheriusMonsterZSC(other);
		UniqueProjectile = AetheriusProjectileZSC(other);
		UniqueProjectileFast = AetheriusFastProjectileZSC(other);
		DoomSpellProj = AetheriusDoomSpellZSC(other);
		DoomSpellProjFast = AetheriusFastDoomSpellZSC(other);

		if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyDiarisArrowGuard (gametic: %d):\c- other: %s", gametic, other.GetClassName());
		if (passive)
		{
			if (other.GetClassName() == "RockBombShardProj" || other.GetClassName() == "RockBombShardProjT" || other.GetClassName() == "CharmShot" || other.GetClassName() == "CharmShotNoSeek") return false;
			if (other.GetClassName() == "DiarisHolyArrow" || other.GetClassName() == "DiarisHolyArrow2XDmg" || other.GetClassName() == "DiarisHolyArrow3XDmg") return false;

			if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyDiarisArrowGuard (gametic: %d):\c- passive: %s", gametic, GetClassName());
			// Pass through different species of select types.
			if (playpawn) return false; // Player Checking
			// Monster Checking
			if (DVDSActor)
			{
				if (DVDSActor.bFRIENDLY) return false;
				if (DVDSActor.health <= 0) return false;
				return true;
			}
			// Projectile Checking
			if (DoomSpellProj)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- DoomSpellProj: %s", gametic, UniqueProjectile.GetClassName());
				return false;
			}
			if (DoomSpellProjFast)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- DoomSpellProjFast: %s", gametic, UniqueProjectile.GetClassName());
				return false;
			}
			if (UniqueProjectile)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyDiarisArrowGuard (gametic: %d):\c- UniqueProjectile: %s", gametic, UniqueProjectile.GetClassName());
				playpawn = AetheriusPlayerPawn(other.target);
				playpawn2 = AetheriusPlayerPawn(master);
				if (playpawn && playpawn2) return false;

				//Console.Printf("BFGShot (%d)", passive);
				BFGBallBase bfgshot;
				bfgshot = BFGBallBase(other);
				if (bfgshot && bfgshot.GetClassName() != "BFGBallPlayer")
				{
					bfgshot.SetStateLabel("ShotDown");
					bfgshot.bMISSILE = false;
					bfgshot.A_ScaleVelocity(0);
					bfgshot.A_SetScale(bfgshot.scale.x*0.5,bfgshot.scale.y*0.5);
					return false;
				}

				if (!UniqueProjectile.projtouchedshieldactor) 
				{
					if (bREFLECTIVE && random(1,256) <= 252) A_StartSound("SceptreBlocked",random(91,95),CHANF_DEFAULT,1.0,ATTN_NORM);
					UniqueProjectile.projtouchedshieldactor++;
					if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyDiarisArrowGuard (gametic: %d):\c- UniqueProjectile.touched: %d", gametic, UniqueProjectile.projtouchedshieldactor);
					return true;
				}
				//else return false;
			}
			// Fast Projectile Checking
			if (UniqueProjectileFast)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyDiarisArrowGuard (gametic: %d):\c- UniqueProjectileFast: %s", gametic, UniqueProjectileFast.GetClassName());
				playpawn = AetheriusPlayerPawn(other.target);
				playpawn2 = AetheriusPlayerPawn(master);
				if (playpawn && playpawn2) return false;

				if (bREFLECTIVE && random(1,256) <= 252) A_StartSound("SceptreBlocked",random(91,95),CHANF_DEFAULT,1.0,ATTN_NORM);
				UniqueProjectileFast.projtouchedshieldactor++;
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyDiarisArrowGuard (gametic: %d):\c- UniqueProjectileFast.touched: %d", gametic, UniqueProjectileFast.projtouchedshieldactor);
				return true;
			}
			playpawn = AetheriusPlayerPawn(other.target);
			playpawn2 = AetheriusPlayerPawn(master);
			if (playpawn && playpawn2) return false;
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyDiarisArrowGuard (gametic: %d):\c- non-passive: %s", gametic, GetClassName());
			playpawn = AetheriusPlayerPawn(other.target);
			playpawn2 = AetheriusPlayerPawn(master);
			if (playpawn && playpawn2) return false;
		}

		return true;
	}

	override void PostBeginPlay()
	{
		double newheight = 1.0 + (0.2 * CallACS("MiscVarCheckDECORATE",10031));
		double newradius = 1.0 + (0.2 * CallACS("MiscVarCheckDECORATE",10031));
		A_SetSize(height*newheight,radius*newradius);
		A_SetScale(scale.x*newheight,scale.y*newradius);
		//Console.Printf("Height: %d (%.8f), Radius: %d (%.8f)", height, newheight, radius, newradius);
		
		Super.PostBeginPlay();
	}

	States
	{
		Spawn:
			HEXA C 0;
			HEXA C 2
			{
				if (dvdsdebug_showvisibleshieldparts) { A_FadeTo(0.25,0.25); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(3); }
			}
			stop;
	}
}

class MageWandGuard : AetheriusBaseZSC
{
	Default
	{
		Radius 16; // 6
		Height 8; // 2
		Health 2;
		Speed 0;
		DamageFactor "Normal", 0.0;
		Species "Player";
		Scale 0.25;
		RenderStyle "Add"; // Add
		Alpha 0.0; // 0.003125
		+SOLID
		+THRUSPECIES
		//+SHOOTABLE
		+BUDDHA
		+NOBLOOD
		+DONTSPLASH
		+NOCLIP
		-NOBLOCKMAP
		+DONTBLAST
		+DONTTHRUST
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		AetheriusPlayerPawn playpawn;
		AetheriusPlayerPawn playpawn2;
		AetheriusMonsterZSC DVDSActor;
		AetheriusProjectileZSC UniqueProjectile;
		AetheriusFastProjectileZSC UniqueProjectileFast;
		AetheriusDoomSpellZSC DoomSpellProj;
		AetheriusFastDoomSpellZSC DoomSpellProjFast;
		playpawn = AetheriusPlayerPawn(other);
		DVDSActor = AetheriusMonsterZSC(other);
		UniqueProjectile = AetheriusProjectileZSC(other);
		UniqueProjectileFast = AetheriusFastProjectileZSC(other);
		DoomSpellProj = AetheriusDoomSpellZSC(other);
		DoomSpellProjFast = AetheriusFastDoomSpellZSC(other);

		if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- other: %s", gametic, other.GetClassName());
		if (passive)
		{
			if (other.GetClassName() == "RockBombShardProj" || other.GetClassName() == "RockBombShardProjT" || other.GetClassName() == "CharmShot" || other.GetClassName() == "CharmShotNoSeek") return false;
			if (other.GetClassName() == "MageWandMissileNew" || other.GetClassName() == "MageWandMissile2New") return false;

			if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- passive: %s", gametic, GetClassName());
			// Pass through different species of select types.
			if (playpawn) return false; // Player Checking
			// Monster Checking
			if (DVDSActor)
			{
				if (DVDSActor.bFRIENDLY) return false;
				if (DVDSActor.health <= 0) return false;
				return true;
			}
			// Projectile Checking
			if (DoomSpellProj)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- DoomSpellProj: %s", gametic, UniqueProjectile.GetClassName());
				return false;
			}
			if (DoomSpellProjFast)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- DoomSpellProjFast: %s", gametic, UniqueProjectile.GetClassName());
				return false;
			}
			if (UniqueProjectile)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- UniqueProjectile: %s", gametic, UniqueProjectile.GetClassName());
				playpawn = AetheriusPlayerPawn(other.target);
				playpawn2 = AetheriusPlayerPawn(master);
				if (playpawn && playpawn2) return false;

				BFGBallBase bfgshot;
				bfgshot = BFGBallBase(other);
				if (bfgshot && bfgshot.GetClassName() != "BFGBallPlayer")
				{
					bfgshot.SetStateLabel("ShotDown");
					bfgshot.bMISSILE = false;
					bfgshot.A_ScaleVelocity(0);
					bfgshot.A_SetScale(bfgshot.scale.x*0.5,bfgshot.scale.y*0.5);
					return false;
				}

				if (!UniqueProjectile.projtouchedshieldactor) 
				{
					if (bREFLECTIVE && random(1,256) <= 252) A_StartSound("SceptreBlocked",random(91,95),CHANF_DEFAULT,1.0,ATTN_NORM);
					UniqueProjectile.projtouchedshieldactor++;
					if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- UniqueProjectile.touched: %d", gametic, UniqueProjectile.projtouchedshieldactor);
					return true;
				}
			}
			// Fast Projectile Checking
			if (UniqueProjectileFast)
			{
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- UniqueProjectileFast: %s", gametic, UniqueProjectileFast.GetClassName());
				playpawn = AetheriusPlayerPawn(other.target);
				playpawn2 = AetheriusPlayerPawn(master);
				if (playpawn && playpawn2) return false;

				if (bREFLECTIVE && random(1,256) <= 252) A_StartSound("SceptreBlocked",random(91,95),CHANF_DEFAULT,1.0,ATTN_NORM);
				UniqueProjectileFast.projtouchedshieldactor++;
				if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- UniqueProjectileFast.touched: %d", gametic, UniqueProjectileFast.projtouchedshieldactor);
				return true;
			}
			playpawn = AetheriusPlayerPawn(other.target);
			playpawn2 = AetheriusPlayerPawn(master);
			if (playpawn && playpawn2) return false;
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			if (dvdsdebug_showvisibleshieldparts) Console.Printf("\cyMageWandGuard (gametic: %d):\c- non-passive: %s", gametic, GetClassName());
			playpawn = AetheriusPlayerPawn(other.target);
			playpawn2 = AetheriusPlayerPawn(master);
			if (playpawn && playpawn2) return false;
		}

		return true;
	}

	override void PostBeginPlay()
	{
		double newheight = 1.0 + (0.2 * CallACS("MiscVarCheckDECORATE",10053));
		double newradius = 1.0 + (0.2 * CallACS("MiscVarCheckDECORATE",10053));
		A_SetSize(height*newheight,radius*newradius);
		A_SetScale(scale.x*newheight,scale.y*newradius);
		//Console.Printf("Height: %d (%.8f), Radius: %d (%.8f)", height, newheight, radius, newradius);
		
		Super.PostBeginPlay();
	}

	States
	{
		Spawn:
			HEXA C 0;
			HEXA C 2
			{
				if (dvdsdebug_showvisibleshieldparts) { A_FadeTo(0.25,0.25); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(3); }
			}
			stop;
	}
}

class BloodDemonArm : AetheriusCustomGib
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}

class BloodSpectreArm : AetheriusCustomGib
{
	Default
	{
		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Radius 8;
		Height 8;
		Speed 8;
		+DOOMBOUNCE;
		+DROPOFF;
		+Missile;
	}

	States
	{
		Spawn:
			SG2A ABCDEFGH 2;
			Loop;
		Death:
			SG2A I -1;
			Loop;
	}
}

class CrossbowFX4Base : AetheriusBaseZSC
{
	int TensionLevel;
	
	override void PostBeginPlay()
	{
		TensionLevel = CallACS("MiscVarCheckDECORATE",181);

		Super.PostBeginPlay();
	}

	Default
	{
		+NOBLOCKMAP
		Gravity 0.125;
		RenderStyle "Add";
	}

	States
	{
	Spawn:
		FX03 FG 8 BRIGHT;
		Stop;
	}
}

class NoItemSpawn : AetheriusBaseZSC // A special 'drop' that is meant to negate drop tables for friendly monsters entirely
{
	states
	{
		Spawn:
			TNT1 A 0 NoDelay A_Destroy();
			stop;
	}
}

class FloraAllWeapons : CustomInventoryExt // Gives All of Floras Unique Armor as one item (for cheats mostly) :P
{
	default
	{
		radius 20;
		height 20;
		scale 0.44;
		mass 666;
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		inventory.icon "FLARA0";
		Inventory.PickupMessage "Picked up \cnFlora's Entire Weapon Set\c-! (you cheater :P)";
	}
	
	States
	{
		Spawn:
			FLAR A 0;
			FLAR A 4; // bright
			loop;
		Pickup:
			// Slot 1
			TNT1 A 0 { if (dvds_florasceptrecandrop) { A_GiveInventory("SceptreOfEmpyrea", 1); } }
			TNT1 A 0 A_GiveInventory("SauronGauntletsFlora", 1);
			// Slot 2 [none yet]
			TNT1 A 0 { if (dvds_florawandscandrop) { A_GiveInventory("SapphireWandNew", 1); } }
			TNT1 A 0 { if (dvds_florawandscandrop) { A_GiveInventory("DualSapphireWandsNew", 1); } }
			// Slot 3
			TNT1 A 0 { if (dvds_floralongbowcandrop) { A_GiveInventory("DiarisLongBow", 1); } }
			// Slot 4
			TNT1 A 0 A_GiveInventory("ImpSoulCI", 8);
			TNT1 A 0 A_GiveInventory("DarkImpSoulCI", 8);
			TNT1 A 0 A_GiveInventory("CacodemonSoulCI", 8);
			TNT1 A 0 A_GiveInventory("CacolanternSoulCI", 8);
			TNT1 A 0 A_GiveInventory("AbaddonSoulCI", 8);
			// Slot 5
			TNT1 A 0 A_GiveInventory("KnightSoulCI", 8);
			TNT1 A 0 A_GiveInventory("BaronSoulCI", 8);
			TNT1 A 0 A_GiveInventory("BelphegorSoulCI", 8);
			TNT1 A 0 A_GiveInventory("BruiserSoulCI", 8);
			TNT1 A 0 A_GiveInventory("ArchonSoulCI", 8);
			TNT1 A 0 A_GiveInventory("PyroDemonSoulCI", 8);
			// Slot 6
			TNT1 A 0 A_GiveInventory("IncarnateSoulCI", 8);
			TNT1 A 0 A_GiveInventory("ArchvileSoulCI", 8);
			TNT1 A 0 A_GiveInventory("DiabloistSoulCI", 8);
			TNT1 A 0 A_GiveInventory("BalrogSoulCI", 8);
			// Slot 7 [none yet]
			TNT1 A 0 A_GiveInventory("HElementalSoulCI", 8);
			TNT1 A 0 A_GiveInventory("HOverlordSoulCI", 8);
			Stop;
	}
}

// Used in DVI [or Classic Doom] Game Mode to randomly spawn a piece of Flora's permenant armor [includes the Ruinous Shield or the Divine Shield, so beware!]
class FloraRandomArmor : CustomInventoryExt 
{
	default
	{
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0;
			FLAR A 0 A_SpawnItemEx("RandomSeedDrop",0,0,0,0,0,0,0,0,112); // Extra addition that quickly attaches seed dropping support for any entity that drops the RandomArmor actor: has a 7/16 chance of not spawning
			FLAR A 1 A_SetTics(random(1,5));
			FLAR A 1 A_SetTics(random(1,4));
			FLAR A 1 A_FloraRandomArmorDrop(0,0,0);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			stop;
	}
}

class FloraRandomArmorDoom2 : CustomInventoryExt
{
	default
	{
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0;
			FLAR A 0 A_SpawnItemEx("RandomSeedDrop",0,0,0,0,0,0,0,0,240); // Extra addition that quickly attaches seed dropping support for any entity that drops the RandomArmor actor: has a 15/16 chance of not spawning
			FLAR A 1 A_SetTics(random(1,5));
			FLAR A 1 A_SetTics(random(1,4));
			FLAR A 1 A_FloraRandomArmorDrop(0,0,2);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			stop;
	}
}

class FloraRandomArmorDoom2a : CustomInventoryExt
{
	default
	{
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0;
			FLAR A 0 A_SpawnItemEx("RandomSeedDrop",0,0,0,0,0,0,0,0,255); // Extra addition that quickly attaches seed dropping support for any entity that drops the RandomArmor actor: has a 255/256 chance of not spawning
			FLAR A 1 A_SetTics(random(1,5));
			FLAR A 1 A_SetTics(random(1,4));
			FLAR A 1 A_FloraRandomArmorDrop(0,0,3);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			stop;
	}
}

// Used in DVII Game Mode to randomly spawn a piece of Flora's permenant armor [includes the Ruinous Shield or the Divine Shield, so beware!]
class FloraRandomArmor2 : CustomInventoryExt 
{
	default
	{
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0;
			FLAR A 1 A_SetTics(random(1,5));
			FLAR A 1 A_SetTics(random(1,4));
			FLAR A 1 A_FloraRandomArmorDrop(0,0,1);
			FLAR A 1;
			FLAR A 1;
			FLAR A 1;
			stop;
	}
}

class FloraRandomArmorAlwaysDrop : CustomInventoryExt 
{
	default
	{
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
	
	States
	{
		Spawn:
			FLAR A 0;
			FLAR A 1 A_SetTics(random(1,5));
			FLAR A 1 A_SetTics(random(1,4));
			FLAR A 1 A_FloraRandomArmorDrop(4,0,0);
			FLAR A 1;
			FLAR A 1;
			stop;
	}
}

class FloraRandomArmorStrife : CustomInventoryExt
{
	default
	{
		radius 20;
		height 20;
		RenderStyle "Add";
		Alpha 0.0;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
	}
	
	States
	{
		Pickup:
		Use:
			FLAR A 0 ;
			FLAR A 1 A_FloraRandomArmorDrop(5,0,0);
			FLAR A 1 
			{
				actor playera = players[0].mo;
				if (playera) playera.A_TakeInventory("FloraRandomArmorStrife",1,0);
			}
			stop;
	}
}

class FloraFullArmor : CustomInventoryExt // Gives All of Floras Unique Armor as one item (for cheats mostly) :P
{
	default
	{
		radius 20;
		height 20;
		scale 0.44;
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
		inventory.icon "FLARA0";
		Inventory.PickupMessage "Picked up \cnFlora's Entire Unique Armor Set\c-! (you cheater :P)";
	}
	
	States
	{
		Spawn:
			FLAR A 0;
			FLAR A 4 bright;
			loop;
		Pickup:
			TNT1 A 0 A_TakeInventory("RuinousShield", 1); // Makes sure to remove the Ruinous Shield if grabbed
			TNT1 A 0 A_GiveInventory("SafeTeaShoes", 1);
			TNT1 A 0 A_GiveInventory("PearlyCorset", 1);
			TNT1 A 0 A_GiveInventory("WaterFlyingDress", 1);
			TNT1 A 0 A_GiveInventory("EvenstarNecklace", 1);
			TNT1 A 0 A_GiveInventory("CloakofEvasion", 1);
			TNT1 A 0 A_GiveInventory("FalconKnifeEarrings", 1);
			TNT1 A 0 A_GiveInventory("AnubisCufflinks", 1);
			TNT1 A 0 A_GiveInventory("KissaBra", 1);
			TNT1 A 0 A_GiveInventory("DivineShield", 1);
			TNT1 A 0 A_GiveInventory("BalrogRing", 1);
			TNT1 A 0 A_GiveInventory("DoveRibbon", 1);
			// Other Things
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0 A_StartSound("generalequip", 5);
			Stop;
	}
}
// Base Melee Reticle
class MeleeReticle_Silent : AetheriusPuffZSC
{
	default
	{
		VSpeed 0;
		RenderStyle "Translucent";
		+NOINTERACTION;
		+NOTIMEFREEZE;
	}
}
// Punch Attack Ghost Reticle
class PunchPuff_Silent : MeleeReticle_Silent
{
	default
	{
		Scale 0.125;
		Alpha 0.375;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Melee:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Crash:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;

		Finish1:
			PURT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;

		Finish2:
			PURT B 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;

		Finish3:
			PURT C 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;
	}
}

// AltPunch Attack Ghost Reticle
class AltPunchPuff_Silent : MeleeReticle_Silent
{
	default
	{
		Scale 0.125;
		Alpha 0.375;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Melee:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Crash:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;

		Finish1:
			APRT A 1 BRIGHT { A_Fadeout(alpha/2); }
			stop;

		Finish2:
			APRT B 1 BRIGHT { A_Fadeout(alpha/2); }
			stop;

		Finish3:
			APRT C 1 BRIGHT { A_Fadeout(alpha/2); }
			stop;
	}
}

// Kick Attack Ghost Reticle
class KickPuff_Silent : MeleeReticle_Silent
{
	default
	{
		Scale 0.125;
		Alpha 0.375;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Melee:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Crash:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;

		Finish1:
			KIRT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;

		Finish2:
			KIRT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;

		Finish3:
			KIRT C 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;
	}
}
// Chainsaw Reticle
class ChainsawPuff_Silent : MeleeReticle_Silent
{
	default
	{
		Scale 0.125;
		Alpha 0.375;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Melee:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Crash:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;

		Finish1:
			CHSR A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;

		Finish2:
			CHSR B 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;
	}
}
// Poison Needle Reticle
class PoisonNeedlePuff_Silent : MeleeReticle_Silent
{
	default
	{
		Scale 0.125;
		Alpha 0.375;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			goto Finish1;
		Melee:
			TNT1 A 1;
			goto Finish1;
		Crash:
			TNT1 A 1;
			goto Finish1;

		Finish1:
			PNRT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;
	}
}
// Chainsaw Reticle
class ChainsawPuff2_Silent : MeleeReticle_Silent
{
	default
	{
		Scale 0.125;
		Alpha 0.375;
	}
	
	States
	{
		Spawn:
			TNT1 A 1 NoDelay;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Melee:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;
		Crash:
			TNT1 A 1;
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Finish3"); }
				return resolvestate(null);
			}
			goto Finish1;

		Finish1:
			CH2R A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;

		Finish2:
			CH2R B 1 BRIGHT { A_Fadeout(alpha/6); }
			stop;
	}
}
