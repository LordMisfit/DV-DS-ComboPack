class BaseHellcorePickup : AetheriusCustomInventory
{
	default
	{
		Scale 0.125;
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		FloatBobPhase 4; // Set this to the same value for the base soul pickup and the spawn to sync their spawn positions
	}
	
	int sparktimer;
	int sparktimermax;
	int scaletimer;

	override void PostBeginPlay() // "invoker." is not needed in non-action functions
	{
		if (Owner == NULL) // Powerups cannot exist outside an inventory
		{
			sparktimermax = random(3,9) * 15;
			sparktimer = 0;
			if (dvdsdebug_hellcorepickups2) Console.Printf("(sparktimer): %d / %d", sparktimer, sparktimermax);
		}
		
		Super.PostBeginPlay();
	}
	
	override void Tick() // "invoker." is not needed in non-action functions
	{
		if (Owner == NULL) // Powerups cannot exist outside an inventory
		{
			if (GetAge() == 2) A_StartSound("hellcore/spawnsoul", 36, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(0.75,1.25));
			
			actor playera = players[0].mo;
			if (!((playera && playera.CountInv("AetheriusTimeFreezer")) || 
						(playera && playera.CountInv("AetheriusTimeFreezerMenu")) || 
						isFrozen())) sparktimer++;
			if (sparktimer >= sparktimermax)
			{
				A_StartSound("hellcore/slspark", 31, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(0.75,1.25));
				sparktimermax = random(3,9) * 15;
				sparktimer = 0;
				A_SpawnItemEx("HellSoulSpark",0.0,0.0,0.0,0.0,0.0,0.0,0.0,SXF_SETTARGET);
			}
			if (dvdsdebug_hellcorepickups2) Console.Printf("sparktimer: %d / %d", sparktimer, sparktimermax);
			
			if (bDROPPED)
			{
			}
		}
		
		Super.Tick();
	}

	action void A_HellCorePickupSound()
	{
		A_StartSound("pickuphellcore1", 34, CHANF_DEFAULT, frandom(0.875,1.5), ATTN_NORM, frandom(0.75,1.25));
		A_StartSound("pickuphellcore2", 35, CHANF_DEFAULT, frandom(0.875,1.5), ATTN_NORM, frandom(0.75,1.25));
		A_StartSound("pickuphellcore3", 36, CHANF_DEFAULT, frandom(0.875,1.5), ATTN_NORM, frandom(0.75,1.25));
	}

	action void A_HellCoreSoulPickupPulse(double xsc = 1.0, double ysc = 1.0)
	{
		invoker.scaletimer++;
		if (invoker.scaletimer > 39) invoker.scaletimer = 0;
		if (invoker.scaletimer == 0) scale.x = scale.y = 0.125;
		if (invoker.scaletimer == 1 || invoker.scaletimer == 39) scale.x = scale.y = 0.12625;
		if (invoker.scaletimer == 2 || invoker.scaletimer == 38) scale.x = scale.y = 0.1275;
		if (invoker.scaletimer == 3 || invoker.scaletimer == 37) scale.x = scale.y = 0.12875;
		if (invoker.scaletimer == 4 || invoker.scaletimer == 36) scale.x = scale.y = 0.13;
		if (invoker.scaletimer == 5 || invoker.scaletimer == 35) scale.x = scale.y = 0.13125;
		if (invoker.scaletimer == 6 || invoker.scaletimer == 34) scale.x = scale.y = 0.1325;
		if (invoker.scaletimer == 7 || invoker.scaletimer == 33) scale.x = scale.y = 0.13375;
		if (invoker.scaletimer == 8 || invoker.scaletimer == 32) scale.x = scale.y = 0.135;
		if (invoker.scaletimer == 9 || invoker.scaletimer == 31) scale.x = scale.y = 0.13625;
		if (invoker.scaletimer == 10 || invoker.scaletimer == 30) scale.x = scale.y = 0.1375;
		if (invoker.scaletimer == 11 || invoker.scaletimer == 29) scale.x = scale.y = 0.13875;
		if (invoker.scaletimer == 12 || invoker.scaletimer == 28) scale.x = scale.y = 0.14;
		if (invoker.scaletimer == 13 || invoker.scaletimer == 27) scale.x = scale.y = 0.14125;
		if (invoker.scaletimer == 14 || invoker.scaletimer == 26) scale.x = scale.y = 0.1425;
		if (invoker.scaletimer == 15 || invoker.scaletimer == 25) scale.x = scale.y = 0.14375;
		if (invoker.scaletimer == 16 || invoker.scaletimer == 24) scale.x = scale.y = 0.145;
		if (invoker.scaletimer == 17 || invoker.scaletimer == 23) scale.x = scale.y = 0.14625;
		if (invoker.scaletimer == 18 || invoker.scaletimer == 22) scale.x = scale.y = 0.1475;
		if (invoker.scaletimer == 19 || invoker.scaletimer == 21) scale.x = scale.y = 0.14875;
		if (invoker.scaletimer == 20) scale.x = scale.y = 0.15; 
		scale.x *= xsc;
		scale.y *= ysc;

		if (dvdsdebug_hellcorepickups1) Console.Printf("(sc-x): %.8f, (sc-y): %.8f", scale.x, scale.y, alpha, floatbobphase);
	}
	
}
class HellSoulSpark : AetheriusBaseZSC
{
	Default
	{
		Scale 0.125;
		RenderStyle "Add";
		Alpha 0.75;
		+FLOATBOB;
		+DONTGIB;
		FloatBobPhase 4; // Set this to the same value for the base soul pickup and the spawn to sync their spawn positions
	}

	override void Tick()
	{
		if (target)
		{
			double rand = frandom(0.90,1.10);
			scale.x = (target.scale.x * rand);
			scale.y = (target.scale.y * rand);
			double rand2 = frandom(0.75,1.25);
			alpha = (target.alpha * (0.5 * rand2));
			floatbobphase = target.floatbobphase;
			A_Warp(AAPTR_TARGET,0.0,0.0,0.0,0.0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			
			if (dvdsdebug_hellcorepickups1) Console.Printf("sc-x: %.8f, sc-y: %.8f, alpha: %.8f, fbp: %d", scale.x, scale.y, alpha, floatbobphase);
		}

		super.Tick();
	}
	
	States
	{
		Spawn:
			HCSS ABCDEFEDCBA 1 bright;
			stop;
	}
}


class BaseHellcoreWeapon : QuickMeleeWeaponZSC
{
	double soulbobxbasex;
	double soulbobxrandxmin;
	double soulbobxrandxmax;
	double soulbobxetimemulmin;
	double soulbobxetimemulmax;
	double soulbobxspeedmod;
	double soulbobxheightmodmin;
	double soulbobxheightmodmax;

	double soulbobybasey;
	double soulbobyrandymin;
	double soulbobyrandymax;
	double soulbobyspeedmod;
	double soulbobyheightmodmin;
	double soulbobyheightmodmax;

	double soulbobx;
	double soulboby;
	
	double baseangle;
	
	int soultype;
	int soulsubtype;
	int soultritype;
	
	int shotsfired;
	int bruiseraltdirection;
	int crisisatkresult;
	int sndtime, sndtimemax;
	string randsnd1, randsnd2, randsnd3, randsnd4, randsnd5, randsnd6, randsnd7, randsnd8;
	int randsoundsel;
	string chosensnd;
	int shaketimer;
	double shakefactor;
	int soulleveltime;
	
	int heightoffset;
	
	property bobxbasex: soulbobxbasex;
	property bobxrandx: soulbobxrandxmin, soulbobxrandxmax;
	property bobxetimemul: soulbobxetimemulmin, soulbobxetimemulmax;
	property bobxspeedmod: soulbobxspeedmod;
	property bobxheightmod: soulbobxheightmodmin, soulbobxheightmodmax;

	property bobybasey: soulbobybasey;
	property bobyrandy: soulbobyrandymin, soulbobyrandymax;
	property bobyspeedmod: soulbobyspeedmod;
	property bobyheightmod: soulbobyheightmodmin, soulbobyheightmodmax;

	property randomsounds: randsnd1, randsnd2, randsnd3, randsnd4, randsnd5, randsnd6, randsnd7, randsnd8;

	Default
	{
		Scale 0.125;
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Weapon.BobRangeX 0.1;
		Weapon.BobRangeY 0.1;
		Weapon.BobSpeed 0.1;
		Weapon.BobStyle "Smooth";

		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx 0.0, 0.0;
		BaseHellcoreWeapon.bobxetimemul 0.2475, 0.2525;
		BaseHellcoreWeapon.bobxspeedmod 1.0;
		BaseHellcoreWeapon.bobxheightmod 4.875, 5.125;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy 0.0, 0.0;
		BaseHellcoreWeapon.bobyspeedmod 8.0;
		BaseHellcoreWeapon.bobyheightmod 8.0, 8.0;

		BaseHellcoreWeapon.randomsounds "", "", "", "", "", "", "", "";
	}
	
	action void A_HellSoulChangeType(int dir)
	{
		int typemin = 1;
		int typemax = 17;
		if (dir <= 0) 
		{
			invoker.soultype--;
			if (invoker.soultype < typemin) invoker.soultype = typemax;
		}
		else 
		{
			invoker.soultype++;
			if (invoker.soultype > typemax) invoker.soultype = typemin;
		}

		if (invoker.soultype == 1) // Imp
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -0.25;
			invoker.soulbobxrandxmax = 0.25;
			invoker.soulbobxetimemulmin = 0.245;
			invoker.soulbobxetimemulmax = 0.275;
			invoker.soulbobxspeedmod = 1.1;
			invoker.soulbobyheightmodmin = 4.875;
			invoker.soulbobyheightmodmax = 5.125;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.125;
			invoker.soulbobyrandymax = 0.125;
			invoker.soulbobyspeedmod = 8.0;
			invoker.soulbobyheightmodmin = 8.0;
			invoker.soulbobyheightmodmax = 8.0;
			
			invoker.randsnd1 = "imp/sight";
			invoker.randsnd2 = "imp/pain";
			invoker.randsnd3 = "imp/death";
			invoker.randsnd4 = "imp/active";
			invoker.randsnd5 = "imp/sight";
			invoker.randsnd6 = "imp/pain";
			invoker.randsnd7 = "imp/death";
			invoker.randsnd8 = "imp/active";
		}
		if (invoker.soultype == 2) // Dark Imp
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -0.5;
			invoker.soulbobxrandxmax = 0.5;
			invoker.soulbobxetimemulmin = 0.24;
			invoker.soulbobxetimemulmax = 0.28;
			invoker.soulbobxspeedmod = 1.15;
			invoker.soulbobyheightmodmin = 4.85;
			invoker.soulbobyheightmodmax = 5.15;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.25;
			invoker.soulbobyrandymax = 0.25;
			invoker.soulbobyspeedmod = 8.0375;
			invoker.soulbobyheightmodmin = 7.92;
			invoker.soulbobyheightmodmax = 8.08;
			
			invoker.randsnd1 = "darkimp/sight";
			invoker.randsnd2 = "darkimp/pain";
			invoker.randsnd3 = "darkimp/death";
			invoker.randsnd4 = "darkimp/active";
			invoker.randsnd5 = "darkimp/sight";
			invoker.randsnd6 = "darkimp/pain";
			invoker.randsnd7 = "darkimp/death";
			invoker.randsnd8 = "darkimp/active";
		}
		if (invoker.soultype == 3) // Cacodemon
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -0.75;
			invoker.soulbobxrandxmax = 0.75;
			invoker.soulbobxetimemulmin = 0.2375;
			invoker.soulbobxetimemulmax = 0.2625;
			invoker.soulbobxspeedmod = 1.175;
			invoker.soulbobyheightmodmin = 4.8;
			invoker.soulbobyheightmodmax = 5.2;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.375;
			invoker.soulbobyrandymax = 0.375;
			invoker.soulbobyspeedmod = 8.075;
			invoker.soulbobyheightmodmin = 7.75;
			invoker.soulbobyheightmodmax = 8.25;
			
			invoker.randsnd1 = "caco/sight";
			invoker.randsnd2 = "cacodemon/pain";
			invoker.randsnd3 = "caco/death";
			invoker.randsnd4 = "caco/active";
			invoker.randsnd5 = "caco/sight";
			invoker.randsnd6 = "cacodemon/pain";
			invoker.randsnd7 = "caco/death";
			invoker.randsnd8 = "caco/active";
		}
		if (invoker.soultype == 4) // Cacolantern
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -1.0625;
			invoker.soulbobxrandxmax = 1.0625;
			invoker.soulbobxetimemulmin = 0.235;
			invoker.soulbobxetimemulmax = 0.265;
			invoker.soulbobxspeedmod = 1.2;
			invoker.soulbobyheightmodmin = 4.68;
			invoker.soulbobyheightmodmax = 5.32;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.53125;
			invoker.soulbobyrandymax = 0.53125;
			invoker.soulbobyspeedmod = 8.1;
			invoker.soulbobyheightmodmin = 7.675;
			invoker.soulbobyheightmodmax = 8.325;
			
			invoker.randsnd1 = "caco/sight";
			invoker.randsnd2 = "cacodemon/pain";
			invoker.randsnd3 = "caco/death";
			invoker.randsnd4 = "caco/active";
			invoker.randsnd5 = "caco/sight";
			invoker.randsnd6 = "cacodemon/pain";
			invoker.randsnd7 = "caco/death";
			invoker.randsnd8 = "caco/active";
		}
		if (invoker.soultype == 5) // Abaddon
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -1.1875;
			invoker.soulbobxrandxmax = 1.1875;
			invoker.soulbobxetimemulmin = 0.2325;
			invoker.soulbobxetimemulmax = 0.2675;
			invoker.soulbobxspeedmod = 1.3;
			invoker.soulbobyheightmodmin = 4.68;
			invoker.soulbobyheightmodmax = 5.32;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.59375;
			invoker.soulbobyrandymax = 0.59375;
			invoker.soulbobyspeedmod = 8.3;
			invoker.soulbobyheightmodmin = 7.65;
			invoker.soulbobyheightmodmax = 8.35;
			
			invoker.randsnd1 = "caco/sight";
			invoker.randsnd2 = "cacodemon/pain";
			invoker.randsnd3 = "caco/death";
			invoker.randsnd4 = "caco/active";
			invoker.randsnd5 = "caco/sight";
			invoker.randsnd6 = "cacodemon/pain";
			invoker.randsnd7 = "caco/death";
			invoker.randsnd8 = "caco/active";
		}
		if (invoker.soultype == 6) // Hell Knight
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -1.0;
			invoker.soulbobxrandxmax = 1.0;
			invoker.soulbobxetimemulmin = 0.235;
			invoker.soulbobxetimemulmax = 0.265;
			invoker.soulbobxspeedmod = 1.20;
			invoker.soulbobyheightmodmin = 4.75;
			invoker.soulbobyheightmodmax = 5.25;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.5;
			invoker.soulbobyrandymax = 0.5;
			invoker.soulbobyspeedmod = 8.125;
			invoker.soulbobyheightmodmin = 7.625;
			invoker.soulbobyheightmodmax = 8.375;
			
			invoker.randsnd1 = "knight/sight";
			invoker.randsnd2 = "knight/pain";
			invoker.randsnd3 = "knight/death";
			invoker.randsnd4 = "knight/active";
			invoker.randsnd5 = "knight/sight";
			invoker.randsnd6 = "knight/pain";
			invoker.randsnd7 = "knight/death";
			invoker.randsnd8 = "knight/active";
		}
		if (invoker.soultype == 7) // Baron of Hell
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -1.25;
			invoker.soulbobxrandxmax = 1.25;
			invoker.soulbobxetimemulmin = 0.23125;
			invoker.soulbobxetimemulmax = 0.26875;
			invoker.soulbobxspeedmod = 1.50;
			invoker.soulbobyheightmodmin = 4.6875;
			invoker.soulbobyheightmodmax = 5.3125;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.625;
			invoker.soulbobyrandymax = 0.625;
			invoker.soulbobyspeedmod = 8.15625;
			invoker.soulbobyheightmodmin = 7.53125;
			invoker.soulbobyheightmodmax = 8.46875;
			
			invoker.randsnd1 = "baron/sight";
			invoker.randsnd2 = "baron/pain";
			invoker.randsnd3 = "baron/death";
			invoker.randsnd4 = "baron/active";
			invoker.randsnd5 = "baron/sight";
			invoker.randsnd6 = "baron/pain";
			invoker.randsnd7 = "baron/death";
			invoker.randsnd8 = "baron/active";
		}
		if (invoker.soultype == 8) // Belphegor
		{
			invoker.soulbobxbasex = 0.0;
			invoker.soulbobxrandxmin = -1.5;
			invoker.soulbobxrandxmax = 1.5;
			invoker.soulbobxetimemulmin = 0.2275;
			invoker.soulbobxetimemulmax = 0.2725;
			invoker.soulbobxspeedmod = 1.80;
			invoker.soulbobyheightmodmin = 4.625;
			invoker.soulbobyheightmodmax = 5.375;

			invoker.soulbobybasey = 0.0;
			invoker.soulbobyrandymin = -0.75;
			invoker.soulbobyrandymax = 0.75;
			invoker.soulbobyspeedmod = 8.1875;
			invoker.soulbobyheightmodmin = 7.4375;
			invoker.soulbobyheightmodmax = 8.5625;
			
			invoker.randsnd1 = "baron/sight";
			invoker.randsnd2 = "baron/pain";
			invoker.randsnd3 = "baron/death";
			invoker.randsnd4 = "baron/active";
			invoker.randsnd5 = "baron/sight";
			invoker.randsnd6 = "baron/pain";
			invoker.randsnd7 = "baron/death";
			invoker.randsnd8 = "baron/active";
		}
		if (invoker.soultype == 9) // Bruiser Demon
		{
		}
		if (invoker.soultype == 10) // Archon of Hell
		{
		}
		if (invoker.soultype == 11) // Pyro Demon
		{
		}
		if (invoker.soultype == 12) // Death Incarnate
		{
		}
		if (invoker.soultype == 13) // Archvile
		{
		}
		if (invoker.soultype == 14) // Diabloist
		{
		}
		if (invoker.soultype == 15) // Flying Balrog
		{
		}
		if (invoker.soultype == 16) // Hades Elemental
		{
		}
		if (invoker.soultype == 17) // Hades Overlord
		{
		}
		if (invoker.soultype == 18) // Hierophant[?]
		{
		}
	}
	
	action void A_HellSoulChangeSubType(int dir)
	{
	}
	
	action void A_HellSoulChangeTriType(int dir)
	{
	}
	
	action void A_HellSoulVileChase()
	{
		A_Chase(null,null,CHF_DONTMOVE|CHF_NOPLAYACTIVE|CHF_NORANDOMTURN|CHF_NOPOSTATTACKTURN|CHF_NODIRECTIONTURN); // A_VileChase();
	}
	
	action void A_HellSoulOverlayReady()
	{
		A_Overlay(4,"SoulUnderLayer",true);
		A_Overlay(5,"SoulImage",true);
		A_Overlay(6,"SoulOverLayer",true);
		A_Overlay(-63,"LayerFloatControl",true);
	}
	
	action void A_HellSoulClearOverlays()
	{
		A_Overlay(4,"EndLayerSound",false);
		A_Overlay(5,"EndLayer",false);
		A_Overlay(6,"EndLayer",false);
		A_Overlay(-63,"EndLayer",false);
	}
	
	action void A_HellSoulSpark()
	{
		A_Overlay(3,"SoulSparkUnder",false);
		A_Overlay(7,"SoulSparkUnder",false);
		if (random(1,8) <= 5)
		{ 
			invoker.shaketimer = random(1,4) * -5;
			if (dvdsdebug_hellcorepickups2) Console.Printf("shaketimer: %d", invoker.shaketimer);
		}
	}
	
	action void A_HellSoulCrisisCheck()
	{
		invoker.crisisatkresult = A_HellCoreCrisisCheck();
	}
	
	action void A_HellSoulFire1(string sndname = "", int heatamt = 0, string name1 = "", string name2 = "", int checknum = 0, bool usetension = true, bool hurtplayeroh = true, double altangle = 0.0, int spawnheight = 0, double spawnoffset = 0.0, double altpitch = 0.0)
	{
		A_StartSound(sndname,101);
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",checknum) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,hurtplayeroh); // +1.0% Hellcore Heat, Deal Damage if already above 100% Heat
		if (usetension) CallACS("StartTensionCountDown");

		A_SetAngle(angle-altangle);
		if (invoker.crisisatkresult > 0)
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile(name2,0,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch); 
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 4) 
			{
				A_SpreadAuraFireProjectile(name2,0-15,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
				A_SpreadAuraFireProjectile(name2,0+15,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
			}
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 7) 
			{
				A_SpreadAuraFireProjectile(name2,0-30,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
				A_SpreadAuraFireProjectile(name2,0+30,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile(name1,0,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch); 
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 4) 
			{
				A_SpreadAuraFireProjectile(name1,0-15,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
				A_SpreadAuraFireProjectile(name1,0+15,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
			}
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 7) 
			{
				A_SpreadAuraFireProjectile(name1,0-30,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
				A_SpreadAuraFireProjectile(name1,0+30,0,"",0+spawnoffset,0+spawnheight,0,0+altpitch);
			}
		}
		A_SetAngle(angle+altangle);
	}

	action void A_HellSoulFire2(string sndname = "", int heatamt = 0, string name1 = "DIPuff_Soul", int checknum = 0, bool usetension = true, bool hurtplayeroh = true)
	{
		int CrisisMultiplier = CallACS("CrisisMultiplier");
		A_StartSound(sndname,101);
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",checknum) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,hurtplayeroh); // +6.0% Hellcore Heat, Deal Damage if already above 100% Heat
		if (usetension) CallACS("StartTensionCountDown");

		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireBullets(0,0,1,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
			A_SpreadAuraFireBullets(30,0,9,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireBullets(0,0,1,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle+30);
				A_SpreadAuraFireBullets(0,0,1,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireBullets(0,0,1,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle+60);
				A_SpreadAuraFireBullets(0,0,1,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,(random(1,3)*3)*CrisisMultiplier,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireBullets(0,0,1,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
			A_SpreadAuraFireBullets(30,0,9,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireBullets(0,0,1,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle+30);
				A_SpreadAuraFireBullets(0,0,1,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",checknum) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireBullets(0,0,1,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle+60);
				A_SpreadAuraFireBullets(0,0,1,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SpreadAuraFireBullets(30,0,9,random(1,3)*3,name1,FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,16384,"",0,0,2,"Cell");
				A_SetAngle(angle-30);
			}
		}
	}

	action void A_HellSoulHEleSpawn(string actorname = "FHadesSphere", int valcheck = 111, int heatamt = 0, double angmult = 45.0, double xvel = 8.0)
	{
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",valcheck) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1);
		A_SpreadAuraSpawnItemEx(actorname,32.0,0.0,32.0,xvel,0.0,0.0,0.0,SXF_TRANSFERPITCH);
		if (CallACS("MiscVarCheckDECORATE",valcheck) >= 4) 
		{
			A_SetAngle(angle-(angmult*1));
			A_SpreadAuraSpawnItemEx(actorname,32.0,0.0,32.0,xvel,0.0,0.0,0.0,SXF_TRANSFERPITCH);
			A_SetAngle(angle+(angmult*2));
			A_SpreadAuraSpawnItemEx(actorname,32.0,0.0,32.0,xvel,0.0,0.0,0.0,SXF_TRANSFERPITCH);
			A_SetAngle(angle-(angmult*1));
		}
		if (CallACS("MiscVarCheckDECORATE",valcheck) >= 7) 
		{
			A_SetAngle(angle-(angmult*2));
			A_SpreadAuraSpawnItemEx(actorname,32.0,0.0,32.0,xvel,0.0,0.0,0.0,SXF_TRANSFERPITCH);
			A_SetAngle(angle+(angmult*4));
			A_SpreadAuraSpawnItemEx(actorname,32.0,0.0,32.0,xvel,0.0,0.0,0.0,SXF_TRANSFERPITCH);
			A_SetAngle(angle-(angmult*2));
		}
	}
	
	action void A_HLCRSoulRefire(int type)
	{
		if (type == 1) // Normal 1/2
		{
			if (random(1,6) == 1) { A_Refire("ReFireAnim2"); }
			else { A_Refire("ReFireAnim1"); }
		}
		if (type == 2) // Normal 2/1
		{
			if (random(1,6) == 1) { A_Refire("ReFireAnim1"); }
			else { A_Refire("ReFireAnim2"); }
		}

		if (type == 3) // Alt 1/2
		{
			if (random(1,6) == 1) { A_Refire("AltReFireAnim2"); }
			else { A_Refire("AltReFireAnim1"); }
		}
		if (type == 4) // Alt 2/1
		{
			if (random(1,6) == 1) { A_Refire("AltReFireAnim1"); }
			else { A_Refire("AltReFireAnim2"); }
		}
	}
	
	action void A_HLCRFire2Tics(int type = 0)
	{
		int tic = 2;
		if (A_CheckBerserk())
		{
			tic = 1;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = random(0,1); }
		}
		else
		{
			tic = 2;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = 1; }
		}
		if (type >= 1 && tic < 1) tic = 1;
		A_SetTics(tic);
		if (dvdsdebug_hellcorepickups2) Console.Printf("2tic: %d", tic);
	}
	
	action void A_HLCRFire3Tics(int type = 0)
	{
		int tic = 3;
		if (A_CheckBerserk())
		{
			tic = random(1,2);
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = randompick(1,1,1,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 1; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = randompick(0,1,1,1,1); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = randompick(0,1,1,1); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = random(0,1); }
		}
		else
		{
			tic = 3;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = random(2,3); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 2; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = randompick(1,1,2,2,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = randompick(1,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = 1; }
		}
		if (type >= 1 && tic < 1) tic = 1;
		A_SetTics(tic);
		if (dvdsdebug_hellcorepickups2) Console.Printf("3tic: %d", tic);
	}
	
	action void A_HLCRFire4Tics(int type = 0)
	{
		int tic = 4;
		if (A_CheckBerserk())
		{
			tic = 2;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = randompick(1,2,2,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = random(1,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = randompick(1,1,1,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = 1; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = randompick(0,1,1,1); }
		}
		else
		{
			tic = 4;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = random(3,4); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 3; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = random(2,3); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = 2; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = random(1,2); }
		}
		if (type >= 1 && tic < 1) tic = 1;
		A_SetTics(tic);
		if (dvdsdebug_hellcorepickups2) Console.Printf("4tic: %d", tic);
	}
	
	action void A_HLCRFire5Tics(int type = 0)
	{
		int tic = 5;
		if (A_CheckBerserk())
		{
			tic = random(2,3);
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = randompick(2,3,3,3); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 2; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = randompick(1,2,2,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = random(1,2); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = randompick(1,1,1,2); }
		}
		else
		{
			tic = 5;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = random(4,5); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 4; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = random(3,4); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = 3; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = random(2,3); }
		}
		if (type >= 1 && tic < 1) tic = 1;
		A_SetTics(tic);
		if (dvdsdebug_hellcorepickups2) Console.Printf("5tic: %d", tic);
	}
	
	action void A_HLCRFire7Tics(int type = 0)
	{
		int tic = 7;
		if (A_CheckBerserk())
		{
			tic = random(3,4);
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = 3; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 3; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = random(2,3); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = random(2,3); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = 2; }
		}
		else
		{
			tic = 7;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = 6; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 6; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = 5; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = 5; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = 4; }
		}
		if (type >= 1 && tic < 1) tic = 1;
		A_SetTics(tic);
		if (dvdsdebug_hellcorepickups2) Console.Printf("7tic: %d", tic);
	}
	
	action void A_HLCRFire8Tics(int type = 0)
	{
		int tic = 8;
		if (A_CheckBerserk())
		{
			tic = 4;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = random(3,4); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 3; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = randompick(2,2,3); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = random(2,3); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = 2; }
		}
		else
		{
			tic = 8;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = 7; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 6; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = 6; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = 5; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = 4; }
		}
		if (type >= 1 && tic < 1) tic = 1;
		A_SetTics(tic);
		if (dvdsdebug_hellcorepickups2) Console.Printf("8tic: %d", tic);
	}
	
	action void A_HLCRFire12Tics(int type = 0)
	{
		int tic = 12;
		if (A_CheckBerserk())
		{
			tic = 6;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = random(5,6); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 5; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = 4; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = random(3,4); }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = 3; }
		}
		else
		{
			tic = 12;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 1) { tic = 11; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { tic = 10; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { tic = 8; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { tic = 7; }
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) { tic = 6; }
		}
		if (type >= 1 && tic < 1) tic = 1;
		A_SetTics(tic);
		if (dvdsdebug_hellcorepickups2) Console.Printf("12tic: %d", tic);
	}
	
	States
	{
		// Dummy Sprites
		Dummy:
			HCL1 ABCDEFGHIJKLMNOPQRSTUV 0 bright;
			HCL2 AB 0 bright;
			HCL3 ABCDEFGHIJKLMNOPQ 0 bright;

		// Bonus Layers
		SoulOverLayer: // Layer 6
			HCL2 A 0 bright
			{ 
				A_OverlayFlags(6, PSPF_ALPHA, true); 
				A_OverlayFlags(6, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(6, STYLE_Translucent); 
			}
			HCL2 A 1 bright { A_OverlayAlpha(6, 0.125); }
			HCL2 A 1 bright { A_OverlayAlpha(6, 0.25); }
			HCL2 A 1 bright { A_OverlayAlpha(6, 0.375); }
			HCL2 A 1 bright { A_OverlayAlpha(6, 0.5); }
			HCL2 A 1 bright { A_OverlayAlpha(6, 0.625); }
			HCL2 A 1 bright { A_OverlayAlpha(6, 0.75); }
			HCL2 A 1 bright { A_OverlayAlpha(6, 0.875); }
			HCL2 A 1 bright { A_OverlayAlpha(6, 1.0); }
		SoulOverLayer2: // Layer 6
			HCL2 A 1 bright;
			loop;
		SoulUnderLayer: // Layer 4
			HCL2 B 0 bright 
			{ 
				A_StartSound("hellcore/slspawn", 32, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NORM, frandom(1.25,1.75));
				A_OverlayFlags(4, PSPF_ALPHA, true); 
				A_OverlayFlags(4, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(4, STYLE_Translucent); 
			}
			HCL2 B 1 bright { A_OverlayAlpha(4, 0.125); }
			HCL2 B 1 bright { A_OverlayAlpha(4, 0.25); }
			HCL2 B 1 bright { A_OverlayAlpha(4, 0.375); }
			HCL2 B 1 bright { A_OverlayAlpha(4, 0.5); }
			HCL2 B 1 bright { A_OverlayAlpha(4, 0.625); }
			HCL2 B 1 bright { A_OverlayAlpha(4, 0.75); }
			HCL2 B 1 bright { A_OverlayAlpha(4, 0.875); }
			HCL2 B 1 bright { A_OverlayAlpha(4, 1.0); }
		SoulUnderLayer2: // Layer 4
			HCL2 B 1 bright;
			loop;

		SoulImage: // Layer 5
			HCL3 ABCDEFGHIJKLMNOPQ 0 bright;
			HCL3 A 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;

		SoulSparkOver: // 7
			HCL4 ABCDEFEDCBA 1 bright
			{
				A_OverlayFlags(7, PSPF_ALPHA, true); 
				A_OverlayFlags(7, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(7, STYLE_Translucent); 
				A_OverlayAlpha(7, 0.5);
			}
			stop;

		SoulSparkUnder: // Layer 3
			HCL4 ABCDEFEDCBA 1 bright
			{
				A_OverlayFlags(3, PSPF_ALPHA, true); 
				A_OverlayFlags(3, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(3, STYLE_Translucent); 
				A_OverlayAlpha(3, 0.5);
			}
			stop;
		EndLayer:
			TNT1 A 0;
			stop;
		EndLayerSound:
			TNT1 A 0
			{
				A_StartSound("hellcore/sluspaw", 33, CHANF_DEFAULT, frandom(0.75,1.25), ATTN_NORM, frandom(1.25,1.75));
			}
			stop;
		// Contols the Float/Bobbing of the Soul itself
		LayerFloatControl: // layer -63
			TNT1 A 1
			{
				if (CallACS("MenuVarCheckDECORATE",0) == 0) { invoker.soulleveltime = level.time; }
				if (invoker.shaketimer > 0) 
				{
					invoker.shakefactor = 0.25;
					invoker.soulbobx = invoker.soulbobxbasex  +  frandom(invoker.soulbobxrandxmin-(invoker.soulbobxrandxmin*(invoker.shakefactor)),invoker.soulbobxrandxmax+(invoker.soulbobxrandxmax*(invoker.shakefactor)))  +  (sin ((level.time + (level.time * frandom(invoker.soulbobxetimemulmin-(invoker.soulbobxetimemulmin*(invoker.shakefactor)),invoker.soulbobxetimemulmax+(invoker.soulbobxetimemulmax*(invoker.shakefactor))))) * invoker.soulbobxspeedmod+(invoker.soulbobxspeedmod*(invoker.shakefactor))) * frandom(invoker.soulbobxheightmodmin-(invoker.soulbobxheightmodmin*(invoker.shakefactor)),invoker.soulbobxheightmodmax+(invoker.soulbobxheightmodmax*(invoker.shakefactor))));
					invoker.soulboby = invoker.soulbobybasey  +  frandom(invoker.soulbobyrandymin-(invoker.soulbobyrandymin*(invoker.shakefactor)),invoker.soulbobyrandymax+(invoker.soulbobyrandymax*(invoker.shakefactor)))  +  (sin (level.time * invoker.soulbobyspeedmod+(invoker.soulbobyspeedmod*(invoker.shakefactor))) * frandom(invoker.soulbobyheightmodmin-(invoker.soulbobyheightmodmin*(invoker.shakefactor)),invoker.soulbobyheightmodmax+(invoker.soulbobyheightmodmax*(invoker.shakefactor))));

					if (CallACS("MenuVarCheckDECORATE",0) == 0) { invoker.shaketimer--; }
					if (dvdsdebug_hellcorepickups2) Console.Printf("shaketimer: %d", invoker.shaketimer);
				}
				else
				if (invoker.shaketimer < 0) 
				{
					invoker.shakefactor = 0.5;
					invoker.soulbobx = invoker.soulbobxbasex  +  frandom(invoker.soulbobxrandxmin-(invoker.soulbobxrandxmin*(invoker.shakefactor)),invoker.soulbobxrandxmax+(invoker.soulbobxrandxmax*(invoker.shakefactor)))  +  (sin ((level.time + (level.time * frandom(invoker.soulbobxetimemulmin-(invoker.soulbobxetimemulmin*(invoker.shakefactor)),invoker.soulbobxetimemulmax+(invoker.soulbobxetimemulmax*(invoker.shakefactor))))) * invoker.soulbobxspeedmod+(invoker.soulbobxspeedmod*(invoker.shakefactor))) * frandom(invoker.soulbobxheightmodmin-(invoker.soulbobxheightmodmin*(invoker.shakefactor)),invoker.soulbobxheightmodmax+(invoker.soulbobxheightmodmax*(invoker.shakefactor))));
					invoker.soulboby = invoker.soulbobybasey  +  frandom(invoker.soulbobyrandymin-(invoker.soulbobyrandymin*(invoker.shakefactor)),invoker.soulbobyrandymax+(invoker.soulbobyrandymax*(invoker.shakefactor)))  +  (sin (level.time * invoker.soulbobyspeedmod+(invoker.soulbobyspeedmod*(invoker.shakefactor))) * frandom(invoker.soulbobyheightmodmin-(invoker.soulbobyheightmodmin*(invoker.shakefactor)),invoker.soulbobyheightmodmax+(invoker.soulbobyheightmodmax*(invoker.shakefactor))));

					if (CallACS("MenuVarCheckDECORATE",0) == 0) { invoker.shaketimer++; }
					if (dvdsdebug_hellcorepickups2) Console.Printf("shaketimer: %d", invoker.shaketimer);
				}
				else
				{
					invoker.soulbobx = invoker.soulbobxbasex + frandom(invoker.soulbobxrandxmin,invoker.soulbobxrandxmax) + (sin ((invoker.soulleveltime + (invoker.soulleveltime * frandom(invoker.soulbobxetimemulmin,invoker.soulbobxetimemulmax))) * invoker.soulbobxspeedmod) * frandom(invoker.soulbobxheightmodmin,invoker.soulbobxheightmodmax));
					invoker.soulboby = invoker.soulbobybasey + frandom(invoker.soulbobyrandymin,invoker.soulbobyrandymax) + (sin (invoker.soulleveltime * invoker.soulbobyspeedmod) * frandom(invoker.soulbobyheightmodmin,invoker.soulbobyheightmodmax));
				}
				if (dvdsdebug_hellcorepickups1) 
				{
					Console.Printf("soulbobx: %.8f, xbasex: %2f, xrandx: %2f-%2f, xetimemul: %2f-%2f, xspeedmod: %2f, xheightmod: %2f-%2f", invoker.soulbobx, invoker.soulbobxbasex, invoker.soulbobxrandxmin, invoker.soulbobxrandxmax, invoker.soulbobxetimemulmin, invoker.soulbobxetimemulmax, invoker.soulbobxspeedmod, invoker.soulbobxheightmodmin, invoker.soulbobxheightmodmax);
					Console.Printf("soulboby: %.8f, ybasey: %2f, yrandy: %2f-%2f, yspeedmod: %2f, yheightmod: %2f-%2f", invoker.soulboby, invoker.soulbobybasey, invoker.soulbobyrandymin, invoker.soulbobyrandymax, invoker.soulbobyspeedmod, invoker.soulbobyheightmodmin, invoker.soulbobyheightmodmax);
				}

				if (CallACS("MenuVarCheckDECORATE",0) == 0) 
				{
					// A_OverlayOffset (<layer>, 0, 32 + (sin (level.time * <speed modifier>) * <height modifier>), WOF_INTERPOLATE)
					A_OverlayOffset(3, invoker.soulbobx, invoker.soulboby, WOF_INTERPOLATE);
					A_OverlayOffset(4, invoker.soulbobx, invoker.soulboby, WOF_INTERPOLATE);
					A_OverlayOffset(5, invoker.soulbobx, invoker.soulboby, WOF_INTERPOLATE);
					A_OverlayOffset(6, invoker.soulbobx, invoker.soulboby, WOF_INTERPOLATE);
					A_OverlayOffset(7, invoker.soulbobx, invoker.soulboby, WOF_INTERPOLATE);
				}

				if (dvds_florahellcoresoulstype) 
				{
					if (invoker.sndtimemax <= 0) { invoker.sndtimemax = random(5,15) * 35; }
					if (CallACS("MenuVarCheckDECORATE",0) == 0) { invoker.sndtime++; }
					if (invoker.sndtime >= invoker.sndtimemax)
					{
						invoker.randsoundsel = random(1,8);
						if (invoker.randsoundsel == 1) { invoker.chosensnd = invoker.randsnd1; }
						if (invoker.randsoundsel == 2) { invoker.chosensnd = invoker.randsnd2; }
						if (invoker.randsoundsel == 3) { invoker.chosensnd = invoker.randsnd3; }
						if (invoker.randsoundsel == 4) { invoker.chosensnd = invoker.randsnd4; }
						if (invoker.randsoundsel == 5) { invoker.chosensnd = invoker.randsnd5; }
						if (invoker.randsoundsel == 6) { invoker.chosensnd = invoker.randsnd6; }
						if (invoker.randsoundsel == 7) { invoker.chosensnd = invoker.randsnd7; }
						if (invoker.randsoundsel == 8) { invoker.chosensnd = invoker.randsnd8; }
						A_StartSound(invoker.chosensnd, 31, CHANF_DEFAULT, frandom(0.375,0.875), ATTN_NORM, frandom(0.75,1.25));
						invoker.sndtimemax = random(5,15) * 35;
						invoker.sndtime = 0;
						if (dvdsdebug_hellcorepickups1) Console.Printf("chosensnd: '%s' (%d)", invoker.chosensnd, invoker.randsoundsel);
	
						invoker.shaketimer = random(1,3) * 35;
					}
					if (dvdsdebug_hellcorepickups2) Console.Printf("sndtime: %d / %d", invoker.sndtime, invoker.sndtimemax);
				}
				
			}
			loop;

		Ready:
			HCL1 B 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			loop;
		Deselect: 
			HCL1 A 1
			{
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(0);
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(0);
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;

		// Quick Kick
		User1: // Kick - Most Weapons
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
			}
			goto Ready;

		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_GunFlash("LightDone",GFF_NOEXTCHANGE); // A_ClearFlash;
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				CallACS("StartTensionCountDown");
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_GiveInventory("KickAttackDEFLvl",2); } else { A_GiveInventory("KickAttackDEFLvl",1); }
				A_SetMartialArtsMastery(1);
				if (random(1,256) > 64) { A_GiveInventory("KickCritBonus",1); } else { A_GiveInventory("KickCritBonus",2); }
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto KickStart;
		KickStart: // 15 Tics (7 (MAMlv3), 3 (MAMlv5))
			FKIC A 1 A_FloraKickFrame(1);
			FKIC B 1 A_FloraKickFrame(2);
			FKIC C 1 A_FloraKickFrame(3);
			FKIC D 1 A_FloraKickFrame(4); 
			FKIC E 1 A_FloraKickFrame(5); 
			FKIC F 1 A_FloraKickFrame(6); 
			FKIC G 1 A_FloraKickFrame(7);  
			FKIC H 1 A_FloraKickFrame(8); 
			FKIC G 1 A_FloraKickFrame(9);
			FKIC F 1 A_FloraKickFrame(10);
			FKIC E 1 A_FloraKickFrame(11);
			FKIC D 1 A_FloraKickFrame(12); 
			FKIC C 1 A_FloraKickFrame(13); 
			FKIC B 1 A_FloraKickFrame(14); 
			FKIC A 1 A_FloraKickFrame(15); 
			FKIC A 0 { return resolvestate("KickEnd"); }
		// KICK END
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;
			
			/*
		// Alt Fire
		AltFire:
			HCL1 MN 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 N 0
			{
				if (random(1,2) == 1) { return resolvestate("AltFire2"); }
				else { return resolvestate("AltFire1"); }
				return resolvestate(null);
			}
		AltFire1:
			HCL1 O 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim1:
			HCL1 P 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 Q 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(0);
			}
			HCL1 R 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 O 0
			{
				A_HLCRSoulRefire(4);
			}
			HCL1 O 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFire2:
			HCL1 S 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim2:
			HCL1 T 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 U 4 bright 
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(0);
			}
			HCL1 V 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 S 0
			{
				A_HLCRSoulRefire(3);
			}
			HCL1 S 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFireEnd:
			HCL1 NM 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
		*/
	}
}

class ImpSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLA0"
		Tag "Imp's Soul: [Hellcore] Launches Imp Fireballs";
		Inventory.PickupMessage "You got an Imp's Soul! \cx[Slot 4]\c-";
	}

	States
	{
		Spawn:
			HCSL A 1 bright 
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(0);
			}
			Loop;

		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("ImpSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(1);
			}
			Stop;
	}
}

// Imp Soul [Slot 4] (Weapon)
class DoomImpBall_Soul : DoomImpBallNew
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AB 4 Bright;
			Loop;
	}
}
class DoomImpBallCrisis_Soul : DoomImpBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class ImpSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLA0"
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got an Imp's Soul! \cx[Slot 4]\c-";
		Tag "Imp's Soul";

		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -0.25, 0.25;
		BaseHellcoreWeapon.bobxetimemul 0.245, 0.275;
		BaseHellcoreWeapon.bobxspeedmod 1.1;
		BaseHellcoreWeapon.bobxheightmod 4.875, 5.125;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.125, 0.125;
		BaseHellcoreWeapon.bobyspeedmod 8.0;
		BaseHellcoreWeapon.bobyheightmod 8.0, 8.0;
		
		BaseHellcoreWeapon.randomsounds "imp/sight", "imp/pain", "imp/death", "imp/active", "imp/sight", "imp/pain", "imp/death", "imp/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 A 0 bright 
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL A 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("imp/attack",100,"DoomImpBall_Soul","DoomImpBallCrisis_Soul",96,true,true);
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("imp/attack",100,"DoomImpBall_Soul","DoomImpBallCrisis_Soul",96,true,true);
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

class DarkImpSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLB0"
		Tag "Dark Imp's Soul: [Hellcore] Launches Dark Imp Fireballs";
		Inventory.PickupMessage "You got a Dark Imp's Soul! \cx[Slot 4]\c-";
	}
	States
	{
		Spawn:
			HCSL B 1 NoDelay bright 
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(1);
			}
			Loop;

		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("DarkImpSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(2);
			}
			Stop;
	}
}

// Dark Imp Soul [Slot 4] (Weapon)
class DarkSeeker_Soul : DarkSeeker 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			DKB1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DarkImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### A 2 Bright A_SeekerMissile (5,10);
			#### ABB 2 Bright;
			Loop;
 }
}
class DarkSeekerCrisis_Soul : DarkSeekerCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL4 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DarkImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 2 Bright A_SeekerMissile(10,20);
			#### ABB 2 Bright A_GenerateCrisisParticle();
			#### A 2 Bright;
			Loop;
	}
}

class DarkImpSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLB0"
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Dark Imp's Soul! \cx[Slot 4]\c-";
		Tag "Dark Imp's Soul";

		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -0.5, 0.5;
		BaseHellcoreWeapon.bobxetimemul 0.24, 0.28;
		BaseHellcoreWeapon.bobxspeedmod 1.15;
		BaseHellcoreWeapon.bobxheightmod 4.85, 5.15;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.25, 0.25;
		BaseHellcoreWeapon.bobyspeedmod 8.0375;
		BaseHellcoreWeapon.bobyheightmod 7.92, 8.08;
		
		BaseHellcoreWeapon.randomsounds "darkimp/sight", "darkimp/pain", "darkimp/death", "darkimp/active", "darkimp/sight", "darkimp/pain", "darkimp/death", "darkimp/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 B 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL B 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("imp/attack",250,"DarkSeeker_Soul","DarkSeekerCrisis_Soul",97,true,true);
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("imp/attack",250,"DarkSeeker_Soul","DarkSeekerCrisis_Soul",97,true,true);
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Cacodemon's Soul [Slot 4] (Weapon)
class CacodemonBall_Soul : CacodemonBallNew 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacodemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			BAL2 AB 4 Bright;
			Loop;
	}
}
class CacodemonBallCrisis_Soul : CacodemonBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacodemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class CacodemonSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLC0"
		Tag "Cacodemon's Soul: [Hellcore] Launches Cacodemon Lightning Balls";
		Inventory.PickupMessage "You got a Cacodemon's Soul! \cx[Slot 4]\c-";
	}

	States
	{
		Spawn:
			HCSL C 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(2);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("CacodemonSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(3);
			}
			Stop;
	}
}

class CacodemonSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLC0"
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Cacodemon's Soul! \cx[Slot 4]\c-";
		Tag "Cacodemon's Soul";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -0.75, 0.75;
		BaseHellcoreWeapon.bobxetimemul 0.2375, 0.2625;
		BaseHellcoreWeapon.bobxspeedmod 1.175;
		BaseHellcoreWeapon.bobxheightmod 4.8, 5.2;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.375, 0.375;
		BaseHellcoreWeapon.bobyspeedmod 8.075;
		BaseHellcoreWeapon.bobyheightmod 7.75, 8.25;
		
		BaseHellcoreWeapon.randomsounds "caco/sight", "cacodemon/pain", "caco/death", "caco/active", "caco/sight", "cacodemon/pain", "caco/death", "caco/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 C 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL C 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("caco/attack",150,"CacodemonBall_Soul","CacodemonBallCrisis_Soul",98,true,true);
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("caco/attack",150,"CacodemonBall_Soul","CacodemonBallCrisis_Soul",98,true,true);
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Cacolantern's Soul [Slot 4] (Weapon)
class CacolanternBall_Soul : CacolanternBall 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL8 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacolanternSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			BAL8 AB 4 Bright;
			loop;
	}
}
class CacolanternBallCrisis_Soul : CacolanternBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL8 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacolanternSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class CacolanternSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLD0"
		Tag "Cacolantern's Soul: [Hellcore] Launches Cacolantern Lightning Balls";
		Inventory.PickupMessage "You got a Cacolantern's Soul! \cx[Slot 4]\c-";
	}
	
	States
	{
		Spawn:
			HCSL D 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(3);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("CacolanternSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(4);
			}
			Stop;
	}
}

class CacolanternSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLD0"
		Tag "Cacolantern's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Cacolantern's Soul! \cx[Slot 4]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.0625, 1.0625;
		BaseHellcoreWeapon.bobxetimemul 0.235, 0.265;
		BaseHellcoreWeapon.bobxspeedmod 1.2;
		BaseHellcoreWeapon.bobxheightmod 4.68, 5.32;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.53125, 0.53125;
		BaseHellcoreWeapon.bobyspeedmod 8.1;
		BaseHellcoreWeapon.bobyheightmod 7.675, 8.325;
		
		BaseHellcoreWeapon.randomsounds "caco/sight", "cacodemon/pain", "caco/death", "caco/active", "caco/sight", "cacodemon/pain", "caco/death", "caco/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 D 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL D 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("caco/attack",200,"CacolanternBall_Soul","CacolanternBallCrisis_Soul",99,true,true);
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("caco/attack",200,"CacolanternBall_Soul","CacolanternBallCrisis_Soul",99,true,true);
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Abaddon's Soul [Slot 4] (Weapon)
class AbaddonBall_Soul : AbaddonBall 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL3 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((AbaddonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			BAL3 AB 4 Bright;
			loop;
	}
}
class AbaddonBallCrisis_Soul : AbaddonBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL3 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((AbaddonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class AbaddonSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLE0"
		Tag "Abaddon's Soul: [Hellcore] Launches Abaddon Fireballs";
		Inventory.PickupMessage "You got the Abaddon's Soul! \cx[Slot 4]\c-";
	}

	States
	{
		Spawn:
			HCSL E 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(4);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("AbaddonSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(5);
			}
			Stop;
	}
}
class AbaddonSoul : BaseHellcoreWeapon
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLE0"
		Tag "Abaddon's Soul";
		Inventory.PickupMessage "You got the Abaddon's Soul! \cx[Slot 4]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.1875, 1.1875;
		BaseHellcoreWeapon.bobxetimemul 0.2325, 0.2675;
		BaseHellcoreWeapon.bobxspeedmod 1.3;
		BaseHellcoreWeapon.bobxheightmod 4.68, 5.32;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.59375, 0.59375;
		BaseHellcoreWeapon.bobyspeedmod 8.3;
		BaseHellcoreWeapon.bobyheightmod 7.65, 8.35;
		
		BaseHellcoreWeapon.randomsounds "caco/sight", "cacodemon/pain", "caco/death", "caco/active", "caco/sight", "cacodemon/pain", "caco/death", "caco/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 E 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL E 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				invoker.shotsfired = 0;
				A_HLCRFire4Tics(0);
			}
			HCL1 GG 2 bright
			{
				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 2", invoker.shotsfired);
				if (invoker.shotsfired > 2) invoker.shotsfired = 0;
				if (invoker.shotsfired == 1) 
				{ 
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("caco/attack",125,"AbaddonBall_Soul","AbaddonBallCrisis_Soul",100,true,true); 
					A_HLCRFire2Tics(0);
				}
				else 
				{ 
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("caco/attack",125,"AbaddonBall_Soul","AbaddonBallCrisis_Soul",100,true,false); 
					A_HLCRFire2Tics(1);
				}
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				invoker.shotsfired = 0;
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
			HCL1 KK 2 bright
			{
				A_HellSoulSpark();
				if (CallACS("MiscVarCheckDECORATE",10033) >= 3) { A_SetTics(1); }

				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 2", invoker.shotsfired);
				if (invoker.shotsfired > 2) invoker.shotsfired = 0;
				if (invoker.shotsfired == 1) 
				{ 
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("caco/attack",125,"AbaddonBall_Soul","AbaddonBallCrisis_Soul",100,true,true); 
				}
				else 
				{ 
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("caco/attack",125,"AbaddonBall_Soul","AbaddonBallCrisis_Soul",100,true,false); 
				}
			}
			HCL1 L 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}


// Hell Knight's Soul [Slot 5] (Weapon)
// Hell Knight's Soul Weapon - Hellcore Weapon #6
class HellKnightBall_Soul : HellKnightBall 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((KnightSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright;
			Loop;
	}
}
class HellKnightBallCrisis_Soul : HellKnightBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((KnightSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class KnightSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLF0"
		Tag "Hell Knight's Soul: [Hellcore] Launches Hell Knight Plasmaballs";
		Inventory.PickupMessage "You got a Hell Knight's Soul! \cx[Slot 5]\c-";
	}
	States
	{
		Spawn:
			HCSL F 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(5);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("KnightSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(6);
			}
			Stop;
	}
}
class KnightSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLF0"
		Tag "Hell Knight's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Hell Knight's Soul! \cx[Slot 5]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.0, 1.0;
		BaseHellcoreWeapon.bobxetimemul 0.235, 0.265;
		BaseHellcoreWeapon.bobxspeedmod 1.20;
		BaseHellcoreWeapon.bobxheightmod 4.75, 5.25;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.5, 0.5;
		BaseHellcoreWeapon.bobyspeedmod 8.125;
		BaseHellcoreWeapon.bobyheightmod 7.625, 8.375;
		
		BaseHellcoreWeapon.randomsounds "knight/sight", "knight/pain", "knight/death", "knight/active", "knight/sight", "knight/pain", "knight/death", "knight/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 F 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL F 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("baron/attack",225,"HellKnightBall_Soul","HellKnightBallCrisis_Soul",101,true,true);
			}
			HCL1 H 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("baron/attack",225,"HellKnightBall_Soul","HellKnightBallCrisis_Soul",101,true,true);
			}
			HCL1 L 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Baron of Hell's Soul [Slot 5] (Weapon)
// Baron of Hell's Soul Weapon - Hellcore Weapon #7
class BaronOfHellBall_Soul : BaronOfHellBall 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BaronSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright;
			Loop;
	}
}
class BaronOfHellBallCrisis_Soul : BaronOfHellBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BaronSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class BaronSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLG0"
		Tag "Baron of Hell's Soul: [Hellcore] Launches Baron of Hell Plasmaballs";
		Inventory.PickupMessage "You got a Baron of Hell's Soul! \cx[Slot 5]\c-";
	}
	States
	{
		Spawn:
			HCSL G 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(6);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("BaronSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(7);
			}
			Stop;
	}
}
class BaronSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLG0"
		Tag "Baron of Hell's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Baron of Hell's Soul! \cx[Slot 5]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.25, 1.25;
		BaseHellcoreWeapon.bobxetimemul 0.23125, 0.26875;
		BaseHellcoreWeapon.bobxspeedmod 1.50;
		BaseHellcoreWeapon.bobxheightmod 4.6875, 5.3125;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.625, 0.625;
		BaseHellcoreWeapon.bobyspeedmod 8.15625;
		BaseHellcoreWeapon.bobyheightmod 7.53125, 8.46875;
		
		BaseHellcoreWeapon.randomsounds "baron/sight", "baron/pain", "baron/death", "baron/active", "baron/sight", "baron/pain", "baron/death", "baron/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 G 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL G 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("baron/attack",275,"BaronOfHellBall_Soul","BaronOfHellBallCrisis_Soul",102,true,true);
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				A_HellSoulCrisisCheck();
				A_HellSoulFire1("baron/attack",275,"BaronOfHellBall_Soul","BaronOfHellBallCrisis_Soul",102,true,true);
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Belphegor's Soul [Slot 5] (Weapon)
// Belphegor's Soul Weapon - Hellcore Weapon #8
class BelphegorBall_Soul : BelphegorBall 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BelphegorSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright;
			Loop;
	}
}
class BelphegorBallCrisis_Soul : BelphegorBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BelphegorSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class BelphegorSoulCI : BaseHellcorePickup
{
	Default
	{
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		//$Sprite "HCSLH0"
		Tag "Belphegor's Soul: [Hellcore] Launches Belphegor Plasmaballs";
		Inventory.PickupMessage "You got a Belphegor's Soul! \cx[Slot 5]\c-";
	}
	States
	{
		Spawn:
			HCSL H 1 NoDelay bright 
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(7);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("BelphegorSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(8);
			}
			Stop;
	}
}

class BelphegorSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLH0"
		Tag "Belphegor's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Belphegor's Soul! \cx[Slot 5]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.5, 1.5;
		BaseHellcoreWeapon.bobxetimemul 0.2275, 0.2725;
		BaseHellcoreWeapon.bobxspeedmod 1.80;
		BaseHellcoreWeapon.bobxheightmod 4.625, 5.375;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.75, 0.75;
		BaseHellcoreWeapon.bobyspeedmod 8.1875;
		BaseHellcoreWeapon.bobyheightmod 7.4375, 8.5625;
		
		BaseHellcoreWeapon.randomsounds "baron/sight", "baron/pain", "baron/death", "baron/active", "baron/sight", "baron/pain", "baron/death", "baron/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 H 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL H 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				invoker.shotsfired = 0;
				A_HLCRFire4Tics(0);
			}
			HCL1 GGGG 1 bright
			{
				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 4", invoker.shotsfired);
				if (invoker.shotsfired > 4) invoker.shotsfired = 0;
				if (invoker.shotsfired == 1) 
				{
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("baron/attack",125,"BelphegorBall_Soul","BelphegorBallCrisis_Soul",103,true,true); 
				}
				else 
				if (invoker.shotsfired == 2 || invoker.shotsfired == 3) 
				{ 
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("baron/attack",125,"BelphegorBall_Soul","BelphegorBallCrisis_Soul",103,true,false); 
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10033) >= 5) 
					{ 
						A_HellSoulCrisisCheck();
						A_HellSoulFire1("baron/attack",0,"BelphegorBall_Soul","BelphegorBallCrisis_Soul",103,true,false); 
					}
				}
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				invoker.shotsfired = 0;
				A_HLCRFire4Tics(0);
			}
			HCL1 KKKK 1 bright
			{
				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 4", invoker.shotsfired);
				if (invoker.shotsfired > 4) invoker.shotsfired = 0;
				if (invoker.shotsfired == 1) 
				{
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("baron/attack",125,"BelphegorBall_Soul","BelphegorBallCrisis_Soul",103,true,true); 
				}
				else 
				if (invoker.shotsfired == 2 || invoker.shotsfired == 3) 
				{ 
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("baron/attack",125,"BelphegorBall_Soul","BelphegorBallCrisis_Soul",103,true,false); 
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10033) >= 5) 
					{ 
						A_HellSoulCrisisCheck();
						A_HellSoulFire1("baron/attack",0,"BelphegorBall_Soul","BelphegorBallCrisis_Soul",103,true,false); 
					}
				}
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Bruiser Demon's Soul [Slot 5] (Weapon)
// Bruiser Demon's Soul Weapon - Hellcore Weapon #9
class BruiserBall_Soul : BruiserBall 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BRBA A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_SpawnItemEx("BruiserBallTrail",0,0,0,0,0,1.28);
			Loop;
	}
}
class BruiserBallCrisis_Soul : BruiserBallCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BRBA A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright
			{
				A_GenerateCrisisParticle();
				A_SpawnItemEx("BruiserBallTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			}
			Loop;
	}
}

class BruiserBall2_Soul : BruiserBall2
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BRB2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AB 6 BRIGHT;
			Loop;
	}
}
class BruiserBall2Crisis_Soul : BruiserBall2Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BRB2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AAABBB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}
}

class BruiserFireSpawner_Soul : BruiserFireSpawner
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			TNT1 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
				A_SpawnProjectile("BruiserFire",0,0,0,4);
			}
			TNT1 AA 3
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
			}
			Loop;
	}
}
class BruiserFireSpawnerCrisis_Soul : BruiserFireSpawnerCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			TNT1 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
				A_SpawnProjectile("BruiserFireCrisis",0,0,0,4);
			}
			TNT1 AA 3
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
			}
			Loop;
	}
}

class BruiserSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLI0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Bruiser Demon's Soul: [Hellcore] Uses Bruiser Demon attacks [alt-fire selects mode]";
		Inventory.PickupMessage "You got a Bruiser Demon's Soul! \cx[Slot 5]\c-";
	}

	States
	{
		Spawn:
			HCSL I 1 bright NoDelay
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(8);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("BruiserSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(9);
			}
			Stop;
	}
}
class BruiserSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLI0"
		Tag "Bruiser Demon's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Bruiser Demon's Soul! \cx[Slot 5]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.75, 1.75;
		BaseHellcoreWeapon.bobxetimemul 0.22375, 0.27625;
		BaseHellcoreWeapon.bobxspeedmod 2.1;
		BaseHellcoreWeapon.bobxheightmod 4.5625, 5.4375;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.875, 0.875;
		BaseHellcoreWeapon.bobyspeedmod 8.21875;
		BaseHellcoreWeapon.bobyheightmod 7.34375, 8.65625;
		
		BaseHellcoreWeapon.randomsounds "superbaron/scream", "superbaron/pain", "superbaron/death", "superbaron/act", "superbaron/scream", "superbaron/pain", "superbaron/death", "superbaron/act";
	}
	
	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 I 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL I 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				invoker.shotsfired = 0;
				if (CallACS("HellcoreFireMode",1,0) == 0) // If Alterating Fire Wave Mode is set
				{
					invoker.bruiseraltdirection = 0;
					if (random(1,2) == 1) { invoker.bruiseraltdirection = 1; }
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 1) // If Bruiser Blast Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 2) // If Ground Wave Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 GGGGGGG 1 bright
			{
				A_SetTics(0); 
				if (CallACS("HellcoreFireMode",1,0) == 0) // If Alterating Fire Wave Mode is set
				{
					A_SetTics(1);
					if (invoker.shotsfired == 0) { A_HellSoulCrisisCheck(); }
					invoker.baseangle = (-50 + (invoker.shotsfired * 10));
					if (invoker.bruiseraltdirection == 0) { invoker.baseangle *= 1; }
					if (invoker.bruiseraltdirection == 1) { invoker.baseangle *= -1; }
					invoker.shotsfired++;
					if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 7", invoker.shotsfired);
					if (dvdsdebug_hellcorepickups1) Console.Printf("baseangle: %.8f", invoker.baseangle);
					if (invoker.shotsfired > 7) invoker.shotsfired = 0;
					if (invoker.shotsfired == 1) 
					{ 
						A_HellSoulSpark();
						A_HellSoulFire1("baron/attack",71,"BruiserBall2_Soul","BruiserBall2Crisis_Soul",104,true,true,invoker.baseangle);
					}
					else 
					{ 
						A_HellSoulFire1("",71,"BruiserBall2_Soul","BruiserBall2Crisis_Soul",104,true,false,invoker.baseangle);
					}
				}
			}
			HCL1 G 4 bright
			{
				A_SetTics(0); 
				if (CallACS("HellcoreFireMode",1,0) == 1) // If Bruiser Blast Mode is set
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("baron/attack",400,"BruiserBall_Soul","BruiserBallCrisis_Soul",104,true,true,0.0);
				}
			}
			HCL1 GGGG 1 bright
			{
				A_SetTics(0);
				if (CallACS("HellcoreFireMode",1,0) == 2) // If Ground Wave Mode is set
				{
					A_SetTics(1);
					if (invoker.shotsfired == 0) { A_HellSoulCrisisCheck(); }
					invoker.shotsfired++;
					if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 4", invoker.shotsfired);
					if (invoker.shotsfired == 1)
					{
						A_HellSoulSpark();
						A_HellSoulFire1("",250,"BruiserFireSpawner_Soul","BruiserFireSpawnerCrisis_Soul",104,true,true,15.0);
					}
					else
					if (invoker.shotsfired == 2)
					{
						A_HellSoulFire1("",250,"BruiserFireSpawner_Soul","BruiserFireSpawnerCrisis_Soul",104,true,false,0.0);
					}
					else
					if (invoker.shotsfired == 3)
					{
						A_HellSoulCrisisCheck();
						A_HellSoulFire1("",250,"BruiserFireSpawner_Soul","BruiserFireSpawnerCrisis_Soul",104,true,false,-15.0);
					}
				}
			}
			HCL1 H 4 bright
			{
				if (CallACS("HellcoreFireMode",1,0) == 0) // If Alterating Fire Wave Mode is set
				{
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 1) // If Bruiser Blast Mode is set
				{
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 2) // If Ground Wave Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				invoker.shotsfired = 0;
				if (CallACS("HellcoreFireMode",1,0) == 0) // If Alterating Fire Wave Mode is set
				{
					invoker.bruiseraltdirection = 0;
					if (random(1,2) == 1) { invoker.bruiseraltdirection = 1; }
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 1) // If Bruiser Blast Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 2) // If Ground Wave Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 KKKKKKK 1 bright
			{
				A_SetTics(0); 
				if (CallACS("HellcoreFireMode",1,0) == 0) // If Alterating Fire Wave Mode is set
				{
					A_SetTics(1);
					if (invoker.shotsfired == 0) { A_HellSoulCrisisCheck(); }
					invoker.baseangle = (-50 + (invoker.shotsfired * 10));
					if (invoker.bruiseraltdirection == 0) { invoker.baseangle *= 1; }
					if (invoker.bruiseraltdirection == 1) { invoker.baseangle *= -1; }
					invoker.shotsfired++;
					if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 7", invoker.shotsfired);
					if (dvdsdebug_hellcorepickups1) Console.Printf("baseangle: %.8f", invoker.baseangle);
					if (invoker.shotsfired > 7) invoker.shotsfired = 0;
					if (invoker.shotsfired == 1) 
					{ 
						A_HellSoulSpark();
						A_HellSoulFire1("baron/attack",71,"BruiserBall2_Soul","BruiserBall2Crisis_Soul",104,true,true,invoker.baseangle);
					}
					else 
					{ 
						A_HellSoulFire1("",71,"BruiserBall2_Soul","BruiserBall2Crisis_Soul",104,true,false,invoker.baseangle);
					}
				}
			}
			HCL1 K 4 bright
			{
				A_SetTics(0); 
				if (CallACS("HellcoreFireMode",1,0) == 1) // If Bruiser Blast Mode is set
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("baron/attack",400,"BruiserBall_Soul","BruiserBallCrisis_Soul",104,true,true,0.0);
				}
			}
			HCL1 KKKK 1 bright
			{
				A_SetTics(0);
				if (CallACS("HellcoreFireMode",1,0) == 2) // If Ground Wave Mode is set
				{
					A_SetTics(1);
					if (invoker.shotsfired == 0) { A_HellSoulCrisisCheck(); }
					invoker.shotsfired++;
					if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 4", invoker.shotsfired);
					if (invoker.shotsfired == 1)
					{
						A_HellSoulSpark();
						A_HellSoulFire1("",250,"BruiserFireSpawner_Soul","BruiserFireSpawnerCrisis_Soul",104,true,true,15.0);
					}
					else
					if (invoker.shotsfired == 2)
					{
						A_HellSoulFire1("",250,"BruiserFireSpawner_Soul","BruiserFireSpawnerCrisis_Soul",104,true,false,0.0);
					}
					else
					if (invoker.shotsfired == 3)
					{
						A_HellSoulFire1("",250,"BruiserFireSpawner_Soul","BruiserFireSpawnerCrisis_Soul",104,true,false,-15.0);
					}
				}
			}
			HCL1 L 4 bright
			{
				if (CallACS("HellcoreFireMode",1,0) == 0) // If Alterating Fire Wave Mode is set
				{
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 1) // If Bruiser Blast Mode is set
				{
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,0) == 2) // If Ground Wave Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;

		// Fire Mode
		User4:
			HCL1 A 5 
			{
				A_StartSound("elecstun",102, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(1.25,1.75));
				CallACS("HellcoreFireMode",0,0);
			}
			Goto Ready;
	}
}

// Archon of Hell's Soul [Slot 5] (Weapon)
// Archon of Hell's Soul Weapon - Hellcore Weapon #10
class ArchonOfHellBall_Soul : ArchonOfHellBall 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright;
			Loop;
	}
}
class ArchonOfHellBallCrisis_Soul : ArchonOfHellBallCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AABB 2 Bright A_GenerateCrisisParticle();
			Loop;
	}

}
class ArchonComet_Soul : ArchonComet 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			ARCB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AAAABBBBCCCC 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			Loop;
	}
}
class ArchonCometCrisis_Soul : ArchonCometCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			ARCB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			#### B 0 Bright A_GenerateCrisisParticle();
			#### BB 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			#### B 0 Bright A_GenerateCrisisParticle();
			#### BB 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			#### C 0 Bright A_GenerateCrisisParticle();
			#### CC 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			#### C 0 Bright A_GenerateCrisisParticle();
			#### CC 1 Bright A_SpawnItem("ArchonCometTrail",0,0);
			Loop;
	}
}

class ArchonSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLJ0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Archon of Hell's Soul: [Hellcore] Uses Archon of Hell attacks [alt-fire selects mode]";
		Inventory.PickupMessage "You got an Archon of Hell's Soul! \cx[Slot 5]\c-";
	}

	States
	{
		Spawn:
			HCSL J 1 bright NoDelay
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(9);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("ArchonSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(10);
			}
			Stop;
	}
}
class ArchonSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLJ0"
		Tag "Archon of Hell's";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got an Archon of Hell's Soul! \cx[Slot 5]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.75, 1.75;
		BaseHellcoreWeapon.bobxetimemul 0.22375, 0.27625;
		BaseHellcoreWeapon.bobxspeedmod 2.1;
		BaseHellcoreWeapon.bobxheightmod 4.5625, 5.4375;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.875, 0.875;
		BaseHellcoreWeapon.bobyspeedmod 8.21875;
		BaseHellcoreWeapon.bobyheightmod 7.34375, 8.65625;
		
		BaseHellcoreWeapon.randomsounds "monster/ar2sit", "archon/pain", "monster/ar2dth", "baron/active", "monster/ar2sit", "archon/pain", "monster/ar2dth", "baron/active";
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 J 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL J 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				if (CallACS("HellcoreFireMode",1,1) == 0) // Tri-Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 1) // Plasma Wave
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 2) // Comet Blast
				{
					A_HLCRFire5Tics(0);
				}
			}
			HCL1 G 4 bright
			{
				if (CallACS("HellcoreFireMode",1,1) == 0) // Tri-Shot Mode
				{
					A_HLCRFire3Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-4.0);
					A_HellSoulFire1("baron/attack",400,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,true,0.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,4.0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 1) // Plasma Wave
				{
					A_HLCRFire3Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-6.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-4.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-2.0);
					A_HellSoulFire1("baron/attack",750,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,true,0.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,2.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,4.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,6.0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 2) // Comet Blast
				{
					A_HLCRFire7Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("weapons/firbfi",650,"ArchonComet_Soul","ArchonCometCrisis_Soul",105,true,true,0.0);
				}
			}
			HCL1 H 4 bright
			{
				if (CallACS("HellcoreFireMode",1,1) == 0) // Tri-Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 1) // Plasma Wave
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 2) // Comet Blast
				{
					A_HLCRFire5Tics(0);
				}
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				if (CallACS("HellcoreFireMode",1,1) == 0) // Tri-Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 1) // Plasma Wave
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 2) // Comet Blast
				{
					A_HLCRFire5Tics(0);
				}
			}
			HCL1 K 4 bright
			{
				if (CallACS("HellcoreFireMode",1,1) == 0) // Tri-Shot Mode
				{
					A_HLCRFire3Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-4.0);
					A_HellSoulFire1("baron/attack",400,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,true,0.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,4.0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 1) // Plasma Wave
				{
					A_HLCRFire3Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-6.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-4.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,-2.0);
					A_HellSoulFire1("baron/attack",750,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,true,0.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,2.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,4.0);
					A_HellSoulFire1("",0,"ArchonOfHellBall_Soul","ArchonOfHellBallCrisis_Soul",105,true,false,6.0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 2) // Comet Blast
				{
					A_HLCRFire7Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("weapons/firbfi",650,"ArchonComet_Soul","ArchonCometCrisis_Soul",105,true,true,0.0);
				}
			}
			HCL1 L 4 bright
			{
				if (CallACS("HellcoreFireMode",1,1) == 0) // Tri-Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 1) // Plasma Wave
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,1) == 2) // Comet Blast
				{
					A_HLCRFire5Tics(0);
				}
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;

		// Fire Mode
		User4:
			HCL1 A 5
			{
				A_StartSound("elecstun",102, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(1.25,1.75));
				CallACS("HellcoreFireMode",0,1);
			}
			Goto Ready;
	}
}

// Pyro Demon's Soul [Slot 5] (Weapon)
// Pyro Demon's Soul Weapon - Hellcore Weapon #11
class FireShot_Soul : FireShot 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FSHT A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			#### AAAAAA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			Loop;
	}
}
class FireShotCrisis_Soul : FireShotCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FSHT A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			Loop;
	}
}

class PyroBall_Soul : PyroBall
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			RBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### AAAABBBB 1 BRIGHT;
			Loop;
	}
}
class PyroBallCrisis_Soul : PyroBallCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			RBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 BRIGHT;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 BRIGHT;
			#### B 0 Bright A_GenerateCrisisParticle();
			#### BB 1 BRIGHT;
			#### B 0 Bright A_GenerateCrisisParticle();
			#### BB 1 BRIGHT;
			Loop;
	}
}

class PyroBlast_Soul : PyroBlast
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			SBLL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### ABCDEFGHIJ 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### A 0 BRIGHT A_SeekerMissile(0,2);
			Loop;
		Death:
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1_Soul",1,0,45,4);
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1_Soul",1,0,135,4);
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1_Soul",1,0,225,4);
			SBLL K 0 A_SpawnProjectile("FirebombExplosion1_Soul",1,0,315,4);
			SBLL LMNOPQRSTUVW 1 BRIGHT;
			Stop;
	}
}
class PyroBlastCrisis_Soul : PyroBlastCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			SBLL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AB 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### C 0 Bright A_GenerateCrisisParticle();
			#### CD 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### E 0 Bright A_GenerateCrisisParticle();
			#### EF 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### G 0 Bright A_GenerateCrisisParticle();
			#### GH 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### I 0 Bright A_GenerateCrisisParticle();
			#### IJ 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128);
			#### A 0 BRIGHT A_SeekerMissile(0,2);
			Loop;
		Death:
			#### K 0 A_SpawnProjectile("FirebombExplosion1Crisis_Soul",1,0,45,4);
			#### K 0 A_SpawnProjectile("FirebombExplosion1Crisis_Soul",1,0,135,4);
			#### K 0 A_SpawnProjectile("FirebombExplosion1Crisis_Soul",1,0,225,4);
			#### K 0 A_SpawnProjectile("FirebombExplosion1Crisis_Soul",1,0,315,4);
			#### LMNOPQRSTUVW 1 BRIGHT;
			Stop;
	}
}

class FirebombExplosion1_Soul : FirebombExplosion1
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FRME A 0;
			#### A 1 Bright;
			#### A 1 Bright;
			Loop;
		Death:
			#### A 0;
			#### A 0 A_StartSound("pyro/blastexplosion");
			#### A 3 Bright A_Explode(128,144,0);
			#### B 1 Bright A_Mushroom("Pyroball",8,MSF_DontHurt);
			#### B 2 Bright A_SpawnProjectile("FirebombExplosion2_Soul",25,0,180,4);
			#### CDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}
class FirebombExplosion1Crisis_Soul : FirebombExplosion1Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FRME A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### A 1 Bright;
			Loop;
		Death:
			#### A 0;
			#### A 0 A_StartSound("pyro/blastexplosion");
			#### A 3 Bright A_Explode((128 * CrisisMultiplier),144,0);
			#### B 1 Bright A_Mushroom("PyroballCrisis",8,MSF_DontHurt);
			#### B 2 Bright A_SpawnProjectile("FirebombExplosion2Crisis_Soul",25,0,180,4);
			#### CDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}

class FirebombExplosion2_Soul : FirebombExplosion2
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Death:
			#### A 0;
			#### A 0 A_StartSound("pyro/blastexplosion");
			#### A 3 Bright A_Explode(128,136,0);
			#### B 1 Bright;
			#### B 2 Bright A_SpawnProjectile("FirebombExplosion3_Soul",20,0,180,4);
			#### CDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}
class FirebombExplosion2Crisis_Soul : FirebombExplosion2Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FRME A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### A 1 Bright;
			Loop;
		Death:
			#### A 0;
			#### A 0 A_StartSound("pyro/blastexplosion");
			#### A 3 Bright A_Explode((128 * CrisisMultiplier),136,0);
			#### B 1 Bright;
			#### B 2 Bright A_SpawnProjectile("FirebombExplosion3Crisis_Soul",20,0,180,4);
			#### CDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}

class FirebombExplosion3_Soul : FirebombExplosion3
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Death:
			FRME A 0;
			FRME A 0 A_StartSound("pyro/blastexplosion");
			FRME A 3 Bright A_Explode(128,128,0);
			FRME BCDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}
class FirebombExplosion3Crisis_Soul : FirebombExplosion3Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FRME A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### A 1 Bright;
			Loop;
		Death:
			FRME A 0;
			FRME A 0 A_StartSound("pyro/blastexplosion");
			FRME A 3 Bright A_Explode((128 * CrisisMultiplier),128,0);
			FRME BCDEFGHIJKLMNOPQRS 3 Bright;
			Stop;
	}
}

class FallingComet_Soul : FallingComet
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	states
	{
		Spawn:
			COMT AAAABBBBCCCC 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			COMT D 3 BRIGHT A_SpawnItemEx("CometDeathGlow", 0, 0, 0, 0, 0, 0, 0, 128);
			COMT E 3 BRIGHT A_Explode(20,128,0);
			COMT E 0 A_SpawnItemEx("CometDeath", 0, 0, 0, 0, 0, 0, 0, 128);
			Stop;
	}
}
class FallingCometCrisis_Soul : FallingCometCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	states
	{
		Spawn:
			COMT A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);

			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);

			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128);
			Loop;
		Death:
			#### D 3 BRIGHT A_SpawnItemEx("CometDeathGlow", 0, 0, 0, 0, 0, 0, 0, 128);
			#### E 3 BRIGHT A_Explode((20 * CrisisMultiplier),128,0);
			#### E 0 A_SpawnItemEx("CometDeath", 0, 0, 0, 0, 0, 0, 0, 128);
			Stop;
	}
}

class RainCometNull_Soul : RainCometNull
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			RCMN A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 0 A_Jump(5,8);
			#### AAAAAA 1 A_Wander();
			#### A 8 A_SpawnProjectile("FallingComet_Soul",-24,random(0,128),frandom(0,360),2,frandom(0,-90));
			#### A 0 Bright { user_theta += 1; }
			#### A 0 Bright A_JumpIf(user_theta==32,"Death");
			Loop;
	}
}
class RainCometNullCrisis_Soul : RainCometNullCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			RCMN A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 0 A_Jump(5,8);
			#### AAAAAA 1 A_Wander();
			#### A 8 A_SpawnProjectile("FallingCometCrisis_Soul",-24,random(0,128),frandom(0,360),2,frandom(0,-90));
			#### A 0 Bright { user_theta += 1; }
			#### A 0 Bright A_JumpIf(user_theta==32,"Death");
			Loop;
	}
}
class EscapeExplosion_Soul : EscapeExplosion
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			NKXP A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_Mushroom("PyroBall_Soul",16,MSF_DontHurt);
			}
		Idle:
			#### BC 3 BRIGHT;
			#### D 3 BRIGHT A_Explode(50,192,0);
			#### EFGHIJKLMNOPQRSTUV 3 BRIGHT;
			Stop;
	}
}
class EscapeExplosionCrisis_Soul : EscapeExplosionCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			NKXP A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_Mushroom("PyroBallCrisis_Soul",16,MSF_DontHurt);
			}
		Idle:
			#### BC 3 BRIGHT;
			#### D 3 BRIGHT A_Explode((50 * CrisisMultiplier),192,0);
			#### EFGHIJKLMNOPQRSTUV 3 BRIGHT;
			Stop;
	}
}

class PyroDemonSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLK0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Pyro Demon's Soul: [Hellcore] Uses Pyro Demon attacks [alt-fire selects mode]";
		Inventory.PickupMessage "You got a Pyro Demon's Soul! \cx[Slot 5]\c-";
	}
	
	States
	{
		Spawn:
			HCSL K 1 bright NoDelay
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(10);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("PyroDemonSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(11);
			}
			Stop;
	}
}
class PyroDemonSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLK0"
		Tag "Pyro Demon's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Pyro Demon's Soul! \cx[Slot 5]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -2.2, 2.2;
		BaseHellcoreWeapon.bobxetimemul 0.217, 0.283;
		BaseHellcoreWeapon.bobxspeedmod 2.64;
		BaseHellcoreWeapon.bobxheightmod 4.45, 5.55;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -1.1, 1.1;
		BaseHellcoreWeapon.bobyspeedmod 8.275;
		BaseHellcoreWeapon.bobyheightmod 7.175, 8.825;
		
		BaseHellcoreWeapon.randomsounds "pyro/see", "pyro/pain", "pyro/death", "pyro/idle", "pyro/see", "pyro/pain", "pyro/death", "pyro/idle";
	}

	action void A_HellSoulPyroPort1()
	{
		double angle1 = 0.0;
		double angle2 = 0.0;
		double angle3 = 180.0;
		double angle4 = 45.0;
		double angle5 = 135.0;
		double angle6 = 225.0;
		double angle7 = 315.0;
		double offsetrand = frandom(0.5,1.5);
		double offset1 = 45.0 * offsetrand;
		double offset2 = 22.5 * offsetrand;
		if (CountInv("SpreaderAura2"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();

				A_SetAngle(angle-angle1); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,0.0,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle1);
				A_SetAngle(angle-angle2); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle2);
				A_SetAngle(angle-angle3); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle3);
				A_SetAngle(angle-angle4); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle4);
				A_SetAngle(angle-angle5); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle5);
				A_SetAngle(angle-angle6); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle6);
				A_SetAngle(angle-angle7); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle6);
			}
			else
			{
				A_SetAngle(angle-angle1); A_FireProjectile("EscapeExplosion_Soul",0.0,0,0.0,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle1);
				A_SetAngle(angle-angle2); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle2);
				A_SetAngle(angle-angle3); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle3);
				A_SetAngle(angle-angle4); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle4);
				A_SetAngle(angle-angle5); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle5);
				A_SetAngle(angle-angle6); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle6);
				A_SetAngle(angle-angle7); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset2,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle6);
			}
		}
		else
		if (CountInv("SpreaderAura1"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_SetAngle(angle-angle1); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,0.0,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle1);
				A_SetAngle(angle-angle2); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle2);
				A_SetAngle(angle-angle3); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle3);
			}
			else
			{
				A_SetAngle(angle-angle1); A_FireProjectile("EscapeExplosion_Soul",0.0,0,0.0,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle1);
				A_SetAngle(angle-angle2); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle2);
				A_SetAngle(angle-angle3); A_FireProjectile("EscapeExplosion_Soul",0.0,0,offset1,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle3);
			}
		}
		else
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_SetAngle(angle-angle1); A_FireProjectile("EscapeExplosionCrisis_Soul",0.0,0,0.0,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle1);
			}
			else
			{
				A_SetAngle(angle-angle1); A_FireProjectile("EscapeExplosion_Soul",0.0,0,0.0,0,FPF_NOAUTOAIM,0.0); A_SetAngle(angle+angle1);
			}
		}
	}
	
	action void A_HellSoulPyroRainAtk(int heatamt = 250)
	{
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",106) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1); // +2.5% Hellcore Heat, Deal Damage if already above 100% Heat
		CallACS("StartTensionCountDown");
		A_StartSound("caco/attack");

		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",  0,0,"",0,0,0,0); 
			A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul", 90,0,"",0,0,0,0); 
			A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",180,0,"",0,0,0,0); 
			A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",270,0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",106) >= 4) 
			{
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",0-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",0+15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",90-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",90+15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",180-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",180+15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",270-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",270+15,0,"",0,0,0,0); 
			}
			if (CallACS("MiscVarCheckDECORATE",106) >= 7) 
			{
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",0-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",0+30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",90-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",90+30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",180-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",180+30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",270-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNullCrisis_Soul",270+30,0,"",0,0,0,0); 
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("RainCometNull_Soul",  0,0,"",0,0,0,0); 
			A_SpreadAuraFireProjectile("RainCometNull_Soul", 90,0,"",0,0,0,0); 
			A_SpreadAuraFireProjectile("RainCometNull_Soul",180,0,"",0,0,0,0); 
			A_SpreadAuraFireProjectile("RainCometNull_Soul",270,0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",106) >= 4) 
			{
				A_SpreadAuraFireProjectile("RainCometNull_Soul",0-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",0+15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",90-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",90+15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",180-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",180+15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",270-15,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",270+15,0,"",0,0,0,0); 
			}
			if (CallACS("MiscVarCheckDECORATE",106) >= 7) 
			{
				A_SpreadAuraFireProjectile("RainCometNull_Soul",0-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",0+30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",90-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",90+30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",180-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",180+30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",270-30,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("RainCometNull_Soul",270+30,0,"",0,0,0,0); 
			}
		}
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 K 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL K 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				if (CallACS("HellcoreFireMode",1,2) == 0) // Pyromatic Shot
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 1) // Pyroball
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 2) // Pyromatic Firebomb
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 G 4 bright
			{
				A_HLCRFire4Tics(1);

				if (CallACS("HellcoreFireMode",1,2) == 0) // Pyromatic Shot
				{
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"FireShot_Soul","FireShotCrisis_Soul",106,true,false,-4.0);
					A_HellSoulFire1("caco/attack",350,"FireShot_Soul","FireShotCrisis_Soul",106,true,true,0.0);
					A_HellSoulFire1("",0,"FireShot_Soul","FireShotCrisis_Soul",106,true,false,4.0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 1) // Pyroball
				{
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("caco/attack",450,"PyroBlast_Soul","PyroBlastCrisis_Soul",106,true,true,0.0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 2) // Pyromatic Firebomb
				{
					A_HellSoulSpark();
					A_HellSoulPyroRainAtk(250);
				}
			}
			HCL1 H 4 bright
			{
				if (CallACS("HellcoreFireMode",1,2) == 0) // Pyromatic Shot
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 1) // Pyroball
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 2) // Pyromatic Firebomb
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				if (CallACS("HellcoreFireMode",1,2) == 0) // Pyromatic Shot
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 1) // Pyroball
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 2) // Pyromatic Firebomb
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 K 4 bright
			{
				A_HLCRFire4Tics(1);

				if (CallACS("HellcoreFireMode",1,2) == 0) // Pyromatic Shot
				{
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"FireShot_Soul","FireShotCrisis_Soul",106,true,false,-4.0);
					A_HellSoulFire1("caco/attack",350,"FireShot_Soul","FireShotCrisis_Soul",106,true,true,0.0);
					A_HellSoulFire1("",0,"FireShot_Soul","FireShotCrisis_Soul",106,true,false,4.0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 1) // Pyroball
				{
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("caco/attack",450,"PyroBlast_Soul","PyroBlastCrisis_Soul",106,true,true,0.0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 2) // Pyromatic Firebomb
				{
					A_HellSoulSpark();
					A_HellSoulPyroRainAtk(250);
				}
			}
			HCL1 L 4 bright
			{
				if (CallACS("HellcoreFireMode",1,2) == 0) // Pyromatic Shot
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 1) // Pyroball
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,2) == 2) // Pyromatic Firebomb
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
			
		
		// Alt Fire
		AltFire:
			HCL1 MN 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 N 0
			{
				if (random(1,2) == 1) { return resolvestate("AltFire2"); }
				else { return resolvestate("AltFire1"); }
				return resolvestate(null);
			}
		AltFire1:
			HCL1 O 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim1:
			HCL1 P 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 Q 0 bright
			{
				A_UnSetShootable();
				A_SetInvulnerable();
				int heatamt = 800;
				if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",106) - 1) * 0.125));
				A_IncreaseHellcoreHeat(heatamt,1); // +8.0% Hellcore Heat, Deal Damage if already above 100% Heat
				CallACS("StartTensionCountDown");
				A_HellCoreCrisisCheck();
				A_StartSound("pyro/tele",101);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 
			{
				A_Wander();
			}
			HCL1 Q 0 bright
			{
				A_StartSound("pyro/tele",101);
				A_HellSoulPyroPort1();
			}
			HCL1 Q 12 bright
			{
				A_HellSoulSpark();
				A_HLCRFire12Tics(1);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 
			{
				A_Wander();
			}
			HCL1 Q 0 bright
			{
				A_StartSound("pyro/tele",101);
				A_HellSoulPyroPort1();
			}
			HCL1 R 4 bright
			{
				A_HLCRFire4Tics(0);
				A_UnSetInvulnerable();
				A_SetShootable();
			}
			HCL1 O 0
			{
				A_HLCRSoulRefire(4);
			}
			HCL1 O 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFire2:
			HCL1 S 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim2:
			HCL1 T 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 U 0 bright
			{
				A_UnSetShootable();
				A_SetInvulnerable();
				int heatamt = 800;
				if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",106) - 1) * 0.125));
				A_IncreaseHellcoreHeat(heatamt,1); // +8.0% Hellcore Heat, Deal Damage if already above 100% Heat
				CallACS("StartTensionCountDown");
				A_HellCoreCrisisCheck();
				A_StartSound("pyro/tele",101);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 
			{
				A_Wander();
			}
			HCL1 U 0 bright
			{
				A_StartSound("pyro/tele",101);
				A_HellSoulPyroPort1();
			}
			HCL1 U 12 bright 
			{
				A_HellSoulSpark();
				A_HLCRFire12Tics(1);
			}
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 
			{
				A_Wander();
			}
			HCL1 U 0 bright
			{
				A_StartSound("pyro/tele",101);
				A_HellSoulPyroPort1();
			}
			HCL1 V 4 bright
			{
				A_HLCRFire4Tics(0);
				A_UnSetInvulnerable();
				A_SetShootable();
			}
			HCL1 S 0
			{
				A_HLCRSoulRefire(3);
			}
			HCL1 S 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFireEnd:
			HCL1 NM 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;

		// Fire Mode
		User4:
			HCL1 A 5 
			{
				A_StartSound("elecstun",102, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(1.25,1.75));
				CallACS("HellcoreFireMode",0,2);
			}
			Goto Ready;
	}
}

// Death Incarnate's Soul [Slot 6] (Weapon)
// Death Incarnate's Soul Weapon - Hellcore Weapon #12
class DIPuff_Soul : DIPuff 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	} 
}

class IncarnateSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLL0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Death Incarnate's Soul: [Hellcore] Fires off the Death Incarnate's glare";
		Inventory.PickupMessage "You got an Death Incarnate's Soul! \cx[Slot 6]\c-";
	}

	States
	{
		Spawn:
			HCSL L 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(11);
			}
			Loop;

		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("IncarnateSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(12);
			}
			Stop;
	}
}

class IncarnateSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLL0"
		Tag "Death Incarnate's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got an Death Incarnate's Soul! \cx[Slot 6]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -0.75, 0.75;
		BaseHellcoreWeapon.bobxetimemul 0.2375, 0.2625;
		BaseHellcoreWeapon.bobxspeedmod 1.175;
		BaseHellcoreWeapon.bobxheightmod 4.8, 5.2;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.375, 0.375;
		BaseHellcoreWeapon.bobyspeedmod 8.075;
		BaseHellcoreWeapon.bobyheightmod 7.75, 8.25;
		
		BaseHellcoreWeapon.randomsounds "monster/incsit", "dincarnate/pain", "monster/incdth", "monster/incact", "monster/incsit", "dincarnate/pain", "monster/incdth", "monster/incact";
	}
	
	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 L 0 bright 
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL L 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);

				A_HellSoulFire2("monster/incatk",360,"DIPuff_Soul",107,true,true);
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);

				A_HellSoulFire2("monster/incatk",360,"DIPuff_Soul",107,true,true);
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Archvile's Soul [Slot 6] (Weapon)
// Revive Projectiles [used by monsters]
class ReviveProj : AetheriusProjectileZSC
{
	default
	{
		//+FLOAT;
		//+NOBLOCKMONST;
		//+NOGRAVITY;
		+FRIENDLY;
		+NOCLIP;
		Radius 50;
		Height 5;
		PROJECTILE;
		RenderStyle "None";
		Speed 7;
	}
	
	States
	{
		Spawn:
			TNT1 AAAAA 6 
			{
				A_Chase(null,null,CHF_RESURRECT);
				//A_VileChase();
			}
			Stop;
		Death:
			TNT1 A 1;
			Stop;
		Heal:
			TNT1 A 1;
			Stop;
	}
}
class ReviveProj2 : ReviveProj
{
	default
	{
		//-FRIENDLY;
	}
}

class ArchvileFlame_Soul : ArchvileFlame
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FIRE A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchvileSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
			goto Idle;
	}
}
class ArchvileFlameCrisis_Soul : ArchvileFlameCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FIRE A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchvileSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
			goto Idle;
	}
}

class ArchvileSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLM0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Archvile's Soul: [Hellcore] Uses Archvile's Immolation and Resurrection Abilities.";
		Inventory.PickupMessage "You got the Arch Vile's Soul! \cx[Slot 6]\c-";
	}

	States
	{
		Spawn:
			HCSL M 1 NoDelay bright 
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(12);
			}
			Loop;

		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("ArchvileSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(13);
			}
			Stop;
	}
}

class ArchvileSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLM0"
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got an Archvile's Soul! \cx[Slot 6]\c-";
		Tag "Archvile's Soul";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.0625, 1.0625;
		BaseHellcoreWeapon.bobxetimemul 0.235, 0.265;
		BaseHellcoreWeapon.bobxspeedmod 1.2;
		BaseHellcoreWeapon.bobxheightmod 4.68, 5.32;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.53125, 0.53125;
		BaseHellcoreWeapon.bobyspeedmod 8.1;
		BaseHellcoreWeapon.bobyheightmod 7.675, 8.325;
		
		BaseHellcoreWeapon.randomsounds "vile/sight", "vile/pain", "vile/death", "vile/active", "vile/sight", "vile/pain", "vile/death", "vile/active";
	}
	
	action void A_HellSoulVileTarget(string type1 = "ArchvileFire", string typecrisis = "ArchvileFireCrisis")
	{
		CallACS("StartTensionCountDown");
		if (CountInv("SpreaderAura2"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
			}
			else
			{
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
			}
		}
		else
		if (CountInv("SpreaderAura1"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
			}
			else
			{
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
			}
		}
		else
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_VileTarget(typecrisis);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
			}
			else
			{
				A_VileTarget(type1);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
			}
		}
	}
	
	action void A_HellSoulVileAttack()
	{
		int CrisisMultiplier = CallACS("CrisisMultiplier");
		CallACS("StartTensionCountDown");
		if (CountInv("SpreaderAura2"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			else
			{
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
		}
		else
		if (CountInv("SpreaderAura1"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			else
			{
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
		}
		else
		{
			if (A_HellCoreCrisisCheck())
			{
				A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),560,8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			else
			{
				A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
				{
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
				{
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",20,70,70,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
		}
	}

	action void A_HellSoulVileFlameJet(int heatamt = 375)
	{
		A_StartSound("archvile/firewall",101);
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",108) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1);
		CallACS("StartTensionCountDown");

		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("ArchvileFlameCrisis_Soul",0,0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("ArchvileFlameCrisis_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("ArchvileFlameCrisis_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("ArchvileFlameCrisis_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("ArchvileFlameCrisis_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("ArchvileFlame_Soul",0,0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",108) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("ArchvileFlame_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("ArchvileFlame_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",108) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("ArchvileFlame_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("ArchvileFlame_Soul",0,0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
	}
	
	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 M 0 bright 
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL M 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		// Main Attack
		Fire:
			HCL1 C 0
			{
				if (CallACS("HellcoreFireMode",1,6) == 1) // If Fire Jet Mode is set
				{
					A_StartSound("vile/firestrt");
				}
				if (CallACS("HellcoreFireMode",1,6) == 0) // If Immolation Mode is set
				{
					A_HellSoulVileChase();
					if (!target)
					{
						A_StartSound("inv_fail",104,CHANF_NOSTOP);
						return resolvestate("Ready");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				if (CallACS("HellcoreFireMode",1,6) == 0) // If Immolation Mode is set
				{
					int heatamt = 500;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",108) - 1) * 0.125));
					A_Light2();
					A_IncreaseHellcoreHeat(heatamt,1);
					A_HellSoulVileTarget("ArchvileFireFast","ArchvileFireFastCrisis");
				}
				if (CallACS("HellcoreFireMode",1,6) == 1) // If Fire Jet Mode is set
				{
					A_Light2();
					A_HellSoulVileFlameJet(625);
				}

				A_HLCRFire4Tics(0);
			}
			HCL1 G 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);

				if (CallACS("HellcoreFireMode",1,6) == 0) // If Immolation Mode is set
				{
					A_HellSoulVileAttack();
				}
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				if (CallACS("HellcoreFireMode",1,6) == 0) // If Immolation Mode is set
				{
					A_HellSoulVileChase();
					if (!target)
					{
						A_StartSound("inv_fail",104,CHANF_NOSTOP);
						return resolvestate("Ready");
					}
					else
					{
						A_HLCRSoulRefire(2);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				if (CallACS("HellcoreFireMode",1,6) == 1) // If Flame Jet Mode is set
				{
					A_HLCRSoulRefire(2);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				if (CallACS("HellcoreFireMode",1,6) == 0) // If Immolation Mode is set
				{
					int heatamt = 500;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",108) - 1) * 0.125));
					A_Light2();
					A_IncreaseHellcoreHeat(heatamt,1);
					A_HellSoulVileTarget("ArchvileFireFast","ArchvileFireFastCrisis");
				}
				if (CallACS("HellcoreFireMode",1,6) == 1) // If Fire Jet Mode is set
				{
					A_Light2();
					A_HellSoulVileFlameJet(625);
				}

				A_HLCRFire4Tics(0);
			}
			HCL1 K 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);

				if (CallACS("HellcoreFireMode",1,6) == 0) // If Immolation Mode is set
				{
					A_HellSoulVileAttack();
				}
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				if (CallACS("HellcoreFireMode",1,6) == 0) // If Immolation Mode is set
				{
					A_HellSoulVileChase();
					if (!target)
					{
						A_StartSound("inv_fail",104,CHANF_NOSTOP);
						return resolvestate("Ready");
					}
					else
					{
						A_HLCRSoulRefire(1);
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				if (CallACS("HellcoreFireMode",1,6) == 1) // If Flame Jet Mode is set
				{
					A_HLCRSoulRefire(1);
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
			
		// Fire Mode
		User4:
			HCL1 A 5 
			{
				A_StartSound("elecstun",102, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(1.25,1.75));
				CallACS("HellcoreFireMode",0,6);
			}
			Goto Ready;

		// Alt Fire
		AltFire:
			HCL1 MN 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 N 0
			{
				if (random(1,2) == 1) { return resolvestate("AltFire2"); }
				else { return resolvestate("AltFire1"); }
				return resolvestate(null);
			}
		AltFire1:
			HCL1 O 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim1:
			HCL1 P 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 Q 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);

				A_StartSound("NecroSummon",101);
				int heatamt = 834;
				if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",108) - 1) * 0.125));
				A_IncreaseHellcoreHeat(heatamt,1); // +8.34% Hellcore Heat, Deal Damage if already above 100% Heat

				A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
				if (CallACS("StatCheck",0) > 60)
				{
					A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",72,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",144,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",216,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",288,0,"",0,0,0,0);
				}
			}
			HCL1 R 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 O 0
			{
				A_HLCRSoulRefire(4);
			}
			HCL1 O 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFire2:
			HCL1 S 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim2:
			HCL1 T 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 U 4 bright 
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);

				A_StartSound("NecroSummon",101);
				int heatamt = 834;
				if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",108) - 1) * 0.125));
				A_IncreaseHellcoreHeat(heatamt,1); // +8.34% Hellcore Heat, Deal Damage if already above 100% Heat

				A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
				if (CallACS("StatCheck",0) > 60)
				{
					A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",72,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",144,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",216,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",288,0,"",0,0,0,0);
				}
			}
			HCL1 V 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 S 0
			{
				A_HLCRSoulRefire(3);
			}
			HCL1 S 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFireEnd:
			HCL1 NM 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Diabloist's Soul [Slot 6] (Weapon)
// Diabloist's Soul Weapon - Hellcore Weapon #14
class DFlare_Soul : DFlare 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			#### AA 1 Bright;
			#### B 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			#### BB 1 Bright;
			Loop;
	}
}
class DFlareCrisis_Soul : DFlareCrisis 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			#### A 1 Bright;
			#### A 1 Bright A_GenerateCrisisParticle();
			#### B 1 Bright A_SpawnProjectile("MFlareFX",0,0,0,0);
			#### B 1 Bright A_GenerateCrisisParticle();
			#### B 1 Bright;
			Loop;
	}
}

class DTracer_Soul : DTracer 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			TNT1 A 1 Bright A_SeekerMissile (10,15);
			TNT1 A 0 Bright A_Countdown();
			TNT1 A 0 Bright A_SpawnProjectile("DTracerPuff_Soul",0,0,0,0);
			Loop;
	}
}
class DTracerCrisis_Soul : DTracerCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			TNT1 A 1 Bright A_SeekerMissile(10,15);
			TNT1 A 0 Bright A_Countdown();
			TNT1 A 0 Bright A_SpawnProjectile("DTracerPuffCrisis_Soul",0,0,0,0);
			Loop;
	}
}

class DMissile_Soul : DMissile
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### AAAA 1 Bright;
			#### A 1 A_CFlamePuff();
			Goto Death+1;
		Death:
			#### A 1 Bright A_CFlameMissile("DMissileCircle_Soul");
			#### ABC 3 Bright;
			#### D 4 Bright;
			#### E 3 Bright;
			#### F 4 Bright;
			#### G 3 Bright;
			#### H 4 Bright;
			#### I 3 Bright;
			#### J 4 Bright;
			#### K 3 Bright;
			#### L 4 Bright;
			#### M 3 Bright;
			Stop;
	}
}
class DMissileCrisis_Soul : DMissileCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 Bright;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### AA 1 Bright;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 A_CFlamePuff();
			Goto Death+1;
		Death:
			#### A 1 Bright A_CFlameMissile("DMissileCircleCrisis_Soul");
			#### ABC 3 Bright;
			#### D 4 Bright;
			#### E 3 Bright;
			#### F 4 Bright;
			#### G 3 Bright;
			#### H 4 Bright;
			#### I 3 Bright;
			#### J 4 Bright;
			#### K 3 Bright;
			#### L 4 Bright;
			#### M 3 Bright;
			Stop;
	}
}

class DTracerPuff_Soul : DTracerPuff
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FTRA A 0;
			#### A 1 Bright A_Explode(4,8,0);
			#### A 1 Bright;
			#### A 1 Bright;
			#### B 1 Bright A_Explode(4,8,0);
			#### B 1 Bright;
			#### B 1 Bright;
			#### C 1 Bright A_Explode(4,8,0);
			#### C 1 Bright;
			#### C 1 Bright;
			#### D 1 Bright A_Explode(4,8,0);
			#### D 1 Bright;
			#### D 1 Bright;
			#### E 1 Bright A_Explode(4,8,0);
			#### E 1 Bright;
			#### E 1 Bright;
			#### F 1 Bright A_Explode(4,8,0);
			#### F 1 Bright;
			#### F 1 Bright;
			#### G 1 Bright A_Explode(4,8,0);
			#### G 1 Bright;
			#### G 1 Bright;
			#### H 1 Bright A_Explode(4,8,0);
			#### H 1 Bright;
			#### H 1 Bright;
			#### I 1 Bright A_Explode(4,8,0);
			#### I 1 Bright;
			#### I 1 Bright;
			#### J 1 Bright A_Explode(4,8,0);
			#### J 1 Bright;
			#### J 1 Bright;
			Stop;
	}
}
class DTracerPuffCrisis_Soul : DTracerPuffCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FTRA A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### A 1 Bright;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### B 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 Bright;
			#### B 1 Bright;
			#### B 0 Bright A_GenerateCrisisParticle();
			#### C 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### C 1 Bright;
			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 Bright;
			#### D 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### D 0 Bright A_GenerateCrisisParticle();
			#### D 1 Bright;
			#### D 1 Bright;
			#### E 0 Bright A_GenerateCrisisParticle();
			#### E 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### E 1 Bright;
			#### E 0 Bright A_GenerateCrisisParticle();
			#### E 1 Bright;
			#### F 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### F 0 Bright A_GenerateCrisisParticle();
			#### F 1 Bright;
			#### F 1 Bright;
			#### G 0 Bright A_GenerateCrisisParticle();
			#### G 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### G 1 Bright;
			#### G 0 Bright A_GenerateCrisisParticle();
			#### G 1 Bright;
			#### H 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### H 0 Bright A_GenerateCrisisParticle();
			#### H 1 Bright;
			#### H 1 Bright;
			#### H 0 Bright A_GenerateCrisisParticle();
			#### I 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### I 1 Bright;
			#### I 0 Bright A_GenerateCrisisParticle();
			#### I 1 Bright;
			#### J 1 Bright A_Explode((4 * CrisisMultiplier),8,0);
			#### J 0 Bright A_GenerateCrisisParticle();
			#### J 1 Bright;
			#### J 1 Bright;
			Stop;
	}
}

class DMissileCircle_Soul : DMissileCircle 
{ 
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
}
class DMissileCircleCrisis_Soul : DMissileCircleCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			CFCF A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### A 1 Bright;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### A 1 Bright;
			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 Bright A_CFlameRotate();
			#### B 1 Bright;
			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 Bright;
			#### C 1 Bright;
			#### D 0 Bright A_GenerateCrisisParticle();
			#### D 1 Bright;
			#### E 1 Bright;
			#### E 0 Bright A_GenerateCrisisParticle();
			#### E 1 Bright;
			#### F 1 Bright A_CFlameRotate();
			#### F 0 Bright A_GenerateCrisisParticle();
			#### F 1 Bright;
			#### G 1 Bright;
			#### G 0 Bright A_GenerateCrisisParticle();
			#### H 1 Bright;
			#### H 1 Bright;
			#### I 0 Bright A_GenerateCrisisParticle();
			#### I 1 Bright;
			#### I 1 Bright;
			#### J 0 Bright A_GenerateCrisisParticle();
			#### J 1 Bright A_CFlameRotate();
			#### K 1 Bright;
			#### K 0 Bright A_GenerateCrisisParticle();
			#### K 1 Bright;
			#### L 1 Bright;
			#### L 0 Bright A_GenerateCrisisParticle();
			#### L 1 Bright;
			#### L 1 Bright;
			#### L 0 Bright A_GenerateCrisisParticle();
			#### M 1 Bright;
			#### M 1 Bright;
			#### M 0 Bright A_GenerateCrisisParticle();
			#### M 1 Bright;
			#### N 1 Bright A_CFlameRotate();
			#### N 0 Bright A_GenerateCrisisParticle();
			#### N 1 Bright;
			#### O 1 Bright;
			#### O 0 Bright A_GenerateCrisisParticle();
			#### O 1 Bright;
			#### O 1 Bright;
			#### P 0 Bright A_GenerateCrisisParticle();
			#### P 1 Bright;
			#### P 1 Bright;
			Stop;
		Death:
			#### QR 3 Bright;
			#### S 3 Bright A_Explode((20 * CrisisMultiplier),20,0);
			#### TUVWXYZ 3 Bright;
			Stop;
	}
}

class DFire_Soul : DFire
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			HLFR A 1 Bright
			{
				A_StartFire();
				A_Explode(4,32,0);
			}
			HLFR BABCB 1 Bright
			{
				A_Fire();
				A_Explode(4,32,0);
			}
			HLFR CBCDCDCDEDED 1 Bright
			{
				A_Fire();
				A_Explode(5,32,0);
			}
			HLFR E 1 Bright
			{
				A_FireCrackle();
				A_Explode(4,32,0);
			}
			HLFR FEF 1 Bright
			{
				A_Fire();
				A_Explode(3,32,0);
			}
			HLFR EFG 1 Bright
			{
				A_Fire();
				A_Explode(2,32,0);
			}
			HLFR HGHGH 1 Bright
			{
				A_Fire();
				A_Explode(1,32,0);
			}
			Stop;
	}
}
class DFireCrisis_Soul : DFireCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			HLFR A 1 Bright
			{
				A_StartFire();
				A_Explode((4 * CrisisMultiplier),32,0);
			}
			HLFR BABCB 1 Bright
			{
				A_Fire();
				A_Explode((4 * CrisisMultiplier),32,0);
			}
			HLFR CBCDCDCDEDED 1 Bright
			{
				A_Fire();
				A_Explode((5 * CrisisMultiplier),32,0);
			}
			HLFR E 1 Bright
			{
				A_FireCrackle();
				A_Explode((4 * CrisisMultiplier),32,0);
			}
			HLFR FEF 1 Bright
			{
				A_Fire();
				A_Explode((3 * CrisisMultiplier),32,0);
			}
			HLFR EFG 1 Bright
			{
				A_Fire();
				A_Explode((2 * CrisisMultiplier),32,0);
			}
			HLFR HGHGH 1 Bright
			{
				A_Fire();
				A_Explode((1 * CrisisMultiplier),32,0);
			}
			Stop;
	}
}

class DiabloistSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLN0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Diabloist's Soul: [Hellcore] Uses Diabloist attacks [alt-fire selects mode]";
		Inventory.PickupMessage "You got a Diabloist's Soul! \cx[Slot 6]\c-";
	}
	States
	{
		Spawn:
			HCSL N 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(13);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("DiabloistSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(14);
			}
			Stop;
	}
}
class DiabloistSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLN0"
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Diabloist's Soul! \cx[Slot 6]\c-";
		Tag "Diabloist's Soul";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.1875, 1.1875;
		BaseHellcoreWeapon.bobxetimemul 0.2325, 0.2675;
		BaseHellcoreWeapon.bobxspeedmod 1.3;
		BaseHellcoreWeapon.bobxheightmod 4.68, 5.32;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.59375, 0.59375;
		BaseHellcoreWeapon.bobyspeedmod 8.3;
		BaseHellcoreWeapon.bobyheightmod 7.65, 8.35;
		
		BaseHellcoreWeapon.randomsounds "monster/diasit", "monster/diapai", "monster/diadth", "monster/diaact", "monster/diasit", "monster/diapai", "monster/diadth", "monster/diaact";
	}
	
	action void A_HellSoulDiabTarget(string type1 = "ArchvileFire", string typecrisis = "ArchvileFireCrisis")
	{
		CallACS("StartTensionCountDown");
		if (CountInv("SpreaderAura2"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
			}
			else
			{
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
			}
		}
		else
		if (CountInv("SpreaderAura1"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				A_VileTarget(typecrisis);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
			}
			else
			{
				A_VileTarget(type1);
				A_VileTarget(type1);
				A_VileTarget(type1);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
			}
		}
		else
		{
			if (A_HellCoreCrisisCheck())
			{
				A_PlayCrisisAtkSound();
				A_VileTarget(typecrisis);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileTarget(typecrisis);
					A_VileTarget(typecrisis);
				}
			}
			else
			{
				A_VileTarget(type1);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileTarget(type1);
					A_VileTarget(type1);
				}
			}
		}
	}
	
	action void A_HellSoulDiabAttack5(int heatamt = 600)
	{
		A_StartSound("weapons/firbfi",101);
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1); // +6.0% Hellcore Heat, Deal Damage if already above 100% Heat
		CallACS("StartTensionCountDown");

		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"",-40,0,0,0); 
			A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"", 40,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracerCrisis_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"",-40,0,0,0); 
			A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"", 40,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"",-40,0,0,0); 
				A_SpreadAuraFireProjectile("DTracer_Soul",0,0,"", 40,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
	}

	action void A_HellSoulDiabAttack4(int heatamt = 450)
	{
		A_StartSound("weapons/firbfi",101);
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1); // +4.5% Hellcore Heat, Deal Damage if already above 100% Heat
		CallACS("StartTensionCountDown");

		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissileCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DMissile_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
	}

	action void A_HellSoulDiabAttack3(int heatamt = 63)
	{
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",108) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1); // +0.63% Hellcore Heat, Deal Damage if already above 100% Heat
		CallACS("StartTensionCountDown");
		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlareCrisis_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("DFlare_Soul",frandom(-4.0,4.0),0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
	}

	action void A_HellSoulDiabAttack()
	{
		int CrisisMultiplier = CallACS("CrisisMultiplier");
		CallACS("StartTensionCountDown");
		if (CountInv("SpreaderAura2"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			else
			{
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
		}
		else
		if (CountInv("SpreaderAura1"))
		{
			if (A_HellCoreCrisisCheck())
			{
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			else
			{
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
		}
		else
		{
			if (A_HellCoreCrisisCheck())
			{
				A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),1120,12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			else
			{
				A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
				{
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
				{
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
		}
	}
	
	action void A_HellSoulDiabGravAtk(int heatamt = 1250)
	{
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1); // +12.5% Hellcore Heat, Deal Damage if already above 100% Heat
		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("GravityHPBall",  0,0,"",0,0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",109) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",109) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SpreadAuraFireProjectile("GravityHPBall", 0,0,"",0,0,0,0); 
				A_SetAngle(angle-30);
			}
		}
	}
	
	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 N 0 bright 
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL N 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		// Main Attack
		Fire:
			HCL1 C 0
			{
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HellSoulVileChase();
					if (!target)
					{
						A_StartSound("inv_fail",104,CHANF_NOSTOP);
						return resolvestate("Ready");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				if (CallACS("HellcoreFireMode",1,3) == 0) // If Gravity Glare Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HLCRFire3Tics(0);
					
					A_StartSound("vile/start");
					int heatamt = 600;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
					A_IncreaseHellcoreHeat(heatamt,1);
					A_Light2();
					A_HellSoulDiabTarget("DFire_Soul","DFireCrisis_Soul");
				}
				if (CallACS("HellcoreFireMode",1,3) == 2) // If Fire Thrower Mode is set
				{
					A_HLCRFire2Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 3) // If Fire Blast (aka Cleric's FlameStorm 2.0) Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 4) // If Snakes of Fire Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 G 4 bright
			{
				if (CallACS("HellcoreFireMode",1,3) == 0) // If Gravity Glare Mode is set
				{
					A_HLCRFire8Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabGravAtk(1250);
				}
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HLCRFire4Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabAttack();
				}
				if (CallACS("HellcoreFireMode",1,3) == 2) // If Fire Thrower Mode is set
				{
					A_HLCRFire2Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulDiabAttack3(63);
				}
				if (CallACS("HellcoreFireMode",1,3) == 3) // If Fire Blast (aka Cleric's FlameStorm 2.0) Mode is set
				{
					A_HLCRFire4Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabAttack4(450);
				}
				if (CallACS("HellcoreFireMode",1,3) == 4) // If Snakes of Fire Mode is set
				{
					A_HLCRFire4Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabAttack5(600);
				}
			}
			HCL1 H 4 bright
			{
				if (CallACS("HellcoreFireMode",1,3) == 0) // If Gravity Glare Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 2) // If Fire Thrower Mode is set
				{
					A_HLCRFire2Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 3) // If Fire Blast (aka Cleric's FlameStorm 2.0) Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 4) // If Snakes of Fire Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 E 0
			{
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HellSoulVileChase();
					if (!target)
					{
						A_StartSound("inv_fail",104,CHANF_NOSTOP);
						return resolvestate("Ready");
					}
					else
					{
						A_HLCRSoulRefire(2);
					}
					return resolvestate(null);
				}
				else
				{
					A_HLCRSoulRefire(2);
				}
				return resolvestate(null);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				if (CallACS("HellcoreFireMode",1,3) == 0) // If Gravity Glare Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HLCRFire3Tics(0);
					
					A_StartSound("vile/start");
					int heatamt = 600;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
					A_IncreaseHellcoreHeat(heatamt,1);
					A_Light2();
					A_HellSoulDiabTarget("DFire_Soul","DFireCrisis_Soul");
				}
				if (CallACS("HellcoreFireMode",1,3) == 2) // If Fire Thrower Mode is set
				{
					A_HLCRFire2Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 3) // If Fire Blast (aka Cleric's FlameStorm 2.0) Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 4) // If Snakes of Fire Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 K 4 bright
			{
				if (CallACS("HellcoreFireMode",1,3) == 0) // If Gravity Glare Mode is set
				{
					A_HLCRFire8Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabGravAtk(1250);
				}
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HLCRFire4Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabAttack();
				}
				if (CallACS("HellcoreFireMode",1,3) == 2) // If Fire Thrower Mode is set
				{
					A_HLCRFire2Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulDiabAttack3(63);
				}
				if (CallACS("HellcoreFireMode",1,3) == 3) // If Fire Blast (aka Cleric's FlameStorm 2.0) Mode is set
				{
					A_HLCRFire4Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabAttack4(450);
				}
				if (CallACS("HellcoreFireMode",1,3) == 4) // If Snakes of Fire Mode is set
				{
					A_HLCRFire4Tics(1);

					A_HellSoulSpark();
					A_HellSoulDiabAttack5(600);
				}
			}
			HCL1 L 4 bright
			{
				if (CallACS("HellcoreFireMode",1,3) == 0) // If Gravity Glare Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HLCRFire3Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 2) // If Fire Thrower Mode is set
				{
					A_HLCRFire2Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 3) // If Fire Blast (aka Cleric's FlameStorm 2.0) Mode is set
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,3) == 4) // If Snakes of Fire Mode is set
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 I 0
			{
				if (CallACS("HellcoreFireMode",1,3) == 1) // If Immolation Mode is set
				{
					A_HellSoulVileChase();
					if (!target)
					{
						A_StartSound("inv_fail",104,CHANF_NOSTOP);
						return resolvestate("Ready");
					}
					else
					{
						A_HLCRSoulRefire(2);
					}
					return resolvestate(null);
				}
				else
				{
					A_HLCRSoulRefire(2);
				}
				return resolvestate(null);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
			
		// Fire Mode
		User4:
			HCL1 A 5 
			{
				A_StartSound("elecstun",102, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(1.25,1.75));
				CallACS("HellcoreFireMode",0,3);
			}
			Goto Ready;
		
		
		// Alt Fire
		AltFire:
			HCL1 MN 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 N 0
			{
				if (random(1,2) == 1) { return resolvestate("AltFire2"); }
				else { return resolvestate("AltFire1"); }
				return resolvestate(null);
			}
		AltFire1:
			HCL1 O 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim1:
			HCL1 P 4 bright
			{
				invoker.shotsfired = 0;
				A_HLCRFire4Tics(0);
			}
			HCL1 QQ 2 bright
			{
				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 2", invoker.shotsfired);
				if (invoker.shotsfired > 2) invoker.shotsfired = 0;

				if (invoker.shotsfired == 1) 
				{ 
					A_HellSoulSpark();
					int heatamt = 834;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
					A_IncreaseHellcoreHeat(heatamt,1); // +8.34% Hellcore Heat, Deal Damage if already above 100% Heat
					A_HLCRFire2Tics(0);
				}
				else 
				{ 
					int heatamt = 834;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
					A_IncreaseHellcoreHeat(heatamt,0); // +8.34% Hellcore Heat, Deal Damage if already above 100% Heat
					A_HLCRFire2Tics(1);
				}

				A_StartSound("NecroSummon",101);
				A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
				if (CallACS("StatCheck",0) > 60)
				{
					A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",72,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",144,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",216,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",288,0,"",0,0,0,0);
				}
			}
			HCL1 R 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 O 0
			{
				A_HLCRSoulRefire(4);
			}
			HCL1 O 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFire2:
			HCL1 S 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim2:
			HCL1 T 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 UU 2 bright 
			{
				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 2", invoker.shotsfired);
				if (invoker.shotsfired > 2) invoker.shotsfired = 0;

				if (invoker.shotsfired == 1) 
				{ 
					A_HellSoulSpark();
					int heatamt = 834;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
					A_IncreaseHellcoreHeat(heatamt,1); // +8.34% Hellcore Heat, Deal Damage if already above 100% Heat
					A_HLCRFire2Tics(0);
				}
				else 
				{ 
					int heatamt = 834;
					if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",109) - 1) * 0.125));
					A_IncreaseHellcoreHeat(heatamt,0); // +8.34% Hellcore Heat, Deal Damage if already above 100% Heat
					A_HLCRFire2Tics(1);
				}

				A_StartSound("NecroSummon",101);
				A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
				if (CallACS("StatCheck",0) > 60)
				{
					A_SpreadAuraFireProjectile("ReviveProj",0,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",72,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",144,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",216,0,"",0,0,0,0);
					A_SpreadAuraFireProjectile("ReviveProj",288,0,"",0,0,0,0);
				}
			}
			HCL1 V 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 S 0
			{
				A_HLCRSoulRefire(3);
			}
			HCL1 S 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFireEnd:
			HCL1 NM 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}


// Flying Balrog's Soul [Slot 6] (Weapon)
// Flying Balrog's Soul Weapon - Hellcore Weapon #15
class FlyingBalrogShot1_Soul : FlyingBalrogShot1 
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			MANF A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			MANF AABB 2 Bright;
			loop;
	}
}
class FlyingBalrogShot1Crisis_Soul : FlyingBalrogShot1Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			MANF A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			MANF AABB 2 Bright A_GenerateCrisisParticle();
			loop;
	}
}
class FlyingBalrogShot2_Soul : FlyingBalrogShot2
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FATB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			FATB AB 2 Bright A_CustomTracer(16.875,"BulletPuffDVDS","RevenantTracerSmoke");
			loop;
	}
}
class FlyingBalrogShot2Crisis_Soul : FlyingBalrogShot2Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			FATB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			"####" AB 2 Bright
			{
				A_GenerateCrisisParticle();
				A_CustomTracer(16.875,"BulletPuffDVDS","RevenantTracerSmoke");
			}
			loop;
	}
}

class BalrogSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLO0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Flying Balrog's Soul: [Hellcore] Shoots the Flying Balrog's Cluster Fire-shot.";
		Inventory.PickupMessage "You got the Flying Balrog's Soul! \cx[Slot 6]\c-";
	}
	
	States
	{
		Spawn:
			HCSL O 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(14);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("BalrogSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(15);
			}
			Stop;
	}
}
class BalrogSoul : BaseHellcoreWeapon
{
	Default
	{
		//$Sprite "HCSLO0"
		Tag "Flying Balrog's Soul";
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got the Flying Balrog's Soul! \cx[Slot 6]\c-";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.75, 1.75;
		BaseHellcoreWeapon.bobxetimemul 0.22375, 0.27625;
		BaseHellcoreWeapon.bobxspeedmod 2.1;
		BaseHellcoreWeapon.bobxheightmod 4.5625, 5.4375;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.875, 0.875;
		BaseHellcoreWeapon.bobyspeedmod 8.21875;
		BaseHellcoreWeapon.bobyheightmod 7.34375, 8.65625;
		
		BaseHellcoreWeapon.randomsounds "flyingbalrog/sight", "flyingbalrog/pain", "flyingbalrog/death2", "flyingbalrog/idle", "flyingbalrog/sight", "flyingbalrog/pain", "flyingbalrog/death2", "flyingbalrog/idle";
	}
	
	action void A_HellSoulBalrogShot1(int heatamt = 600)
	{
		A_StartSound("imp/attack",101);
		if (dvds_florahellcorelevelsheat) heatamt *= (1.0 + ((CallACS("MiscVarCheckDECORATE",110) - 1) * 0.125));
		A_IncreaseHellcoreHeat(heatamt,1); // +6.0% Hellcore Heat, Deal Damage if already above 100% Heat
		CallACS("StartTensionCountDown");
		double shot1angle;
		double shot1offset;
		shot1angle = 4.0;
		shot1offset = 5.0;

		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",  0,0,"",  0,0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",110) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",110) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1Crisis_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",  0,0,"",  0,0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",110) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",110) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*3),0,"",(shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(shot1offset*2),0,"",(shot1angle*3),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",  0,0,"",  0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*2),0,"",(-shot1angle*2),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot1_Soul",(-shot1offset*3),0,"",(-shot1angle*3),0,0,0); 
				A_SetAngle(angle-30);
			}
		}
	}

	action void A_HellSoulBalrogShot2()
	{
		CallACS("StartTensionCountDown");
		double shot2angle;
		double shot2offset;
		shot2angle = 6.0;
		shot2offset = 9.0;

		if (A_HellCoreCrisisCheck())
		{
			A_PlayCrisisAtkSound();
			A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",  0,0,"", 0,0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",110) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",110) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2Crisis_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle-30);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",  0,0,"", 0,0,0,0); 
			A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
			if (CallACS("MiscVarCheckDECORATE",110) >= 4) 
			{
				A_SetAngle(angle-15);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle+30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle-15);
			}
			if (CallACS("MiscVarCheckDECORATE",110) >= 7) 
			{
				A_SetAngle(angle-30);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle+60);
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(shot2offset),0,"",(shot2angle),0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",  0,0,"", 0,0,0,0); 
				A_SpreadAuraFireProjectile("FlyingBalrogShot2_Soul",(-shot2offset),0,"",(-shot2angle),0,0,0); 
				A_SetAngle(angle-30);
			}
		}
	}

	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 O 0 bright
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL O 1 bright NoDelay;
			Loop;

		Ready: 
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady;
			Loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				invoker.shotsfired = 0;
				A_HLCRFire4Tics(0);
			}
			HCL1 GG 2 bright
			{
				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 2", invoker.shotsfired);
				if (invoker.shotsfired > 2) invoker.shotsfired = 0;
				if (invoker.shotsfired == 1) 
				{
					A_HellSoulSpark();
					A_HellSoulBalrogShot1(); 
					A_HLCRFire2Tics(0);
				}
				else 
				if (invoker.shotsfired == 2) 
				{ 
					A_HellSoulBalrogShot2(); 
					A_HLCRFire2Tics(1);
				}
			}
			HCL1 H 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 E 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				invoker.shotsfired = 0;
				A_HLCRFire4Tics(0);
			}
			HCL1 KK 2 bright
			{
				invoker.shotsfired++;
				if (dvdsdebug_hellcorepickups1) Console.Printf("shotsfired: %d / 2", invoker.shotsfired);
				if (invoker.shotsfired > 2) invoker.shotsfired = 0;
				if (invoker.shotsfired == 1) 
				{
					A_HellSoulSpark();
					A_HellSoulBalrogShot1(); 
					A_HLCRFire2Tics(0);
				}
				else 
				if (invoker.shotsfired == 2) 
				{ 
					A_HellSoulBalrogShot2(); 
					A_HLCRFire2Tics(1);
				}
			}
			HCL1 L 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;
	}
}

// Hades Elemental's Soul
// Hades Elemental's Soul Weapon - Hellcore Weapon #16
class HadesElementalBall_Soul : HadesElementalBall
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			HEFX AB 4 bright;
			Loop;
		Death:
			HEFX CDEEFGH 3 bright;
			Stop;
	}
}

class HadesElementalBallCrisis_Soul : HadesElementalBallCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	states
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			#### AABB 2 bright A_GenerateCrisisParticle();
			Loop;
		Death:
			#### CDEEFGH 3 bright;
			Stop;
	}
}

class HadesBolt_Soul : HadesBolt
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX2 F 0 ThrustThing(random(0,255),1,0,0);
			LFX2 FGHIJ 1 Bright 
			{
				A_Explode(16,64,0);
				A_StartSound("Monster/hadsit");
				A_Explode(16,64,0);
			}
			LFX2 J 0 Bright A_CountDown();
			Loop;
		Death:
			LFX2 FGHIJ 2 Bright A_Explode(32,64,0);
			Stop;
	}
}

class HadesBoltCrisis_Soul : HadesBoltCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX2 F 0 ThrustThing(random(0,255),1,0,0);
			LFX2 F 0 Bright A_GenerateCrisisParticle();
			LFX2 FG 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 H 0 Bright A_GenerateCrisisParticle();
			LFX2 HI 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 J 0 Bright A_CountDown();
			LFX2 J 0 Bright A_GenerateCrisisParticle();
			LFX2 JF 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 G 0 Bright A_GenerateCrisisParticle();
			LFX2 GH 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 I 0 Bright A_GenerateCrisisParticle();
			LFX2 IJ 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 J 0 Bright A_CountDown();
			Loop;
		Death:
			LFX2 FGHIJ 2 Bright A_Explode((32 * CrisisMultiplier),64,0);
			Stop;
	}
}

class HElementalSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLP0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Hades Elemental's Soul: [Hellcore] Use Hades Elemental attacks.";
		Inventory.PickupMessage "You got a Hades Elemental's Soul! \cx[Slot 7]\c-";
	}
	States
	{
		Spawn:
			HCSL P 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(15);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("HElementalSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(16);
			}
			Stop;
	}
}
class HElementalSoul : BaseHellCoreWeapon
{
	Default
	{
		//$Sprite "HCSLP0"
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Hades Elemental's Soul! \cx[Slot 7]\c-";
		Tag "Hades Elemental's Soul";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -1.0625, 1.0625;
		BaseHellcoreWeapon.bobxetimemul 0.235, 0.265;
		BaseHellcoreWeapon.bobxspeedmod 1.2;
		BaseHellcoreWeapon.bobxheightmod 4.68, 5.32;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -0.53125, 0.53125;
		BaseHellcoreWeapon.bobyspeedmod 8.1;
		BaseHellcoreWeapon.bobyheightmod 7.675, 8.325;
		
		BaseHellcoreWeapon.randomsounds "monster/helsit", "monster/helpai", "monster/heldth", "monster/helact", "monster/helsit", "monster/helpai", "monster/heldth", "monster/helact";
	}
	
	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 P 0 bright 
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL P 1 bright NoDelay;
			Loop;

		Ready:
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
			
		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				if (CallACS("HellcoreFireMode",1,4) == 0) // Spread Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,4) == 1) // Hades Bolt Mode
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 G 4 bright
			{
				if (CallACS("HellcoreFireMode",1,4) == 0) // Spread Shot Mode
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,-10.0);
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,-5.0);
					A_HellSoulFire1("",625,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,true,0.0);
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,5.0);
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,10.0);
				}
				if (CallACS("HellcoreFireMode",1,4) == 1) // Hades Bolt Mode
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"HadesBolt_Soul","HadesBoltCrisis_Soul",111,true,false,-16.0);
					A_HellSoulFire1("",1125,"HadesBolt_Soul","HadesBoltCrisis_Soul",111,true,true,0.0);
					A_HellSoulFire1("",0,"HadesBolt_Soul","HadesBoltCrisis_Soul",111,true,false,16.0);
				}
			}
			HCL1 H 4 bright
			{
				if (CallACS("HellcoreFireMode",1,4) == 0) // Spread Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,4) == 1) // Hades Bolt Mode
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				if (CallACS("HellcoreFireMode",1,4) == 0) // Spread Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,4) == 1) // Hades Bolt Mode
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 K 4 bright
			{
				if (CallACS("HellcoreFireMode",1,4) == 0) // Spread Shot Mode
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,-10.0);
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,-5.0);
					A_HellSoulFire1("",625,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,true,0.0);
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,5.0);
					A_HellSoulFire1("",0,"HadesElementalBall_Soul","HadesElementalBallCrisis_Soul",111,true,false,10.0);
				}
				if (CallACS("HellcoreFireMode",1,4) == 1) // Hades Bolt Mode
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",0,"HadesBolt_Soul","HadesBoltCrisis_Soul",111,true,false,-16.0);
					A_HellSoulFire1("",1125,"HadesBolt_Soul","HadesBoltCrisis_Soul",111,true,true,0.0);
					A_HellSoulFire1("",0,"HadesBolt_Soul","HadesBoltCrisis_Soul",111,true,false,16.0);
				}
			}
			HCL1 L 4 bright
			{
				if (CallACS("HellcoreFireMode",1,4) == 0) // Spread Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,4) == 1) // Hades Bolt Mode
				{
					A_HLCRFire4Tics(0);
				}
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;

		// Alt Fire
		AltFire:
			HCL1 MN 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 N 0
			{
				if (random(1,2) == 1) { return resolvestate("AltFire2"); }
				else { return resolvestate("AltFire1"); }
				return resolvestate(null);
			}
		AltFire1:
			HCL1 O 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim1:
			HCL1 P 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 Q 4 bright
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);

				A_HellSoulHEleSpawn("FHadesSphere", 111, 175, 45.0, 8.0);
			}
			HCL1 R 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 O 0
			{
				A_HLCRSoulRefire(4);
			}
			HCL1 O 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFire2:
			HCL1 S 4
			{
				A_HLCRFire4Tics(0);
			}
		AltReFireAnim2:
			HCL1 T 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 U 4 bright 
			{
				A_HellSoulSpark();
				A_HLCRFire4Tics(1);
				
				A_HellSoulHEleSpawn("FHadesSphere", 111, 175, 45.0, 8.0);
			}
			HCL1 V 4 bright
			{
				A_HLCRFire4Tics(0);
			}
			HCL1 S 0
			{
				A_HLCRSoulRefire(3);
			}
			HCL1 S 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFireEnd:
			HCL1 NM 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;

		// Fire Mode
		User4:
			HCL1 A 5 
			{
				A_StartSound("elecstun",102, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(1.25,1.75));
				CallACS("HellcoreFireMode",0,4);
			}
			Goto Ready;
	}
}

// Hades Overlord's Soul
// Hades Overlord's Soul Weapon - Hellcore Weapon #17
class StormStrike1_Soul : StormStrike1
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 I 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX1 IJKLM 1 Bright A_Explode(64,64,0);
			Loop;
		Death:
			LFX1 NOPQR 2 Bright;
			Stop;
	}
}

class StormStrike1Crisis_Soul : StormStrike1Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 I 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX1 I 0;
			#### I 0 Bright A_GenerateCrisisParticle();
			#### I 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### J 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### K 0 Bright A_GenerateCrisisParticle();
			#### K 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### L 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### M 0 Bright A_GenerateCrisisParticle();
			#### M 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### I 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### J 0 Bright A_GenerateCrisisParticle();
			#### J 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### K 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### L 0 Bright A_GenerateCrisisParticle();
			#### L 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			#### M 1 Bright A_Explode((64 * CrisisMultiplier),64,0);
			Loop;
		Death:
			#### NOPQR 2 Bright;
			Stop;
	}
}

class StormShot1_Soul : StormShot1
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX1 S 0;
			#### STUVW 1 Bright;
			#### W 0 Bright A_SpawnProjectile("StormLite1_Soul",0,0,90,6);
			#### W 0 Bright A_SpawnProjectile("StormLite1_Soul",0,0,270,6);
			Loop;
		Death:
			#### STUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVW 1 Bright A_Explode(16,32,0);
			Stop;
	}
}

class StormShot1Crisis_Soul : StormShot1Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX1 S 0;
			#### S 0 Bright A_GenerateCrisisParticle();
			#### ST 1 Bright;
			#### U 0 Bright A_GenerateCrisisParticle();
			#### UV 1 Bright;
			#### V 0 Bright A_GenerateCrisisParticle();
			#### W 1 Bright;
			#### W 0 Bright A_SpawnProjectile("StormLite1Crisis_Soul",0,0,90,6);
			#### W 0 Bright A_SpawnProjectile("StormLite1Crisis_Soul",0,0,270,6);
			#### S 1 Bright;
			#### S 0 Bright A_GenerateCrisisParticle();
			#### TU 1 Bright;
			#### V 0 Bright A_GenerateCrisisParticle();
			#### VW 1 Bright;
			#### W 0 Bright A_GenerateCrisisParticle();
			#### W 0 Bright A_SpawnProjectile("StormLite1Crisis_Soul",0,0,90,6);
			#### W 0 Bright A_SpawnProjectile("StormLite1Crisis_Soul",0,0,270,6);
			Loop;
		Death:
			#### STUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVW 1 Bright A_Explode((16 * CrisisMultiplier),32,0);
			Stop;
	}
}

class StormShot2_Soul : StormShot2
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			TNT1 A 2;
			LFX2 KLMNO 1 Bright;
			LFX2 O 0 Bright A_SpawnProjectile("StormLite2_Soul",0,0,90,6);
			LFX2 O 0 Bright A_SpawnProjectile("StormLite2_Soul",0,0,270,6);
			Goto Spawn+1;
		Death:
			LFX2 KLMNO 1 Bright A_Explode(32,64,0);
			LFX2 KKKKKK 0 Bright A_SpawnItemEx("StormBolt_Soul",0,0,0,4,0,0,random(0,359),0,0);
			LFX2 LMNO 1 Bright A_Explode(32,64,0);
			Stop;
	}
}

class StormShot2Crisis_Soul : StormShot2Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			TNT1 A 2;
			LFX2 K 0;
			#### K 0 Bright A_GenerateCrisisParticle();
			#### K 1 Bright;
			#### L 1 Bright;
			#### M 0 Bright A_GenerateCrisisParticle();
			#### M 1 Bright;
			#### N 1 Bright;
			#### N 0 Bright A_GenerateCrisisParticle();
			#### O 1 Bright;
			#### O 0 Bright A_SpawnProjectile("StormLite2Crisis_Soul",0,0,90,6);
			#### O 0 Bright A_SpawnProjectile("StormLite2Crisis_Soul",0,0,270,6);
			#### K 1 Bright;
			#### L 0 Bright A_GenerateCrisisParticle();
			#### L 1 Bright;
			#### M 1 Bright;
			#### M 0 Bright A_GenerateCrisisParticle();
			#### N 1 Bright;
			#### O 1 Bright;
			#### O 0 Bright A_GenerateCrisisParticle();
			#### O 0 Bright A_SpawnProjectile("StormLite2Crisis_Soul",0,0,90,6);
			#### O 0 Bright A_SpawnProjectile("StormLite2Crisis_Soul",0,0,270,6);
			Goto Spawn+1;
		Death:
			#### KLMNO 1 Bright A_Explode((32 * CrisisMultiplier),64,0);
			#### KKKKKK 0 Bright A_SpawnItemEx("StormBoltCrisis_Soul",0,0,0,4,0,0,random(0,359),0,0);
			#### LMNO 1 Bright A_Explode((32 * CrisisMultiplier),64,0);
			Stop;
	}
}

class StormBolt_Soul : StormBolt
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX2 F 1 Bright A_Explode(16,64,0);
			LFX2 F 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 F 0 ThrustThing(random(0,255),1,0,0);
			LFX2 G 1 Bright A_Explode(16,64,0);
			LFX2 G 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 H 1 Bright A_Explode(16,64,0);
			LFX2 H 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 I 1 Bright A_Explode(16,64,0);
			LFX2 I 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 J 1 Bright A_Explode(16,64,0);
			LFX2 J 0 Bright A_SpawnProjectile("StormBolt2",16,0,0,6,-90);
			LFX2 J 0 Bright A_CountDown();
			Loop;
		Death:
			LFX2 FGHIJ 2 Bright A_Explode(16,64,0);
			Stop;
	}
}

class StormBoltCrisis_Soul : StormBoltCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX2 F 0;
			#### F 0 Bright A_GenerateCrisisParticle();
			#### F 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### F 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### F 0 ThrustThing(random(0,255),1,0,0);
			#### G 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### G 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### H 0 Bright A_GenerateCrisisParticle();
			#### H 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### H 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### I 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### I 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### J 0 Bright A_GenerateCrisisParticle();
			#### J 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### J 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### J 0 Bright A_CountDown();
			#### F 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### F 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### F 0 ThrustThing(random(0,255),1,0,0);
			#### G 0 Bright A_GenerateCrisisParticle();
			#### G 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### G 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### H 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### H 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### I 0 Bright A_GenerateCrisisParticle();
			#### I 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### I 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### J 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			#### J 0 Bright A_SpawnProjectile("StormBolt2Crisis",16,0,0,6,-90);
			#### J 0 Bright A_CountDown();
			Loop;
		Death:
			#### FGHIJ 2 Bright A_Explode((16 * CrisisMultiplier),64,0);
			Stop;
	}
}

class StormBolt2_Soul : StormBolt2
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			TNT1 A 1 Bright A_Explode(16,64,0);
			Loop;
		Death:
			TNT1 A 1 Bright;
			Stop;
	}
}

class StormBolt2Crisis_Soul : StormBolt2Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			TNT1 A 1 Bright A_Explode((16 * CrisisMultiplier),64,0);
			Loop;
		Death:
			TNT1 A 1 Bright;
			Stop;
	}
}

class StormLite1_Soul : StormLite1
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			DLIT A 0;
			#### A 1 Bright;
			#### B 1 Bright;
			#### C 1 Bright;
			#### A 1 Bright;
			#### B 1 Bright;
			#### C 1 Bright;
			Loop;
		Death:
			#### DEFGHIJKLMNO 1 Bright;
			Stop;
	}
}

class StormLite1Crisis_Soul : StormLite1Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			DLIT A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### B 1 Bright;
			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 Bright;
			#### A 1 Bright;
			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 Bright;
			#### C 1 Bright;
			Loop;
		Death:
			#### DEFGHIJKLMNO 1 Bright;
			Stop;
	}
}

class StormLite2_Soul : StormLite2
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX1 X 1 Bright;
			LFX1 Y 1 Bright;
			LFX1 Z 1 Bright;
			LFX1 X 1 Bright;
			LFX1 Y 1 Bright;
			LFX1 Z 1 Bright;
			Loop;
		Death:
			LFX1 STUVW 3 Bright;
			Stop;
	}
}

class StormLite2Crisis_Soul : StormLite2Crisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			LFX1 X 0;
			#### X 0 Bright A_GenerateCrisisParticle();
			#### X 1 Bright;
			#### Y 1 Bright;
			#### Z 0 Bright A_GenerateCrisisParticle();
			#### Z 1 Bright;
			#### X 1 Bright;
			#### Y 0 Bright A_GenerateCrisisParticle();
			#### Y 1 Bright;
			#### Z 1 Bright;
			Loop;
		Death:
			#### STUVW 3 Bright;
			Stop;
	}
}

class HadesOverlordBall_Soul : HadesOverlordBall
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	states
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			HEFX A 0;
			#### A 2 bright;
			#### A 2 bright;
			#### B 2 bright;
			#### B 2 bright;
			Loop;
		Death:
			#### CDEEFGH 3 bright;
			Stop;
	}
}

class HadesOverlordBallCrisis_Soul : HadesOverlordBallCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
	}
	
	states
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			HEFX A 0;
			#### AABB 2 bright A_GenerateCrisisParticle();
			Loop;
		Death:
			#### CDEEFGH 3 bright;
			Stop;
	}
}

class OverBall_Soul : OverBall
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
		Translation "192:207=168:191";
	}
	
	States
	{
		Spawn:
			AFX1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			AFX1 ABC 1 Bright;
			Loop;
		Death:
			AFX1 DE 4 Bright A_Explode(32,32,0);
			AFX1 FGHI 4 bright;
			Stop;
	}
}

class OverBallCrisis_Soul : OverBallCrisis
{
	default
	{
		AetheriusBaseProjectileZSC.ishellcore 1;
		+SPECTRAL;
		Species "Players";
		Translation "192:207=168:191";
	}
	
	States
	{
		Spawn:
			AFX1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters();
			}
		Idle:
			AFX1 A 0;
			#### A 0 Bright A_GenerateCrisisParticle();
			#### A 1 Bright;
			#### B 1 Bright;
			#### C 0 Bright A_GenerateCrisisParticle();
			#### C 1 Bright;
			#### A 1 Bright;
			#### B 0 Bright A_GenerateCrisisParticle();
			#### B 1 Bright;
			#### C 1 Bright;
			Loop;
		Death:
			#### DE 4 Bright A_Explode((32 * CrisisMultiplier),32,0);
			#### FGHI 4 bright;
			Stop;
	}
}
class HOverlordSoulCI : BaseHellcorePickup
{
	Default
	{
		//$Sprite "HCSLQ0"
		//$NotAngled
		//$Color 14
		//$Category "DV-DS Weapons/Flora/Hellcore Souls"
		Tag "Hades Overlord's Soul: [Hellcore] Use Hades Overlord attacks.";
		Inventory.PickupMessage "You got a Hades Overlord's Soul! \cx[Slot 7]\c-";
	}
	
	States
	{
		Spawn:
			HCSL Q 1 NoDelay bright
			{
				A_HellCoreSoulPickupPulse(1.5,1.5);
				A_HellcoreWeaponCheckCharacter(16);
			}
			Loop;
		Pickup:
			TNT1 A 0 
			{
				A_GiveInventory("HOverlordSoul", 1);
				A_HellCorePickupSound();
				A_IncreaseHellcoreLevel(17);
			}
			Stop;
	}
}
class HOverlordSoul : BaseHellCoreWeapon
{
	Default
	{
		//$Sprite "HCSLQ0"
		+FLOATBOB;
		+DONTGIB;
		+INVENTORY.ALWAYSPICKUP;
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "You got a Hades Overlord's Soul! \cx[Slot 7]\c-";
		Tag "Hades Overlord's Soul";
		
		BaseHellcoreWeapon.bobxbasex 0.0;
		BaseHellcoreWeapon.bobxrandx -6.75, 6.75;
		BaseHellcoreWeapon.bobxetimemul 0.19, 0.37;
		BaseHellcoreWeapon.bobxspeedmod 1.6;
		BaseHellcoreWeapon.bobxheightmod 3.4, 6.6;
		BaseHellcoreWeapon.bobybasey 0.0;
		BaseHellcoreWeapon.bobyrandy -3.375, 3.375;
		BaseHellcoreWeapon.bobyspeedmod 8.75;
		BaseHellcoreWeapon.bobyheightmod 6.55, 9.45;
		
		BaseHellcoreWeapon.randomsounds "monster/ovlsit", "monster/ovlpai", "monster/ovldth", "monster/ovlact", "monster/ovlsit", "monster/ovlpai", "monster/ovldth", "monster/ovlact";
	}
	
	States
	{
		// Bonus Layers
		SoulImage: // Layer 5
			HCL3 Q 0 bright 
			{ 
				A_OverlayFlags(5, PSPF_ALPHA, true); 
				A_OverlayFlags(5, PSPF_RENDERSTYLE, true); 
				A_OverlayRenderStyle(5, STYLE_Translucent); 
			}
			#### # 1 bright { A_OverlayAlpha(5, 0.125); }
			#### # 1 bright { A_OverlayAlpha(5, 0.25); }
			#### # 1 bright { A_OverlayAlpha(5, 0.375); }
			#### # 1 bright { A_OverlayAlpha(5, 0.5); }
			#### # 1 bright { A_OverlayAlpha(5, 0.625); }
			#### # 1 bright { A_OverlayAlpha(5, 0.75); }
			#### # 1 bright { A_OverlayAlpha(5, 0.875); }
			#### # 1 bright { A_OverlayAlpha(5, 1.0); }
		SoulImage2: // Layer 5
			#### # 1 bright;
			loop;
			
		Spawn:
			HCSL Q 1 bright NoDelay;
			Loop;

		Ready:
			HCL1 A 0
			{
				A_HellSoulOverlayReady();
			}
		Idle: 
			HCL1 B 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect: 
			HCL1 A 1
			{
				A_HellSoulClearOverlays();
				A_DVDSLower(0,10033,3);
				A_DVDSLower(0,10034,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Select: 
			HCL1 A 1 
			{
				A_HellSoulClearOverlays();
				A_DVDSRaise(0,10033,3);
				A_DVDSRaise(0,10034,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			HCL1 CD 3
			{
				A_HLCRFire3Tics(0);
			}
			HCL1 D 0
			{
				if (random(1,2) == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			HCL1 E 4
			{
				A_HLCRFire4Tics(0);
			}
		ReFireAnim1:
			HCL1 F 4 bright
			{
				if (CallACS("HellcoreFireMode",1,5) == 0) // Storm Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,5) == 1) // Hyper Spread Shot Mode
				{
					A_HLCRFire3Tics(0);
				}
			}
			HCL1 G 4 bright
			{
				if (CallACS("HellcoreFireMode",1,5) == 0) // Storm Shot Mode
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					if (CountInv("LowHealth") || CountInv("CriticalHealth")) { A_HellSoulFire1("",1625,"StormShot2_Soul","StormShot2Crisis_Soul",112,true,true,0.0); }
					else { A_HellSoulFire1("",1375,"StormShot1_Soul","StormShot1Crisis_Soul",112,true,true,0.0); }
				}
				if (CallACS("HellcoreFireMode",1,5) == 1) // Hyper Spread Shot Mode
				{
					A_HLCRFire3Tics(1);
					
					invoker.heightoffset = -30;
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),59+invoker.heightoffset,-16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),5+invoker.heightoffset,-16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),59+invoker.heightoffset,16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),5+invoker.heightoffset,16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"OverBall_Soul","OverBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),random(34,35)+invoker.heightoffset,-20.97,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"OverBall_Soul","OverBallCrisis_Soul",112,true,true,frandom(-3.0,3.0),random(34,35)+invoker.heightoffset,20.97,frandom(-3.0,3.0));
				}
			}
			HCL1 H 4 bright
			{
				if (CallACS("HellcoreFireMode",1,5) == 0) // Storm Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,5) == 1) // Hyper Spread Shot Mode
				{
					A_HLCRFire3Tics(0);
				}
			}
			HCL1 E 0
			{
				A_HLCRSoulRefire(2);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		Fire2:
			HCL1 I 4
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(2); }
			}
		ReFireAnim2:
			HCL1 J 4 bright
			{
				if (CallACS("HellcoreFireMode",1,5) == 0) // Storm Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,5) == 1) // Hyper Spread Shot Mode
				{
					A_HLCRFire3Tics(0);
				}
			}
			HCL1 K 4 bright
			{
				if (CallACS("HellcoreFireMode",1,5) == 0) // Storm Shot Mode
				{
					A_HLCRFire4Tics(1);
					
					A_HellSoulSpark();
					if (CountInv("LowHealth") || CountInv("CriticalHealth")) { A_HellSoulFire1("",1625,"StormShot2_Soul","StormShot2Crisis_Soul",112,true,true,0.0); }
					else { A_HellSoulFire1("",1375,"StormShot1_Soul","StormShot1Crisis_Soul",112,true,true,0.0); }
				}
				if (CallACS("HellcoreFireMode",1,5) == 1) // Hyper Spread Shot Mode
				{
					A_HLCRFire3Tics(1);
					
					invoker.heightoffset = -30;
					A_HellSoulSpark();
					A_HellSoulCrisisCheck();
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),59+invoker.heightoffset,-16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),5+invoker.heightoffset,-16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),59+invoker.heightoffset,16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"HadesOverlordBall_Soul","HadesOverlordBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),5+invoker.heightoffset,16.77,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"OverBall_Soul","OverBallCrisis_Soul",112,true,false,frandom(-3.0,3.0),random(34,35)+invoker.heightoffset,-20.97,frandom(-3.0,3.0));
					A_HellSoulFire1("",40,"OverBall_Soul","OverBallCrisis_Soul",112,true,true,frandom(-3.0,3.0),random(34,35)+invoker.heightoffset,20.97,frandom(-3.0,3.0));
				}
			}
			HCL1 L 4 bright
			{
				if (CallACS("HellcoreFireMode",1,5) == 0) // Storm Shot Mode
				{
					A_HLCRFire4Tics(0);
				}
				if (CallACS("HellcoreFireMode",1,5) == 1) // Hyper Spread Shot Mode
				{
					A_HLCRFire3Tics(0);
				}
			}
			HCL1 I 0
			{
				A_HLCRSoulRefire(1);
			}
			HCL1 I 0
			{
				return resolvestate("FireEnd");
			}

		FireEnd:
			HCL1 DC 2
			{
				A_HLCRFire2Tics(0);
			}
			Goto Ready;

		// Alt Fire
		AltFire:
			HCL1 MN 2
			{
				A_HLCRFire2Tics(0);
			}
			HCL1 N 0
			{
				if (random(1,2) == 1) { return resolvestate("AltFire2"); }
				else { return resolvestate("AltFire1"); }
				return resolvestate(null);
			}
		AltFire1:
			HCL1 O 2
			{
				A_HLCRFire2Tics(0);
			}
		AltReFireAnim1:
			HCL1 P 2 bright
			{
				A_HLCRFire2Tics(0);
			}
			HCL1 Q 2 bright
			{
				A_HellSoulSpark();
				A_HLCRFire2Tics(1);
				
				A_HellSoulHEleSpawn("FHSOverlord", 112, 175, 45.0, 12.0);
			}
			HCL1 R 2 bright
			{
				A_HLCRFire2Tics(0);
			}
			HCL1 O 0
			{
				A_HLCRSoulRefire(4);
			}
			HCL1 O 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFire2:
			HCL1 S 2
			{
				A_HLCRFire2Tics(0);
			}
		AltReFireAnim2:
			HCL1 T 2 bright
			{
				A_HLCRFire2Tics(0);
			}
			HCL1 U 2 bright 
			{
				A_HellSoulSpark();
				A_HLCRFire2Tics(1);
				
				A_HellSoulHEleSpawn("FHSOverlord", 111, 175, 45.0, 12.0);
			}
			HCL1 V 2 bright
			{
				A_HLCRFire2Tics(0);
			}
			HCL1 S 0
			{
				A_HLCRSoulRefire(3);
			}
			HCL1 S 0
			{
				return resolvestate("AltFireEnd");
			}

		AltFireEnd:
			HCL1 NM 3
			{
				A_HLCRFire3Tics(0);
			}
			Goto Ready;

		// Fire Mode
		User4:
			HCL1 A 5 
			{
				A_StartSound("elecstun",102, CHANF_DEFAULT, 1.0, ATTN_NORM, frandom(1.25,1.75));
				CallACS("HellcoreFireMode",0,5);
			}
			Goto Ready;
	}
}