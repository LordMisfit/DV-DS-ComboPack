class DamageIndicators : StaticEventHandler
{
	/*
	 * Create a DamageTracker when an actor spawns or is revived. - Xaser
	 */
	override void WorldThingSpawned(WorldEvent e)
	{
		AetheriusPlayerPawn PlayPawn;
		if (self.ShouldSpawn(e.Thing))
		{
			if (PlayPawn = AetheriusPlayerPawn(e.thing))
			{
			}
			else
			{
				DamageTracker.Create(e.thing);
				if (dvdsdebug_damnumdisplays) Console.Printf("\cy - %s [WorldThingSpawned / NonPlayPawn]", e.thing.GetClassName());
			}
		}
	}
	override void WorldThingRevived(WorldEvent e)
	{
		AetheriusPlayerPawn PlayPawn;
		if (self.ShouldSpawn(e.Thing))
		{
			if (PlayPawn = AetheriusPlayerPawn(e.thing))
			{
			}
			else
			{
				DamageTracker.Create(e.thing);
				if (dvdsdebug_damnumdisplays) Console.Printf("\cy - %s [WorldThingRevived / NonPlayPawn]", e.thing.GetClassName());
			}
		}
	}
	
	/*
	 * Determine if we should spawn/track a particular thing. - Xaser
	 */
	bool ShouldSpawn(Actor thing) 
	{
		if (thing)
		{
			AetheriusMonsterZSC type;
			AetheriusPlayerPawn type2;
			ExplosiveBarrel type3;
			Pod type4;
			ExplosiveBarrel2 type5;

			if (type = AetheriusMonsterZSC(thing)) return true;
			if (type2 = AetheriusPlayerPawn(thing)) return true;
			if (type3 = ExplosiveBarrel(thing)) return true;
			if (type4 = Pod(thing)) return true;
			if (type5 = ExplosiveBarrel2(thing)) return true;
		}
		
		//if (thing && (thing.bIsMonster || thing.bShootable)) return true;
		
		return false;
	}
}

class DamageTracker : Inventory
{
	int currentHealth;

	/*
	 * Create & set up Tracker for the specified actor. - Xaser
	 *
	 * TODO: remove this function if it turns out it isn't needed. - Xaser
	 */
	static void Create(Actor thing)
	{
		if (thing) 
		{
			thing.GiveInventoryType('DamageTracker');
		}
	}

	/*
	 * Initialize the tracker just before its first tic.
	 */
	override void PostBeginPlay()
	{
		// Don't spawn a tracker if the tracked thing is gone or already dead.
		// This stops numbers from spawning for PE-spawned Lost Souls that die
		// instantly due to being in a wall. Was amusing, but unintentional. :P - Xaser
		if (!self.owner || self.owner.health < 1)
		{
			self.Destroy();
			return;
		}

		if (self && self.owner) self.currentHealth = self.owner.health;

		Super.PostBeginPlay();
	}
	

	/*
	 * Track damage and spawn stuff while the actor is alive.
	 */
	override void Tick()
	{
		if (self.owner) 
		{
			AetheriusPlayerPawn type2;
			if (dvds_dmgindicator)
			{
				if (type2 = AetheriusPlayerPawn(self.owner))
				{
					if (CallACS("MiscVarCheckDECORATE",173))
					{
						self.SpawnNumbers();
						self.currentHealth = self.owner.health;
					}
				}
				else
				if (self.owner.health != self.currentHealth) 
				{
					if (self.owner.CountInv("SilentHeal")) self.owner.A_SetInventory("SilentHeal",0);
					else self.SpawnNumbers();
					self.currentHealth = self.owner.health;
				}
			}
		} 
		else 
		{
			// clean up after oneself just in case an actor gets
			// Thing_Remove'd or similar.
			self.Destroy();
		}
		Super.Tick();
	}
	

	/*
	 * Upon owner death, spawn the last round of numbers. This is necessary to
	 * cover the case where an actor is removed immediately upon death. 
	 */
	override void OwnerDied()
	{
		self.SpawnNumbers();
		self.owner.RemoveInventory(self);
	}
	

	/*
	 * Do the actual number spawn. There's a bit of calculation and checking
	 * that's common to all Tracker spawns, so it's done here for convenience.
	 */
	int pow (int x, int n)
	{
		int y = 1;
		while (n-- > 0) y *= x;
		return y;
	}

	int GetDigit(int Num, int Digit) 
	{
		return (Num / pow(10, Digit)) % 10 ;
	}

	void SpawnNumbers()
	{
		double hitres1scale = 0.6667;
		double hitres2scale = 0.50;
		double hitres3scale = 0.3334;
		double hitweak1scale = 1.08334;
		double hitweak2scale = 1.28646625;
		double hitweak3scale = 1.4895925;
		
		AetheriusMonsterZSC type;
		AetheriusPlayerPawn type2;
		ExplosiveBarrel type3;
		Pod type4;
		ExplosiveBarrel2 type5;
		
		string ActorName;
		if (self.owner) ActorName = self.owner.GetClassName();

		if (dvds_dmgindicator && self.owner && (self.owner.DamageTypeReceived != 'Massacre' || self.owner.DamageTypeReceived != 'SilentMassacre'))
		{
			if (dvds_dmgindicator & 1) { } 
			else
			{
				if (type = AetheriusMonsterZSC(self.owner)) return;
			}
			if (dvds_dmgindicator & 2) { } 
			else
			{
				if (type2 = AetheriusPlayerPawn(self.owner)) return;
			}
			if (dvds_dmgindicator & 4) { } 
			else
			{
				if (type3 = ExplosiveBarrel(self.owner)) return;

				if (type4 = Pod(self.owner)) return;

				if (type5 = ExplosiveBarrel2(self.owner)) return;
			}

			int OnCeiling = self.owner.CountInv("OnCeiling");
			double targetX = frandom((self.owner.radius/2),-(self.owner.radius/2));
			double targetY = frandom((self.owner.radius/2),-(self.owner.radius/2));
			double targetHeight = self.owner.height - frandom(-4.0,4.0);
			if (OnCeiling) targetHeight *= -2;
			Vector3 position = self.owner.pos + (targetX, targetY, targetHeight);
			int totalDamage = self.currentHealth - self.owner.health;
			string OwnerName = self.owner.GetClassName();

			if (type2 = AetheriusPlayerPawn(self.owner)) totalDamage = CallACS("MiscVarCheckDECORATE",173) * -1;
			if (dvdsdebug_damnumdisplays) Console.Printf("\cxtotalDamage: %d\c- (173: \cx%d\c- [gametic: %d] - %s)", totalDamage, CallACS("MiscVarCheckDECORATE",173), gametic, OwnerName);

			double xvel, yvel, zvel;
			double veltest;
			int Digit1;
			int Digit2;
			int Digit3;
			int Digit4;
			int Digit5;
			int Digit6;
			int Digit7;
			
			int PlayerCrit = 0;
			if (self.owner.CountInv("TookCriticalHit")) 
			{ 
				self.owner.A_TakeInventory("TookCriticalHit",0x7FFFFFFF); 
				PlayerCrit = 1; 
			}
			int HitWeakness = 0;
			if (self.owner.CountInv("TookWeaknessHit")) 
			{ 
				HitWeakness = self.owner.CountInv("TookWeaknessHit"); 
				self.owner.A_TakeInventory("TookWeaknessHit",0x7FFFFFFF); 
			}
			int HitResistance = 0;
			if (self.owner.CountInv("TookResistanceHit")) 
			{ 
				HitResistance = self.owner.CountInv("TookResistanceHit"); 
				self.owner.A_TakeInventory("TookResistanceHit",0x7FFFFFFF); 
			}

			if (totalDamage != 0) 
			{
				int DmgIndDisplayValue = totalDamage;

				int DmgIndDisplayType = 0; // 0 = Damage, 1 = Healing.
				If (DmgIndDisplayValue < 0)
				{
					DmgIndDisplayValue *= -1;
					DmgIndDisplayType = 1;
				}
				
				DmgIndDisplayValue = clamp(DmgIndDisplayValue, 0, 9999999);
				
				If (DmgIndDisplayValue)
				{
					Digit1 = GetDigit(DmgIndDisplayValue, 0);
					Digit2 = GetDigit(DmgIndDisplayValue, 1);
					Digit3 = GetDigit(DmgIndDisplayValue, 2);
					Digit4 = GetDigit(DmgIndDisplayValue, 3);
					Digit5 = GetDigit(DmgIndDisplayValue, 4);
					Digit6 = GetDigit(DmgIndDisplayValue, 5);
					Digit7 = GetDigit(DmgIndDisplayValue, 6);
					
					targetX = frandom((self.owner.radius/2),-(self.owner.radius/2));
					targetY = frandom((self.owner.radius/2),-(self.owner.radius/2));
					targetHeight = self.owner.height - frandom(-4.0,4.0);
					position = self.owner.pos + (targetX, targetY, targetHeight);
					if (dvdsdebug_damnumdisplays) Console.Printf("%d%d%d%d%d%d%d - %s", Digit7, Digit6, Digit5, Digit4, Digit3, Digit2, Digit1, OwnerName);
				}
				
				int NumberID = Random(7000, 8000);
				int NumberID2 = NumberID + 1;
				
				string DigitSpawn = "";
				if (DmgIndDisplayType == 1) // Healing
				{
					if (DmgIndDisplayValue >= 0) DigitSpawn = "HealBurst1";
					if (DmgIndDisplayValue >= 10) DigitSpawn = "HealBurst2";
					if (DmgIndDisplayValue >= 100) DigitSpawn = "HealBurst3";
					if (DmgIndDisplayValue >= 1000) DigitSpawn = "HealBurst4";
					if (DmgIndDisplayValue >= 10000) DigitSpawn = "HealBurst5";
					if (DmgIndDisplayValue >= 100000) DigitSpawn = "HealBurst6";
					if (DmgIndDisplayValue >= 1000000) DigitSpawn = "HealBurst7";
				}
				else // Damage
				{
					if (PlayerCrit)
					{
						if (DmgIndDisplayValue >= 0) DigitSpawn = "DamageBurstCritical1";
						if (DmgIndDisplayValue >= 10) DigitSpawn = "DamageBurstCritical2";
						if (DmgIndDisplayValue >= 100) DigitSpawn = "DamageBurstCritical3";
						if (DmgIndDisplayValue >= 1000) DigitSpawn = "DamageBurstCritical4";
						if (DmgIndDisplayValue >= 10000) DigitSpawn = "DamageBurstCritical5";
						if (DmgIndDisplayValue >= 100000) DigitSpawn = "DamageBurstCritical6";
						if (DmgIndDisplayValue >= 1000000) DigitSpawn = "DamageBurstCritical7";
					}
					else
					{
						if (HitWeakness)
						{
							if (DmgIndDisplayValue >= 0) DigitSpawn = "DamageBurstWeak1";
							if (DmgIndDisplayValue >= 10) DigitSpawn = "DamageBurstWeak2";
							if (DmgIndDisplayValue >= 100) DigitSpawn = "DamageBurstWeak3";
							if (DmgIndDisplayValue >= 1000) DigitSpawn = "DamageBurstWeak4";
							if (DmgIndDisplayValue >= 10000) DigitSpawn = "DamageBurstWeak5";
							if (DmgIndDisplayValue >= 100000) DigitSpawn = "DamageBurstWeak6";
							if (DmgIndDisplayValue >= 1000000) DigitSpawn = "DamageBurstWeak7";
						}
						else
						{
							if (DmgIndDisplayValue >= 0) DigitSpawn = "DamageBurst1";
							if (DmgIndDisplayValue >= 10) DigitSpawn = "DamageBurst2";
							if (DmgIndDisplayValue >= 100) DigitSpawn = "DamageBurst3";
							if (DmgIndDisplayValue >= 1000) DigitSpawn = "DamageBurst4";
							if (DmgIndDisplayValue >= 10000) DigitSpawn = "DamageBurst5";
							if (DmgIndDisplayValue >= 100000) DigitSpawn = "DamageBurst6";
							if (DmgIndDisplayValue >= 1000000) DigitSpawn = "DamageBurst7";
						}
					}
				}

				veltest = dvds_dmgind_burstvelsxy;
				xvel = frandom(-veltest,veltest); 
				yvel = frandom(-veltest,veltest); 
				veltest = dvds_dmgind_burstvelszbase;
				zvel = frandom((veltest/2),veltest); // Healing cannot be critical'd
				if (OnCeiling) { xvel *= -1.0; yvel *= -1.0; zvel *= -2.0; }
				if (PlayerCrit && DmgIndDisplayType == 0)
				{
					owner.A_StartSound("player/criticalhit", 256, CHANF_DEFAULT, 1.0, ATTN_NONE, 1.0);
					if (DmgIndDisplayType != 1) 
					{ 
						xvel *= 0.5; yvel *= 0.5; 
						if (!OnCeiling) zvel *= -1.0; else zvel *= 2.0;
					}
				}
				if (HitWeakness)
				{
					if (DmgIndDisplayType != 1) { xvel *= 0.75; yvel *= 0.75; zvel *= 0.75; }
				}
				if (random(1,4) == 1) xvel *= frandompick(0.5,2.0);
				if (random(1,4) == 1) yvel *= frandompick(0.5,2.0);
				if (random(1,4) == 1) zvel *= frandompick(0.5,2.0);
				vector3 nvel = (xvel, yvel, zvel);

				double extraxscale1 = 1.0;
				double extrayscale1 = 1.0;
				if (ActorName == "TheSource")
				{
					extraxscale1 *= 5.0;
					extrayscale1 *= 5.0;
				}

				let damindspawn = Spawn(DigitSpawn, position, ALLOW_REPLACE);
				if (damindspawn)
				{
					damindspawn.vel = nvel;
					damindspawn.ChangeTID(NumberID);
					damindspawn.angle = 0;
					if (!PlayerCrit && HitWeakness)
					{
						damindspawn.stamina = 2;
						if (HitWeakness == 1)
						{
							damindspawn.scale.x *= hitweak1scale;
							damindspawn.scale.y *= hitweak1scale;
						}
						if (HitWeakness == 2)
						{
							damindspawn.scale.x *= hitweak2scale;
							damindspawn.scale.y *= hitweak2scale;
						}
						if (HitWeakness == 3)
						{
							damindspawn.scale.x *= hitweak3scale;
							damindspawn.scale.y *= hitweak3scale;
						}
					}
					if (!PlayerCrit && HitResistance)
					{
						damindspawn.gravity = 0.334;
						damindspawn.stamina = 1;
						if (HitResistance == 1)
						{
							damindspawn.scale.x *= hitres1scale;
							damindspawn.scale.y *= hitres1scale;
						}
						if (HitResistance == 2)
						{
							damindspawn.scale.x *= hitres2scale;
							damindspawn.scale.y *= hitres2scale;
						}
						if (HitResistance == 3)
						{
							damindspawn.scale.x *= hitres3scale;
							damindspawn.scale.y *= hitres3scale;
						}
					}
					damindspawn.scale.x *= extraxscale1;
					damindspawn.scale.y *= extrayscale1;
					if (dvdsdebug_damnumdisplays) Console.Printf("ScaleX: %.8f, Scaley: %.8f - %s", damindspawn.scale.x, damindspawn.scale.y, OwnerName);
				}
				
				// Digit ######1
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit1Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit) DigitSpawn = "DigitCritical1Num"; 
					else DigitSpawn = "DmgDigit1Num"; 
				}
				if (DmgIndDisplayValue >= 0) 
				{
					DigitSpawn = (DigitSpawn..""..Digit1);
					if (dvdsdebug_damnumdisplays) Console.Printf("%s - %s", DigitSpawn, OwnerName);
					let damindspawn1 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn1)
					{
						damindspawn1.vel = nvel;
						damindspawn1.ChangeTID(NumberID2);
						damindspawn1.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn1.gravity = 0.625;
							damindspawn1.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn1.scale.x *= hitweak1scale;
								damindspawn1.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn1.scale.x *= hitweak2scale;
								damindspawn1.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn1.scale.x *= hitweak3scale;
								damindspawn1.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance)
						{
							damindspawn1.gravity = 0.334;
							damindspawn1.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn1.scale.x *= hitres1scale;
								damindspawn1.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn1.scale.x *= hitres2scale;
								damindspawn1.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn1.scale.x *= hitres3scale;
								damindspawn1.scale.y *= hitres3scale;
							}
						}
						damindspawn1.scale.x *= extraxscale1;
						damindspawn1.scale.y *= extrayscale1;
						if (dvdsdebug_damnumdisplays) Console.Printf("ScaleX: %.8f, Scaley: %.8f - %s", damindspawn1.scale.x, damindspawn1.scale.y, OwnerName);
					}
				}
				
				// Digit #####2#
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit2Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit)  DigitSpawn = "DigitCritical2Num"; 
					else DigitSpawn = "DmgDigit2Num"; 
				}
				if (DmgIndDisplayValue >= 10) 
				{
					DigitSpawn = (DigitSpawn..""..Digit2);
					if (dvdsdebug_damnumdisplays) Console.Printf("%s - %s", DigitSpawn, OwnerName);
					let damindspawn2 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn2)
					{
						damindspawn2.vel = nvel;
						damindspawn2.ChangeTID(NumberID2);
						damindspawn2.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn2.gravity = 0.625;
							damindspawn2.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn2.scale.x *= hitweak1scale;
								damindspawn2.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn2.scale.x *= hitweak2scale;
								damindspawn2.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn2.scale.x *= hitweak3scale;
								damindspawn2.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance)
						{
							damindspawn2.gravity = 0.334;
							damindspawn2.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn2.scale.x *= hitres1scale;
								damindspawn2.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn2.scale.x *= hitres2scale;
								damindspawn2.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn2.scale.x *= hitres3scale;
								damindspawn2.scale.y *= hitres3scale;
							}
						}
						damindspawn2.scale.x *= extraxscale1;
						damindspawn2.scale.y *= extrayscale1;
					}
				}
				
				// Digit ####3##
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit3Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit)  DigitSpawn = "DigitCritical3Num"; 
					else DigitSpawn = "DmgDigit3Num"; 
				}
				if (DmgIndDisplayValue >= 100) 
				{
					DigitSpawn = (DigitSpawn..""..Digit3);
					if (dvdsdebug_damnumdisplays) Console.Printf("%s - %s", DigitSpawn, OwnerName);
					let damindspawn3 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn3)
					{
						damindspawn3.vel = nvel;
						damindspawn3.ChangeTID(NumberID2);
						damindspawn3.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn3.gravity = 0.625;
							damindspawn3.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn3.scale.x *= hitweak1scale;
								damindspawn3.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn3.scale.x *= hitweak2scale;
								damindspawn3.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn3.scale.x *= hitweak3scale;
								damindspawn3.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance)
						{
							damindspawn3.gravity = 0.334;
							damindspawn3.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn3.scale.x *= hitres1scale;
								damindspawn3.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn3.scale.x *= hitres2scale;
								damindspawn3.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn3.scale.x *= hitres3scale;
								damindspawn3.scale.y *= hitres3scale;
							}
						}
						damindspawn3.scale.x *= extraxscale1;
						damindspawn3.scale.y *= extrayscale1;
					}
				}
				
				// Digit ###4###
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit4Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit)  DigitSpawn = "DigitCritical4Num"; 
					else DigitSpawn = "DmgDigit4Num"; 
				}
				if (DmgIndDisplayValue >= 1000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit4);
					if (dvdsdebug_damnumdisplays) Console.Printf("%s - %s", DigitSpawn, OwnerName);
					let damindspawn4 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn4)
					{
						damindspawn4.vel = nvel;
						damindspawn4.ChangeTID(NumberID2);
						damindspawn4.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn4.gravity = 0.625;
							damindspawn4.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn4.scale.x *= hitweak1scale;
								damindspawn4.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn4.scale.x *= hitweak2scale;
								damindspawn4.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn4.scale.x *= hitweak3scale;
								damindspawn4.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance)
						{
							damindspawn4.gravity = 0.334;
							damindspawn4.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn4.scale.x *= hitres1scale;
								damindspawn4.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn4.scale.x *= hitres2scale;
								damindspawn4.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn4.scale.x *= hitres3scale;
								damindspawn4.scale.y *= hitres3scale;
							}
						}
						damindspawn4.scale.x *= extraxscale1;
						damindspawn4.scale.y *= extrayscale1;
					}
				}
				
				// Digit ##5####
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit5Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit)  DigitSpawn = "DigitCritical5Num"; 
					else DigitSpawn = "DmgDigit5Num"; 
				}
				if (DmgIndDisplayValue >= 10000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit5);
					if (dvdsdebug_damnumdisplays) Console.Printf("%s - %s", DigitSpawn, OwnerName);
					let damindspawn5 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn5)
					{
						damindspawn5.vel = nvel;
						damindspawn5.ChangeTID(NumberID2);
						damindspawn5.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn5.gravity = 0.625;
							damindspawn5.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn5.scale.x *= hitweak1scale;
								damindspawn5.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn5.scale.x *= hitweak2scale;
								damindspawn5.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn5.scale.x *= hitweak3scale;
								damindspawn5.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance)
						{
							damindspawn5.gravity = 0.334;
							damindspawn5.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn5.scale.x *= hitres1scale;
								damindspawn5.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn5.scale.x *= hitres2scale;
								damindspawn5.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn5.scale.x *= hitres3scale;
								damindspawn5.scale.y *= hitres3scale;
							}
						}
						damindspawn5.scale.x *= extraxscale1;
						damindspawn5.scale.y *= extrayscale1;
					}
				}
				
				// Digit #6#####
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit6Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit)  DigitSpawn = "DigitCritical6Num"; 
					else DigitSpawn = "DmgDigit6Num"; 
				}
				if (DmgIndDisplayValue >= 100000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit6);
					if (dvdsdebug_damnumdisplays) Console.Printf("%s - %s", DigitSpawn, OwnerName);
					let damindspawn6 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn6)
					{
						damindspawn6.vel = nvel;
						damindspawn6.ChangeTID(NumberID2);
						damindspawn6.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn6.gravity = 0.625;
							damindspawn6.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn6.scale.x *= hitweak1scale;
								damindspawn6.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn6.scale.x *= hitweak2scale;
								damindspawn6.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn6.scale.x *= hitweak3scale;
								damindspawn6.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance)
						{
							damindspawn6.gravity = 0.334;
							damindspawn6.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn6.scale.x *= hitres1scale;
								damindspawn6.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn6.scale.x *= hitres2scale;
								damindspawn6.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn6.scale.x *= hitres3scale;
								damindspawn6.scale.y *= hitres3scale;
							}
						}
						damindspawn6.scale.x *= extraxscale1;
						damindspawn6.scale.y *= extrayscale1;
					}
				}
				
				// Digit 7######
				if (DmgIndDisplayType == 1) 
				{
					DigitSpawn = "HealDigit7Num"; // Healing
				}
				else // Damage
				{ 
					if (PlayerCrit)  DigitSpawn = "DigitCritical7Num"; 
					else DigitSpawn = "DmgDigit7Num"; 
				}
				if (DmgIndDisplayValue >= 1000000) 
				{
					DigitSpawn = (DigitSpawn..""..Digit7);
					if (dvdsdebug_damnumdisplays) Console.Printf("%s - %s", DigitSpawn, OwnerName);
					let damindspawn7 = Spawn(DigitSpawn, position, ALLOW_REPLACE);
					if (damindspawn7)
					{
						damindspawn7.vel = nvel;
						damindspawn7.ChangeTID(NumberID2);
						damindspawn7.angle = 0;
						if (!PlayerCrit && HitWeakness)
						{
							damindspawn7.gravity = 0.625;
							damindspawn7.stamina = 2;
							if (HitWeakness == 1)
							{
								damindspawn7.scale.x *= hitweak1scale;
								damindspawn7.scale.y *= hitweak1scale;
							}
							if (HitWeakness == 2)
							{
								damindspawn7.scale.x *= hitweak2scale;
								damindspawn7.scale.y *= hitweak2scale;
							}
							if (HitWeakness == 3)
							{
								damindspawn7.scale.x *= hitweak3scale;
								damindspawn7.scale.y *= hitweak3scale;
							}
						}
						if (!PlayerCrit && HitResistance)
						{
							damindspawn7.gravity = 0.334;
							damindspawn7.stamina = 1;
							if (HitResistance == 1)
							{
								damindspawn7.scale.x *= hitres1scale;
								damindspawn7.scale.y *= hitres1scale;
							}
							if (HitResistance == 2)
							{
								damindspawn7.scale.x *= hitres2scale;
								damindspawn7.scale.y *= hitres2scale;
							}
							if (HitResistance == 3)
							{
								damindspawn7.scale.x *= hitres3scale;
								damindspawn7.scale.y *= hitres3scale;
							}
						}
						damindspawn7.scale.x *= extraxscale1;
						damindspawn7.scale.y *= extrayscale1;
					}
				}

			}
			else
			{
				if (self.owner.CountInv("TookCriticalHit")) { self.owner.A_SetInventory("TookCriticalHit",0); PlayerCrit = 0; }
				if (self.owner.CountInv("TookWeaknessHit")) { self.owner.A_SetInventory("TookWeaknessHit",0); HitWeakness = 0; }
				if (self.owner.CountInv("TookResistanceHit")) { self.owner.A_SetInventory("TookWeaknessHit",0); HitResistance = 0; }
			}
		}
	}
}

// Digits
class DigitBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Scale 0.75;
		+BRIGHT
		+NOBLOCKMAP
		+NOINTERACTION
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
		//+NOTIMEFREEZE
		Gravity 0.50;
	}
	
	override void Tick()
	{
		bool freeze = false;
		double factor = 1.0 / dvds_dmgind_bursttics1;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		if (!dvds_dmgind_subjecttotimefreeze) bNOTIMEFREEZE = true; else bNOTIMEFREEZE = false;
		if (dvds_dmgind_subjecttotimefreeze)
		{
			actor playera = players[0].mo;
			if ((playera && playera.CountInv("AetheriusTimeFreezer")) || 
					(playera && playera.CountInv("AetheriusTimeFreezerMenu")) || 
					isFrozen())
			{
				freeze = true;
			}
		}
		if (!freeze) A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}

	States
	{
		Spawn:
			TNT1 A 1;
			stop;
	}
}
class Digit1Num0 : DigitBase { States { Spawn: D1N0 B 1 BRIGHT; loop; } }
class Digit1Num1 : DigitBase { States { Spawn: D1N1 B 1 BRIGHT; loop; } }
class Digit1Num2 : DigitBase { States { Spawn: D1N2 B 1 BRIGHT; loop; } }
class Digit1Num3 : DigitBase { States { Spawn: D1N3 B 1 BRIGHT; loop; } }
class Digit1Num4 : DigitBase { States { Spawn: D1N4 B 1 BRIGHT; loop; } }
class Digit1Num5 : DigitBase { States { Spawn: D1N5 B 1 BRIGHT; loop; } }
class Digit1Num6 : DigitBase { States { Spawn: D1N6 B 1 BRIGHT; loop; } }
class Digit1Num7 : DigitBase { States { Spawn: D1N7 B 1 BRIGHT; loop; } }
class Digit1Num8 : DigitBase { States { Spawn: D1N8 B 1 BRIGHT; loop; } }
class Digit1Num9 : DigitBase { States { Spawn: D1N9 B 1 BRIGHT; loop; } }
class Digit2Num0 : DigitBase { States { Spawn: D2N0 B 1 BRIGHT; loop; } }
class Digit2Num1 : DigitBase { States { Spawn: D2N1 B 1 BRIGHT; loop; } }
class Digit2Num2 : DigitBase { States { Spawn: D2N2 B 1 BRIGHT; loop; } }
class Digit2Num3 : DigitBase { States { Spawn: D2N3 B 1 BRIGHT; loop; } }
class Digit2Num4 : DigitBase { States { Spawn: D2N4 B 1 BRIGHT; loop; } }
class Digit2Num5 : DigitBase { States { Spawn: D2N5 B 1 BRIGHT; loop; } }
class Digit2Num6 : DigitBase { States { Spawn: D2N6 B 1 BRIGHT; loop; } }
class Digit2Num7 : DigitBase { States { Spawn: D2N7 B 1 BRIGHT; loop; } }
class Digit2Num8 : DigitBase { States { Spawn: D2N8 B 1 BRIGHT; loop; } }
class Digit2Num9 : DigitBase { States { Spawn: D2N9 B 1 BRIGHT; loop; } }
class Digit3Num0 : DigitBase { States { Spawn: D3N0 B 1 BRIGHT; loop; } }
class Digit3Num1 : DigitBase { States { Spawn: D3N1 B 1 BRIGHT; loop; } }
class Digit3Num2 : DigitBase { States { Spawn: D3N2 B 1 BRIGHT; loop; } }
class Digit3Num3 : DigitBase { States { Spawn: D3N3 B 1 BRIGHT; loop; } }
class Digit3Num4 : DigitBase { States { Spawn: D3N4 B 1 BRIGHT; loop; } }
class Digit3Num5 : DigitBase { States { Spawn: D3N5 B 1 BRIGHT; loop; } }
class Digit3Num6 : DigitBase { States { Spawn: D3N6 B 1 BRIGHT; loop; } }
class Digit3Num7 : DigitBase { States { Spawn: D3N7 B 1 BRIGHT; loop; } }
class Digit3Num8 : DigitBase { States { Spawn: D3N8 B 1 BRIGHT; loop; } }
class Digit3Num9 : DigitBase { States { Spawn: D3N9 B 1 BRIGHT; loop; } }
class Digit4Num0 : DigitBase { States { Spawn: D4N0 B 1 BRIGHT; loop; } }
class Digit4Num1 : DigitBase { States { Spawn: D4N1 B 1 BRIGHT; loop; } }
class Digit4Num2 : DigitBase { States { Spawn: D4N2 B 1 BRIGHT; loop; } }
class Digit4Num3 : DigitBase { States { Spawn: D4N3 B 1 BRIGHT; loop; } }
class Digit4Num4 : DigitBase { States { Spawn: D4N4 B 1 BRIGHT; loop; } }
class Digit4Num5 : DigitBase { States { Spawn: D4N5 B 1 BRIGHT; loop; } }
class Digit4Num6 : DigitBase { States { Spawn: D4N6 B 1 BRIGHT; loop; } }
class Digit4Num7 : DigitBase { States { Spawn: D4N7 B 1 BRIGHT; loop; } }
class Digit4Num8 : DigitBase { States { Spawn: D4N8 B 1 BRIGHT; loop; } }
class Digit4Num9 : DigitBase { States { Spawn: D4N9 B 1 BRIGHT; loop; } }
class Digit5Num0 : DigitBase { States { Spawn: D5N0 B 1 BRIGHT; loop; } }
class Digit5Num1 : DigitBase { States { Spawn: D5N1 B 1 BRIGHT; loop; } }
class Digit5Num2 : DigitBase { States { Spawn: D5N2 B 1 BRIGHT; loop; } }
class Digit5Num3 : DigitBase { States { Spawn: D5N3 B 1 BRIGHT; loop; } }
class Digit5Num4 : DigitBase { States { Spawn: D5N4 B 1 BRIGHT; loop; } }
class Digit5Num5 : DigitBase { States { Spawn: D5N5 B 1 BRIGHT; loop; } }
class Digit5Num6 : DigitBase { States { Spawn: D5N6 B 1 BRIGHT; loop; } }
class Digit5Num7 : DigitBase { States { Spawn: D5N7 B 1 BRIGHT; loop; } }
class Digit5Num8 : DigitBase { States { Spawn: D5N8 B 1 BRIGHT; loop; } }
class Digit5Num9 : DigitBase { States { Spawn: D5N9 B 1 BRIGHT; loop; } }
class Digit6Num0 : DigitBase { States { Spawn: D6N0 B 1 BRIGHT; loop; } }
class Digit6Num1 : DigitBase { States { Spawn: D6N1 B 1 BRIGHT; loop; } }
class Digit6Num2 : DigitBase { States { Spawn: D6N2 B 1 BRIGHT; loop; } }
class Digit6Num3 : DigitBase { States { Spawn: D6N3 B 1 BRIGHT; loop; } }
class Digit6Num4 : DigitBase { States { Spawn: D6N4 B 1 BRIGHT; loop; } }
class Digit6Num5 : DigitBase { States { Spawn: D6N5 B 1 BRIGHT; loop; } }
class Digit6Num6 : DigitBase { States { Spawn: D6N6 B 1 BRIGHT; loop; } }
class Digit6Num7 : DigitBase { States { Spawn: D6N7 B 1 BRIGHT; loop; } }
class Digit6Num8 : DigitBase { States { Spawn: D6N8 B 1 BRIGHT; loop; } }
class Digit6Num9 : DigitBase { States { Spawn: D6N9 B 1 BRIGHT; loop; } }
class Digit7Num0 : DigitBase { States { Spawn: D7N0 B 1 BRIGHT; loop; } }
class Digit7Num1 : DigitBase { States { Spawn: D7N1 B 1 BRIGHT; loop; } }
class Digit7Num2 : DigitBase { States { Spawn: D7N2 B 1 BRIGHT; loop; } }
class Digit7Num3 : DigitBase { States { Spawn: D7N3 B 1 BRIGHT; loop; } }
class Digit7Num4 : DigitBase { States { Spawn: D7N4 B 1 BRIGHT; loop; } }
class Digit7Num5 : DigitBase { States { Spawn: D7N5 B 1 BRIGHT; loop; } }
class Digit7Num6 : DigitBase { States { Spawn: D7N6 B 1 BRIGHT; loop; } }
class Digit7Num7 : DigitBase { States { Spawn: D7N7 B 1 BRIGHT; loop; } }
class Digit7Num8 : DigitBase { States { Spawn: D7N8 B 1 BRIGHT; loop; } }
class Digit7Num9 : DigitBase { States { Spawn: D7N9 B 1 BRIGHT; loop; } }

// Damage
class DmgDigit1Num0 : DigitBase { States { Spawn: D1N0 C 1 BRIGHT; loop; } }
class DmgDigit1Num1 : DigitBase { States { Spawn: D1N1 C 1 BRIGHT; loop; } }
class DmgDigit1Num2 : DigitBase { States { Spawn: D1N2 C 1 BRIGHT; loop; } }
class DmgDigit1Num3 : DigitBase { States { Spawn: D1N3 C 1 BRIGHT; loop; } }
class DmgDigit1Num4 : DigitBase { States { Spawn: D1N4 C 1 BRIGHT; loop; } }
class DmgDigit1Num5 : DigitBase { States { Spawn: D1N5 C 1 BRIGHT; loop; } }
class DmgDigit1Num6 : DigitBase { States { Spawn: D1N6 C 1 BRIGHT; loop; } }
class DmgDigit1Num7 : DigitBase { States { Spawn: D1N7 C 1 BRIGHT; loop; } }
class DmgDigit1Num8 : DigitBase { States { Spawn: D1N8 C 1 BRIGHT; loop; } }
class DmgDigit1Num9 : DigitBase { States { Spawn: D1N9 C 1 BRIGHT; loop; } }
class DmgDigit2Num0 : DigitBase { States { Spawn: D2N0 C 1 BRIGHT; loop; } }
class DmgDigit2Num1 : DigitBase { States { Spawn: D2N1 C 1 BRIGHT; loop; } }
class DmgDigit2Num2 : DigitBase { States { Spawn: D2N2 C 1 BRIGHT; loop; } }
class DmgDigit2Num3 : DigitBase { States { Spawn: D2N3 C 1 BRIGHT; loop; } }
class DmgDigit2Num4 : DigitBase { States { Spawn: D2N4 C 1 BRIGHT; loop; } }
class DmgDigit2Num5 : DigitBase { States { Spawn: D2N5 C 1 BRIGHT; loop; } }
class DmgDigit2Num6 : DigitBase { States { Spawn: D2N6 C 1 BRIGHT; loop; } }
class DmgDigit2Num7 : DigitBase { States { Spawn: D2N7 C 1 BRIGHT; loop; } }
class DmgDigit2Num8 : DigitBase { States { Spawn: D2N8 C 1 BRIGHT; loop; } }
class DmgDigit2Num9 : DigitBase { States { Spawn: D2N9 C 1 BRIGHT; loop; } }
class DmgDigit3Num0 : DigitBase { States { Spawn: D3N0 C 1 BRIGHT; loop; } }
class DmgDigit3Num1 : DigitBase { States { Spawn: D3N1 C 1 BRIGHT; loop; } }
class DmgDigit3Num2 : DigitBase { States { Spawn: D3N2 C 1 BRIGHT; loop; } }
class DmgDigit3Num3 : DigitBase { States { Spawn: D3N3 C 1 BRIGHT; loop; } }
class DmgDigit3Num4 : DigitBase { States { Spawn: D3N4 C 1 BRIGHT; loop; } }
class DmgDigit3Num5 : DigitBase { States { Spawn: D3N5 C 1 BRIGHT; loop; } }
class DmgDigit3Num6 : DigitBase { States { Spawn: D3N6 C 1 BRIGHT; loop; } }
class DmgDigit3Num7 : DigitBase { States { Spawn: D3N7 C 1 BRIGHT; loop; } }
class DmgDigit3Num8 : DigitBase { States { Spawn: D3N8 C 1 BRIGHT; loop; } }
class DmgDigit3Num9 : DigitBase { States { Spawn: D3N9 C 1 BRIGHT; loop; } }
class DmgDigit4Num0 : DigitBase { States { Spawn: D4N0 C 1 BRIGHT; loop; } }
class DmgDigit4Num1 : DigitBase { States { Spawn: D4N1 C 1 BRIGHT; loop; } }
class DmgDigit4Num2 : DigitBase { States { Spawn: D4N2 C 1 BRIGHT; loop; } }
class DmgDigit4Num3 : DigitBase { States { Spawn: D4N3 C 1 BRIGHT; loop; } }
class DmgDigit4Num4 : DigitBase { States { Spawn: D4N4 C 1 BRIGHT; loop; } }
class DmgDigit4Num5 : DigitBase { States { Spawn: D4N5 C 1 BRIGHT; loop; } }
class DmgDigit4Num6 : DigitBase { States { Spawn: D4N6 C 1 BRIGHT; loop; } }
class DmgDigit4Num7 : DigitBase { States { Spawn: D4N7 C 1 BRIGHT; loop; } }
class DmgDigit4Num8 : DigitBase { States { Spawn: D4N8 C 1 BRIGHT; loop; } }
class DmgDigit4Num9 : DigitBase { States { Spawn: D4N9 C 1 BRIGHT; loop; } }
class DmgDigit5Num0 : DigitBase { States { Spawn: D5N0 C 1 BRIGHT; loop; } }
class DmgDigit5Num1 : DigitBase { States { Spawn: D5N1 C 1 BRIGHT; loop; } }
class DmgDigit5Num2 : DigitBase { States { Spawn: D5N2 C 1 BRIGHT; loop; } }
class DmgDigit5Num3 : DigitBase { States { Spawn: D5N3 C 1 BRIGHT; loop; } }
class DmgDigit5Num4 : DigitBase { States { Spawn: D5N4 C 1 BRIGHT; loop; } }
class DmgDigit5Num5 : DigitBase { States { Spawn: D5N5 C 1 BRIGHT; loop; } }
class DmgDigit5Num6 : DigitBase { States { Spawn: D5N6 C 1 BRIGHT; loop; } }
class DmgDigit5Num7 : DigitBase { States { Spawn: D5N7 C 1 BRIGHT; loop; } }
class DmgDigit5Num8 : DigitBase { States { Spawn: D5N8 C 1 BRIGHT; loop; } }
class DmgDigit5Num9 : DigitBase { States { Spawn: D5N9 C 1 BRIGHT; loop; } }
class DmgDigit6Num0 : DigitBase { States { Spawn: D6N0 C 1 BRIGHT; loop; } }
class DmgDigit6Num1 : DigitBase { States { Spawn: D6N1 C 1 BRIGHT; loop; } }
class DmgDigit6Num2 : DigitBase { States { Spawn: D6N2 C 1 BRIGHT; loop; } }
class DmgDigit6Num3 : DigitBase { States { Spawn: D6N3 C 1 BRIGHT; loop; } }
class DmgDigit6Num4 : DigitBase { States { Spawn: D6N4 C 1 BRIGHT; loop; } }
class DmgDigit6Num5 : DigitBase { States { Spawn: D6N5 C 1 BRIGHT; loop; } }
class DmgDigit6Num6 : DigitBase { States { Spawn: D6N6 C 1 BRIGHT; loop; } }
class DmgDigit6Num7 : DigitBase { States { Spawn: D6N7 C 1 BRIGHT; loop; } }
class DmgDigit6Num8 : DigitBase { States { Spawn: D6N8 C 1 BRIGHT; loop; } }
class DmgDigit6Num9 : DigitBase { States { Spawn: D6N9 C 1 BRIGHT; loop; } }
class DmgDigit7Num0 : DigitBase { States { Spawn: D7N0 C 1 BRIGHT; loop; } }
class DmgDigit7Num1 : DigitBase { States { Spawn: D7N1 C 1 BRIGHT; loop; } }
class DmgDigit7Num2 : DigitBase { States { Spawn: D7N2 C 1 BRIGHT; loop; } }
class DmgDigit7Num3 : DigitBase { States { Spawn: D7N3 C 1 BRIGHT; loop; } }
class DmgDigit7Num4 : DigitBase { States { Spawn: D7N4 C 1 BRIGHT; loop; } }
class DmgDigit7Num5 : DigitBase { States { Spawn: D7N5 C 1 BRIGHT; loop; } }
class DmgDigit7Num6 : DigitBase { States { Spawn: D7N6 C 1 BRIGHT; loop; } }
class DmgDigit7Num7 : DigitBase { States { Spawn: D7N7 C 1 BRIGHT; loop; } }
class DmgDigit7Num8 : DigitBase { States { Spawn: D7N8 C 1 BRIGHT; loop; } }
class DmgDigit7Num9 : DigitBase { States { Spawn: D7N9 C 1 BRIGHT; loop; } }

// Heal
class HealDigit1Num0 : DigitBase { States { Spawn: D1N0 D 1 BRIGHT; loop; } }
class HealDigit1Num1 : DigitBase { States { Spawn: D1N1 D 1 BRIGHT; loop; } }
class HealDigit1Num2 : DigitBase { States { Spawn: D1N2 D 1 BRIGHT; loop; } }
class HealDigit1Num3 : DigitBase { States { Spawn: D1N3 D 1 BRIGHT; loop; } }
class HealDigit1Num4 : DigitBase { States { Spawn: D1N4 D 1 BRIGHT; loop; } }
class HealDigit1Num5 : DigitBase { States { Spawn: D1N5 D 1 BRIGHT; loop; } }
class HealDigit1Num6 : DigitBase { States { Spawn: D1N6 D 1 BRIGHT; loop; } }
class HealDigit1Num7 : DigitBase { States { Spawn: D1N7 D 1 BRIGHT; loop; } }
class HealDigit1Num8 : DigitBase { States { Spawn: D1N8 D 1 BRIGHT; loop; } }
class HealDigit1Num9 : DigitBase { States { Spawn: D1N9 D 1 BRIGHT; loop; } }
class HealDigit2Num0 : DigitBase { States { Spawn: D2N0 D 1 BRIGHT; loop; } }
class HealDigit2Num1 : DigitBase { States { Spawn: D2N1 D 1 BRIGHT; loop; } }
class HealDigit2Num2 : DigitBase { States { Spawn: D2N2 D 1 BRIGHT; loop; } }
class HealDigit2Num3 : DigitBase { States { Spawn: D2N3 D 1 BRIGHT; loop; } }
class HealDigit2Num4 : DigitBase { States { Spawn: D2N4 D 1 BRIGHT; loop; } }
class HealDigit2Num5 : DigitBase { States { Spawn: D2N5 D 1 BRIGHT; loop; } }
class HealDigit2Num6 : DigitBase { States { Spawn: D2N6 D 1 BRIGHT; loop; } }
class HealDigit2Num7 : DigitBase { States { Spawn: D2N7 D 1 BRIGHT; loop; } }
class HealDigit2Num8 : DigitBase { States { Spawn: D2N8 D 1 BRIGHT; loop; } }
class HealDigit2Num9 : DigitBase { States { Spawn: D2N9 D 1 BRIGHT; loop; } }
class HealDigit3Num0 : DigitBase { States { Spawn: D3N0 D 1 BRIGHT; loop; } }
class HealDigit3Num1 : DigitBase { States { Spawn: D3N1 D 1 BRIGHT; loop; } }
class HealDigit3Num2 : DigitBase { States { Spawn: D3N2 D 1 BRIGHT; loop; } }
class HealDigit3Num3 : DigitBase { States { Spawn: D3N3 D 1 BRIGHT; loop; } }
class HealDigit3Num4 : DigitBase { States { Spawn: D3N4 D 1 BRIGHT; loop; } }
class HealDigit3Num5 : DigitBase { States { Spawn: D3N5 D 1 BRIGHT; loop; } }
class HealDigit3Num6 : DigitBase { States { Spawn: D3N6 D 1 BRIGHT; loop; } }
class HealDigit3Num7 : DigitBase { States { Spawn: D3N7 D 1 BRIGHT; loop; } }
class HealDigit3Num8 : DigitBase { States { Spawn: D3N8 D 1 BRIGHT; loop; } }
class HealDigit3Num9 : DigitBase { States { Spawn: D3N9 D 1 BRIGHT; loop; } }
class HealDigit4Num0 : DigitBase { States { Spawn: D4N0 D 1 BRIGHT; loop; } }
class HealDigit4Num1 : DigitBase { States { Spawn: D4N1 D 1 BRIGHT; loop; } }
class HealDigit4Num2 : DigitBase { States { Spawn: D4N2 D 1 BRIGHT; loop; } }
class HealDigit4Num3 : DigitBase { States { Spawn: D4N3 D 1 BRIGHT; loop; } }
class HealDigit4Num4 : DigitBase { States { Spawn: D4N4 D 1 BRIGHT; loop; } }
class HealDigit4Num5 : DigitBase { States { Spawn: D4N5 D 1 BRIGHT; loop; } }
class HealDigit4Num6 : DigitBase { States { Spawn: D4N6 D 1 BRIGHT; loop; } }
class HealDigit4Num7 : DigitBase { States { Spawn: D4N7 D 1 BRIGHT; loop; } }
class HealDigit4Num8 : DigitBase { States { Spawn: D4N8 D 1 BRIGHT; loop; } }
class HealDigit4Num9 : DigitBase { States { Spawn: D4N9 D 1 BRIGHT; loop; } }
class HealDigit5Num0 : DigitBase { States { Spawn: D5N0 D 1 BRIGHT; loop; } }
class HealDigit5Num1 : DigitBase { States { Spawn: D5N1 D 1 BRIGHT; loop; } }
class HealDigit5Num2 : DigitBase { States { Spawn: D5N2 D 1 BRIGHT; loop; } }
class HealDigit5Num3 : DigitBase { States { Spawn: D5N3 D 1 BRIGHT; loop; } }
class HealDigit5Num4 : DigitBase { States { Spawn: D5N4 D 1 BRIGHT; loop; } }
class HealDigit5Num5 : DigitBase { States { Spawn: D5N5 D 1 BRIGHT; loop; } }
class HealDigit5Num6 : DigitBase { States { Spawn: D5N6 D 1 BRIGHT; loop; } }
class HealDigit5Num7 : DigitBase { States { Spawn: D5N7 D 1 BRIGHT; loop; } }
class HealDigit5Num8 : DigitBase { States { Spawn: D5N8 D 1 BRIGHT; loop; } }
class HealDigit5Num9 : DigitBase { States { Spawn: D5N9 D 1 BRIGHT; loop; } }
class HealDigit6Num0 : DigitBase { States { Spawn: D6N0 D 1 BRIGHT; loop; } }
class HealDigit6Num1 : DigitBase { States { Spawn: D6N1 D 1 BRIGHT; loop; } }
class HealDigit6Num2 : DigitBase { States { Spawn: D6N2 D 1 BRIGHT; loop; } }
class HealDigit6Num3 : DigitBase { States { Spawn: D6N3 D 1 BRIGHT; loop; } }
class HealDigit6Num4 : DigitBase { States { Spawn: D6N4 D 1 BRIGHT; loop; } }
class HealDigit6Num5 : DigitBase { States { Spawn: D6N5 D 1 BRIGHT; loop; } }
class HealDigit6Num6 : DigitBase { States { Spawn: D6N6 D 1 BRIGHT; loop; } }
class HealDigit6Num7 : DigitBase { States { Spawn: D6N7 D 1 BRIGHT; loop; } }
class HealDigit6Num8 : DigitBase { States { Spawn: D6N8 D 1 BRIGHT; loop; } }
class HealDigit6Num9 : DigitBase { States { Spawn: D6N9 D 1 BRIGHT; loop; } }
class HealDigit7Num0 : DigitBase { States { Spawn: D7N0 D 1 BRIGHT; loop; } }
class HealDigit7Num1 : DigitBase { States { Spawn: D7N1 D 1 BRIGHT; loop; } }
class HealDigit7Num2 : DigitBase { States { Spawn: D7N2 D 1 BRIGHT; loop; } }
class HealDigit7Num3 : DigitBase { States { Spawn: D7N3 D 1 BRIGHT; loop; } }
class HealDigit7Num4 : DigitBase { States { Spawn: D7N4 D 1 BRIGHT; loop; } }
class HealDigit7Num5 : DigitBase { States { Spawn: D7N5 D 1 BRIGHT; loop; } }
class HealDigit7Num6 : DigitBase { States { Spawn: D7N6 D 1 BRIGHT; loop; } }
class HealDigit7Num7 : DigitBase { States { Spawn: D7N7 D 1 BRIGHT; loop; } }
class HealDigit7Num8 : DigitBase { States { Spawn: D7N8 D 1 BRIGHT; loop; } }
class HealDigit7Num9 : DigitBase { States { Spawn: D7N9 D 1 BRIGHT; loop; } }

class DigitCriticalBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Scale 1.0;
		+BRIGHT
		+NOBLOCKMAP
		+NOINTERACTION
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
		//+NOTIMEFREEZE
		Gravity 0.75;
	}

	override void Tick()
	{
		bool freeze = false;
		double factor = 1.0 / dvds_dmgind_bursttics2;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		if (!dvds_dmgind_subjecttotimefreeze) bNOTIMEFREEZE = true; else bNOTIMEFREEZE = false;
		if (dvds_dmgind_subjecttotimefreeze)
		{
			actor playera = players[0].mo;
			if ((playera && playera.CountInv("AetheriusTimeFreezer")) || 
					(playera && playera.CountInv("AetheriusTimeFreezerMenu")) || 
					isFrozen())
			{
				freeze = true;
			}
		}
		if (!freeze) A_Fadeout((factor),FTF_REMOVE); // 140 tics
		super.Tick();
	}

	States
	{
		Spawn:
			TNT1 A 1;
			stop;
	}
}
class DigitCritical1Num0 : DigitCriticalBase { States { Spawn: D1N0 C 1 BRIGHT; loop; } }
class DigitCritical1Num1 : DigitCriticalBase { States { Spawn: D1N1 C 1 BRIGHT; loop; } }
class DigitCritical1Num2 : DigitCriticalBase { States { Spawn: D1N2 C 1 BRIGHT; loop; } }
class DigitCritical1Num3 : DigitCriticalBase { States { Spawn: D1N3 C 1 BRIGHT; loop; } }
class DigitCritical1Num4 : DigitCriticalBase { States { Spawn: D1N4 C 1 BRIGHT; loop; } }
class DigitCritical1Num5 : DigitCriticalBase { States { Spawn: D1N5 C 1 BRIGHT; loop; } }
class DigitCritical1Num6 : DigitCriticalBase { States { Spawn: D1N6 C 1 BRIGHT; loop; } }
class DigitCritical1Num7 : DigitCriticalBase { States { Spawn: D1N7 C 1 BRIGHT; loop; } }
class DigitCritical1Num8 : DigitCriticalBase { States { Spawn: D1N8 C 1 BRIGHT; loop; } }
class DigitCritical1Num9 : DigitCriticalBase { States { Spawn: D1N9 C 1 BRIGHT; loop; } }
class DigitCritical2Num0 : DigitCriticalBase { States { Spawn: D2N0 C 1 BRIGHT; loop; } }
class DigitCritical2Num1 : DigitCriticalBase { States { Spawn: D2N1 C 1 BRIGHT; loop; } }
class DigitCritical2Num2 : DigitCriticalBase { States { Spawn: D2N2 C 1 BRIGHT; loop; } }
class DigitCritical2Num3 : DigitCriticalBase { States { Spawn: D2N3 C 1 BRIGHT; loop; } }
class DigitCritical2Num4 : DigitCriticalBase { States { Spawn: D2N4 C 1 BRIGHT; loop; } }
class DigitCritical2Num5 : DigitCriticalBase { States { Spawn: D2N5 C 1 BRIGHT; loop; } }
class DigitCritical2Num6 : DigitCriticalBase { States { Spawn: D2N6 C 1 BRIGHT; loop; } }
class DigitCritical2Num7 : DigitCriticalBase { States { Spawn: D2N7 C 1 BRIGHT; loop; } }
class DigitCritical2Num8 : DigitCriticalBase { States { Spawn: D2N8 C 1 BRIGHT; loop; } }
class DigitCritical2Num9 : DigitCriticalBase { States { Spawn: D2N9 C 1 BRIGHT; loop; } }
class DigitCritical3Num0 : DigitCriticalBase { States { Spawn: D3N0 C 1 BRIGHT; loop; } }
class DigitCritical3Num1 : DigitCriticalBase { States { Spawn: D3N1 C 1 BRIGHT; loop; } }
class DigitCritical3Num2 : DigitCriticalBase { States { Spawn: D3N2 C 1 BRIGHT; loop; } }
class DigitCritical3Num3 : DigitCriticalBase { States { Spawn: D3N3 C 1 BRIGHT; loop; } }
class DigitCritical3Num4 : DigitCriticalBase { States { Spawn: D3N4 C 1 BRIGHT; loop; } }
class DigitCritical3Num5 : DigitCriticalBase { States { Spawn: D3N5 C 1 BRIGHT; loop; } }
class DigitCritical3Num6 : DigitCriticalBase { States { Spawn: D3N6 C 1 BRIGHT; loop; } }
class DigitCritical3Num7 : DigitCriticalBase { States { Spawn: D3N7 C 1 BRIGHT; loop; } }
class DigitCritical3Num8 : DigitCriticalBase { States { Spawn: D3N8 C 1 BRIGHT; loop; } }
class DigitCritical3Num9 : DigitCriticalBase { States { Spawn: D3N9 C 1 BRIGHT; loop; } }
class DigitCritical4Num0 : DigitCriticalBase { States { Spawn: D4N0 C 1 BRIGHT; loop; } }
class DigitCritical4Num1 : DigitCriticalBase { States { Spawn: D4N1 C 1 BRIGHT; loop; } }
class DigitCritical4Num2 : DigitCriticalBase { States { Spawn: D4N2 C 1 BRIGHT; loop; } }
class DigitCritical4Num3 : DigitCriticalBase { States { Spawn: D4N3 C 1 BRIGHT; loop; } }
class DigitCritical4Num4 : DigitCriticalBase { States { Spawn: D4N4 C 1 BRIGHT; loop; } }
class DigitCritical4Num5 : DigitCriticalBase { States { Spawn: D4N5 C 1 BRIGHT; loop; } }
class DigitCritical4Num6 : DigitCriticalBase { States { Spawn: D4N6 C 1 BRIGHT; loop; } }
class DigitCritical4Num7 : DigitCriticalBase { States { Spawn: D4N7 C 1 BRIGHT; loop; } }
class DigitCritical4Num8 : DigitCriticalBase { States { Spawn: D4N8 C 1 BRIGHT; loop; } }
class DigitCritical4Num9 : DigitCriticalBase { States { Spawn: D4N9 C 1 BRIGHT; loop; } }
class DigitCritical5Num0 : DigitCriticalBase { States { Spawn: D5N0 C 1 BRIGHT; loop; } }
class DigitCritical5Num1 : DigitCriticalBase { States { Spawn: D5N1 C 1 BRIGHT; loop; } }
class DigitCritical5Num2 : DigitCriticalBase { States { Spawn: D5N2 C 1 BRIGHT; loop; } }
class DigitCritical5Num3 : DigitCriticalBase { States { Spawn: D5N3 C 1 BRIGHT; loop; } }
class DigitCritical5Num4 : DigitCriticalBase { States { Spawn: D5N4 C 1 BRIGHT; loop; } }
class DigitCritical5Num5 : DigitCriticalBase { States { Spawn: D5N5 C 1 BRIGHT; loop; } }
class DigitCritical5Num6 : DigitCriticalBase { States { Spawn: D5N6 C 1 BRIGHT; loop; } }
class DigitCritical5Num7 : DigitCriticalBase { States { Spawn: D5N7 C 1 BRIGHT; loop; } }
class DigitCritical5Num8 : DigitCriticalBase { States { Spawn: D5N8 C 1 BRIGHT; loop; } }
class DigitCritical5Num9 : DigitCriticalBase { States { Spawn: D5N9 C 1 BRIGHT; loop; } }
class DigitCritical6Num0 : DigitCriticalBase { States { Spawn: D6N0 C 1 BRIGHT; loop; } }
class DigitCritical6Num1 : DigitCriticalBase { States { Spawn: D6N1 C 1 BRIGHT; loop; } }
class DigitCritical6Num2 : DigitCriticalBase { States { Spawn: D6N2 C 1 BRIGHT; loop; } }
class DigitCritical6Num3 : DigitCriticalBase { States { Spawn: D6N3 C 1 BRIGHT; loop; } }
class DigitCritical6Num4 : DigitCriticalBase { States { Spawn: D6N4 C 1 BRIGHT; loop; } }
class DigitCritical6Num5 : DigitCriticalBase { States { Spawn: D6N5 C 1 BRIGHT; loop; } }
class DigitCritical6Num6 : DigitCriticalBase { States { Spawn: D6N6 C 1 BRIGHT; loop; } }
class DigitCritical6Num7 : DigitCriticalBase { States { Spawn: D6N7 C 1 BRIGHT; loop; } }
class DigitCritical6Num8 : DigitCriticalBase { States { Spawn: D6N8 C 1 BRIGHT; loop; } }
class DigitCritical6Num9 : DigitCriticalBase { States { Spawn: D6N9 C 1 BRIGHT; loop; } }
class DigitCritical7Num0 : DigitCriticalBase { States { Spawn: D7N0 C 1 BRIGHT; loop; } }
class DigitCritical7Num1 : DigitCriticalBase { States { Spawn: D7N1 C 1 BRIGHT; loop; } }
class DigitCritical7Num2 : DigitCriticalBase { States { Spawn: D7N2 C 1 BRIGHT; loop; } }
class DigitCritical7Num3 : DigitCriticalBase { States { Spawn: D7N3 C 1 BRIGHT; loop; } }
class DigitCritical7Num4 : DigitCriticalBase { States { Spawn: D7N4 C 1 BRIGHT; loop; } }
class DigitCritical7Num5 : DigitCriticalBase { States { Spawn: D7N5 C 1 BRIGHT; loop; } }
class DigitCritical7Num6 : DigitCriticalBase { States { Spawn: D7N6 C 1 BRIGHT; loop; } }
class DigitCritical7Num7 : DigitCriticalBase { States { Spawn: D7N7 C 1 BRIGHT; loop; } }
class DigitCritical7Num8 : DigitCriticalBase { States { Spawn: D7N8 C 1 BRIGHT; loop; } }
class DigitCritical7Num9 : DigitCriticalBase { States { Spawn: D7N9 C 1 BRIGHT; loop; } }

// Damage Indicator/Lifebar End

// DQ-Style Heal/Damage Bursts [appears behind the numbers to make them more noticable :V ]
class HealBurstBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Scale 0.375;
		+BRIGHT
		+NOBLOCKMAP
		+NOINTERACTION
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+DONTTRANSLATE
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
		//+NOTIMEFREEZE
		Gravity 0.50;
	}

	int user_bursttype;

	override void Tick()
	{
		bool freeze = false;
		double factor = 1.0 / dvds_dmgind_bursttics1;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		if (!dvds_dmgind_subjecttotimefreeze) bNOTIMEFREEZE = true; else bNOTIMEFREEZE = false;
		if (dvds_dmgind_subjecttotimefreeze)
		{
			actor playera = players[0].mo;
			if ((playera && playera.CountInv("AetheriusTimeFreezer")) || 
					(playera && playera.CountInv("AetheriusTimeFreezerMenu")) || 
					isFrozen())
			{
				freeze = true;
			}
		}
		if (!freeze) A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}

	States 
	{
		Spawn: 
			HLBU A 1 BRIGHT;
			loop;
	}
}
class HealBurst1 : HealBurstBase { States { Spawn: HLBU B 1 BRIGHT; loop; } }
class HealBurst2 : HealBurstBase { States { Spawn: HLBU C 1 BRIGHT; loop; } }
class HealBurst3 : HealBurstBase { States { Spawn: HLBU D 1 BRIGHT; loop; } }
class HealBurst4 : HealBurstBase { States { Spawn: HLBU E 1 BRIGHT; loop; } }
class HealBurst5 : HealBurstBase { States { Spawn: HLBU F 1 BRIGHT; loop; } }
class HealBurst6 : HealBurstBase { States { Spawn: HLBU G 1 BRIGHT; loop; } }
class HealBurst7 : HealBurstBase { States { Spawn: HLBU H 1 BRIGHT; loop; } }

class DamageBurstBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Scale 0.375;
		+BRIGHT
		+NOBLOCKMAP
		+NOINTERACTION
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+DONTTRANSLATE
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
		//+NOTIMEFREEZE
		Gravity 0.50;
	}
	int user_bursttype;
	
	override void Tick()
	{
		bool freeze = false;
		double factor = 1.0 / dvds_dmgind_bursttics1;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		if (!dvds_dmgind_subjecttotimefreeze) bNOTIMEFREEZE = true; else bNOTIMEFREEZE = false;
		if (dvds_dmgind_subjecttotimefreeze)
		{
			actor playera = players[0].mo;
			if ((playera && playera.CountInv("AetheriusTimeFreezer")) || 
					(playera && playera.CountInv("AetheriusTimeFreezerMenu")) || 
					isFrozen())
			{
				freeze = true;
			}
		}
		if (!freeze) A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}

	States
	{
		Spawn:
			DMBU A 1 BRIGHT;
			loop;
	}
}
class DamageBurst1 : DamageBurstBase { States { Spawn: DMBU B 1 BRIGHT; loop; } }
class DamageBurst2 : DamageBurstBase { States { Spawn: DMBU C 1 BRIGHT; loop; } }
class DamageBurst3 : DamageBurstBase { States { Spawn: DMBU D 1 BRIGHT; loop; } }
class DamageBurst4 : DamageBurstBase { States { Spawn: DMBU E 1 BRIGHT; loop; } }
class DamageBurst5 : DamageBurstBase { States { Spawn: DMBU F 1 BRIGHT; loop; } }
class DamageBurst6 : DamageBurstBase { States { Spawn: DMBU G 1 BRIGHT; loop; } }
class DamageBurst7 : DamageBurstBase { States { Spawn: DMBU H 1 BRIGHT; loop; } }

class DamageBurstWeakBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Scale 0.375;
		+BRIGHT
		+NOBLOCKMAP
		+NOINTERACTION
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+DONTTRANSLATE
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
		//+NOTIMEFREEZE
		Gravity 0.625;
	}
	int user_bursttype;
	
	override void Tick()
	{
		bool freeze = false;
		double factor = 1.0 / dvds_dmgind_bursttics1;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		if (!dvds_dmgind_subjecttotimefreeze) bNOTIMEFREEZE = true; else bNOTIMEFREEZE = false;
		if (dvds_dmgind_subjecttotimefreeze)
		{
			actor playera = players[0].mo;
			if ((playera && playera.CountInv("AetheriusTimeFreezer")) || 
					(playera && playera.CountInv("AetheriusTimeFreezerMenu")) || 
					isFrozen())
			{
				freeze = true;
			}
		}
		if (!freeze) A_Fadeout((factor),FTF_REMOVE); // 70 tics
		super.Tick();
	}

	States
	{
		Spawn:
			DMBU A 1 BRIGHT;
			loop;
	}
}
class DamageBurstWeak1 : DamageBurstWeakBase { States { Spawn: DMBR B 1 BRIGHT; loop; } }
class DamageBurstWeak2 : DamageBurstWeakBase { States { Spawn: DMBR C 1 BRIGHT; loop; } }
class DamageBurstWeak3 : DamageBurstWeakBase { States { Spawn: DMBR D 1 BRIGHT; loop; } }
class DamageBurstWeak4 : DamageBurstWeakBase { States { Spawn: DMBR E 1 BRIGHT; loop; } }
class DamageBurstWeak5 : DamageBurstWeakBase { States { Spawn: DMBR F 1 BRIGHT; loop; } }
class DamageBurstWeak6 : DamageBurstWeakBase { States { Spawn: DMBR G 1 BRIGHT; loop; } }
class DamageBurstWeak7 : DamageBurstWeakBase { States { Spawn: DMBR H 1 BRIGHT; loop; } }

class DamageBurstCriticalBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		Scale 0.5;
		+BRIGHT
		+NOBLOCKMAP
		+NOINTERACTION
		+NOGRAVITY
		+FORCEXYBILLBOARD
		+NOCLIP
		+DONTTRANSLATE
		+NOSPRITESHADOW;
		-CASTSPRITESHADOW;
		//+NOTIMEFREEZE
		Gravity 0.75;
	}

	int user_bursttype;
	
	override void Tick()
	{
		bool freeze = false;
		double factor = 1.0 / dvds_dmgind_bursttics2;
		if (stamina == 1) factor *= 2.5;
		if (stamina == 2) factor *= 0.7;
		if (!dvds_dmgind_subjecttotimefreeze) bNOTIMEFREEZE = true; else bNOTIMEFREEZE = false;
		if (dvds_dmgind_subjecttotimefreeze)
		{
			actor playera = players[0].mo;
			if ((playera && playera.CountInv("AetheriusTimeFreezer")) || 
					(playera && playera.CountInv("AetheriusTimeFreezerMenu")) || 
					isFrozen())
			{
				freeze = true;
			}
		}
		if (!freeze) A_Fadeout((factor),FTF_REMOVE); // 140 tics
		super.Tick();
	}

	States
	{
		Spawn: 
			DMCR A 1 BRIGHT;
			loop;
	}
}
class DamageBurstCritical1 : DamageBurstCriticalBase { States { Spawn: DMCR B 1 BRIGHT; loop; } }
class DamageBurstCritical2 : DamageBurstCriticalBase { States { Spawn: DMCR C 1 BRIGHT; loop; } }
class DamageBurstCritical3 : DamageBurstCriticalBase { States { Spawn: DMCR D 1 BRIGHT; loop; } }
class DamageBurstCritical4 : DamageBurstCriticalBase { States { Spawn: DMCR E 1 BRIGHT; loop; } }
class DamageBurstCritical5 : DamageBurstCriticalBase { States { Spawn: DMCR F 1 BRIGHT; loop; } }
class DamageBurstCritical6 : DamageBurstCriticalBase { States { Spawn: DMCR G 1 BRIGHT; loop; } }
class DamageBurstCritical7 : DamageBurstCriticalBase { States { Spawn: DMCR H 1 BRIGHT; loop; } }
