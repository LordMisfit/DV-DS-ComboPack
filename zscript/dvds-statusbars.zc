class InventoryBarStateDVDS : InventoryBarState
{
	TextureID box;
	TextureID selector;
	Vector2 boxsize;
	Vector2 boxofs;
	Vector2 selectofs;
	Vector2 innersize;
		
	TextureID left;
	TextureID right;
	Vector2 arrowoffset;

	double itemalpha;
	
	HUDFont amountfont;
	int cr;
	int flags;

	private static void Init(InventoryBarState me, HUDFont indexfont, int cr, double itemalpha, Vector2 innersize,	String leftgfx, String rightgfx, Vector2 arrowoffs, int flags)
	{
		me.itemalpha = itemalpha;
		if (innersize == (0, 0))
		{
			me.boxofs = (2, 2);
			me.innersize = me.boxsize - (4, 4);	// Default is based on Heretic's and Hexens icons.
		}
		else
		{
			me.innersize = innersize;
			me.boxofs = (me.boxsize - me.innersize) / 2;
		}
		if (me.selector.IsValid())
		{
			Vector2 sel = TexMan.GetScaledSize(me.selector);
			me.selectofs = (me.boxsize - sel) / 2;
		}
		me.left = TexMan.CheckForTexture(leftgfx, TexMan.TYPE_MiscPatch);
		me.right = TexMan.CheckForTexture(rightgfx, TexMan.TYPE_MiscPatch);
		me.arrowoffset = arrowoffs;
		me.arrowoffset.Y += me.boxsize.Y/2;	// default is centered to the side of the box.
		if (indexfont == null) 
		{
			me.amountfont = HUDFont.Create("INDEXFONT_DVDS");
			if (cr == Font.CR_UNTRANSLATED) cr = Font.CR_GOLD;
		}
		else me.amountfont = indexfont;
		me.cr = cr;
		me.flags = flags;
	}

	// The default settings here are what SBARINFO is using.
	static InventoryBarState Create(HUDFont indexfont = null, int cr = Font.CR_UNTRANSLATED, double itemalpha = 1.,
							String boxgfx = "ARTIBOX", String selgfx = "SELECTBO", Vector2 innersize = (0, 0),
							String leftgfx = "INVGEML1", String rightgfx = "INVGEMR1", Vector2 arrowoffs = (0, 0), int flags = 0)
	{
		let me = new ("InventoryBarState");
		me.box = TexMan.CheckForTexture(boxgfx, TexMan.TYPE_MiscPatch);
		me.selector = TexMan.CheckForTexture(selgfx, TexMan.TYPE_MiscPatch);
		if (me.box.IsValid() || me.selector.IsValid()) me.boxsize = TexMan.GetScaledSize(me.box.IsValid()? me.box : me.selector);
		else me.boxsize = (32., 32.);
		Init(me, indexfont, cr, itemalpha, innersize, leftgfx, rightgfx, arrowoffs, flags);
		return me;
	}
	
	// The default settings here are what SBARINFO is using.
	static InventoryBarState CreateNoBox(HUDFont indexfont = null, int cr = Font.CR_UNTRANSLATED, double itemalpha = 1.,
							Vector2 boxsize = (32, 32), String selgfx = "SELECTBO", Vector2 innersize = (0, 0),
							String leftgfx = "INVGEML1", String rightgfx = "INVGEMR1", Vector2 arrowoffs = (0, 0), int flags = 0)
	{
		let me = new ("InventoryBarState");
		me.box.SetInvalid();
		me.selector = TexMan.CheckForTexture(selgfx, TexMan.TYPE_MiscPatch);
		me.boxsize = boxsize;
		Init(me, indexfont, cr, itemalpha, innersize, leftgfx, rightgfx, arrowoffs, flags);
		return me;
	}
	
}
	
class AetheriusStatusBar : BaseStatusBar
{
	HUDFont mConFont;

	override void Init()
	{
		// Run the parent status bar's Init() function
		//   It's generally a good idea to call the super class's function whenever you 
		//   are overriding a function, in case some critical code is executed by the 
		//   parent class - unless you know specifically that you want to completely
		//   replace the parent class's function instead
		Super.Init();
		SetSize(0, 320, 200); // This sets the pixel height of the status bar and the base resolution

		// Initialize the fonts - there's actually a wiki page on this part: 
		// https://zdoom.org/wiki/Classes:HUDFont

		// Create the font used for the fullscreen HUD
		Font fnt = "CONFONT";
		mConFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);
	}

	// Except for the placement information this gets all info from the struct that gets passed in.
	void DrawInventoryBar(InventoryBarState parms, Vector2 position, int numfields, int flags = 0, double bgalpha = 1.)
	{
		int ItemHeldRatio;
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassCheck = CallACS("OtherVarCheckDECORATE",4);

		Font fnt = "INDEXFONT_DVDSM";
		if (dvds_inventorybartextsize == 0) fnt = "INDEXFONT_DVDS";
		if (dvds_inventorybartextsize == 1) fnt = "INDEXFONT_DVDSM";
		if (dvds_inventorybartextsize == 2) fnt = "INDEXFONT_DVDSL";
		parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
		parms.box = TexMan.CheckForTexture("ARTIBOX", TexMan.TYPE_MiscPatch);
		parms.selector = TexMan.CheckForTexture("SELECTBO", TexMan.TYPE_MiscPatch);
		if (CharacterClass == 0) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX0", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB0", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 1) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX1", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB1", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 2) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX2", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB2", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 8) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX8", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB8", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 9) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX9", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB9", TexMan.TYPE_MiscPatch);
		}

		double width = parms.boxsize.X * numfields;
		[position, flags] = AdjustPosition(position, flags, width, parms.boxsize.Y);
		
		CPlayer.mo.InvFirst = ValidateInvFirst(numfields);
		if (CPlayer.mo.InvFirst == null) return;	// Player has no listed inventory items.
		
		Vector2 boxsize = parms.boxsize;
		// First draw all the boxes
		for(int i = 0; i < numfields; i++)
		{
			DrawTexture(parms.box, position + (boxsize.X * i, 0), flags | DI_ITEM_LEFT_TOP, bgalpha);
		}
		
		// now the items and the rest
		
		Vector2 itempos = position + boxsize / 2;
		Vector2 textpos = position + boxsize - (1, 1 + parms.amountfont.mFont.GetHeight());
		Vector2 textposextra;

		int i = 0;
		Inventory item;
		double inviconalpha, inviconalphapulse, inviconscalex, inviconscaley;
		int inviconalphatimer = level.time % 35;
		CPlayer.inventorytics = 0; // Makes it you can immediately "use" items after selecting through them.
		
		int texttranslation = font.CR_UNTRANSLATED;
		//Console.Printf("%d", CPlayer.inventorytics);
		//Console.Printf("texttranslation: %d", texttranslation);
		AetheriusPlayerPawn cplayerpawn;
		cplayerpawn = AetheriusPlayerPawn(CPlayer.mo);
		//if (cplayerpawn) Console.Printf("test");
		for(item = CPlayer.mo.InvFirst; item != NULL && i < numfields; item = item.NextInv())
		{
			for(int j = 0; j < 2; j++)
			{
				if (j ^ !!(flags & DI_DRAWCURSORFIRST))
				{
					if (item == CPlayer.mo.InvSel)
					{
						double flashAlpha = bgalpha;
						if (flags & DI_ARTIFLASH) flashAlpha *= itemflashFade;
						DrawTexture(parms.selector, position + parms.selectofs + (boxsize.X * i, 0), flags | DI_ITEM_LEFT_TOP, flashAlpha);
					}
				}
				else
				{
					inviconscalex = 1.0;
					inviconscaley = 1.0;
					if (item is "Coin")
					{
						inviconalpha = 0.875;
					}
					else
					{
						if (item.Amount <= 0)
						{
							inviconalpha = 0.4375; 
							inviconscalex *= 0.875;
							inviconscaley *= 0.875;
						}
						else 
						if (item.Amount >= item.MaxAmount) 
						{
							if (inviconalphatimer == 0) inviconalphapulse = -0.125;
							if (inviconalphatimer == 1 || inviconalphatimer == 39) inviconalphapulse = -0.1125;
							if (inviconalphatimer == 2 || inviconalphatimer == 38) inviconalphapulse = -0.1000;
							if (inviconalphatimer == 3 || inviconalphatimer == 37) inviconalphapulse = -0.0875;
							if (inviconalphatimer == 4 || inviconalphatimer == 36) inviconalphapulse = -0.075;
							if (inviconalphatimer == 5 || inviconalphatimer == 35) inviconalphapulse = -0.0625;
							if (inviconalphatimer == 6 || inviconalphatimer == 34) inviconalphapulse = -0.05;
							if (inviconalphatimer == 7 || inviconalphatimer == 33) inviconalphapulse = -0.0375;
							if (inviconalphatimer == 8 || inviconalphatimer == 32) inviconalphapulse = -0.025;
							if (inviconalphatimer == 9 || inviconalphatimer == 31) inviconalphapulse = -0.0125;
							if (inviconalphatimer == 10 || inviconalphatimer == 30) inviconalphapulse = -0.00;
							if (inviconalphatimer == 11 || inviconalphatimer == 29) inviconalphapulse = 0.0125;
							if (inviconalphatimer == 12 || inviconalphatimer == 28) inviconalphapulse = 0.025;
							if (inviconalphatimer == 13 || inviconalphatimer == 27) inviconalphapulse = 0.0375;
							if (inviconalphatimer == 14 || inviconalphatimer == 26) inviconalphapulse = 0.05;
							if (inviconalphatimer == 15 || inviconalphatimer == 25) inviconalphapulse = 0.0625;
							if (inviconalphatimer == 16 || inviconalphatimer == 24) inviconalphapulse = 0.075;
							if (inviconalphatimer == 17 || inviconalphatimer == 23) inviconalphapulse = 0.0875;
							if (inviconalphatimer == 18 || inviconalphatimer == 22) inviconalphapulse = 0.10;
							if (inviconalphatimer == 19 || inviconalphatimer == 21) inviconalphapulse = 0.125;
							if (inviconalphatimer == 20) inviconalphapulse = 0.1375;
							inviconalphapulse *= 2;
							inviconalpha = 0.75 + inviconalphapulse;
							inviconscalex *= 1.0 + ((inviconalphapulse * 0.25));
							inviconscaley *= 1.0 + ((inviconalphapulse * 0.25));
						}
						else 
						{
							inviconalpha = 0.875;
							inviconscalex *= 0.9375;
							inviconscaley *= 0.9375;
						}
						if (cplayerpawn && cplayerpawn.buttons & BT_ZOOM) 
						{
							if (item.GetClassName() == "MedicinalHerb" ||
									item.GetClassName() == "StrongMedicine" ||
									item.GetClassName() == "SpecialMedicine" ||
									item.GetClassName() == "MiraclePotion" ||
									item.GetClassName() == "MonsterMunchies" || 
									item.GetClassName() == "RockbombShard" ||
									item.GetClassName() == "ArtiHealthNew" ||
									item.GetClassName() == "ArtiSuperHealthNew" ||
									item.GetClassName() == "MedPatchNew" ||
									item.GetClassName() == "MedicalKitNew" ||
									item.GetClassName() == "SurgeryKitNew") 
							{
								inviconalpha *= 4; 
								inviconscalex *= 1.25;
								inviconscaley *= 1.25;
							}
							else 
							{
								inviconalpha *= 0.25;
								inviconscalex *= 0.8;
								inviconscaley *= 0.8;
							}
						}
					}

					DrawInventoryIcon(item, itempos + (boxsize.X * i, 0), flags | DI_ITEM_CENTER, inviconalpha, (-1, -1), (inviconscalex, inviconscaley) );
				}
			}
			
			// Hotkeys
			string LegendStr = "";
			string UserKeyString;
			Array<String> UserKeys;
			int LegendFlags = flags;
			int LegendFontCLR = font.cr_green;
			double LegendAlpha = 0.9;
			Vector2 LegendScale = (0.875, 0.875);
			Vector2 LegendPos = position + (boxsize.X * i, 0); // (324, -25) + (0, yadd)
			Vector2 LegendPosV = LegendPos;
			vector2 ValPos = (5, 20); //(482, 20);
			//Console.Printf("(%s, i: %d) position.x: %d, position.y: %d, boxsize.X * i: %d", item.GetClassName(), i, position.x, position.y, (boxsize.X * i));
			//Console.Printf("(%s, i: %d) LegendPos.x: %d, LegendPos.y: %d", item.GetClassName(), i, LegendPos.x, LegendPos.y);
			//Console.Printf("(%s, i: %d) LegendPosV.x: %d, LegendPosV.y: %d", item.GetClassName(), i, (LegendPosV.x + ValPos.x), (LegendPosV.y + ValPos.y));

			if (item is "AetheriusUsableHealthInventory" && item.Amount > 0)
			{
				UserKeyString = UIKeybinds.getKeyboard("QuickHeal");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			
			if (item is "AetheriusUsableManaInventory" && item.Amount > 0) 
			{
				UserKeyString = UIKeybinds.getKeyboard("QuickMana");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			
			if ((item is "LesserVimstone" ||
					 item is "GreaterVimstone")
					&& item.Amount > 0) 
			{
				UserKeyString = UIKeybinds.getKeyboard("pukename QuickuseVimstone");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			
			if ((item is "MonsterMunchies")
					&& item.Amount > 0) 
			{
				UserKeyString = UIKeybinds.getKeyboard("use MonsterMunchies");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}
			
			if ((item is "RockbombShard")
					&& item.Amount > 0) 
			{
				UserKeyString = UIKeybinds.getKeyboard("use RockbombShard");
				if (UserKeyString != "")
				{
					UserKeyString.Split(UserKeys,", ");
					LegendStr.AppendFormat("%s", UserKeys[0]);
				}
			}

			if (LegendStr != "") 
			{
				//Console.Printf(LegendStr);
				//Console.Printf("x: %d, y: %d", LegendPosV.x, LegendPosV.y);
				DrawString(mConFont, LegendStr, LegendPosV + ValPos, flags | DI_TEXT_ALIGN_CENTER, LegendFontCLR, LegendAlpha, -1, 4, LegendScale);
			}
			
			// Amount & Limits
			if (parms.amountfont != null && (item.Amount >= 0 || (flags & DI_ALWAYSSHOWCOUNTERS)))
			{
				if (item.MaxAmount > 0) ItemHeldRatio = (item.Amount * 1000) / item.MaxAmount;
				else ItemHeldRatio = 0;
				
				if (item is "Coin")
				{
					fnt = "INDEXFONT_DVDS";
					parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
					if (dvds_inventorybartextsize == 0) textposextra = (0,0);
					if (dvds_inventorybartextsize == 1) textposextra = (0,0);
					if (dvds_inventorybartextsize == 2) textposextra = (0,5);
					DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), textpos + (boxsize.X * i, 0) + (-14,0) + textposextra, flags | DI_TEXT_ALIGN_CENTER, font.CR_GOLD, parms.itemalpha);
				}
				else
				{
					if (dvds_inventorybartextsize == 0) fnt = "INDEXFONT_DVDS";
					if (dvds_inventorybartextsize == 1) fnt = "INDEXFONT_DVDSM";
					if (dvds_inventorybartextsize == 2) fnt = "INDEXFONT_DVDSL";
					parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);

					if (dvds_imposeinventorylimits)
					{
						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (-1,0);
						if (dvds_inventorybartextsize == 2) textposextra = (-3,1);
						if (item.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (item.Amount >= item.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), textpos + (boxsize.X * i, 0) + (-26,-19) + textposextra, flags | DI_TEXT_ALIGN_LEFT, texttranslation, parms.itemalpha);

						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (0,0);
						if (dvds_inventorybartextsize == 2) textposextra = (-1,1);
						DrawString(parms.amountfont, "/", textpos + (boxsize.X * i, 0) + (-14,-10) + textposextra, flags | DI_TEXT_ALIGN_CENTER, Font.CR_WHITE, parms.itemalpha);

						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (1,0);
						if (dvds_inventorybartextsize == 2) textposextra = (1,2);
						DrawString(parms.amountfont, FormatNumber(item.MaxAmount, 0, 10), textpos + (boxsize.X * i, 0) + (-2,-2) + textposextra, flags | DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD, parms.itemalpha);
						
						textposextra = (0,0);
					}
					else
					{
						if (item.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (item.Amount >= item.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (1,0);
						if (dvds_inventorybartextsize == 2) textposextra = (1,2);
						DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), textpos + (boxsize.X * i, 0) + (-2,-2) + textposextra, flags | DI_TEXT_ALIGN_RIGHT, texttranslation, parms.itemalpha);

						textposextra = (0,0);
					}
				}
			}
			i++;
		}
		// Is there something to the left?
		if (CPlayer.mo.FirstInv() != CPlayer.mo.InvFirst)
		{
			DrawTexture(parms.left, position + (-parms.arrowoffset.X, parms.arrowoffset.Y), flags | DI_ITEM_RIGHT|DI_ITEM_VCENTER);
		}
		// Is there something to the right?
		if (item != NULL)
		{
			DrawTexture(parms.right, position + parms.arrowoffset + (width, 0), flags | DI_ITEM_LEFT|DI_ITEM_VCENTER);
		}
	}
}

class AetheriusStatusBarMain : AetheriusStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;
	

	override void Init()
	{
		// Run the parent status bar's Init() function
		//   It's generally a good idea to call the super class's function whenever you 
		//   are overriding a function, in case some critical code is executed by the 
		//   parent class - unless you know specifically that you want to completely
		//   replace the parent class's function instead
		Super.Init();
		SetSize(0, 320, 200); // This sets the pixel height of the status bar and the base resolution

		// Initialize the fonts - there's actually a wiki page on this part: 
		// https://zdoom.org/wiki/Classes:HUDFont

		// Create the font used for the fullscreen HUD
		Font fnt = "DQHUDFONTSML";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 2, 2);
		fnt = "INDEXFONT_DVDS";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
		mAmountFont = HUDFont.Create("INDEXFONT");
		fnt = "CONFONT";
		mConFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), Mono_CellLeft);

		// Initialize the inventory bar
		diparms = InventoryBarState.Create();
	}

	override int GetProtrusion(double scaleratio) const
	{
		return 0;
	}

	override void Draw (int state, double TicFrac)
	{
		// Run the parent status bar's Draw() function
		Super.Draw (state, TicFrac);
		
		BeginHUD(); // You'd use BeginStatusBar(); if you wanted a traditional bar instead of fullscreen
		DrawFullScreenStuff();
	}

	protected void DrawFullScreenStuff()
	{
		SetSize(0, 1920, 1080);
		AetheriusPlayerPawn CPlayerPawn;
		CPlayerPawn = AetheriusPlayerPawn(CPlayer.mo);
		let MiscItem = PlayerStatItem(CPlayerPawn.FindInventory("PlayerStatItem"));

		if (screenblocks < 12)
		{
			//*************************
			//*************************
			//*************************
			//*************************
			//*************************
			//******  Left Side  ******
			//*************************
			//*************************
			//*************************
			//*************************
			//*************************
			
			//************
			//*Upper Left*
			//************
			//***********************************
			//**"Boss" Lifemeter [2401 to 2408]** UPPER LEFT
			//***********************************
			// 2401 - Boss HP Label 
			// 2402 - Boss HP Amounts, 
			// 2403 - Boss HP Meter Border, 
			// 2404-2405 - Boss Meter Notches 
			// 2406 - Boss HP Meter Glass 
			// 2407 - Boss Name
			// 2408 - Boss Portrait
			//
			
			//************
			//*Lower Left*
			//************
			//**************************
			//**"LEVEL UP" Icon [2279]**
			//**************************
			// 2279 - Level Up Icon
			// 2280 - Dash Available Icon
			// 2281-2320 - Character Portrait Pieces
			// 2321-2331 - QuickSpell Text Costs
			// 2332-2342 - QuickSpell Bind Key Display
			// 2343-2353 - Not Enough Mana Icons
			// 2354-2364 - QuickSpell Icons
			// 2365 - QuickSpell Box Style
			//
			//******************************
			//**Dash Available Icon [2280]**
			//******************************
			//
			//**********************************
			//**Character Portrait [2281-2320]**
			//**********************************
			//
			//***********************************************
			// Damage/Injury Overlays (Portraits) [2292-2315]
			//***********************************************
			//
			//*******************************
			// Main Character Portrait [2316]
			//*******************************
			//
			//********************************
			//* Quickspell Bar [2321 to 2365]*
			//********************************
			//
			//****************************
			//**Spell Box [2371 to 2379]**
			//****************************
			// 2371 - Spell Cost [Spell Box]
			// 2372 - Spell "<" Button [Spell Box]
			// 2373 - Spell ">" Button [Spell Box]
			// 2374 - Spell "Left" Button [Spell Box]
			// 2375 - Spell "Right" Button [Spell Box]
			// 2376 - Spell "Use" Button [Spell Box]
			// 2377 - Icon Shown on Spell Box [Spell Box]
			// 2378 - Current Spell Icon [Spell Box]
			// 2379 - Spell Style Box [Spell Box]
			//
			//******************************************
			//** EXP-Gains/Kills/Combos [2001 to 2008]**
			//******************************************
			// 2001 	- 	EXP Combo Meter Frame [Combos]
			// 2002 	- 	EXP Combo Meter Notches [Combos]
			// 2003 	- 	EXP Combo Meter Glass [Combos]
			// 2004 	- 	# of Kills [Combos]
			// 2005 	- 	"Kills" Label [Combos]
			// 2006 	- 	"OVERKILL" text [Combos]
			// 2007 	- 	EXP [from last kill] [Combos]
			// 2008 	- 	EXP Total + Combo Bonus [combo]
			//
			//*****************************************
			//** HP Info [2010, 2012 & 2023 to 2030] **
			//*****************************************
			// 2010 - HP Gained during "LEVEL UP" [HP Info]
			// 2012 - HP Label [HP Info]
			// 2023 - HP Amounts [HP Info]
			// 2024 - HP Meter "Critical" Border [HP Info]
			// 2025 - HP Meter Frame [HP Info]
			// 2026 - HP Meter Bonus/Penalty Glow
			// 2027 - HP Meter "Overlife" Notches [HP Info]
			// 2028 - HP Meter Notches [HP Info] 
			// 2029 - HP Meter Poison Frame
			// 2030 - HP Meter Glass [HP Info]
			//
			//**********************************
			//** MP Info [2010 & 2013 to 2039]**
			//**********************************
			// 2010 - MP Gained during "LEVEL UP" [MP Info]
			// 2013 - MP Label [MP Info]
			// 2033 - MP Amounts [MP Info]
			// 2034 - MP Meter "Focus" Border [MP Info]
			// 2035 - MP Meter Border [MP Info]
			// 2036 - MP Meter Bonus/Penalty Glow 
			// 2037 - MP Meter "Overmagic" Notches [MP Info]
			// 2038 - MP Meter Notches [MP Info]
			// 2039 - MP Meter Glass [MP Info]
			//
			//***************************************
			//** AP/HLCR Info [2014 & 2043 to 2049]**
			//***************************************
			// 2014 - AP/HLCR Label [AP/HLCR Info]
			// 2043 - AP/HLCR Amounts [AP/HLCR Info]
			// 2044 - AP "Armor Type" Meter Frame / HLCR "OverHeat" Meter Frame [AP/HLCR Info]
			// 2045 - AP/HLCR Meter Frame [AP/HLCR Info]
			// 2046 - HLCR Bonus/Penalty Glow [HLCR Info]
			// 2047 - AP Meter Notches / Hellcore "Overheat" Meter Notches [AP/HLCR Info]
			// 2048 - Hellcore Meter Notches [AP/HLCR Info]
			// 2049 - AP/HLCR Meter Glass [AP/HLCR Info]
			//
			//***************************************
			//** STAMINA Info [2015 & 2053 to 2060]**
			//***************************************
			// 2015 - Stamina Label [STAMINA Info]
			// 2053 - Stamina Amounts [STAMINA Info]
			// 2054 - Stamina "Focus Charge" Meter Frame [STAMINA Info]
			// 2055 - Stamina "Tension Charge" Meter Frame [STAMINA Info]
			// 2056 - Stamina Meter Frame [STAMINA Info]
			// 2057 - Stamina Meter Bonus/Penalty Glow
			// 2058 - Stamina Meter "OverStamina" Notches [STAMINA Info]
			// 2059 - Stamina Meter Notches [STAMINA Info]
			// 2060 - Stamina Meter Glass [STAMINA Info]
			//
			//****************************
			//** LVL Info [2016 to 2066]**
			//****************************
			// 2016 - LVL Label [LVL Info]
			// 2063 - LVL Amounts [LVL Info]
			// 2064 - LVL Meter Frame [LVL Info]
			// 2065 - LVL Meter Notches [LVL Info]
			// 2066 - LVL Meter Glass [LVL Info]
			//
			//****************************
			//** SV% Info [2017 to 2076]**
			//****************************
			// 2017 - SV% Label [SV% Info]
			// 2073 - SV% Amounts [SV% Info]
			// 2074 - SV% Meter Frame [SV% Info]
			// 2075 - SV% Meter Notches [SV% Info]
			// 2076 - SV% Meter Glass [SV% Info]
			//
			//****************************
			//** AB% Info [2018 to 2086]**
			//****************************
			// 2018 - AB% Label [AB% Info]
			// 2083 - AB% Amounts [AB% Info]
			// 2084 - AB% Meter Frame [AB% Info]
			// 2085 - AB% Meter Notches [AB% Info]
			// 2086 - AB% Meter Glass [AB% Info]
			//
			//****************************
			//** EV% Info [2019 to 2096]**
			//****************************
			// 2019 - EV% Label [EV% Info]
			// 2093 - EV% Amounts [EV% Info]
			// 2094 - EV% Meter Frame [EV% Info]
			// 2095 - EV% Meter Notches [EV% Info]
			// 2096 - EV% Meter Glass [EV% Info]
			//
			//****************************
			//** EXP Info [2020 to 5106]**
			//****************************
			// 2020 - EXP Label [EXP Info]
			// 2097 - EXP Meter Border [EXP Info]
			// 2098 - EXP Meter Ruler [EXP Info]
			// 2099 - EXP Meter Notches [EXP Info]
			// 2100 - EXP Meter Glass [EXP Info]
			//
				//****************************************
				//** Tension Charge/Timer [2103 to 2107]**
				//****************************************
				// 2103 - Tension-Charge Meter "Psyche" Border [Tension Charge/Timer]
				// 2104 - Tension-Charge Meter Border [Tension Charge/Timer]
				// 2105 - Tension-Charge Meter Notches [Tension Charge/Timer]
				// 2106 - Tension-Timer Notches [Tension Charge/Timer]
				// 2107 - Tension-Timer Glass [Tension Charge/Timer]
				// Tension-Charge Meter Border
			//
				//**************************************
				//** Tension OverPsyche [2275 to 7634]**
				//**************************************
				//	2275	-	Tension-OverPsyche Meter "OverPsyched" Border [Tension-OverPsyche]
				//	2276	-	Tension-OverPsyche Meter Border [Tension-OverPsyche]
				//	2277	-	Tension-OverPsyche Meter Notches [Tension-OverPsyche]
				//	2278	-	Tension-OverPsyche Meter Glass [Tension-OverPsyche]
				// MiscellaneousVars[250] - OverPsyche Timer [Current]
				// MiscellaneousVars[262] - OverPsyche Timer [Max]
			//
				//************************************
				//** Tension Cooldown [2113 to 2116]**
				//************************************
				// 2113 - Tension-Cooldown Meter "Max Cooldown" Border [Tension Cooldown]
				// 2114 - Tension-Cooldown Meter Border [Tension Cooldown]
				// 2115 - Tension-Cooldown Meter Notches [Tension Cooldown]
				// 2116 - Tension Star Icon [Tension Star]
				// 2117 - Tension Cooldown Meter Glass [Tension Cooldown]
				// Tension-Cooldown Meter "Max Cooldown" Border
			//
			//******************************************************
			//**Armor Icons [Flora's & Sauron-type] [2118 to 2133]**
			//******************************************************
			// 2118 - Sauron Helmet Icon [Armor Icons]
			// 2119 - Sauron Gauntlets Icon [Armor Icons]
			// 2120 - One Ring Icon [Armor Icons]
			// 2121-2133 - Flora-Specific Armor Icons [Armor Icons]
			//
			//********************************************
			//**Stat/AeonPts Icons/Values [2141 to 2158]**
			//********************************************
			// 2141 - "Aeon Points" Icon [Stat/AeonPts Icons/Values]
			// 2142 - "Aeon Points" Value [Stat/AeonPts Icons/Values]
			// 2143 - "Strength" Icon [Stat/AeonPts Icons/Values]
			// 2144 - "Strength" Value [Stat/AeonPts Icons/Values]
			// 2145 - "Defense" Icon [Stat/AeonPts Icons/Values]
			// 2146 - "Defense" Value [Stat/AeonPts Icons/Values]
			// 2147 - "Sorcery" Icon [Stat/AeonPts Icons/Values]
			// 2148 - "Sorcery" Value [Stat/AeonPts Icons/Values]
			// 2149 - "Therapeusis" Icon [Stat/AeonPts Icons/Values]
			// 2150 - "Therapeusis" Value [Stat/AeonPts Icons/Values]
			// 2151 - "Agility" Icon [Stat/AeonPts Icons/Values]
			// 2152 - "Agility" Value [Stat/AeonPts Icons/Values]
			// 2153 - "Deftness" Icon [Stat/AeonPts Icons/Values]
			// 2154 - "Deftness" Value [Stat/AeonPts Icons/Values]
			// 2155 - "Balance" Icon [Stat/AeonPts Icons/Values]
			// 2156 - "Balance" Value [Stat/AeonPts Icons/Values]
			// 2157 - "Jumping" Icon [Stat/AeonPts Icons/Values]
			// 2158 - "Jumping" Value [Stat/AeonPts Icons/Values]
			//
			//*******************************************
			//**Buff/Debuff Icons/Timers [2161 to 2200]**
			//*******************************************
			//
			
			
			//************************
			//************************
			//************************
			//************************
			//************************
			//*******  Middle  *******
			//************************
			//************************
			//************************
			//************************
			//************************
				
			//******************
			//***Lower Middle***
			//******************
			//***************************************
			//**Buff/Debuff Messages [2201 to 2205]**
			//***************************************
			// 2201 - Buff/Debuff Message #1
			// 2202 - Buff/Debuff Message #2
			// 2203 - Buff/Debuff Message #3
			// 2204 - Buff/Debuff Message #4
			// 2205 - Buff/Debuff Message #5
			//
			
			//************************
			//************************
			//************************
			//************************
			//************************
			//*******Right Side*******
			//************************
			//************************
			//************************
			//************************
			//************************
			
			//*****************
			//***Lower Right***
			//*****************
			//************************************************************
			//**Weapon/Ammo Display and Sceptre-EXP meter [2211 to 2230]**
			//************************************************************
			// 2211 - Spin Attack Indicator Icon [Weapon/Ammo Display and Sceptre-EXP meter]
			// 2212 - "AMMO" type label / Level Label and Amount [Hellcore] [Weapon/Ammo Display and Sceptre-EXP meter]
			// 2213 - "AMMO" Amounts / Sceptre EXP [Weapon/Ammo Display and Sceptre-EXP meter]
			// 2214 - "AMMO" Meter Empty "Glow" Border [Weapon/Ammo Display and Sceptre-EXP meter]
			// 2215 - "AMMO" Meter / Sceptre EXP Meter Border [Weapon/Ammo Display and Sceptre-EXP meter]
			// 2216 - "AMMO" Meter Notches / Sceptre Meter Notches [Weapon/Ammo Display and Sceptre-EXP meter]
			// 2217 - "AMMO" Meter / Sceptre EXP Meter Glass [Weapon/Ammo Display and Sceptre-EXP meter]
			//
			// 2221 	Weapon OverIcon #1 [Weapon/Ammo Display and Sceptre-EXP meter]
			// 2222 	Weapon UnderIcon #1 [for Sigil outline for part amount display]
			// 2223 - Tome of Power Spell Cost 1 [Heretic]
			// 2224 - Tome of Power Spell Cost 2 [Heretic]
			// 2225 - "HEAT"/"MP" type label / Level Label and Amount [Hellcore] [MinigunHeat/MP Display and meter 2]
			// 2226 - "HEAT"/"MP" Amounts / Sceptre EXP [MinigunHeat/MP Display and meter 2]
			// 2227 - "HEAT"/"MP" Meter Empty "Glow" Border [MinigunHeat/MP Display and meter 2]
			// 2228 - "HEAT"/"MP" Meter / Sceptre EXP Meter Border [MinigunHeat/MP Display and meter 2]
			// 2229 - "HEAT"/"MP" Meter Notches / Sceptre Meter Notches [MinigunHeat/MP Display and meter 2]
			// 2230 - "HEAT"/"MP" Meter / Sceptre EXP Meter Glass [MinigunHeat/MP Display and meter 2]
			// 2231-2241		-		Weapon Slot 
			// 2242		-		Hell Warrior Shield Level
			//
			//************************************************************* 
			// FlameCount Meter [for Heretic's Phoenix Rod using Tomed Alt-Fires]
			//************************************************************* 
			// 2208 - FlameCount Meter Border
			// 2209 - FlameCount Meter Notches
			// 2210 - FlameCount Meter Glass
			//
			
			SetSize(0, 320, 200);
			// Draw the keys. This does not use a special draw function like SBARINFO because the specifics will be different for each mod 
			// so it's easier to copy or reimplement the following piece of code instead of trying to write a complicated all-encompassing solution.
			Vector2 keypos = (-10, 24); // (-10, 2)
			if (gameinfo.gametype == GAME_Doom) keypos.x -= 0;
			if (gameinfo.gametype == GAME_Heretic) keypos.x -= 4;
			if (gameinfo.gametype == GAME_Hexen) keypos.x -= 10;
			if (gameinfo.gametype == GAME_Strife) keypos.x -= 8;

			int rowc = 0;
			double roww = 0;
			bool showkeys = true;
			if (!automapactive)
			{
				if (gameinfo.gametype == GAME_Hexen) showkeys = false;
				if (gameinfo.gametype == GAME_Strife) showkeys = false;
			}
			
			if (showkeys)
			{
				for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
				{
					if (i is "Key" && i.Icon.IsValid())
					{
						DrawTexture(i.Icon, keypos, DI_SCREEN_RIGHT_TOP|DI_ITEM_LEFT_TOP);
						Vector2 size = TexMan.GetScaledSize(i.Icon);
						keypos.Y += size.Y + 2;
						roww = max(roww, size.X);
						if (++rowc == 6)
						{
							keypos.Y = 24;
							keypos.X -= roww + 2;
							roww = 0;
							rowc = 0;
						}
					}
				}
			}
		}

		int invX = -48; // -20
		int invXExtra;
		int invY = -123; // -20
		int invYExtra;
		int ItemHeldRatio;
		int texttranslation;
		if (screenblocks < 12)
		{
			// Draw the currently selected inventory item
			//  void DrawInventoryIcon(Inventory item, Vector2 pos, int flags = 0, double alpha = 1.0, Vector2 boxsize = (-1, -1), Vector2 scale = (1.,1.))
			//  Parameters:
			//   Inventory item name - CPlayer.mo.InvSel is the current inventory selected by the player
			//   All other parameters are the same as DrawImage
			//
			//  A major difference from SBARINFO is that you have to manually draw the inventory amount			if (CPlayer.mo.InvSel != null)
			if (CPlayer.mo.InvSel != null)
			{
				if (CPlayer.mo.InvSel.MaxAmount > 0) ItemHeldRatio = (CPlayer.mo.InvSel.Amount * 1000) / CPlayer.mo.InvSel.MaxAmount;
				else ItemHeldRatio = 0;
				//Console.Printf("%d", ItemHeldRatio);
				DrawInventoryIcon(CPlayer.mo.InvSel, (-14, invY + 17));
				if (CPlayer.mo.InvSel is "Coin")
				{
					invXExtra = 18;
					invYExtra = -10;
					DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 0, 6), (invX + invXExtra, invY + invYExtra), DI_TEXT_ALIGN_RIGHT, font.CR_GOLD);
				}
				else
				{
					if (dvds_imposeinventorylimits)
					{
						invXExtra = 0;
						invYExtra = -23;
						if (CPlayer.mo.InvSel.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (CPlayer.mo.InvSel.Amount >= CPlayer.mo.InvSel.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 6), (invX + invXExtra, invY + invYExtra), DI_TEXT_ALIGN_RIGHT, texttranslation);
						DrawString(mHUDFont, "/", (invX + 22, invY - 10), DI_TEXT_ALIGN_RIGHT, font.CR_WHITE);
						DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.MaxAmount, 6), (invX - 0, invY + 3), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, font.CR_GOLD);
					}
					else
					{
						invXExtra = 18;
						invYExtra = -10;
						if (CPlayer.mo.InvSel.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (CPlayer.mo.InvSel.Amount >= CPlayer.mo.InvSel.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 6), (invX + invXExtra, invY + invYExtra), DI_TEXT_ALIGN_RIGHT, texttranslation);
					}
				}
			}

			// void DrawInventoryBar(InventoryBarState parms, Vector2 position, int numfields, int flags = 0, double bgalpha = 1.)
			// Parameters:
			//  The InventoryBarState variable that you declared and initialized above
			//  The desired coordinates of the bar
			//  The number of inventory items to show in the bar at one time
			//  Positioning flags
			//  Alpha of the background for the inventory bar (0.0 to 1.0)
			DrawInventoryBar(diparms, (dvds_inventorybarX, dvds_inventorybarY), dvds_inventorybarboxes, DI_SCREEN_CENTER_BOTTOM, HX_SHADOW);
		}
	}
}
