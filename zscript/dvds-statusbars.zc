class InventoryBarStateDVDS : InventoryBarState
{
	TextureID box;
	TextureID selector;
	Vector2 boxsize;
	Vector2 boxofs;
	Vector2 selectofs;
	Vector2 innersize;
		
	TextureID left;
	TextureID right;
	Vector2 arrowoffset;

	double itemalpha;
	
	HUDFont amountfont;
	int cr;
	int flags;

	private static void Init(InventoryBarState me, HUDFont indexfont, int cr, double itemalpha, Vector2 innersize,	String leftgfx, String rightgfx, Vector2 arrowoffs, int flags)
	{
		me.itemalpha = itemalpha;
		if (innersize == (0, 0))
		{
			me.boxofs = (2, 2);
			me.innersize = me.boxsize - (4, 4);	// Default is based on Heretic's and Hexens icons.
		}
		else
		{
			me.innersize = innersize;
			me.boxofs = (me.boxsize - me.innersize) / 2;
		}
		if (me.selector.IsValid())
		{
			Vector2 sel = TexMan.GetScaledSize(me.selector);
			me.selectofs = (me.boxsize - sel) / 2;
		}
		me.left = TexMan.CheckForTexture(leftgfx, TexMan.TYPE_MiscPatch);
		me.right = TexMan.CheckForTexture(rightgfx, TexMan.TYPE_MiscPatch);
		me.arrowoffset = arrowoffs;
		me.arrowoffset.Y += me.boxsize.Y/2;	// default is centered to the side of the box.
		if (indexfont == null) 
		{
			me.amountfont = HUDFont.Create("INDEXFONT_DVDS");
			if (cr == Font.CR_UNTRANSLATED) cr = Font.CR_GOLD;
		}
		else me.amountfont = indexfont;
		me.cr = cr;
		me.flags = flags;
	}

	// The default settings here are what SBARINFO is using.
	static InventoryBarState Create(HUDFont indexfont = null, int cr = Font.CR_UNTRANSLATED, double itemalpha = 1.,
							String boxgfx = "ARTIBOX", String selgfx = "SELECTBO", Vector2 innersize = (0, 0),
							String leftgfx = "INVGEML1", String rightgfx = "INVGEMR1", Vector2 arrowoffs = (0, 0), int flags = 0)
	{
		let me = new ("InventoryBarState");
		me.box = TexMan.CheckForTexture(boxgfx, TexMan.TYPE_MiscPatch);
		me.selector = TexMan.CheckForTexture(selgfx, TexMan.TYPE_MiscPatch);
		if (me.box.IsValid() || me.selector.IsValid()) me.boxsize = TexMan.GetScaledSize(me.box.IsValid()? me.box : me.selector);
		else me.boxsize = (32., 32.);
		Init(me, indexfont, cr, itemalpha, innersize, leftgfx, rightgfx, arrowoffs, flags);
		return me;
	}
	
	// The default settings here are what SBARINFO is using.
	static InventoryBarState CreateNoBox(HUDFont indexfont = null, int cr = Font.CR_UNTRANSLATED, double itemalpha = 1.,
							Vector2 boxsize = (32, 32), String selgfx = "SELECTBO", Vector2 innersize = (0, 0),
							String leftgfx = "INVGEML1", String rightgfx = "INVGEMR1", Vector2 arrowoffs = (0, 0), int flags = 0)
	{
		let me = new ("InventoryBarState");
		me.box.SetInvalid();
		me.selector = TexMan.CheckForTexture(selgfx, TexMan.TYPE_MiscPatch);
		me.boxsize = boxsize;
		Init(me, indexfont, cr, itemalpha, innersize, leftgfx, rightgfx, arrowoffs, flags);
		return me;
	}
	
}
	
	
class AetheriusStatusBar : BaseStatusBar
{
	// Except for the placement information this gets all info from the struct that gets passed in.
	void DrawInventoryBar(InventoryBarState parms, Vector2 position, int numfields, int flags = 0, double bgalpha = 1.)
	{
		int ItemHeldRatio;
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassCheck = CallACS("OtherVarCheckDECORATE",4);

		Font fnt = "INDEXFONT_DVDSM";
		if (dvds_inventorybartextsize == 0) fnt = "INDEXFONT_DVDS";
		if (dvds_inventorybartextsize == 1) fnt = "INDEXFONT_DVDSM";
		if (dvds_inventorybartextsize == 2) fnt = "INDEXFONT_DVDSL";
		parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
		parms.box = TexMan.CheckForTexture("ARTIBOX", TexMan.TYPE_MiscPatch);
		parms.selector = TexMan.CheckForTexture("SELECTBO", TexMan.TYPE_MiscPatch);
		if (CharacterClass == 0) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX0", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB0", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 1) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX1", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB1", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 2) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX2", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB2", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 8) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX8", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB8", TexMan.TYPE_MiscPatch);
		}
		if (CharacterClass == 9) 
		{
			parms.box = TexMan.CheckForTexture("ARTIBOX9", TexMan.TYPE_MiscPatch);
			parms.selector = TexMan.CheckForTexture("SELECTB9", TexMan.TYPE_MiscPatch);
		}

		double width = parms.boxsize.X * numfields;
		[position, flags] = AdjustPosition(position, flags, width, parms.boxsize.Y);
		
		CPlayer.mo.InvFirst = ValidateInvFirst(numfields);
		if (CPlayer.mo.InvFirst == null) return;	// Player has no listed inventory items.
		
		Vector2 boxsize = parms.boxsize;
		// First draw all the boxes
		for(int i = 0; i < numfields; i++)
		{
			DrawTexture(parms.box, position + (boxsize.X * i, 0), flags | DI_ITEM_LEFT_TOP, bgalpha);
		}
		
		// now the items and the rest
		
		Vector2 itempos = position + boxsize / 2;
		Vector2 textpos = position + boxsize - (1, 1 + parms.amountfont.mFont.GetHeight());
		Vector2 textposextra;

		int i = 0;
		Inventory item;
		double inviconalpha, inviconalphapulse, inviconscalex, inviconscaley;
		int inviconalphatimer = level.time % 35;
		CPlayer.inventorytics = 0; // Makes it you can immediately "use" items after selecting through them.
		
		int texttranslation = font.CR_UNTRANSLATED;
		//Console.Printf("%d", CPlayer.inventorytics);
		//Console.Printf("texttranslation: %d", texttranslation);
		AetheriusPlayerPawn cplayerpawn;
		cplayerpawn = AetheriusPlayerPawn(CPlayer.mo);
		//if (cplayerpawn) Console.Printf("test");
		for(item = CPlayer.mo.InvFirst; item != NULL && i < numfields; item = item.NextInv())
		{
			for(int j = 0; j < 2; j++)
			{
				if (j ^ !!(flags & DI_DRAWCURSORFIRST))
				{
					if (item == CPlayer.mo.InvSel)
					{
						double flashAlpha = bgalpha;
						if (flags & DI_ARTIFLASH) flashAlpha *= itemflashFade;
						DrawTexture(parms.selector, position + parms.selectofs + (boxsize.X * i, 0), flags | DI_ITEM_LEFT_TOP, flashAlpha);
					}
				}
				else
				{
					inviconscalex = 1.0;
					inviconscaley = 1.0;
					if (item is "Coin")
					{
						inviconalpha = 0.875;
					}
					else
					{
						if (item.Amount <= 0)
						{
							inviconalpha = 0.4375; 
							inviconscalex *= 0.875;
							inviconscaley *= 0.875;
						}
						else 
						if (item.Amount >= item.MaxAmount) 
						{
							if (inviconalphatimer == 0) inviconalphapulse = -0.125;
							if (inviconalphatimer == 1 || inviconalphatimer == 39) inviconalphapulse = -0.1125;
							if (inviconalphatimer == 2 || inviconalphatimer == 38) inviconalphapulse = -0.1000;
							if (inviconalphatimer == 3 || inviconalphatimer == 37) inviconalphapulse = -0.0875;
							if (inviconalphatimer == 4 || inviconalphatimer == 36) inviconalphapulse = -0.075;
							if (inviconalphatimer == 5 || inviconalphatimer == 35) inviconalphapulse = -0.0625;
							if (inviconalphatimer == 6 || inviconalphatimer == 34) inviconalphapulse = -0.05;
							if (inviconalphatimer == 7 || inviconalphatimer == 33) inviconalphapulse = -0.0375;
							if (inviconalphatimer == 8 || inviconalphatimer == 32) inviconalphapulse = -0.025;
							if (inviconalphatimer == 9 || inviconalphatimer == 31) inviconalphapulse = -0.0125;
							if (inviconalphatimer == 10 || inviconalphatimer == 30) inviconalphapulse = -0.00;
							if (inviconalphatimer == 11 || inviconalphatimer == 29) inviconalphapulse = 0.0125;
							if (inviconalphatimer == 12 || inviconalphatimer == 28) inviconalphapulse = 0.025;
							if (inviconalphatimer == 13 || inviconalphatimer == 27) inviconalphapulse = 0.0375;
							if (inviconalphatimer == 14 || inviconalphatimer == 26) inviconalphapulse = 0.05;
							if (inviconalphatimer == 15 || inviconalphatimer == 25) inviconalphapulse = 0.0625;
							if (inviconalphatimer == 16 || inviconalphatimer == 24) inviconalphapulse = 0.075;
							if (inviconalphatimer == 17 || inviconalphatimer == 23) inviconalphapulse = 0.0875;
							if (inviconalphatimer == 18 || inviconalphatimer == 22) inviconalphapulse = 0.10;
							if (inviconalphatimer == 19 || inviconalphatimer == 21) inviconalphapulse = 0.125;
							if (inviconalphatimer == 20) inviconalphapulse = 0.1375;
							inviconalphapulse *= 2;
							inviconalpha = 0.75 + inviconalphapulse;
							inviconscalex *= 1.0 + ((inviconalphapulse * 0.25));
							inviconscaley *= 1.0 + ((inviconalphapulse * 0.25));
						}
						else 
						{
							inviconalpha = 0.875;
							inviconscalex *= 0.9375;
							inviconscaley *= 0.9375;
						}
						if (cplayerpawn && cplayerpawn.buttons & BT_ZOOM) 
						{
							if (item.GetClassName() == "MedicinalHerb" ||
									item.GetClassName() == "StrongMedicine" ||
									item.GetClassName() == "SpecialMedicine" ||
									item.GetClassName() == "MiraclePotion" ||
									item.GetClassName() == "MonsterMunchies" || 
									item.GetClassName() == "RockbombShard" ||
									item.GetClassName() == "ArtiHealthNew" ||
									item.GetClassName() == "ArtiSuperHealthNew" ||
									item.GetClassName() == "MedPatchNew" ||
									item.GetClassName() == "MedicalKitNew" ||
									item.GetClassName() == "SurgeryKitNew") 
							{
								inviconalpha *= 4; 
								inviconscalex *= 1.25;
								inviconscaley *= 1.25;
							}
							else 
							{
								inviconalpha *= 0.25;
								inviconscalex *= 0.8;
								inviconscaley *= 0.8;
							}
						}
					}

					DrawInventoryIcon(item, itempos + (boxsize.X * i, 0), flags | DI_ITEM_CENTER, inviconalpha, (-1, -1), (inviconscalex, inviconscaley) );
				}
			}
			
			if (parms.amountfont != null && (item.Amount >= 0 || (flags & DI_ALWAYSSHOWCOUNTERS)))
			{
				if (item.MaxAmount > 0) ItemHeldRatio = (item.Amount * 1000) / item.MaxAmount;
				else ItemHeldRatio = 0;
				
				if (item is "Coin")
				{
					fnt = "INDEXFONT_DVDS";
					parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
					if (dvds_inventorybartextsize == 0) textposextra = (0,0);
					if (dvds_inventorybartextsize == 1) textposextra = (0,0);
					if (dvds_inventorybartextsize == 2) textposextra = (0,5);
					DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), textpos + (boxsize.X * i, 0) + (-14,0) + textposextra, flags | DI_TEXT_ALIGN_CENTER, font.CR_GOLD, parms.itemalpha);
				}
				else
				{
					if (dvds_inventorybartextsize == 0) fnt = "INDEXFONT_DVDS";
					if (dvds_inventorybartextsize == 1) fnt = "INDEXFONT_DVDSM";
					if (dvds_inventorybartextsize == 2) fnt = "INDEXFONT_DVDSL";
					parms.amountfont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);

					if (dvds_imposeinventorylimits)
					{
						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (-1,0);
						if (dvds_inventorybartextsize == 2) textposextra = (-3,1);
						if (item.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (item.Amount >= item.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), textpos + (boxsize.X * i, 0) + (-26,-19) + textposextra, flags | DI_TEXT_ALIGN_LEFT, texttranslation, parms.itemalpha);

						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (0,0);
						if (dvds_inventorybartextsize == 2) textposextra = (-1,1);
						DrawString(parms.amountfont, "/", textpos + (boxsize.X * i, 0) + (-14,-10) + textposextra, flags | DI_TEXT_ALIGN_CENTER, Font.CR_WHITE, parms.itemalpha);

						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (1,0);
						if (dvds_inventorybartextsize == 2) textposextra = (1,2);
						DrawString(parms.amountfont, FormatNumber(item.MaxAmount, 0, 10), textpos + (boxsize.X * i, 0) + (-2,-2) + textposextra, flags | DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD, parms.itemalpha);
						
						textposextra = (0,0);
					}
					else
					{
						if (item.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (item.Amount >= item.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						if (dvds_inventorybartextsize == 0) textposextra = (0,0);
						if (dvds_inventorybartextsize == 1) textposextra = (1,0);
						if (dvds_inventorybartextsize == 2) textposextra = (1,2);
						DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 6), textpos + (boxsize.X * i, 0) + (-2,-2) + textposextra, flags | DI_TEXT_ALIGN_RIGHT, texttranslation, parms.itemalpha);

						textposextra = (0,0);
					}
				}
			}
			i++;
		}
		// Is there something to the left?
		if (CPlayer.mo.FirstInv() != CPlayer.mo.InvFirst)
		{
			DrawTexture(parms.left, position + (-parms.arrowoffset.X, parms.arrowoffset.Y), flags | DI_ITEM_RIGHT|DI_ITEM_VCENTER);
		}
		// Is there something to the right?
		if (item != NULL)
		{
			DrawTexture(parms.right, position + parms.arrowoffset + (width, 0), flags | DI_ITEM_LEFT|DI_ITEM_VCENTER);
		}
	}
}

class AetheriusStatusBarMain : AetheriusStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;
	

	override void Init()
	{
		// Run the parent status bar's Init() function
		//   It's generally a good idea to call the super class's function whenever you 
		//   are overriding a function, in case some critical code is executed by the 
		//   parent class - unless you know specifically that you want to completely
		//   replace the parent class's function instead
		Super.Init();
		SetSize(0, 320, 200); // This sets the pixel height of the status bar and the base resolution

		// Initialize the fonts - there's actually a wiki page on this part: 
		// https://zdoom.org/wiki/Classes:HUDFont

		// Create the font used for the fullscreen HUD
		Font fnt = "DQHUDFONTSML";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 2, 2);
		fnt = "INDEXFONT_DVDS";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
		mAmountFont = HUDFont.Create("INDEXFONT");

		// Initialize the inventory bar
		diparms = InventoryBarState.Create();
	}

	override int GetProtrusion(double scaleratio) const
	{
		return 0;
	}

	override void Draw (int state, double TicFrac)
	{
		// Run the parent status bar's Draw() function
		Super.Draw (state, TicFrac);
		
		BeginHUD(); // You'd use BeginStatusBar(); if you wanted a traditional bar instead of fullscreen
		DrawFullScreenStuff ();
	}

	protected void DrawFullScreenStuff ()
	{
		SetSize(0, 320, 200);
		// Draw the keys. This does not use a special draw function like SBARINFO because the specifics will be different for each mod 
		// so it's easier to copy or reimplement the following piece of code instead of trying to write a complicated all-encompassing solution.
		Vector2 keypos = (-10, 24); // (-10, 2)
		if (gameinfo.gametype == GAME_Doom) keypos.x -= 0;
		if (gameinfo.gametype == GAME_Heretic) keypos.x -= 4;
		if (gameinfo.gametype == GAME_Hexen) keypos.x -= 10;
		if (gameinfo.gametype == GAME_Strife) keypos.x -= 8;

		int rowc = 0;
		double roww = 0;
		bool showkeys = true;
		if (!automapactive)
		{
			if (gameinfo.gametype == GAME_Hexen) showkeys = false;
			if (gameinfo.gametype == GAME_Strife) showkeys = false;
		}
		
		if (showkeys)
		{
			for(let i = CPlayer.mo.Inv; i != null; i = i.Inv)
			{
				if (i is "Key" && i.Icon.IsValid())
				{
					DrawTexture(i.Icon, keypos, DI_SCREEN_RIGHT_TOP|DI_ITEM_LEFT_TOP);
					Vector2 size = TexMan.GetScaledSize(i.Icon);
					keypos.Y += size.Y + 2;
					roww = max(roww, size.X);
					if (++rowc == 6)
					{
						keypos.Y = 24;
						keypos.X -= roww + 2;
						roww = 0;
						rowc = 0;
					}
				}
			}
		}

		SetSize(0, 320, 200);
		int invX = -48; // -20
		int invXExtra;
		int invY = -123; // -20
		int invYExtra;
		int ItemHeldRatio;
		int texttranslation;
		if (screenblocks < 12)
		{
			// Draw the currently selected inventory item
			//  void DrawInventoryIcon(Inventory item, Vector2 pos, int flags = 0, double alpha = 1.0, Vector2 boxsize = (-1, -1), Vector2 scale = (1.,1.))
			//  Parameters:
			//   Inventory item name - CPlayer.mo.InvSel is the current inventory selected by the player
			//   All other parameters are the same as DrawImage
			//
			//  A major difference from SBARINFO is that you have to manually draw the inventory amount			if (CPlayer.mo.InvSel != null)
			if (CPlayer.mo.InvSel != null)
			{
				if (CPlayer.mo.InvSel.MaxAmount > 0) ItemHeldRatio = (CPlayer.mo.InvSel.Amount * 1000) / CPlayer.mo.InvSel.MaxAmount;
				else ItemHeldRatio = 0;
				//Console.Printf("%d", ItemHeldRatio);
				DrawInventoryIcon(CPlayer.mo.InvSel, (-14, invY + 17));
				if (CPlayer.mo.InvSel is "Coin")
				{
					invXExtra = 18;
					invYExtra = -10;
					DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 0, 6), (invX + invXExtra, invY + invYExtra), DI_TEXT_ALIGN_RIGHT, font.CR_GOLD);
				}
				else
				{
					if (dvds_imposeinventorylimits)
					{
						invXExtra = 0;
						invYExtra = -23;
						if (CPlayer.mo.InvSel.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (CPlayer.mo.InvSel.Amount >= CPlayer.mo.InvSel.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 6), (invX + invXExtra, invY + invYExtra), DI_TEXT_ALIGN_RIGHT, texttranslation);
						DrawString(mHUDFont, "/", (invX + 22, invY - 10), DI_TEXT_ALIGN_RIGHT, font.CR_WHITE);
						DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.MaxAmount, 6), (invX - 0, invY + 3), DI_TEXT_ALIGN_RIGHT|DI_NOSHADOW, font.CR_GOLD);
					}
					else
					{
						invXExtra = 18;
						invYExtra = -10;
						if (CPlayer.mo.InvSel.Amount <= 0) texttranslation = Font.CR_DARKRED;
						else if (CPlayer.mo.InvSel.Amount >= CPlayer.mo.InvSel.MaxAmount) texttranslation = Font.CR_LIGHTBLUE;
						else
						{
							if (ItemHeldRatio <= 250) texttranslation = Font.CR_RED;
							else if (ItemHeldRatio > 250 && ItemHeldRatio <= 500) texttranslation = Font.CR_ORANGE;
							else if (ItemHeldRatio > 500 && ItemHeldRatio <= 750) texttranslation = Font.CR_YELLOW;
							else if (ItemHeldRatio > 750 && ItemHeldRatio <= 1000) texttranslation = Font.CR_GREEN;
						}
						DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount, 6), (invX + invXExtra, invY + invYExtra), DI_TEXT_ALIGN_RIGHT, texttranslation);
					}
				}
			}

			// void DrawInventoryBar(InventoryBarState parms, Vector2 position, int numfields, int flags = 0, double bgalpha = 1.)
			// Parameters:
			//  The InventoryBarState variable that you declared and initialized above
			//  The desired coordinates of the bar
			//  The number of inventory items to show in the bar at one time
			//  Positioning flags
			//  Alpha of the background for the inventory bar (0.0 to 1.0)
			DrawInventoryBar(diparms, (dvds_inventorybarX, dvds_inventorybarY), dvds_inventorybarboxes, DI_SCREEN_CENTER_BOTTOM, HX_SHADOW);
		}
	}
}
