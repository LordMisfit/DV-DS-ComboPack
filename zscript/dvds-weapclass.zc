class AetheriusBaseWeaponZSC : Weapon
{
	mixin AtkTypeChecker;
	
	// Misc
	const BerserkRecoilMulti = 2.5;
	const minxymoveneg = -3.814697266;
	const minxymovepos = 3.814697266;
	const minzmoveneg = -1.907348633;
	const minzmovepos = 1.907348633;

	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	//******************************************************************************************************************
	//******************************************************************************************************************
	//******************************************************************************************************************
	//***IMPORTANT NOTE TO SELF: DO NOT USE GLOBAL VARS/STRINGS/CLASS DEFINITIONS IN WEAPONS, ELSE IT CAN FLAP AROUND***
	//***WITH THE PLAYER'S PROPERTIES [LEADING TO FUN STUFF LIKE NOT BEING ABLE TO USE WALLS, WEAPONS STOP BOBBING,  ***
	//***OR GETTING ATTACHED TO THE DAMN CEILING]. CONSTS SEEM FINE THOUGH TO USE...                                 ***
	//***DON'T BE A DINGUS ABOUT THIS AGAIN MISFIT >:U                                                               ***
	//***                                                                                                            ***
	//***WITH ALL LOVE - MISFIT :V                                                                                   ***
	//******************************************************************************************************************
	//******************************************************************************************************************
	//******************************************************************************************************************
	
	action double A_SetShieldPieceDist(double basedist = 32.0)
	{
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		double result = basedist;
		if (ClassicDoomType == 5) result *= 1.2; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		return result;
	}
	
	void A_ChangeMWeaponFlag (bool value = 0)
	{
		bMELEEWEAPON = value;
	}

	action void A_DVDSLower (double movespeed = 6.0, int checkmiscvar = -1, double miscvarmulti = 1.0)
	{
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);

		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();

		A_ClearOverlays(-2,-2,true);
		A_KickBonusOff();
		A_SetMartialArtsMastery(0);
		
		double basespeed = movespeed;
		
		if (checkmiscvar > -1)
		{
			movespeed += (CallACS("MiscVarCheckDECORATE",checkmiscvar) * miscvarmulti);
			if (dvdsdebug_weaponstatdisplays && movespeed >= 0.001) Console.Printf("\cyA_DVDSLower\c- - movespeed [miscvarcheck]: %.8f (%.8f) \cx(%s)\c- \cw[Multi: %d%]\c-, \cymiscvarmulti: %.8f\c-", movespeed, basespeed, weaponname, dvds_raiselowermultiplier, miscvarmulti);
		}
		
		if (CallACS("GetBuffTimer",12) > 0) movespeed *= 1.5; // Acceleratle
		if (CallACS("GetBuffTimer",15) > 0) movespeed *= 0.667; // Deceleratle

		if (clearofmind == 1) movespeed *= 1.04;
		if (clearofmind == 2) movespeed *= 1.09;
		if (clearofmind == 3) movespeed *= 1.15;
		if (clearofmind == 4) movespeed *= 1.22;
		if (clearofmind >= 5) movespeed *= 1.30;
		if (clearofmindex == 1) movespeed *= 1.10;
		if (clearofmindex >= 2) movespeed *= 1.225;

		movespeed = (movespeed * dvds_raiselowermultiplier) / 100;

		movespeed += ((movespeed * PlayerAGL) / 512);

		if (dvdsdebug_weaponstatdisplays && movespeed >= 0.001) Console.Printf("\cyA_DVDSLower\c- - movespeed: %.8f (%.8f) \cx(%s)\c- \cw[Multi: %d%]\c-", movespeed, basespeed, weaponname, dvds_raiselowermultiplier);

		if (basespeed >= 1.0 && movespeed <= 0.999) movespeed = 1.0;
		A_Lower(movespeed);
	}

	action void A_DVDSRaise (double movespeed = 6.0, int checkmiscvar = -1, double miscvarmulti = 1.0)
	{
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);

		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();

		A_Overlay(-1000,"GrandControlLayer",true);
		double basespeed = movespeed;
		
		if (checkmiscvar > -1)
		{
			movespeed += (CallACS("MiscVarCheckDECORATE",checkmiscvar) * miscvarmulti);
			if (dvdsdebug_weaponstatdisplays && movespeed >= 0.001) Console.Printf("\cyA_DVDSRaise\c- - movespeed [miscvarcheck]: %.8f (%.8f) \cx(%s)\c- \cw[Multi: %d%]\c-, \cymiscvarmulti: %.8f\c-", movespeed, basespeed, weaponname, dvds_raiselowermultiplier, miscvarmulti);
		}

		if (CallACS("GetBuffTimer",12) > 0) movespeed *= 1.5; // Acceleratle
		if (CallACS("GetBuffTimer",15) > 0) movespeed *= 0.667; // Deceleratle

		if (clearofmind == 1) movespeed *= 1.04;
		if (clearofmind == 2) movespeed *= 1.09;
		if (clearofmind == 3) movespeed *= 1.15;
		if (clearofmind == 4) movespeed *= 1.22;
		if (clearofmind >= 5) movespeed *= 1.30;
		if (clearofmindex == 1) movespeed *= 1.10;
		if (clearofmindex >= 2) movespeed *= 1.225;

		movespeed = (movespeed * dvds_raiselowermultiplier) / 100;

		movespeed += ((movespeed * PlayerAGL) / 512);

		if (dvdsdebug_weaponstatdisplays && movespeed >= 0.001) Console.Printf("\cyA_DVDSRaise\c- - movespeed: %.8f (%.8f) \cx(%s)\c- \cw[Multi: %d%]\c-", movespeed, basespeed, weaponname, dvds_raiselowermultiplier);

		if (basespeed <= 0.01) movespeed = 0.01;
		if (basespeed >= 1.0 && movespeed <= 0.999) movespeed = 1.0;

		A_Raise(movespeed);
		/*
		let player = player;

		if (null == player)
		{
			return;
		}
		if (player.PendingWeapon != WP_NOCHANGE)
		{
			string pendweapname = player.PendingWeapon.GetClassName();
			Console.Printf("pendingweapon: %s", pendweapname);
			Weapon weap = player.ReadyWeapon;
			if (weap != null)
			{
				string weapname = weap.GetClassName();
				Console.Printf("weapname: %s", weapname);
			}
			player.mo.DropWeapon(); //
			return;
		}
		if (player.ReadyWeapon == null)
		{
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if (!psp) return;

		if (psp.y <= WEAPONBOTTOM)
		{
			ResetPSprite(psp);
		}
		psp.y -= movespeed;
		if (psp.y > WEAPONTOP)
		{ // Not raised all the way yet
			return;
		}
		psp.y = WEAPONTOP;
		
		psp.SetState(player.ReadyWeapon.GetReadyState());
		return;
		*/
	}

	// Sceptre EXP Increase [Weapon
	action void A_AddSceptreEXP_W (int SExPts = 1, int DivAmount = 1, int type = 0)
	{
		int clearofmind = CallACS("MiscVarCheckDECORATE",10055);
		int clearofmindex = CallACS("MiscVarCheckDECORATE",10056);
		int ModType = CallACS("OtherVarCheckDECORATE",8);
		int CharacterClass = CallACS("CheckCharacterClass");
		int PlayerDFT = CallACS("MiscVarCheckDECORATE",33);
		int ExpPiecesToAdd;
		double EXPBonus1;
		int DeftnessExpBase = dvds_deftnessexpbase;
		int SceptreExpMultiplier = dvds_sceptreexpmultiplier;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		double sceptbasemulti = 1.00;
		int higherlearning = CallACS("MiscVarCheckDECORATE",11001);
		
		DivAmount = clamp(DivAmount, 1, DivAmount);

		if (CharacterClass == 2)
		{
			sceptbasemulti = frandompick(0.67,0.67,0.67,0.67,1.00,1.00,1.34);
			ExpPiecesToAdd += (16 + (SceptreActualLevel * sceptbasemulti));
			if (clearofmind >= 1) ExpPiecesToAdd += 4;
			if (clearofmind >= 2) ExpPiecesToAdd += 5;
			if (clearofmind >= 3) ExpPiecesToAdd += 6;
			if (clearofmind >= 4) ExpPiecesToAdd += 7;
			if (clearofmind >= 5) ExpPiecesToAdd += 8;
			if (clearofmindex >= 1) ExpPiecesToAdd += 15;
			if (clearofmindex >= 2) ExpPiecesToAdd += 15;
			if (higherlearning == 1) ExpPiecesToAdd += 15; // [115%]
			if (higherlearning >= 2) ExpPiecesToAdd += 30; // [130%]
			ExpPiecesToAdd = clamp(ExpPiecesToAdd, 1, ExpPiecesToAdd);
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 1 - Base [%3f]): %d / 16", sceptbasemulti, ExpPiecesToAdd);

			int Randomizer = random(1,256);
			if (Randomizer == 1) ExpPiecesToAdd *= 8;
			if (Randomizer == 2) ExpPiecesToAdd *= 4;
			if (Randomizer == 3) ExpPiecesToAdd *= 4;
			if (Randomizer == 4) ExpPiecesToAdd *= 2;
			if (Randomizer == 5) ExpPiecesToAdd *= 2;
			if (Randomizer == 6) ExpPiecesToAdd *= 2;
			if (Randomizer == 7) ExpPiecesToAdd *= 2;

			// Higher Levels = slightly less chances to get all EXP
			if (SceptreActualLevel > 15 && Randomizer == 241) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 14 && Randomizer == 242) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 13 && Randomizer == 243) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 12 && Randomizer == 244) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 11 && Randomizer == 245) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 10 && Randomizer == 246) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 9 && Randomizer == 247) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 8 && Randomizer == 248) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 7 && Randomizer == 249) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 6 && Randomizer == 250) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 5 && Randomizer == 251) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 4 && Randomizer == 252) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 3 && Randomizer == 253) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 2 && Randomizer == 254) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 1 && Randomizer == 255) ExpPiecesToAdd /= 2;
			if (SceptreActualLevel > 0 && Randomizer == 256) ExpPiecesToAdd /= 2;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 2 - Randomizer Check [%d]): %d / 16", Randomizer, ExpPiecesToAdd);

			EXPBonus1 = 1.000;
			// Safe Tea Shoes [+2.5/5% EXP Bonus]
			if (CountInv("SafeTeaShoes"))
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.050; // 5% Chance of +5% EXP Bonus
				else EXPBonus1 += 0.025; // Else +2.5% EXP Bonus
			}
			// Pearly Corset [+20/30% EXP Bonus]
			if (CountInv("PearlyCorset"))
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.300; // 5% Chance of +30% EXP Bonus
				else EXPBonus1 += 0.200; // Else +20% EXP Bonus
			}
			// Dove's [+2.5/5% EXP Bonus]
			if (CountInv("DoveRibbon"))
			{
				if (random(1,100) <= 5) EXPBonus1 += 0.050; // 5% Chance of +5% EXP Bonus
				else EXPBonus1 += 0.025; // Else +2.5% EXP Bonus
			}
			ExpPiecesToAdd *= EXPBonus1;
			if (dvdsdebug_showexpdebugstuff && EXPBonus1 != 1.000) Console.Printf("\cxExpPiecesToAdd (Step 3 - Armor Check [%.8f]): %d / 16", EXPBonus1, ExpPiecesToAdd);


			EXPBonus1 = 1.000;
			// Divine Avatar {+25% EXP Bonus]
			if (CallACS("GetBuffTimer",7) > 0)
			{
				if (random(1,100) <= 20) EXPBonus1 += 0.500; // 20% Chance of +50% EXP Bonus
				else EXPBonus1 += 0.250; // 20% Else +25% EXP Bonus
			}
			ExpPiecesToAdd *= EXPBonus1;
			if (dvdsdebug_showexpdebugstuff && EXPBonus1 != 1.000) Console.Printf("\cxExpPiecesToAdd (Step 4 - Buff Check [%.8f]): %d / 16", EXPBonus1, ExpPiecesToAdd);

			ExpPiecesToAdd = ExpPiecesToAdd * (DeftnessExpBase + PlayerDFT) / DeftnessExpBase;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 5 - Deftness Check): %d / 16 [DeftExpBase: %d / %d]", ExpPiecesToAdd, (DeftnessExpBase + PlayerDFT), DeftnessExpBase);

			ExpPiecesToAdd = ExpPiecesToAdd * SceptreExpMultiplier / 100;
			if (dvdsdebug_showexpdebugstuff && SceptreExpMultiplier != 100) Console.Printf("\cxExpPiecesToAdd (Step 6 - Option Checker [%d%]): %d / 16", SceptreExpMultiplier, ExpPiecesToAdd);

			// "Cleared of Mind" Perk
			double perkfactor = 1.00;
			if (clearofmind > 0)
			{
				if (clearofmind >= 1) perkfactor += 0.04;
				if (clearofmind >= 2) perkfactor += 0.05;
				if (clearofmind >= 3) perkfactor += 0.06;
				if (clearofmind >= 4) perkfactor += 0.07;
				if (clearofmind >= 5) perkfactor += 0.08;
				if (clearofmindex >= 1) perkfactor += 0.15;
				if (clearofmindex >= 2) perkfactor += 0.15;
				ExpPiecesToAdd *= perkfactor;
			}
			if (dvdsdebug_showexpdebugstuff && (clearofmind || clearofmindex)) Console.Printf("\cxExpPiecesToAdd (Step 7 - Cleared of Mind [%3f]): %d / 16", perkfactor, ExpPiecesToAdd);

			// "Higher Learning" Grand Mastery Perk
			if (higherlearning == 1) ExpPiecesToAdd *= 1.15; // [115%]
			if (higherlearning >= 2) ExpPiecesToAdd *= 1.30; // [130%]
			if (dvdsdebug_showexpdebugstuff && higherlearning) Console.Printf("\cxExpPiecesToAdd (Step 8 - Higher Learning): %d / 16", ExpPiecesToAdd);

			if (ModType == 0) ExpPiecesToAdd *= 1.334; // Classic Doom 1/2 / Heretic / Hexen / Strife
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 9 - ModType Checker): %d / 16", ExpPiecesToAdd);

			ExpPiecesToAdd = ExpPiecesToAdd * 1.25;
			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (Step 10 - ?): %d / 16", ExpPiecesToAdd);
			CallACS("MiscVarSetDECORATE",203,ExpPiecesToAdd,1);

			if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (pre-while): %d / 16", ExpPiecesToAdd);
			while (CallACS("MiscVarCheckDECORATE",203) > 15)
			{
				CallACS("MiscVarSetDECORATE",203,-16,1);
				CallACS("OtherVarSetDECORATE",10,1,1);
				if (dvdsdebug_showexpdebugstuff) Console.Printf("\cxExpPiecesToAdd (while): %d / 16", ExpPiecesToAdd);
			}
		}
	}

	action void A_GetWeaponShotRecoil(int attacktype = 0)
	{
		double baserecoil;
		int CharacterClass = CallACS("CheckCharacterClass");
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int debugrecoil = dvdsdebug_showrecoilinformation;
		
		if (debugrecoil) Console.Printf("\cxRecoil [AttackType]: %d", attacktype);
		if (attacktype == 0) // Howitzer
		{
			if (CharacterClass == 0) baserecoil = frandom(7.5,8.5);
			if (CharacterClass == 1) baserecoil = frandom(7.5,8.5) * 1.3;
			if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", baserecoil);
			
			baserecoil *= (1.0 - (DemolitionsExpertPerkLevel * 0.1) - (DemolitionsExpertEXPerkLevel * 0.25));
			if (debugrecoil) Console.Printf("\cxRecoil [Demo-Expert]: %.8f", baserecoil);
		}

		if (attacktype == 1 || attacktype == 2)
		{
			if (attacktype == 1) baserecoil = frandom(4.0,4.5); // Phoenix Rod
			if (attacktype == 2) baserecoil = frandom(9.0,10.125); // Dual Phoenix Rods
			if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", baserecoil);

			baserecoil *= 1.0 - (WandMasteryPerkLevel * 0.16667);
			if (debugrecoil) Console.Printf("\cxRecoil [Wand Mastery]: %.8f", baserecoil);

			if (CountInv("PRMode") == 0) baserecoil *= 1;
			if (CountInv("PRMode") == 1) baserecoil *= 0.75;
			if (debugrecoil) Console.Printf("\cxRecoil [PR Mode]: %.8f", baserecoil);
		}

		if (CountInv("AetheriusPowerStrength")) 
		{
			baserecoil *= 0.67;
			if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", baserecoil);
		}

		A_Recoil(baserecoil);
	}

	action void A_GetPunchSwingRecoil(int attacktype = 0)
	{
		if (dvds_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int strengthcounter;
				int sceptrestrbase;
				int sceptrestrmin;
				int sceptrestrmax;
				int PerkFactor;
				int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
				int CharacterClass = CallACS("CheckCharacterClass");
				int debugrecoil = dvdsdebug_showrecoilinformation;
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
				int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
				int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
				int BerserkAdd;


				// Base "Recoil"
				double baserecoil = -0.125;
				if (CharacterClass == 0) baserecoil = -0.0500;
				if (CharacterClass == 1) baserecoil = -0.0875;
				if (CharacterClass == 2) baserecoil = -0.125;
				if (CharacterClass == 8) baserecoil = -0.1625;
				if (CharacterClass == 9) baserecoil = -0.0875;
				if (CountInv("AetheriusPowerStrength")) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;

				recoil = baserecoil * random(0,4);
				if (attacktype == 0) recoil = baserecoil * (random(0,4) + BerserkAdd);
				if (attacktype == 1) recoil = baserecoil * (random(2,10) + BerserkAdd);
				if (attacktype == 2) recoil = baserecoil * (random(4,8) + BerserkAdd);
				if (attacktype == 3) recoil = baserecoil * (random(8,20) + BerserkAdd);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (CountInv("AetheriusPowerStrength"))
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}

				// MAM Perk Mitigation
				recoilmulti = (1.0 - (MartialArtsMastery * 0.25) - (MartialArtsMasteryEX * 0.625) - (BerserkerFit * 0.25) - (BerserkerFitEX * 0.625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugrecoil) Console.Printf("\cxRecoil [MAM Perk]: %.8f, Multiplier: %.8f", recoil, recoilmulti);


				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerSTR * 0.000390625) - (PlayerAGL * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);


				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);


				A_Recoil(recoil);
			}
		}
	}

	action void A_GetKickSwingRecoil(int attacktype = 0)
	{
		if (dvds_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int strengthcounter;
				int sceptrestrbase;
				int sceptrestrmin;
				int sceptrestrmax;
				int PerkFactor;
				int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
				int CharacterClass = CallACS("CheckCharacterClass");
				int debugmelee = dvdsdebug_showmeleeinformation;
				int debugrecoil = dvdsdebug_showrecoilinformation;
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
				int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
				int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);


				// Base "Recoil"
				double baserecoil = -0.125;
				if (CharacterClass == 0) baserecoil = -0.0500;
				if (CharacterClass == 1) baserecoil = -0.0875;
				if (CharacterClass == 2) baserecoil = -0.125;
				if (CharacterClass == 8) baserecoil = -0.1625;
				if (CharacterClass == 9) baserecoil = -0.0875;
				recoil = baserecoil * random(-4,4);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (CountInv("AetheriusPowerStrength"))
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}


				// MAM Perk Mitigation
				recoilmulti = (1.0 - (MartialArtsMastery * 0.25) - (MartialArtsMasteryEX * 0.625) - (BerserkerFit * 0.25) - (BerserkerFitEX * 0.625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugrecoil) Console.Printf("\cxRecoil [MAM Perk]: %.8f, Multiplier: %.8f", recoil, recoilmulti);


				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerSTR * 0.000390625) - (PlayerAGL * 0.0015625));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);


				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= 1) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= 1) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);

				A_Recoil(recoil);
			}
		}
	}

	action void A_GetSceptreSwingRecoil(int attacktype = 0)
	{
		if (dvds_meleerecoil)
		{
			int IsMoving = 0;
			if (vel.x < minxymoveneg || vel.x > minxymovepos) IsMoving++;
			if (vel.y < minxymoveneg || vel.y > minxymovepos) IsMoving++;
			if (vel.z < minzmoveneg || vel.z > minzmovepos) IsMoving++;

			if (CountInv("PlayerDashing")) { }
			else if (IsMoving) { }
			else
			{
				let weapon = player.ReadyWeapon;
				string weaponname = weapon.GetClassName();
				string actorname = GetClassName();
				double recoil;
				double recoilmulti;
				int previousdamage;
				int strengthcounter;
				int sceptrestrbase;
				int sceptrestrmin;
				int sceptrestrmax;
				int PerkFactor;
				int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
				int CharacterClass = CallACS("CheckCharacterClass");
				int debugrecoil = dvdsdebug_showrecoilinformation;
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
				int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int BerserkAdd;


				// Base "Recoil"
				if (CountInv("AetheriusPowerStrength")) BerserkAdd = randompick(1,1,1,1,1,1,1,2,2); else BerserkAdd = 0;
				recoil = -0.3125 * (random(0,12) + BerserkAdd);
				if (attacktype == 1) recoil = -0.3125 * random(-6,6);
				if (debugrecoil) Console.Printf("\cxRecoil [Base]: %.8f", recoil);

				// Berserk
				if (CountInv("AetheriusPowerStrength"))
				{
					recoil *= BerserkRecoilMulti;
					if (debugrecoil) Console.Printf("\cxRecoil [Berserk]: %.8f", recoil);
				}


				// MAM Perk Mitigation
				recoilmulti = (1.0 - (MartialArtsMastery * 0.125) - (MartialArtsMasteryEX * 0.3125));
				recoil *= recoilmulti;
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				if (debugrecoil) Console.Printf("\cxRecoil [MAM Perk]: %.8f, Multiplier: %.8f", recoil, recoilmulti);


				// Sceptre-Level Mitigation
				recoilmulti = (1.0 - (SceptreActualLevel * 0.0625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugrecoil) Console.Printf("\cxRecoil [SceptreLevel]: %.8f, Multiplier: %.8f", recoil, recoilmulti);


				// Stat/Level Mitigation
				recoilmulti = (1.0 - (PlayerLevel * 0.00078125) - (PlayerSTR * 0.000390625) - (PlayerAGL * 0.0015625));
				if (recoilmulti < 0.0) recoilmulti = 0.0;
				recoil *= recoilmulti;
				if (debugrecoil) Console.Printf("\cxRecoil [Stats]: %.8f, Multiplier: %.8f", recoil, recoilmulti);


				// Random Chance for 0 recoil
				if (attacktype == 1)
				{
					if (random(1,96) <= SceptreActualLevel) recoil = 0.0;
				}
				else
				{
					if (random(1,48) <= SceptreActualLevel || recoil >= 0.0) recoil = 0.0;
				}
				if (debugrecoil) Console.Printf("\cxRecoil [Final]: %.8f", recoil);

				A_Recoil(recoil);
			}
		}
	}

	action int A_GetChainsawDamage(int sawtype)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int damage;
		double PerkFactor;
		double temp1, temp2;
		int previousdamage;
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		int debugmelee = dvdsdebug_showmeleeinformation;
		int randmizer;

		if (sawtype <= 1) // Normal Chainsaw
		{
			randmizer = random(1,10);
			damage = ((2 + (PlayerSTR * frandompick(0.25,0.3334))) * randmizer); // 2 - 20 + (Strength * 25%)
		}
		if (sawtype >= 2) // Double-Bladed Chainsaw
		{
			randmizer = random(3,12);
			damage = (((randompick(8,9,9,9,9,9,10) / 2) + (PlayerSTR * frandompick(0.5625,0.7502))) * randmizer); // 13.5 - 54 + (Strength * 62.5%)
		}
		if (debugmelee) Console.Printf("BaseDmg (Chainsaw): %d (PlayerSTR: %d) (randmizer: %d)", damage, PlayerSTR, randmizer);

		// [STRIFE] Stamina Upgrades
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		previousdamage = damage;
		damage *= (1.00 + (stamdamagefactor * 0.334));
		if (debugmelee) Console.Printf("StaminaDmg (Chainsaw): %d, StamUpgrades: %d - (Previous Dmg: %d)", damage, stamdamagefactor, previousdamage);

		// Berserk Check
		previousdamage = damage;
		if (CountInv("AetheriusPowerStrength")) damage *= 2.5; // 250% Damage when Berserked
		if (debugmelee) Console.Printf("BerserkDmg (Chainsaw): %d - (Previous Dmg: %d)", damage, previousdamage);

		// StamUp Check
		previousdamage = damage;
		if (StamUpPerkLevel > 0)
		{
			PerkFactor = 1.000 + ((StamUpPerkLevel * 0.075) + (StamUpEXPerkLevel * 0.1875));
			damage = floor(damage * PerkFactor);
			if (debugmelee) Console.Printf("StamPerkDmg (Chainsaw): %d - (Previous Dmg: %d)", damage, previousdamage);
		}

		// Berserker Fit
		previousdamage = damage;
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		if (BerserkerFit > 0)
		{
			temp1 = 0.000;
			if (BerserkerFit == 1) temp1 = 0.025;
			if (BerserkerFit == 2) temp1 = 0.075;
			if (BerserkerFit == 3) temp1 = 0.225;
			if (BerserkerFit == 4) temp1 = 0.675;
			if (BerserkerFit >= 5) temp1 = 2.025;
			temp1 *= random(2,3);
			temp1 *= 0.25;
			temp2 = 0.000;
			if (BerserkerFitEX == 1) temp2 = 0.500;
			if (BerserkerFitEX == 2) temp2 = 1.000;
			temp2 *= random(2,3);
			temp2 *= 0.25;
			PerkFactor = 1.0 + (temp1 + temp2);
			damage = floor(damage * PerkFactor);
		}

		if (debugmelee) Console.Printf("FinalMeleeDmg (Chainsaw): (Weapon: %s - Source: %s) %d - (Previous Dmg: %d) [Chainsaw]", weaponname, actorname, damage, previousdamage);

		return damage;
	}

	// Sceptre Twirl Mana/MP Check [to "balance" sceptre alt-fire cheapness >.>]
	action int A_SceptreTwirlManaCheck(int attacktype)
	{
		int SceptreTimer = CountInv("SceptreTimer");
		int HaveMana, ManaCost;
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);

		int SceptreTimerLimit = 10;
		if (SceptreActualLevel == 0) SceptreTimerLimit = 10;
		if (SceptreActualLevel == 1) SceptreTimerLimit = 10;
		if (SceptreActualLevel == 2) SceptreTimerLimit = 11;
		if (SceptreActualLevel == 3) SceptreTimerLimit = 11;
		if (SceptreActualLevel == 4) SceptreTimerLimit = 12;
		if (SceptreActualLevel == 5) SceptreTimerLimit = 12;
		if (SceptreActualLevel == 6) SceptreTimerLimit = 13;
		if (SceptreActualLevel == 7) SceptreTimerLimit = 14;
		if (SceptreActualLevel == 8) SceptreTimerLimit = 14;
		if (SceptreActualLevel == 9) SceptreTimerLimit = 15;
		if (SceptreActualLevel == 10) SceptreTimerLimit = 16;
		if (SceptreActualLevel == 11) SceptreTimerLimit = 16;
		if (SceptreActualLevel == 12) SceptreTimerLimit = 17;
		if (SceptreActualLevel == 13) SceptreTimerLimit = 18;
		if (SceptreActualLevel == 14) SceptreTimerLimit = 19;
		if (SceptreActualLevel == 15) SceptreTimerLimit = 20;
		if (SceptreActualLevel == 16) SceptreTimerLimit = 22;

		int CurrentMana = CallACS("StatCheck",14);
		int MaxMana = CallACS("StatCheck",2);
		int MPPenaltyTimeBase = 35 * random(16,24);
		int MPPenaltyTimeAdd; 
		int requiredmanacost;

		if (attacktype == 1)
		{
			
			if (SceptreActualLevel <= 3) requiredmanacost = 5;
			if (SceptreActualLevel > 3 && SceptreActualLevel <= 7) requiredmanacost = 4; 
			if (SceptreActualLevel > 7 && SceptreActualLevel <= 11) requiredmanacost = 3;
			if (SceptreActualLevel > 11 && SceptreActualLevel <= 15) requiredmanacost = 2;
			if (SceptreActualLevel == 16) requiredmanacost = 1;

			if (CurrentMana >= requiredmanacost) 
			{ 
				CurrentMana -= requiredmanacost; HaveMana++; 
				MPPenaltyTimeAdd = MPPenaltyTimeBase * requiredmanacost / (MaxMana * frandompick(0.5,1,1,1,1,1,1.5));
			}
			if (MPPenaltyTimeAdd < 1) MPPenaltyTimeAdd = 1;
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPPenaltyTimeAdd: %d (requiredmanacost: %d)", MPPenaltyTimeAdd, requiredmanacost);
			CallACS("MiscVarSetDECORATE",93,MPPenaltyTimeAdd,2); // MPRegenBonPenTimer

			CurrentMana = clamp(CurrentMana, 0, CurrentMana);
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",243,CurrentMana);
			CallACS("MiscVarSetDECORATE",238,CurrentMana);
		}
		else
		{
			if (CurrentMana > 0) HaveMana++;
			if (random(1,16) == 1) SceptreTimer += 2; else SceptreTimer += 1;

			if (SceptreTimer >= SceptreTimerLimit)
			{
				if (SceptreActualLevel < 8) requiredmanacost = 2;
				if (SceptreActualLevel > 8 && SceptreActualLevel < 16) requiredmanacost = random(1,2);
				if (SceptreActualLevel == 16) requiredmanacost = 1;

				CurrentMana -= requiredmanacost; HaveMana++;
				MPPenaltyTimeAdd = MPPenaltyTimeBase * requiredmanacost / (MaxMana * frandompick(0.5,1,1,1,1,1,1.5));
				if (CurrentMana < 0) CurrentMana = 0;

				if (MPPenaltyTimeAdd < 1) MPPenaltyTimeAdd = 1;
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPPenaltyTimeAdd: %d (requiredmanacost: %d)", MPPenaltyTimeAdd, requiredmanacost);
				CallACS("MiscVarSetDECORATE",93,MPPenaltyTimeAdd,2); // MPRegenBonPenTimer

				CallACS("OtherVarSetDECORATE",2,CurrentMana);
				CallACS("MiscVarSetDECORATE",243,CurrentMana);
				CallACS("MiscVarSetDECORATE",238,CurrentMana);
				SceptreTimer = 0;
			}
		}

		A_SetInventory("SceptreTimer",SceptreTimer,AAPTR_DEFAULT,true);

		//Console.Printf("SceptreTimer: %d / %d	", SceptreTimer, SceptreTimerLimit);
		//Console.Printf("HaveMana?: %d", HaveMana);

		return HaveMana;
	}

	action int A_WeaponCheckDoubleFireRate()
	{
		int result = 0;
		if (CountInv("PowerDoubleFiringSpeed")) result = 1;
		if (CountInv("DivineAvatarDoubleFiringSpeed")) result = 1;
		return result;
	}

	action int A_WeaponCheckInfiniteAmmo()
	{
		int result = 0;
		if (CountInv("RandomInfiniteAmmo") || CountInv("PowerInfiniteAmmo")) result = 1;
		return result;
	}
	
	// Consumes a set amount of Health when called or checks for that much for an A_JumpIf call (for the Sigil)
	action int A_UseHealthAttack(int amountbase = 0, int sigilmulti = 4, int dmgtype = 0)
	{
		int CurrentHealth = health;
		int MaxHealthTrue = CallACS("StatCheck",1);
		int finaldmg = amountbase * sigilmulti;
		int HPPenaltyTimeBase = 35 * random(16,24);
		int HPPenaltyTimeAdd; 
		
		int ignorecommand = 0;
		if (CallACS("MiscVarCheckDECORATE",195) > 0) ignorecommand++; // If in mercy invincibility, no effect
		if (CallACS("MiscVarCheckDECORATE",25014) > 0) ignorecommand++; // if invulnerable, no effect
		if (CallACS("MiscVarCheckDECORATE",25040) > 0) ignorecommand++; // if invulnerable, no effect
		if (CallACS("MiscVarCheckDECORATE",25045) > 0) ignorecommand++; // if GodMode, no effect
		if (CallACS("MiscVarCheckDECORATE",25046) > 0) ignorecommand++; // if GodMode2, no effect
		int truedamage = CallACS("NNSigilDamageUser", finaldmg);
		if (truedamage > 0 && ignorecommand == 0)
		{
			HPPenaltyTimeAdd = HPPenaltyTimeBase * truedamage / (MaxHealthTrue * frandompick(0.5,1,1,1,1,1,1.5));
			if (HPPenaltyTimeAdd < 1) HPPenaltyTimeAdd = 1;
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPPenaltyTimeAdd: %d (truedmg: %d)", HPPenaltyTimeAdd, truedamage);
			CallACS("MiscVarSetDECORATE",92,HPPenaltyTimeAdd,2); // HPRegenBonPenTimer
			
			// Log Damage
			if (dvds_showdamagemessages & 1)
			{
				AetheriusPlayerPawn playertarg;
				playertarg = AetheriusPlayerPawn(self);
				if (playertarg)
				{
					string user = playertarg.GetClassName();
					string username;
					username = user;
					if (dvds_showdamagemessageactortags) username = playertarg.GetTag("");

					string DamageMessage = " \c[white]* ";
					DamageMessage.AppendFormat("\cy%d\c- ", truedamage);
					DamageMessage.AppendFormat("\c[red]Damage\c-");
					DamageMessage.AppendFormat(" drained from \cx%s\c-", username);
					if (dmgtype <= 0) DamageMessage.AppendFormat(" by the \c[darkgray]Sigil\c-");
					if (dmgtype >= 1) DamageMessage.AppendFormat(" by the \c[darkgray]?\c-");
					DamageMessage.AppendFormat("!");
					if (health <= 0)
					{
						DamageMessage.AppendFormat(" \cx%s\c-", username);
						DamageMessage.AppendFormat(" dies!");
					}
					if (dvds_showdamagemessagedebug) DamageMessage.AppendFormat(" (%d)", gametic);
					
					Console.Printf("%s", DamageMessage);
				}
				
			}
		}

		return finaldmg;
	}
	
	// Consumes a set amount of MP/MANA when called or checks for that much for an A_JumpIf call (for Heretic's Tome-fire modes)
	action int A_UseManaAttack(int amount = 0, int check = 0, int infammocheck = 0, int musthaveammofirst = 0)
	{
		int CurrentMana = CallACS("StatCheck",14);
		int MaxMana = CallACS("StatCheck",2);
		int UseManaAttack;
		int MPPenaltyTimeBase = 35 * random(16,24);
		int MPPenaltyTimeAdd;
		int breakcode;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();

		// Check 0 = Takes MP without a return value [i.e. infiniteammo is turned on].
		// Check 1 = Takes NO MP and gives a return value [for just checking]
		// Check 2 = Takes MP if applicable and gives a return value
		if (amount < 0)
		{
			amount = MaxMana * (-amount * 0.01);
		}
		if (check > 0)
		{
			if (musthaveammofirst > 0)
			{
				if (CurrentMana >= amount) breakcode = 0; else breakcode = 1;
			}
			else breakcode = 0;

			if (breakcode <= 0)
			{
				if (infammocheck && A_WeaponCheckInfiniteAmmo())
				{
					UseManaAttack = 1;
				}
				else
				{
					if (CurrentMana >= amount)
					{
						if (check > 1)
						{
							CurrentMana -= amount;
							MPPenaltyTimeAdd = MPPenaltyTimeBase * amount / (MaxMana * frandompick(0.5,1,1,1,1,1,1.5));
							if (weaponname == "PoisonNeedle")
							{
								if (CallACS("MiscVarCheckDECORATE",10035) == 4) MPPenaltyTimeAdd *= frandompick(0.625,0.75,0.75,0.75,0.75,0.75,0.75,0.875);
								if (CallACS("MiscVarCheckDECORATE",10035) >= 5) MPPenaltyTimeAdd *= frandompick(0.375,0.5,0.5,0.5,0.5,0.5,0.5,0.625);
							}
							if (MPPenaltyTimeAdd < 1) MPPenaltyTimeAdd = 1;
							if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPPenaltyTimeAdd: %d (amount: %d)", MPPenaltyTimeAdd, amount);
							CallACS("MiscVarSetDECORATE",93,MPPenaltyTimeAdd,2); // MPRegenBonPenTimer

							CurrentMana = clamp(CurrentMana, 0, CurrentMana);
							CallACS("OtherVarSetDECORATE",2,CurrentMana);
							CallACS("MiscVarSetDECORATE",243,CurrentMana);
							CallACS("MiscVarSetDECORATE",238,CurrentMana);
						}
						UseManaAttack = 1;
					}
					else
					{
						UseManaAttack = 0;
					}
				}
			}
			else
			{
				UseManaAttack = 0;
			}
		}
		else
		{
			CurrentMana -= amount;
			MPPenaltyTimeAdd = MPPenaltyTimeBase * amount / (MaxMana * frandompick(0.5,1,1,1,1,1,1.5));
			if (MPPenaltyTimeAdd < 1) MPPenaltyTimeAdd = 1;
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("MPPenaltyTimeAdd: %d (amount: %d)", MPPenaltyTimeAdd, amount);
			CallACS("MiscVarSetDECORATE",93,MPPenaltyTimeAdd,2); // MPRegenBonPenTimer

			if (CurrentMana < 1) CurrentMana = 0;
			CallACS("OtherVarSetDECORATE",2,CurrentMana);
			CallACS("MiscVarSetDECORATE",243,CurrentMana);
			CallACS("MiscVarSetDECORATE",238,CurrentMana);
		}
		//Console.Printf("UseManaAttack?: %d (%d)", UseManaAttack, amount);
		return UseManaAttack;
	}

	// Consumes a set amount of Stamina when called [1 = 0.01% stamina consumed, etc] or checks for that much for an A_JumpIf call
	action int A_UseStaminaAttack(int amount = 0, int check = 0, int type = 0)
	{
		int StamUsed = -1;
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int powertripmode = dvds_musou_powertripmode;
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);

		int whole = amount / 100;
		int modulus = amount % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base]: %d.%d%",whole, modulus);
		}

		if (powertripmode == 1) amount *= 0.2;
		if (powertripmode == 2) amount *= 0.1;
		if (DQOomphTimer > 0) amount *= 0.8; // Oomph [80% consumption]
		if (DQBuffTimer > 0) amount *= 0.8; // Buff [80% consumption]
		if (DQAcceleratleTimer > 0) amount *= 0.8; // Acceleratle [80% consumption]
		if (DQBluntTimer > 0) amount *= 1.25; // Blunt [120% consumption]
		if (DQSapTimer > 0) amount *= 1.25; // Sap [120% consumption]
		if (DQDeceleratleTimer > 0) amount *= 1.25; // Deceleratle [120% consumption]
		AetheriusPlayerPawn playerpawn;
		playerpawn = AetheriusPlayerPawn(Player.mo);
		int DeathRageTimer = playerpawn.DeathRageTimer;
		int BaseStamPenalty = CallACS("MiscVarCheckDECORATE",46);

		if (DeathRageTimer > 0)
		{
			if (DeathRageTimer <= 1) amount *= 0.5; // Death Rage [50% consumption]
			if (DeathRageTimer == 2) amount *= 0.25; // Death Rage [25% consumption]
			if (DeathRageTimer >= 3) amount *= 0.125; // Death Rage [12.5% consumption]
		}
		if (StamUpPerkLevel > 0)
		{
			amount *= (1.00 - (StamUpPerkLevel * 0.01) - (StamUpEXPerkLevel * 0.025));
		}
		if (CountInv("FalconKnifeEarrings")) amount *= 0.75; // Falcon Knife Earrings [75% Consumption]

		if (type == 1) // Hellcore [Hell Warrior Shield]
		{
			amount *= (1.00 - (SoulMasteryPerkLevel * 0.05) - (SoulMasteryEXPerkLevel * 0.125));
		}

		whole = amount / 100;
		modulus = amount % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Final]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Final]: %d.%d%",whole, modulus);
		}

		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		if (UsingInGameMenu == 0)
		{
			if (check > 0)
			{
				if (CurrentStamina >= amount)
				{
					if (check > 1)
					{
						CurrentStamina -= amount;
						BaseStamPenalty = (BaseStamPenalty * amount) / MaxStamina;
						if (BaseStamPenalty <= random(1,2)) BaseStamPenalty = random(1,2);
						if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamPenaltyTimeAdd: %d", BaseStamPenalty);
						CallACS("MiscVarSetDECORATE",94,BaseStamPenalty,2);  // StamRegenBonPenTimer
						if (CurrentStamina < 0) CurrentStamina = 0;
						CallACS("MiscVarSetDECORATE",21,CurrentStamina);
						CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
					}
					StamUsed = 1;
					if (stamusedebug) Console.Printf("Stamina to be Used: Yes");
				}
				else
				{
					StamUsed = 0;
					if (stamusedebug) Console.Printf("Stamina to be Used: No");
				}
			}
			else
			{
				CurrentStamina -= amount;
				BaseStamPenalty = (BaseStamPenalty * CurrentStamina) / MaxStamina;
				if (BaseStamPenalty <= random(1,2)) BaseStamPenalty = random(1,2);
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("StamPenaltyTimeAdd: %d", BaseStamPenalty);
				CallACS("MiscVarSetDECORATE",94,BaseStamPenalty,2);  // StamRegenBonPenTimer
				if (CurrentStamina < 0) CurrentStamina = 0;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
				CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
			}
		}
		else
		{
			if (stamusedebug) Console.Printf("MENU ON: No Stamina Used.");
		}

		return StamUsed;
	}

	action int A_GetHellWarShieldStamUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int stamuse;
		int PerkFactor;
		int temp1, temp2;
		int HellWarriorShieldLevel = CallACS("MiscVarCheckDECORATE",300);

		if (CharacterClass == 0) stamuse = random(12,13); // 15
		if (CharacterClass == 1) stamuse = random(17,18); // 21
		if (CharacterClass == 2) stamuse = 20; // 24
		if (CharacterClass == 8) stamuse = random(22,23); // 27
		if (CharacterClass == 9) stamuse = 15; // 18

		int whole = stamuse / 100;
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base (Shield)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base (Shield)]: %d.%d%",whole, modulus);
		}
		
		stamuse *= (1.00 + (HellWarriorShieldLevel * 0.02));

		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [After ShieldLevel (Shield)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [After ShieldLevel (Shield)]: %d.%d%",whole, modulus);
		}
		
		if (MartialArtsMastery > 0)
		{
			temp1 = 0;
			if (MartialArtsMastery == 1) temp1 = 5;
			if (MartialArtsMastery == 2) temp1 = 10;
			if (MartialArtsMastery == 3) temp1 = random(17,18);
			if (MartialArtsMastery == 4) temp1 = 30;
			if (MartialArtsMastery >= 5) temp1 = 60;
			temp2 = 0;
			if (MartialArtsMasteryEX == 1) temp2 = 15;
			if (MartialArtsMasteryEX == 2) temp2 = 35;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}

		if (BerserkerFit > 0)
		{
			temp1 = 0;
			if (BerserkerFit == 1) temp1 = 5;
			if (BerserkerFit == 2) temp1 = 10;
			if (BerserkerFit == 3) temp1 = random(17,18);
			if (BerserkerFit == 4) temp1 = 30;
			if (BerserkerFit >= 5) temp1 = 60;
			temp2 = 0;
			if (BerserkerFitEX == 1) temp2 = 15;
			if (BerserkerFitEX == 2) temp2 = 35;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}
		
		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [After Perks (Shield)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [After Perks (Shield)]: %d.%d%",whole, modulus);
		}

		if (BerserkTimer > 0) stamuse = stamuse * frandompick(0.175,0.2,0.225); // Berserk
		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk (Shield)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk (Shield)]: %d.%d%",whole, modulus);
		}

		return stamuse;
	}

	action int A_GetPunchStaminaUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int stamuse;
		int PerkFactor;
		int temp1, temp2;
		if (attacktype == -1) // Poison Needle
		{
			if (CharacterClass == 0) stamuse = 150;
			if (CharacterClass == 1) stamuse = 167;
			if (CharacterClass == 2) stamuse = 222;
			if (CharacterClass == 9) stamuse = 198;
		}
		else
		if (attacktype == 0) // Punch [normal]
		{
			if (CharacterClass == 0) stamuse = 225;
			if (CharacterClass == 1) stamuse = 250;
			if (CharacterClass == 2) stamuse = 333;
			if (CharacterClass == 9) stamuse = 298;
		}
		else
		if (attacktype == 1) // Gauntlet Punch [normal]
		{
			if (CharacterClass == 0) stamuse = 562;
			if (CharacterClass == 1) stamuse = 625;
			if (CharacterClass == 2) stamuse = 832;
			if (CharacterClass == 9) stamuse = 732;
		}
		else
		if (attacktype == 2) // Gauntlet Punch [altfire]
		{
			if (CharacterClass == 0) stamuse = 1405;
			if (CharacterClass == 1) stamuse = 1562;
			if (CharacterClass == 2) stamuse = 2081;
			if (CharacterClass == 9) stamuse = 1830;
		}
		else
		if (attacktype == 4) // Punch [uppercut]
		{
			if (CharacterClass == 0) stamuse = 374;
			if (CharacterClass == 1) stamuse = 415;
			if (CharacterClass == 2) stamuse = 553;
			if (CharacterClass == 9) stamuse = 495;
		}
		int whole = stamuse / 100;
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base (Punch)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base (Punch)]: %d.%d%",whole, modulus);
		}

		if (MartialArtsMastery > 0)
		{
			temp1 = 0;
			if (MartialArtsMastery == 1) temp1 = 50;
			if (MartialArtsMastery == 2) temp1 = 100;
			if (MartialArtsMastery == 3) temp1 = 175;
			if (MartialArtsMastery == 4) temp1 = 300;
			if (MartialArtsMastery >= 5) temp1 = 600;
			temp2 = 0;
			if (MartialArtsMasteryEX == 1) temp2 = 150;
			if (MartialArtsMasteryEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}

		if (BerserkerFit > 0)
		{
			temp1 = 0;
			if (BerserkerFit == 1) temp1 = 50;
			if (BerserkerFit == 2) temp1 = 100;
			if (BerserkerFit == 3) temp1 = 175;
			if (BerserkerFit == 4) temp1 = 300;
			if (BerserkerFit >= 5) temp1 = 600;
			temp2 = 0;
			if (BerserkerFitEX == 1) temp2 = 150;
			if (BerserkerFitEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}

		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [After Perks (Punch)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [After Perks (Punch)]: %d.%d%",whole, modulus);
		}

		if (DQOomphTimer > 0) stamuse = stamuse * 0.95; // Oomph
		if (BerserkTimer > 0) stamuse = stamuse * 0.875; // Berserk
		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk (Punch)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk (Punch)]: %d.%d%",whole, modulus);
		}

		return stamuse;
	}

	action int A_GetKickStaminaUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int stamuse;
		int PerkFactor;
		int temp1, temp2;
		if (attacktype == 0) // Kick [normal]
		{
			if (CharacterClass == 0) stamuse = 666;
			if (CharacterClass == 1) stamuse = 500;
			if (CharacterClass == 2) stamuse = 450;
			if (CharacterClass == 9) stamuse = 300;
		}
		else
		if (attacktype == 1) // Roundhouse Kick [normal]
		{
			if (CharacterClass == 0) stamuse = 1665;
			if (CharacterClass == 1) stamuse = 1250;
			if (CharacterClass == 2) stamuse = 1125;
			if (CharacterClass == 9) stamuse = 750;
		}
		int whole = stamuse / 100;
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base (Kick)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base (Kick)]: %d.%d%",whole, modulus);
		}

		if (MartialArtsMastery > 0)
		{
			temp1 = 0;
			if (MartialArtsMastery == 1) temp1 = 50;
			if (MartialArtsMastery == 2) temp1 = 100;
			if (MartialArtsMastery == 3) temp1 = 175;
			if (MartialArtsMastery == 4) temp1 = 300;
			if (MartialArtsMastery >= 5) temp1 = 600;
			temp2 = 0;
			if (MartialArtsMasteryEX == 1) temp2 = 150;
			if (MartialArtsMasteryEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}

		if (BerserkerFit > 0)
		{
			temp1 = 0;
			if (BerserkerFit == 1) temp1 = 50;
			if (BerserkerFit == 2) temp1 = 100;
			if (BerserkerFit == 3) temp1 = 175;
			if (BerserkerFit == 4) temp1 = 300;
			if (BerserkerFit >= 5) temp1 = 600;
			temp2 = 0;
			if (BerserkerFitEX == 1) temp2 = 150;
			if (BerserkerFitEX == 2) temp2 = 350;
			PerkFactor = 1000 - (temp1 + temp2);
			stamuse = stamuse * PerkFactor / 1000;
		}
		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [After Perks (Kick)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [After Perks (Kick)]: %d.%d%",whole, modulus);
		}

		if (DQOomphTimer > 0) stamuse = stamuse * 0.95; // Oomph
		if (BerserkTimer > 0) stamuse = stamuse * 0.875; // Berserk
		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk (Kick)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk (Kick)]: %d.%d%",whole, modulus);
		}

		return stamuse;
	}

	action int A_GetSceptreStaminaUse(int attacktype = 0)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int stamusedebug = dvdsdebug_showstaminausestuff;
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int stamuse;
		if (attacktype == 0) // Normal Swing
		{
			if (SceptreActualLevel <= 0) stamuse = 575;
			if (SceptreActualLevel == 1) stamuse = 568; // -7
			if (SceptreActualLevel == 2) stamuse = 561; // -7
			if (SceptreActualLevel == 3) stamuse = 554; // -7
			if (SceptreActualLevel == 4) stamuse = 546; // -8
			if (SceptreActualLevel == 5) stamuse = 538; // -8
			if (SceptreActualLevel == 6) stamuse = 530; // -8
			if (SceptreActualLevel == 7) stamuse = 521; // -9
			if (SceptreActualLevel == 8) stamuse = 512; // -9
			if (SceptreActualLevel == 9) stamuse = 503; // -9
			if (SceptreActualLevel == 10) stamuse = 493; // -10
			if (SceptreActualLevel == 11) stamuse = 483; // -10
			if (SceptreActualLevel == 12) stamuse = 473; // -10
			if (SceptreActualLevel == 13) stamuse = 462; // -11
			if (SceptreActualLevel == 14) stamuse = 451; // -11
			if (SceptreActualLevel == 15) stamuse = 440; // -11
			if (SceptreActualLevel >= 16) stamuse = 428; // -12
		}
		else
		if (attacktype == 1) // Aireal Attack
		{
			if (SceptreActualLevel <= 0) stamuse = 575;
			if (SceptreActualLevel == 1) stamuse = 568; // -7
			if (SceptreActualLevel == 2) stamuse = 561; // -7
			if (SceptreActualLevel == 3) stamuse = 554; // -7
			if (SceptreActualLevel == 4) stamuse = 546; // -8
			if (SceptreActualLevel == 5) stamuse = 538; // -8
			if (SceptreActualLevel == 6) stamuse = 530; // -8
			if (SceptreActualLevel == 7) stamuse = 521; // -9
			if (SceptreActualLevel == 8) stamuse = 512; // -9
			if (SceptreActualLevel == 9) stamuse = 503; // -9
			if (SceptreActualLevel == 10) stamuse = 493; // -10
			if (SceptreActualLevel == 11) stamuse = 483; // -10
			if (SceptreActualLevel == 12) stamuse = 473; // -10
			if (SceptreActualLevel == 13) stamuse = 462; // -11
			if (SceptreActualLevel == 14) stamuse = 451; // -11
			if (SceptreActualLevel == 15) stamuse = 440; // -11
			if (SceptreActualLevel >= 16) stamuse = 428; // -12
		}
		else
		if (attacktype == 2) // Spinning Attack
		{
			if (SceptreActualLevel <= 0) stamuse = 1005;
			if (SceptreActualLevel == 1) stamuse = 996;
			if (SceptreActualLevel == 2) stamuse = 987;
			if (SceptreActualLevel == 3) stamuse = 978;
			if (SceptreActualLevel == 4) stamuse = 969;
			if (SceptreActualLevel == 5) stamuse = 960;
			if (SceptreActualLevel == 6) stamuse = 951;
			if (SceptreActualLevel == 7) stamuse = 942;
			if (SceptreActualLevel == 8) stamuse = 933;
			if (SceptreActualLevel == 9) stamuse = 924;
			if (SceptreActualLevel == 10) stamuse = 915;
			if (SceptreActualLevel == 11) stamuse = 903;
			if (SceptreActualLevel == 12) stamuse = 891;
			if (SceptreActualLevel == 13) stamuse = 879;
			if (SceptreActualLevel == 14) stamuse = 867;
			if (SceptreActualLevel == 15) stamuse = 855;
			if (SceptreActualLevel >= 16) stamuse = 840;
		}

		int whole = stamuse / 100;
		int modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Base (Sceptre)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Base (Sceptre)]: %d.%d%",whole, modulus);
		}

		if (DQOomphTimer > 0) stamuse = stamuse * 0.95; // Oomph
		if (BerserkTimer > 0) stamuse = stamuse * 0.875; // Berserk
		whole = stamuse / 100;
		modulus = stamuse % 100;
		if (stamusedebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Stamina Used [Oomph/Berserk (Sceptre)]: %d.0%d%",whole, modulus);
																	 else Console.Printf("Stamina Used [Oomph/Berserk (Sceptre)]: %d.%d%",whole, modulus);
		}

		return stamuse;
	}

	// script for Hellcore Energy and Heating usage [and also controls dealing Flora direct damage when using a Hellcore weapon when heating is 100% or higher]
	action void A_IncreaseHellcoreHeat(int percent = 0, int trydamageuser = 0)
	{
		int hellcoredebug = dvdsdebug_hellcoreheatdisplay;
		int LevelHeatAlter, OldHealth, NewHealth, HealthDiff, DamageFactor, DamageDealt, DamageRatio, ObitTimes;
		int PlayerLevel = CallACS("StatCheck",0);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int CharacterClass = CallACS("CheckCharacterClass");
		int PerkFactor;
		int temp1, temp2;

		int whole = percent / 100;
		int modulus = percent % 100;
		if (hellcoredebug)
		{
			if (modulus > -1 && modulus < 10) Console.Printf("Percent: %d.0%d %", whole, modulus, trydamageuser);
																	 else Console.Printf("Percent: %d.%d %", whole, modulus, trydamageuser);
		}

		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		if (trydamageuser != 0)
		{
			double usevol = HellcoreOverheatLevel / 1000000.00;
			double useintensity = (usevol / 2);
			usevol += 1.0;
			useintensity += 1.0;
			
			A_SetBlend("e6 48 62",(0.125*useintensity),(random(8,9)*useintensity));
			A_StartSound("Hellcore/usefire", 185, CHANF_OVERLAP, frandom(0.25,0.3125)*usevol, ATTN_NORM, frandom(0.75,1.25));
			A_StartSound("Hellcore/usedark", 186, CHANF_OVERLAP, frandom(0.25,0.3125)*usevol, ATTN_NORM, frandom(0.75,1.25));
			if (hellcoredebug) Console.Printf("usevol: %.8f (%.8f)", usevol, (HellcoreOverheatLevel / 1000000.00));
		}

		// Any damage from overheating is inflicted BEFORE increasing the heating counter (so going from below 100% to above 100% with a single attack doesn't harm you, only being above 100% at the moment of pulling the trigger will harm you)
		if (HellcoreOverheatLevel > 1000000 && trydamageuser != 0) // Translates to 100% or higher when you first fire your attack, which means you'll deal yourself damage upon use of this attack if above 100% at this point and the "trydamageuser" argument is set to something other than 0.
		{
			DamageFactor = (HellcoreOverheatLevel - 1000000) / 100;
			if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [unmitigated base]", DamageFactor);

			// Dove's Ribbon cuts Hellcore Overheating Damage in half
			if (CountInv("DoveRibbon"))
			{
				DamageFactor = DamageFactor * 1 / 5;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [base - Dove Ribbon]", DamageFactor);
			}
			else
			{
				DamageFactor = DamageFactor * 2 / 5;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [base - No Dove's Ribbon]", DamageFactor);
			}

			// Playing Unloved halves heat ratio
			if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0 || CountInv("PlayingUnloved"))
			{
				DamageFactor = DamageFactor / 2;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [base - Playing Unloved]]", DamageFactor);
			}

			// Soul Mastery Reduces some damage taken if Overheated.
			if (SoulMasteryPerkLevel > 0)
			{
				if (SoulMasteryPerkLevel == 1) temp1 = 3;
				if (SoulMasteryPerkLevel == 2) temp1 = 6;
				if (SoulMasteryPerkLevel == 3) temp1 = 9;
				if (SoulMasteryPerkLevel == 4) temp1 = 12;
				if (SoulMasteryPerkLevel == 5) temp1 = 15;
				if (SoulMasteryEXPerkLevel == 1) temp2 = random(7,8);
				if (SoulMasteryEXPerkLevel == 2) temp2 = 15;
				PerkFactor = 80 - (temp1 + temp2);
				DamageFactor = DamageFactor * PerkFactor / 80;
				if (hellcoredebug) Console.Printf("Hellcore Damage % Ratio: %d [Soul Mastery Perk]], %d / 80", DamageFactor, PerkFactor);
			}

			DamageDealt = DamageFactor * MaxHealthTrue / 10000;

			DamageDealt = clamp(DamageDealt, 1, DamageDealt);

			if (hellcoredebug) Console.Printf("Damage Dealt: %d", DamageDealt);
			
			double sizzlevol = DamageFactor / 5000.00;
			sizzlevol += 1.0;
			A_StartSound("Hellcore/Sizzle1", 187, CHANF_DEFAULT, frandom(0.5,0.625)*sizzlevol, ATTN_NORM, frandom(0.5,1.5));
			if (hellcoredebug) Console.Printf("sizzlevol: %.8f (%d)", sizzlevol, DamageFactor);

			// Deal the Actual Damage
			int CurrentHealth = health;
			OldHealth = health;
			if (health <= 0 || bINVULNERABLE ||
					player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE ||
					CountInv("InvulnerabilitySpell") || CountInv("IsInvulnerable") || CountInv("MenuInvulnerability"))
			{
				CallACS("MiscVarSetDECORATE",25304,1);
				A_StartSound("Player/TookNoDamageInvuln", CHAN_BODY, CHANF_DEFAULT, frandom(0.375,0.625), ATTN_NORM);
			}
			else
			{
				DamageMobj(self, self, DamageDealt, 'HellcoreDrain');
			}
			NewHealth = health;

			HealthDiff = OldHealth - NewHealth;
			if (hellcoredebug) Console.Printf("HealthDiff: %d (%d - %d)", HealthDiff, OldHealth, NewHealth);

			// Get's the damage % for a fade screen
			DamageRatio = HealthDiff; // DamageDealt;
			DamageRatio = DamageRatio * 10000;
			DamageRatio = DamageRatio / MaxHealthTrue;

			if (health > 0)
			{
				if (NewHealth < OldHealth)
				{
					if (DamageRatio > 0 && DamageRatio < 1001) A_SetBlend("70 10 20",0.15,random(21,22));
					if (DamageRatio > 1000 && DamageRatio < 2001) A_SetBlend("70 10 20",0.30,random(21,22));
					if (DamageRatio > 2000 && DamageRatio < 3001) A_SetBlend("70 10 20",0.45,random(21,22));
					if (DamageRatio > 3000 && DamageRatio < 4001) A_SetBlend("70 10 20",0.60,random(21,22));
					if (DamageRatio > 4000 && DamageRatio < 5001) A_SetBlend("70 10 20",0.75,random(21,22));
					if (DamageRatio > 5000 && DamageRatio < 6001) A_SetBlend("70 10 20",0.90,random(21,22));
					if (DamageRatio > 6000 && DamageRatio < 7001) A_SetBlend("70 10 20",1.05,random(21,22));
					if (DamageRatio > 7000 && DamageRatio < 8001) A_SetBlend("70 10 20",1.20,random(21,22));
					if (DamageRatio > 8000 && DamageRatio < 9001) A_SetBlend("70 10 20",1.35,random(21,22));
					if (DamageRatio > 9000 && DamageRatio < 10001) A_SetBlend("70 10 20",1.50,random(21,22));
					if (DamageRatio > 10000) A_SetBlend("70 10 20",1.65,random(21,22));
				}
			}
		}

		percent *= 100;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Base]", percent);

		int ArmorHellCoreRate = 200;
		// Armor Based items [Sauron-class or Flora's specific] can alter the rate of how fast Hellcore heats up.
		if (CountInv("RuinousShield") > 0) percent = percent * 2; 					// +100%
		if (CountInv("SauronHelmet") > 0) percent = percent * 134 / 100; 			// +34%
		if (CountInv("SauronGauntletsFlora") > 0) percent = percent * 134 / 100; 	// +34%
		if (CountInv("TheOneRing") > 0) percent = percent * 75 / 100; 				// -25%

		if (CountInv("SafeTeaShoes")) ArmorHellCoreRate -= 1; 			// -0.5% (1)
		if (CountInv("PearlyCorset")) ArmorHellCoreRate -= 5; 			// -2.5% (5)
		if (CountInv("WaterFlyingDress") > 0) ArmorHellCoreRate -= 15; 	// -7.5% (15)
		if (CountInv("EvenstarNecklace") > 0) ArmorHellCoreRate -= 27; 	// -13.5% (27)
		if (CountInv("CloakofEvasion") > 0) ArmorHellCoreRate -= 3; 		// -1.5% (3)
		if (CountInv("FalconKnifeEarrings") > 0) ArmorHellCoreRate -= 9; 	// -4.5% (9)
		if (CountInv("AnubisCufflinks") > 0) ArmorHellCoreRate -= 7; 		// -3.5% (7)
		if (CountInv("KissaBra") > 0) ArmorHellCoreRate -= 13; 			// -6.5% (13)
		if (CountInv("DivineShield") > 0) ArmorHellCoreRate -= 25; 		// -12.5% (25)
		if (CountInv("BalrogRing") > 0) ArmorHellCoreRate -= 17; 			// -8.5% (17)
		if (CountInv("DoveRibbon")) ArmorHellCoreRate -= 11; 			// -5.5% (11)
																							// Total: -66.5% (133)

		percent = percent * ArmorHellCoreRate / 200;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Armor Reduction]", percent);

		LevelHeatAlter = PlayerLevel * 0.1;
		LevelHeatAlter = LevelHeatAlter * -1;
		LevelHeatAlter += 200;
		percent = percent * LevelHeatAlter / 200;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Level Alteration]", percent);

		// Check Hellcore Multiplier in Options
		percent = (percent * dvds_helcheatmultiplier) / 100;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Menu Options]", percent);

		// Soul Mastery Reduces rate of heat increase
		if (SoulMasteryPerkLevel >= 0)
		{
			if (SoulMasteryPerkLevel == 1) temp1 = 1;
			if (SoulMasteryPerkLevel == 2) temp1 = 2;
			if (SoulMasteryPerkLevel == 3) temp1 = 3;
			if (SoulMasteryPerkLevel == 4) temp1 = 4;
			if (SoulMasteryPerkLevel == 5) temp1 = 5;
			if (SoulMasteryEXPerkLevel == 1) temp2 = random(2,3);
			if (SoulMasteryEXPerkLevel == 2) temp2 = 5;
			PerkFactor = 16 - (temp1 + temp2);
			percent = percent * PerkFactor / 16;
			if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Soul Mastery]", percent);
		}

		if (CountInv("IsHaSatanNow"))
		{
			percent = percent / 16;
			if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [HaSatan Check]", percent);
		}

		if (percent < 1) percent = 1;
		if (hellcoredebug) Console.Printf("Hellcore Heat %: %d [Final Amount]", percent);

		HellcoreOverheatLevel += percent;
		HellcoreOverheatLevel = clamp(HellcoreOverheatLevel, 0, 10000000);
		CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);

		if (CharacterClass == 2) 
		{
			double ramount = (percent * 0.0001) * randompick(6,7,7,8,8,8,9,9,10);
			if (dvdsdebug_regenpenaltydisplay) Console.Printf("HLCRPenaltyTimeAdd: %d", ramount);
			CallACS("MiscVarSetDECORATE",95,ramount,2); // HLCRCoolBonPenTimer
			if (hellcoredebug) Console.Printf("Hellcore ramount: %d [ramount added: %d]", CallACS("MiscVarCheckDECORATE",95), ramount);
		}
	}

	action int A_GetSceptreRange(int attacktype = 0)
	{
		int range;
		int baserange;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (attacktype == 0) // Normal Swing
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 1) // Aireal Attack
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 2) // Spinning Attack
		{
			if (SceptreActualLevel <= 0) range = 168;
			if (SceptreActualLevel == 1) range = 173; // +5
			if (SceptreActualLevel == 2) range = 178; // +5
			if (SceptreActualLevel == 3) range = 182; // +4
			if (SceptreActualLevel == 4) range = 187; // +5
			if (SceptreActualLevel == 5) range = 196; // +9
			if (SceptreActualLevel == 6) range = 201; // +5
			if (SceptreActualLevel == 7) range = 209; // +8
			if (SceptreActualLevel == 8) range = 222; // +13
			if (SceptreActualLevel == 9) range = 230; // +8
			if (SceptreActualLevel == 10) range = 236; // +6
			if (SceptreActualLevel == 11) range = 241; // +5
			if (SceptreActualLevel == 12) range = 247; // +6
			if (SceptreActualLevel == 13) range = 256; // +9
			if (SceptreActualLevel == 14) range = 262; // +6
			if (SceptreActualLevel == 15) range = 271; // +9
			if (SceptreActualLevel >= 16) range = 288; // +17
			range = range * 5 / 4;
		}
		baserange = range;
		if (ClassicDoomType == 5) range = range * 6 / 5; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		if (debugmelee) Console.Printf("\cwMeleeRange: (SAttackType: %d) %d - (Base Range: %d)\c-", attacktype, range, baserange);

		return range;
	}

	// Melee Range
	action int A_GetMeleeRange(int type = 0)
	{
		int baserange;
		int range;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (type == 0) range = 64; // Punch [normal]
		if (type == 1) range = 58; // Punch [uppercut]
		if (type == 2) range = 72; // Gauntlet Punch [normal]
		if (type == 3) range = 80; // Gauntlet Punch [alt-fire]
		if (type == 4) range = 104; // Kick
		if (type == 5) range = 73; // Chainsaw
		if (type == 6) range = random(74,75); // Dual-Bladed Chainsaw
		if (type == 7) range = 88; // Poison Needle

		baserange = range;
		if (CharacterClass == 2 && MartialArtsMastery > 0)
		{
			if (MartialArtsMastery == 1) range = range * 1015 / 1000;
			if (MartialArtsMastery == 2) range = range * 1030 / 1000;
			if (MartialArtsMastery == 3) range = range * 1045 / 1000;
			if (dvds_florauseorarush)
			{
				if (MartialArtsMastery == 4) range = range * 1090 / 1000;
				if (MartialArtsMastery == 5) range = range * 1135 / 1000;
			}
			else
			{
				if (MartialArtsMastery == 4) range = range * 1060 / 1000;
				if (MartialArtsMastery == 5) range = range * 1075 / 1000;
			}
		}

		if (CharacterClass != 2 && BerserkerFit > 0)
		{
			if (BerserkerFit == 1) range = range * 1010 / 1000;
			if (BerserkerFit == 2) range = range * 1020 / 1000;
			if (BerserkerFit == 3) range = range * 1030 / 1000;
			if (BerserkerFit == 4) range = range * 1040 / 1000;
			if (BerserkerFit == 5) range = range * 1050 / 1000;
		}

		if (ClassicDoomType == 5) range = range * 6 / 5; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		if (debugmelee) Console.Printf("MeleeRange: (Type: %d) %d - (Base Range: %d)", type, range, baserange);

		return range;
	}

	action double A_GetHitScanXSpread(int type = 0)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();

		double spread = 0.0;
		double spreadfactor = 1.0;
		double spreadfactor2 = 1.0;
		double spreadfactor3 = 1.0;
		double spreadfactor4 = 1.0;
		double spreadfactor5 = 1.0;
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int KarasawaAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10027);
		int KarasawaAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10028);
		int BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		int BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);
		int ArcheryMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10032);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ClearedOfMindPerkLevel = CallACS("MiscVarCheckDECORATE",10055);
		int ClearedOfMindEXPerkLevel = CallACS("MiscVarCheckDECORATE",10056);
		int StrifeStaminaLevel = CallACS("MiscVarCheckDECORATE",317);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;

		int IsMoving = 0;
		int IsMoving2 = 0;
		double moving1multi = 0.5;
		double moving2multi = 1.125;
		if (vel.x < (minxymoveneg * moving1multi) || vel.x > (minxymovepos * moving1multi)) IsMoving++;
		if (vel.y < (minxymoveneg * moving1multi) || vel.y > (minxymovepos * moving1multi)) IsMoving++;
		if (vel.z < (minzmoveneg * moving1multi) || vel.z > (minzmovepos * moving1multi)) IsMoving++;
		if (vel.x < (minxymoveneg * moving2multi) || vel.x > (minxymovepos * moving2multi)) IsMoving2++;
		if (vel.y < (minxymoveneg * moving2multi) || vel.y > (minxymovepos * moving2multi)) IsMoving2++;
		if (vel.z < (minzmoveneg * moving2multi) || vel.z > (minzmovepos * moving2multi)) IsMoving2++;
		int AtkType;
		int buttons = GetPlayerInput(INPUT_BUTTONS);

		if (type == 1) // Pistol [Single]
		{
			AtkType = 1;
			spread = 2.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 2) // Pistol [Dual]
		{
			AtkType = 1;
			spread = 2.785; // 4.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 3) // Shotgun
		{
			AtkType = 1;
			spread = 5.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 4) // Super Shotgun
		{
			AtkType = 1;
			spread = 11.2;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 5) // Plasma Repeater
		{
			AtkType = 1;
			spread = 5.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 6) // Strife's Electric Arrows
		{
			spread = 2.8125;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 7) // Strife's Poison Arrows
		{
			spread = 2.8125;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 8) // RocketLauncher Burst Mode
		{
			spread = 3.75;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 9) // PlasmaRifle Burst Mode
		{
			spread = 7.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 10) // Grenades [Burst Mode]
		{
			spread = 7.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 11) // Chaingun
		{
			AtkType = 1;
			spread = 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 12) // Minigun
		{
			AtkType = 1;
			spread = 7.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 13) // Elven Wand[s]
		{
			AtkType = 1;
			spread = 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		if (type == 14) // Dragon Claw[s]
		{
			AtkType = 1;
			spread = 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		if (type == 15) // RocketLauncher Howitzer Burst Mode
		{
			AtkType = 1;
			spread = 15.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 16) // Gut Flinger BurstFire Mode
		{
			spread = 9.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 17) // Gas Rocket Launcher Burst Fire
		{
			spread = 9.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}

		spreadfactor4 = 1.0 - ((MartialArtsMastery * 0.025) + (MartialArtsMasteryEX * 0.0625) + (BerserkerFit * 0.025) + (BerserkerFitEX * 0.0625));
		spreadfactor5 = 1.0 - ((ClearedOfMindPerkLevel * 0.02) + (ClearedOfMindEXPerkLevel * 0.05));

		if (AtkType == 1)
		{
			if (IsMoving) spread *= 1.2;
			if (IsMoving2) spread *= 1.2;
			if ((buttons & BT_CROUCH) && sv_allowcrouch) spread *= 0.8;
		}
		else
		{
			if (IsMoving) spread *= 1.075;
			if (IsMoving2) spread *= 1.075;
			if ((buttons & BT_CROUCH) && sv_allowcrouch) spread *= 0.925;
		}

		spread *= spreadfactor;
		spread *= spreadfactor2;
		spread *= spreadfactor3;
		spread *= spreadfactor4;
		spread *= spreadfactor5;
		if (accuracydebug) Console.Printf("\cyXSpread: %.4f, XSpreadFactor: %.4f, XSpreadFactor2: %.4f, XSpreadFactor3: %.4f, XSpreadFactor4: %.4f, XSpreadFactor5: %.4f, IsMoving: %d, IsMoving2: %d\c-" ,spread, spreadfactor, spreadfactor2, spreadfactor3, spreadfactor4, spreadfactor5, IsMoving, IsMoving2);
		return spread;
	}

	action double A_GetHitScanYSpread(int type = 0)
	{
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();

		double spread = 0.0;
		double spreadfactor = 1.0;
		double spreadfactor2 = 1.0;
		double spreadfactor3 = 1.0;
		double spreadfactor4 = 1.0;
		double spreadfactor5 = 1.0;
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		int PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		int PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		int PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		int PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		int DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		int DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);
		int KarasawaAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10027);
		int KarasawaAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10028);
		int BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		int BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);
		int ArcheryMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10032);
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		int BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ClearedOfMindPerkLevel = CallACS("MiscVarCheckDECORATE",10055);
		int ClearedOfMindEXPerkLevel = CallACS("MiscVarCheckDECORATE",10056);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;

		int IsMoving = 0;
		int IsMoving2 = 0;
		double moving1multi = 0.5;
		double moving2multi = 1.125;
		if (vel.x < (minxymoveneg * moving1multi) || vel.x > (minxymovepos * moving1multi)) IsMoving++;
		if (vel.y < (minxymoveneg * moving1multi) || vel.y > (minxymovepos * moving1multi)) IsMoving++;
		if (vel.z < (minzmoveneg * moving1multi) || vel.z > (minzmovepos * moving1multi)) IsMoving++;
		if (vel.x < (minxymoveneg * moving2multi) || vel.x > (minxymovepos * moving2multi)) IsMoving2++;
		if (vel.y < (minxymoveneg * moving2multi) || vel.y > (minxymovepos * moving2multi)) IsMoving2++;
		if (vel.z < (minzmoveneg * moving2multi) || vel.z > (minzmovepos * moving2multi)) IsMoving2++;
		int AtkType;
		int buttons = GetPlayerInput(INPUT_BUTTONS);

		if (type == 1) // Pistol [Single]
		{
			AtkType = 1;
			spread = 1.3; // 2.6;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 2) // Pistol [Dual]
		{
			AtkType = 1;
			spread = 1.3925; // 2.785;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 3) // Shotgun
		{
			AtkType = 1;
			spread = 1.42;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 4) // Super Shotgun
		{
			AtkType = 1;
			spread = 7.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PelletAccuracyPerkLevel * 0.1) + (PelletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 5) // Plasma Repeater
		{
			AtkType = 1;
			spread = 4.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 6) // Strife's Electric Arrows
		{
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 7) // Strife's Poison Arrows
		{
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((ArcheryMasteryPerkLevel * 0.1) + (ArcheryMasteryEXPerkLevel * 0.25));
		}
		if (type == 8) // RocketLauncher Burst Mode
		{
			spread = 1.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 9) // PlasmaRifle Burst Mode
		{
			spread = 7.5;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((PlasmaAccuracyPerkLevel * 0.1) + (PlasmaAccuracyEXPerkLevel * 0.25));
		}
		if (type == 10) // Grenades [Burst Mode]
		{
			spread = 6.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 11) // Chaingun
		{
			AtkType = 1;
			spread = 2.8125; // 5.625;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 12) // Minigun
		{
			AtkType = 1;
			spread = 3.55; // 7.1;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((BulletAccuracyPerkLevel * 0.1) + (BulletAccuracyEXPerkLevel * 0.25));
		}
		if (type == 13) // Elven Wand[s]
		{
			AtkType = 1;
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		if (type == 14) // Dragon Claw[s]
		{
			AtkType = 1;
			spread = 0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((WandMasteryPerkLevel * 0.05) + (WandMasteryEXPerkLevel * 0.125));
		}
		if (type == 15) // RocketLauncher Howitzer Burst Mode
		{
			AtkType = 1;
			spread = 6.0;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 16) // Gut Flinger BurstFire Mode
		{
			spread = 2.4;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}
		if (type == 17) // Gas Rocket Launcher BurstFire Mode
		{
			spread = 2.4;
			spreadfactor = 1.0 - ((StrifeAccuracyLevel * 0.1));
			spreadfactor2 = 1.0 - ((DemolitionsExpertPerkLevel * 0.1) + (DemolitionsExpertEXPerkLevel * 0.25));
		}

		spreadfactor4 = 1.0 - ((MartialArtsMastery * 0.0375) + (MartialArtsMasteryEX * 0.09375) + (BerserkerFit * 0.0375) + (BerserkerFitEX * 0.09375));
		spreadfactor5 = 1.0 - ((ClearedOfMindPerkLevel * 0.02) + (ClearedOfMindEXPerkLevel * 0.05));

		if (AtkType == 1)
		{
			if (IsMoving) spread *= 1.2;
			if (IsMoving2) spread *= 1.2;
			if ((buttons & BT_CROUCH) && sv_allowcrouch) spread *= 0.8;
		}
		else
		{
			if (IsMoving) spread *= 1.075;
			if (IsMoving2) spread *= 1.075;
			if ((buttons & BT_CROUCH) && sv_allowcrouch) spread *= 0.925;
		}

		spread *= spreadfactor;
		spread *= spreadfactor2;
		spread *= spreadfactor3;
		spread *= spreadfactor4;
		spread *= spreadfactor5;
		if (accuracydebug) Console.Printf("\cyYSpread: %.4f, YSpreadFactor: %.4f, YSpreadFactor2: %.4f, YSpreadFactor3: %.4f, YSpreadFactor4: %.4f, YSpreadFactor5: %.4f, IsMoving: %d, IsMoving2: %d\c-" ,spread, spreadfactor, spreadfactor2, spreadfactor3, spreadfactor4, spreadfactor5, IsMoving, IsMoving2);
		return spread;
	}

	action int A_GetSapphireWandAltSpread(int type = 0)
	{
		int result = 400;
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		int accuracydebug = dvdsdebug_accuracyspreadisplay;
		
		result *= (1.0 - (WandMasteryPerkLevel * 0.15));
		//if (type == -1) result *= -1;
		
		// Accuracy Bonus
		result = result * (1.0 - ((StrifeAccuracyLevel * 0.1)));

		if (accuracydebug) Console.Printf("\cyWandSpread: %.4f", result);
		return result;
	}

	// Checks the Player's level to determine how much drawing the Diaris Longbow will slow you down while aiming
	action void A_DrawBow(int isbowdrawn = 0)
	{
		int i = 0;
		int bowlevel;
		int bowlevelbase;
		int lvlforbowdraw;
		int strforbowdraw;
		int aglforbowdraw;
		int perklvlforbowdraw;
		string BowLevelItem;
		int PlayerLevel = CallACS("StatCheck",0);
		int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		int ArcheryMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10031);

		bowlevelbase = random(15,19);
		lvlforbowdraw = PlayerLevel * 0.125; // Max of +25%
		strforbowdraw = PlayerSTR * 0.0625; // Max of +32%
		aglforbowdraw = PlayerAGL * 0.1; // Max of +51%
		perklvlforbowdraw = ArcheryMasteryPerkLevel * 10; // Max of +50%
		bowlevel = bowlevelbase;
		bowlevel += lvlforbowdraw;
		bowlevel += strforbowdraw;
		bowlevel += aglforbowdraw;
		bowlevel += perklvlforbowdraw;
		if (CountInv("EvenstarNecklace") > 0) bowlevel = bowlevel * 1.334;

		bowlevel = clamp(bowlevel, 0, 101); // Min of 0, Max of 101

		CallACS("MiscVarSetDECORATE",398,isbowdrawn); // 398 - Bow is Drawn?
		CallACS("MiscVarSetDECORATE",84,bowlevel); // 8 - Bow Proficency/SpeedMovement%

		if (dvdsdebug_showplayeratkinformation)
		{
			if (isbowdrawn) Console.Printf("isbowdrawn: %d, bowlevel: %d", isbowdrawn, bowlevel);
			else Console.Printf("isbowdrawn: %d", isbowdrawn);
		}
	}

	action void A_CheckWeaponFlash(int modulous = 0, int increment = 0)
	{
		int result = CountInv("WeaponFlashResult");
		if (increment != 0)
		{
			result += increment;
			if (result >= modulous) result = 0;
		}
		else
		{
			result %= modulous;
		}
		A_SetInventory("WeaponFlashResult",result);
		//Console.Printf("result / modulous: %d / %d  [increment: %d]", result, modulous, increment);
	}

/*
	action int A_SetMinigunHeat(double amount = 0)
	{
		return amount;
	}
*/

	action void A_CheckMinigunHeat(int save = 0)
	{
		int heatsave;
		int heatdivisior = CallACS("MiscVarCheckDECORATE",191);
		if (save > 0)
		{
			heatdivisior = CountInv("MinigunHeat") / save;
			if (heatdivisior < 1) heatdivisior = 1;
			//Console.Printf("heatdivisior: %d - save: %d [FIRING]", heatdivisior, save);
		}
		else
		{
			if (heatdivisior > 0) A_TakeInventory("MinigunHeat",heatdivisior);
			//Console.Printf("heatdivisior: %d [COOLING]", heatdivisior);
		}
		CallACS("MiscVarSetDECORATE",191,heatdivisior);
	}


	action void A_SceptreSwingShield()
	{
		let baseRange = A_GetSceptreRange(0);
		let sceptrelevel = CallACS("OtherVarCheckDECORATE",11);
		string reflpiece; string blckpiece;
		if (sceptrelevel >= 0 && sceptrelevel <= 4) { reflpiece = "ShieldSpawnerSwingAttack1D"; blckpiece = "ShieldSpawnerSwingAttack1"; }
		if (sceptrelevel >= 5 && sceptrelevel <= 9) { reflpiece = "ShieldSpawnerSwingAttack2D"; blckpiece = "ShieldSpawnerSwingAttack2"; }
		if (sceptrelevel >= 10 && sceptrelevel <= 13) { reflpiece = "ShieldSpawnerSwingAttack3D"; blckpiece = "ShieldSpawnerSwingAttack3"; }
		if (sceptrelevel >= 14 && sceptrelevel <= 16) { reflpiece = "ShieldSpawnerSwingAttack4D"; blckpiece = "ShieldSpawnerSwingAttack4"; }
		let maxpieces = baseRange / 32;
		for (let piece = 0; piece < maxpieces; piece++)
		{
			A_SpawnItemEx(
					piece == 0? reflpiece : blckpiece,
					(cos(-pitch) * A_SetShieldPieceDist(baseRange - (piece * 32))), // xpos
					0, // ypos
					(sin(-pitch) * A_SetShieldPieceDist(baseRange - (piece * 32))), // zpos
					0, // xvel
					0, // yvel
					0, // zvel
					0, // angle
					SXF_NOCHECKPOSITION, // Flags
					0, // FailChance
					0 // TID
			);
		}
	}

	action void A_SceptreAltFireShield()
	{
		int xpos;
		int ypos;
		int zpos;
		int spawnchance = 1 - (CallACS("OtherVarCheckDECORATE",11) / 8);
		if (random(1,256) > spawnchance)
		{
			// 6 [No]
			xpos = 32; ypos = 0;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(-8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(72) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 5 [No]
			xpos = 24; ypos = 16;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(0) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(64) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 5 [No]
			xpos = 24; ypos = -16;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(0) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(64) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 4 [No]
			xpos = 11; ypos = 32;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			// 4 [No]
			xpos = 11; ypos = -32;
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);

			spawnchance = 3 - ((CallACS("OtherVarCheckDECORATE",11) * 2) / 3);
			if (random(1,256) > spawnchance)
			{
				// 6 [No]
				xpos = 40; ypos = 0;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(-8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(72) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 5 [No]
				xpos = 32; ypos = 16;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(0) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(64) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 5 [No]
				xpos = 32; ypos = -16;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(0) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(64) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 4 [No]
				xpos = 21; ypos = 32;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				// 4 [No]
				xpos = 21; ypos = -32;
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
				A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);


				spawnchance = 10 - ((CallACS("OtherVarCheckDECORATE",11) * 16) / 5);
				if (random(1,256) > spawnchance)
				{
					// 6 [Yes]
					xpos = 48; ypos = 0;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(-8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(72) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 5 [Yes]
					xpos = 40; ypos = 16;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(0) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(64) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 5 [Yes]
					xpos = 40; ypos = -16;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(0) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(64) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 4 [Yes]
					xpos = 29; ypos = 32;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					// 4 [Yes]
					xpos = 29; ypos = -32;
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(8) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(24) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(40) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
					A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(56) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);


					spawnchance = 30 - ((CallACS("OtherVarCheckDECORATE",11) * 18) / 2);
					if (random(1,256) > spawnchance)
					{
						// 3 [No]
						xpos = 2; ypos = 40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 2; ypos = -40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 7; ypos = 40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [No]
						xpos = 7; ypos = -40;
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPartNoReflect", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [Yes]
						xpos = 24; ypos = 40;
						A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						// 3 [Yes]
						xpos = 24; ypos = -40;
						A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(16) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
						A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(xpos), ypos, A_SetShieldPieceDist(48) + (sin(-pitch) * A_SetShieldPieceDist(xpos)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);



					}
				}
			}
		}
		//A_SpawnItemEx("ShieldPart", cos(-pitch) * A_SetShieldPieceDist(32), 0, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(32)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
	}

	action void A_SceptreSpinningShield()
	{
		let baseRange = A_GetSceptreRange(2);
		let sceptrelevel = CallACS("OtherVarCheckDECORATE",11);
		string reflpiece; string blckpiece;
		if (sceptrelevel >= 0 && sceptrelevel <= 8) { reflpiece = "ShieldSpawnerSpinAttack1D"; blckpiece = "ShieldSpawnerSpinAttack1"; }
		if (sceptrelevel >= 9 && sceptrelevel <= 16) { reflpiece = "ShieldSpawnerSpinAttack2D"; blckpiece = "ShieldSpawnerSpinAttack2"; }
		let maxpieces = baseRange / 32;
		for (let piece = 0; piece < maxpieces; piece++)
		{
			A_SpawnItemEx(
					piece == 0? reflpiece : blckpiece,
					(cos(-pitch) * A_SetShieldPieceDist(baseRange - (piece * 32))), // xpos
					0, // ypos
					(sin(-pitch) * A_SetShieldPieceDist(baseRange - (piece * 32))), // zpos
					0, // xvel
					0, // yvel
					0, // zvel
					0, // angle
					SXF_NOCHECKPOSITION, // Flags
					0, // FailChance
					0 // TID
			);
		}
	}

	action void A_UppercutBonusTake()
	{
		A_SetInventory("UppercutATKBonus",0);
		A_SetInventory("UppercutDEFBonus",0);
		A_SetInventory("UppercutCritBonus",0);
	}

	action void A_UppercutBonus()
	{
		if (random(1,6) == 1)
		{
			A_SetInventory("UppercutCritBonus",2);
		}
		else
		{
			A_SetInventory("UppercutCritBonus",1);
		}

		if (random(1,6) == 1)
		{
			if (random(1,6) == 1)
			{
				A_SetInventory("UppercutATKBonus",2);
				A_SetInventory("UppercutDEFBonus",2);
			}
			else
			{
				A_SetInventory("UppercutATKBonus",1);
				A_SetInventory("UppercutDEFBonus",1);
			}
		}
	}

	// Hell Warrior Shield
	action void A_PHellWarShieldOff()
	{
		A_SetInventory("EWShieldDefendMode",0);
		A_SetInventory("EWShieldDefendModeExtra",0);
		bREFLECTIVE = 0;
		//bSHIELDREFLECT = 0;
	}
	action void A_PHellWarShieldOn()
	{
		A_SetInventory("EWShieldDefendMode",1);
		A_SetInventory("EWShieldDefendModeExtra",0);
		if (random(1,4) == 1) { A_SetInventory("EWShieldDefendModeExtra",1); }
		bREFLECTIVE = 1;
		//bSHIELDREFLECT = 1;
	}

	// Fist Block Function
	action void A_PFistBlockOn(int perkcheck)
	{
		A_SetInventory("FistPlayerBlock",0); A_SetInventory("FistPlayerBlock2",0); A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerSpeedFactor",0); A_SetInventory("FistPlayerSpeedFactor2",0); A_SetInventory("FistPlayerSpeedFactor3",0);
		if (CallACS("MiscVarCheckDECORATE",perkcheck) >= 4) { A_SetInventory("FistPlayerBlock3",1); A_SetInventory("FistPlayerSpeedFactor3",1); }
		else if (CallACS("MiscVarCheckDECORATE",perkcheck) >= 2) { A_SetInventory("FistPlayerBlock2",1); A_SetInventory("FistPlayerSpeedFactor2",1); }
		else { A_SetInventory("FistPlayerBlock",1); A_SetInventory("FistPlayerSpeedFactor",1); }
		A_SetInventory("FistPlayerBlockExtra",0);
		if (random(1,16) <= (1 + (CallACS("MiscVarCheckDECORATE",perkcheck)/2))) { A_SetInventory("FistPlayerBlockExtra",1); }
	}

	action void A_PFistBlockOff()
	{
		A_SetInventory("FistPlayerBlock",0); A_SetInventory("FistPlayerBlock2",0); A_SetInventory("FistPlayerBlock3",0);
		A_SetInventory("FistPlayerSpeedFactor",0); A_SetInventory("FistPlayerSpeedFactor2",0); A_SetInventory("FistPlayerSpeedFactor3",0);
		A_SetInventory("FistPlayerBlockExtra",0);
		A_SetInventory("FistPlayerBlockItem",0);
		bREFLECTIVE = 0;
		bSHIELDREFLECT = 0;
	}

	action void A_KickBonusOff()
	{
		A_SetInventory("KickCritBonus",0);
		A_SetInventory("KickAttackDEFLvl",0);
		A_SetInventory("MartArtsMaster",0);
		A_SetInventory("UsingMeleeAttack",0);
	}
	
	action void A_SetMartialArtsMastery(int type = 1)
	{
		A_SetInventory("MartArtsMaster",0);
		if (type == 1) A_SetInventory("MartArtsMaster",CallACS("MiscVarCheckDECORATE",10035));
	}

	action void A_SceptreShieldOff()
	{
		string shldpiece;
		shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0);
		shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0);
		shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
		A_SetInventory("UsingSceptreAltFire",0);
	}

	action void A_SceptreShieldOn(int type = 1)
	{
		type = clamp(type, 1, 3);

		int SceptreExpMultiplier = dvds_sceptreexpmultiplier;
		int fragthreshold = 100;
		int ExpPieceFragsToAdd = type * random(50,75);
		if (CallACS("GetBuffTimer",7) > 0) ExpPieceFragsToAdd *= frandompick(2.5,2.75,3.0);

		ExpPieceFragsToAdd = ExpPieceFragsToAdd * SceptreExpMultiplier / 100;
		if (ExpPieceFragsToAdd <= 0) ExpPieceFragsToAdd = 1;
		if (dvdsdebug_showexpdebugstuff && ExpPieceFragsToAdd) Console.Printf("\cxExpPieceFragsToAdd (Step 1 - Base [Multi: %d%]): %d", SceptreExpMultiplier, ExpPieceFragsToAdd);


		int ExpPiecesToAdd;
		CallACS("MiscVarSetDECORATE",198,ExpPieceFragsToAdd,1);
		if (dvdsdebug_showexpdebugstuff && ExpPieceFragsToAdd) Console.Printf("\cxExpPieceFragsToAdd (Step 2 - Total): %d / %d", CallACS("MiscVarCheckDECORATE",198), fragthreshold);
		while (CallACS("MiscVarCheckDECORATE",198) >= fragthreshold)
		{
			CallACS("MiscVarSetDECORATE",198,fragthreshold,2);
			CallACS("MiscVarSetDECORATE",203,1,1);
			ExpPiecesToAdd++;
		}
		if (dvdsdebug_showexpdebugstuff && ExpPiecesToAdd) Console.Printf("\cxExpPiecesToAdd (Step 1): %d / 16", ExpPiecesToAdd);
		
		while (CallACS("MiscVarCheckDECORATE",203) > 15)
		{
			CallACS("MiscVarSetDECORATE",203,-16,1);
			CallACS("OtherVarSetDECORATE",10,1,1);
		}
		string shldpiece;
		if (type == 1)
		{
			shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,1);
			shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0);
			shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
		}
		if (type == 2)
		{
			shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0);
			shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,1);
			shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,0);
		}
		if (type == 3)
		{
			shldpiece = "ShieldDefense"; A_SetInventory(shldpiece,0);
			shldpiece = "ShieldDefense2"; A_SetInventory(shldpiece,0);
			shldpiece = "ShieldDefense3"; A_SetInventory(shldpiece,1);
		}
		A_SetInventory("UsingSceptreAltFire",1);
	}

	action void A_SpreadAuraSpawnItemEx(string type = "", float xofs = 0.0, float yofs = 0.0, float zofs = 0.0, float xvel = 0.0, float yvel = 0.0, float zvel = 0.0, float angle = 0.0, int flags = 0, int failchance = 0, int tid = 0)
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_SpawnItemEx(type,(cos(-spread2pitch1) * xofs),yofs+spread2horz2,zofs+spread2height1-(sin(-spread2pitch1) * xofs),(cos(spread2pitch1)*xvel),yvel,-(sin(spread2pitch1)*xvel),angle+spread2angle2,flags,failchance,tid);
			A_SpawnItemEx(type,(cos(-spread2pitch1) * xofs),yofs+spread2horz1,zofs+spread2height1-(sin(-spread2pitch1) * xofs),(cos(spread2pitch1)*xvel),yvel,-(sin(spread2pitch1)*xvel),angle+spread2angle1,flags,failchance,tid);
			A_SpawnItemEx(type,(cos(-spread2pitch2) * xofs),yofs+spread2horz2,zofs+spread2height2-(sin(-spread2pitch2) * xofs),(cos(spread2pitch2)*xvel),yvel,-(sin(spread2pitch2)*xvel),angle+spread2angle2,flags,failchance,tid);
			A_SpawnItemEx(type,(cos(-spread2pitch2) * xofs),yofs+spread2horz1,zofs+spread2height2-(sin(-spread2pitch2) * xofs),(cos(spread2pitch2)*xvel),yvel,-(sin(spread2pitch2)*xvel),angle+spread2angle1,flags,failchance,tid);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_SpawnItemEx(type,xofs,yofs+spread1horz1,zofs+spread1height1,xvel,yvel,zvel,angle+spread1angle1,flags,failchance,tid);
			A_SpawnItemEx(type,xofs,yofs+spread1horz2,zofs+spread1height1,xvel,yvel,zvel,angle+spread1angle2,flags,failchance,tid);
		}
		A_SpawnItemEx(type,xofs,yofs,zofs,xvel,yvel,zvel,angle,flags,failchance,tid);
	}

	action void A_SpreadAuraProjTest(Actor mo, double newpitch = 0.0)
	{
		bool wandmissleeraseproj;
		if (CountInv("WandGuard") > 0) wandmissleeraseproj = true;
		if (mo != null)
		{
			BaseWandMissile mo2; 
			mo2 = BaseWandMissile(mo);
			if (mo2) 
			{ 
				mo2.wandmissleeraseproj = wandmissleeraseproj; 
				mo2.pitch += newpitch;
				//Console.Printf("(mo2) Angle: %.8f, Pitch: %.8f (%.8f)", (mo2.angle % 360), mo2.pitch, newpitch);
			}
			BaseDiarisHolyArrow mo3; 
			mo3 = BaseDiarisHolyArrow(mo);
			if (mo3) 
			{ 
				mo3.pitch += newpitch;
				//Console.Printf("(mo3) Angle: %.8f, Pitch: %.8f (%.8f)", (mo3.angle % 360), mo3.pitch, newpitch);
			}
		}
	}

	// Spread Aura Function [Projectiles]
	action void A_SpreadAuraFireProjectile (Class<Actor> missiletype, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0)
	{
		Actor mo;
		string missilename = missiletype.GetClassName();

		if (CountInv("SpreaderAura2") > 0)
		{
			mo = A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2); A_SpreadAuraProjTest(mo,pitch+spread2pitch2);
			mo = A_FireProjectile(missiletype,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1); A_SpreadAuraProjTest(mo,pitch+spread2pitch1);
			mo = A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1); A_SpreadAuraProjTest(mo,pitch+spread2pitch1);
			mo = A_FireProjectile(missiletype,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2); A_SpreadAuraProjTest(mo,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			mo = A_FireProjectile(missiletype,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch); A_SpreadAuraProjTest(mo,pitch);
			mo = A_FireProjectile(missiletype,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch); A_SpreadAuraProjTest(mo,pitch);
		}
		mo = A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch); A_SpreadAuraProjTest(mo,pitch);

		//Console.Printf("ammousetype: %s, ammouseamount: %d", ammousetype, ammouseamount);
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Projectiles w/ AOE]
	action void A_SpreadAuraFireProjectileAoE (Class<Actor> missiletype, Class<Actor> missiletypeaoe, double angle = 0.0, int ammouseamount = 0, string ammousetype = "", float spawnofs_horz = 0.0, int spawnheight = 0, int flags = 0, double pitch = 0.0)
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height2,flags,pitch+spread2pitch2);
			A_FireProjectile(missiletypeaoe,angle+spread2angle2,0,spawnofs_horz+spread2horz2,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height1,flags,pitch+spread2pitch1);
			A_FireProjectile(missiletypeaoe,angle+spread2angle1,0,spawnofs_horz+spread2horz1,spawnheight+spread2height2,flags,pitch+spread2pitch2);
		}
		if (CountInv("SpreaderAura1") > 0 || CountInv("SpreaderAura2") > 0)
		{
			A_FireProjectile(missiletypeaoe,angle+spread1angle1,0,spawnofs_horz+spread1horz1,spawnheight+spread1height1,flags,pitch);
			A_FireProjectile(missiletypeaoe,angle+spread1angle2,0,spawnofs_horz+spread1horz2,spawnheight+spread1height1,flags,pitch);
		}
		A_FireProjectile(missiletype,angle,0,spawnofs_horz,spawnheight,flags,pitch);

		//Console.Printf("ammousetype: %s, ammouseamount: %d", ammousetype, ammouseamount);
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Melee Punch]
	action void A_SpreadAuraCustomPunch (int damage, bool norandom = 0, int flags = 0, string pufftype = "", float range = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "", sound meleesound = "", sound misssound = "")
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle-spread1angle2);
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_CustomPunch(damage,norandom,flags,pufftype,range,lifesteal,lifestealmax,armorbonustype,meleesound,misssound);
		}
	}

	// Spread Aura Function [Melee Chainsaw]
	action void A_SpreadAuraSaw (string fullsound, string hitsound = "", int damage = 0, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 0.0, float spread_xy = 0.0, float spread_z = 0.0, float lifesteal = 0.0, int lifestealmax = 0, string armorbonustype = "")
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle-spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle-spread1angle2);
			A_Saw(fullsound,hitsound,damage,pufftype,   flags   ,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_Saw(fullsound,hitsound,damage,pufftype,flagscenter,range,spread_xy,spread_z,lifesteal,lifestealmax,armorbonustype);
		}
	}

	// Spread Aura Function [Hitscan]
	action void A_SpreadAuraFireBullets (double spread_horz, double spread_vert, int numbullets, int damage, string pufftype = "", int flags = 0, int flagscenter = 0, float range = 8192, string missile = "", float spawnheight = 0.0, float spawnofs_xy = 0.0, int ammouseamount = 0, string ammousetype = "", int UsesAOE = 0, string AOEPuffType = "")
	{
		int user_pelletsfired;
		if (AOEPuffType == "") AOEPuffType = PuffType;

		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			if (UsesAOE > 0) A_FireBullets(spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets(spread_horz,spread_vert,numbullets,damage,PuffType,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			if (UsesAOE > 0) A_FireBullets(spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets(spread_horz,spread_vert,numbullets,damage,PuffType,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2);
			if (UsesAOE > 0) A_FireBullets(spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets(spread_horz,spread_vert,numbullets,damage,PuffType,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			if (UsesAOE > 0) A_FireBullets(spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets(spread_horz,spread_vert,numbullets,damage,PuffType,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			if (UsesAOE > 0) A_FireBullets(spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets(spread_horz,spread_vert,numbullets,damage,PuffType,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			if (UsesAOE > 0) A_FireBullets(spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets(spread_horz,spread_vert,numbullets,damage,PuffType,   flags   ,range,missile,spawnheight,spawnofs_xy);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			if (UsesAOE > 0) A_FireBullets (spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle-spread1angle2);
			if (UsesAOE > 0) A_FireBullets (spread_horz,spread_vert,numbullets,damage,AOEpufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			            else A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,   flags   ,range,missile,spawnheight,spawnofs_xy);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_FireBullets (spread_horz,spread_vert,numbullets,damage,pufftype,flagscenter,range,missile,spawnheight,spawnofs_xy);
		}
		//Console.Printf("ammousetype: %s, ammouseamount: %d", ammousetype, ammouseamount);
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Spread Aura Function [Railgun]
	action void A_SpreadAuraRailAttack (int damage, int spawnofs_xy = 0, int ammouseamount = 0, string ammousetype = "", color ringcolor = 0, color corecolor = 0, int flags = 0, int maxdiff = 0, string pufftype = "", float spread_xy = 0.0, float spread_z = 0.0, int range = 8192, int duration = 35, float sparsity = 1.0, float driftspeed = 1.0, string spawnclass = "", float spawnofs_z = 0.0, int spiraloffset = 270, int limit = 0)
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle-spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle-spread1angle2);
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_RailAttack (damage,spawnofs_xy,0,ringcolor,corecolor,flags,maxdiff,pufftype,spread_xy,spread_z,range,duration,sparsity,driftspeed,spawnclass,spawnofs_z,spiraloffset,limit);
		}
		//Console.Printf("ammousetype: %s, ammouseamount: %d", ammousetype, ammouseamount);
		A_TakeInventory(ammousetype,ammouseamount,TIF_NOTAKEINFINITE,AAPTR_DEFAULT);
	}

	// Used to Create Multiple "Shields" for Punches/Melee when Spreader Aura is active
	action void A_MeleeShieldPiece(string attackname = "", int spawnheight = 32, int spawndistance = 0)
	{
		if (CountInv("SpreaderAura2") > 0)
		{
			// Angle + 15, Pitch + 0
			A_SetAngle(angle+spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			// Angle + 7.5, Pitch + 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			// Angle + 7.5, Pitch - 7.5
			A_SetPitch(pitch-spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			// Angle + 0, Pitch + 0
			A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			// Angle - 7.5, Pitch - 7.5
			A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			// Angle - 7.5, Pitch + 7.5
			A_SetPitch(pitch+spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			// Angle - 15, Pitch + 0
			A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			// Reset
			A_SetAngle(angle+spread1angle2);
		}
		else
		if (CountInv("SpreaderAura1") > 0)
		{
			A_SetAngle(angle+spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			A_SetAngle(angle-spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			A_SetAngle(angle-spread1angle2);
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
			A_SetAngle(angle+spread1angle2);
		}
		else
		{
			A_SpawnItemEx(attackname, cos(-pitch) * A_SetShieldPieceDist(spawndistance), 0, A_SetShieldPieceDist(spawnheight) + (sin(-pitch) * A_SetShieldPieceDist(spawndistance)), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_NOCHECKPOSITION);
		}
	}

	// Quake tremor effects
	action int A_QuakeWShakeIntensity(int type = 0)
	{
		int intensity;
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
		int stamdamagefactor = CallACS("MiscVarCheckDECORATE",317);
		int CharacterClass = CallACS("CheckCharacterClass");
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (type == 0) // Howitzer Shell [1]
		{
			intensity = 2 - (PlayerSTR / 24);
		}
		else
		if (type == 1) // Howitzer Shell [3]
		{
			intensity = 4 - (PlayerSTR / 36);
		}
		else
		if (type == 2) // Howitzer Shell [3]
		{
			intensity = 6 - (PlayerSTR / 48);
		}

		int baseintensity = intensity;
		if (debugmelee) Console.Printf("Intensity [Base]: %d", intensity);
		
		if (CharacterClass == 0) intensity *= 1.0;
		if (CharacterClass == 1) intensity *= 1.33;
		if (CharacterClass == 2) intensity *= 1.75;
		if (CharacterClass == 8) intensity *= 1.875;
		if (CharacterClass == 9) intensity *= 1.125;
		
		if (debugmelee) Console.Printf("Intensity [CharacterCheck]: %d", intensity);
		
		if (CountInv("AetheriusPowerStrength"))
		{
			if (intensity <= 2) intensity -= 1; else intensity *= 0.667;
			if (debugmelee) Console.Printf("Intensity [Berserk]: %d", intensity);
		}
		
		if (debugmelee) Console.Printf("Intensity [Final]: %d, [Base: %d]", intensity, baseintensity);

		return intensity;
	}

	// Used for Hellcore weapons to allow them to shoot Crisis attacks when the player's health is low. :V
	action int A_HellCoreCrisisCheck (void)
	{
		int result = 0;
		if (dvds_monstercrisisattacks)
		{
			if (CountInv("CriticalHealth"))
			{
				result = 1;
			}
			else
			{
				if (CountInv("LowHealth") && random(1,4) == 4)
				{
					result = 1;
				}
			}
		}
		return result;
	}

	action void A_PlayCrisisAtkSound ()
	{
		A_StartSound("crisisattack", 9, CHANF_DEFAULT, frandom(1.25,1.5), ATTN_NORM, frandom(0.75,1.25));
		A_StartSound("crisisattack2", 10, CHANF_DEFAULT, frandom(1.25,1.5), ATTN_NORM, frandom(0.75,1.25));
	}

	// Allows the player to hold an arrow in the Diaris Longbow or unprime it to avoid wasting ammo.
	// Allows you to hold back the sceptre if holding down the primary fire to time a swing. :V
	action int A_HoldInWeapon(int type = 0)
	{
		int buttons;

		int result = 0;
		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) { }
		else
		{
			buttons = GetPlayerInput(INPUT_BUTTONS);
			if (buttons & BT_ALTATTACK) result = 1;
			else if (buttons & BT_ATTACK) result = 2;
		}
		return result;
	}

	action void A_FlameCount(int type = 0, int value = 0)
	{
		string nn;
		int AmmoUsed = 1;
		let weapon = player.ReadyWeapon;
		nn = "DualPhoenixRodNew";
		If (weapon is nn) AmmoUsed = 2;
		int FlameCount = CountInv("FlameCount");
		If (weapon is nn) FlameCount = CountInv("DualFlameCount");

		if (type == 0)
		{
			if (FlameCount <= 0)
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					FlameCount = value; // Set
				}
				else
				{
					if (CountInv("PhoenixRodAmmo") >= AmmoUsed)
					{
						A_TakeInventory("PhoenixRodAmmo",AmmoUsed,TIF_NOTAKEINFINITE);
						FlameCount = value; // Set
					}
					else
					{
						if (player != null)
						{
							AetheriusBaseWeaponZSC flamethrower = AetheriusBaseWeaponZSC(player.ReadyWeapon);
							if (flamethrower != null)
							{
								player.SetPsprite(PSP_WEAPON, flamethrower.FindState("AltPowerDown"));
								player.refire = 0;
								A_StopSound (CHAN_WEAPON);
								If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount);
								else A_SetInventory("FlameCount", FlameCount);
								return;
							}
						}
					}
				}
			}
		}
		if (type == 1) FlameCount += value; // Add/Sub
		if (type == 2 && FlameCount <= 0)
		{
			if (dvds_floraphoenixrodflamecounttype)
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					FlameCount = value; // Set
				}
				else
				{
					if (CountInv("PhoenixRodAmmo") >= AmmoUsed)
					{
						A_TakeInventory("PhoenixRodAmmo",AmmoUsed,TIF_NOTAKEINFINITE);
						FlameCount = value; // Set
					}
					else
					{
						if (player != null)
						{
							AetheriusBaseWeaponZSC flamethrower = AetheriusBaseWeaponZSC(player.ReadyWeapon);
							if (flamethrower != null)
							{
								player.SetPsprite(PSP_WEAPON, flamethrower.FindState("AltPowerDown"));
								player.refire = 0;
								A_StopSound (CHAN_WEAPON);
								If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount);
								else A_SetInventory("FlameCount", FlameCount);
								return;
							}
						}
					}
				}
			}
			else
			{
				if (player != null)
				{
					AetheriusBaseWeaponZSC flamethrower = AetheriusBaseWeaponZSC(player.ReadyWeapon);
					if (flamethrower != null)
					{
						player.SetPsprite(PSP_WEAPON, flamethrower.FindState("AltPowerDown"));
						player.refire = 0;
						A_StopSound (CHAN_WEAPON);
						If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount);
						else A_SetInventory("FlameCount", FlameCount);
						return;
					}
				}
			}
		}

		If (weapon is nn) A_SetInventory("DualFlameCount", FlameCount);
		else A_SetInventory("FlameCount", FlameCount);
		//Console.Printf("FlameCount: %d, type: %d, value: %d", FlameCount, type, value);
	}
	
	//Controls the Timer for both Sceptre Twirl sprite animation and for when to make the swinging noise. [Flora Only]
	action void A_SceptreTwirlFrameCheck(int FrameNo = 0)
	{
		if (CallACS("GetBuffTimer",7) > 0) FrameNo *= 3;
		int SceptreSpinFrameCount = CountInv("SceptreSpinFrameCount");
		int ManaDrainTimer;
		if (FrameNo == 0) // 0 resets the timer to 0
		{
			SceptreSpinFrameCount = 0;
		}
		else // FrameNo's value is the speed of the twirling
		{
			FrameNo = clamp(FrameNo, 1, 16);
			SceptreSpinFrameCount += FrameNo;

			while (SceptreSpinFrameCount < 1) { SceptreSpinFrameCount += 32; } // Prevents Timer Underflow
			while (SceptreSpinFrameCount > 32) { SceptreSpinFrameCount -= 32; } // Prevents Timer Overflow
		}
		A_SetInventory("SceptreSpinFrameCount", SceptreSpinFrameCount);
		//Console.Printf("SceptreSpinFrameCount: %d, FrameNo: %d", SceptreSpinFrameCount, FrameNo);
	}

	action void A_SceptreTwirlVisualFrames(int VisualSet = 0)
	{
		int FrameCount = CountInv("SceptreSpinFrameCount");
		string vispart;
		if (VisualSet == 0)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_StartSound("SceptreTwirl1",CHAN_WEAPON); vispart = "SceptrePartVisual5"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8"; }
			A_SpawnItemEx(vispart, cos(-pitch) * A_SetShieldPieceDist(44), 0, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(44)), 0, 0, 0, 0, 0);
		}
		else
		if (VisualSet == 1)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1b"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2b"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3b"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4b"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_StartSound("SceptreTwirl2",CHAN_WEAPON); vispart = "SceptrePartVisual5b"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6b"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7b"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8b"; }
			A_SpawnItemEx(vispart, cos(-pitch) * A_SetShieldPieceDist(44), 0, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(44)), 0, 0, 0, 0, 0);
		}
		else
		if (VisualSet == 2)
		{
			if (FrameCount >= 1 && FrameCount <= 4) { vispart = "SceptrePartVisual1b"; }
			else if (FrameCount >= 5 && FrameCount <= 8) { vispart = "SceptrePartVisual2b"; }
			else if (FrameCount >= 9 && FrameCount <= 12) { vispart = "SceptrePartVisual3b"; }
			else if (FrameCount >= 13 && FrameCount <= 16) { vispart = "SceptrePartVisual4b"; }
			else if (FrameCount >= 17 && FrameCount <= 20) { A_StartSound("SceptreTwirl3",CHAN_WEAPON); vispart = "SceptrePartVisual5b"; }
			else if (FrameCount >= 21 && FrameCount <= 24) { vispart = "SceptrePartVisual6b"; }
			else if (FrameCount >= 25 && FrameCount <= 28) { vispart = "SceptrePartVisual7b"; }
			else if (FrameCount >= 29 && FrameCount <= 32) { vispart = "SceptrePartVisual8b"; }
			A_SpawnItemEx(vispart, cos(-pitch) * A_SetShieldPieceDist(44), 0, A_SetShieldPieceDist(32) + (sin(-pitch) * A_SetShieldPieceDist(44)), 0, 0, 0, 0, 0);
		}
	}

	// Check if to perform Sceptre's downswing alternate attack while falling or it's spinning alternate while grounded.
	action int A_CheckSceptreAltFire()
	{
		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) return 0;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		int PlayerLevel = CallACS("StatCheck",0);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int result;

		if (vel.z < 0)
		{
			if (((buttons & BT_JUMP) && sv_allowjump) && CallACS("MiscVarCheckDECORATE",274) > 0)
			{
				result = 1;
			}
			else
			{
				if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && CallACS("MiscVarCheckDECORATE",244) > 0)
				{
					result = 2;
				}
				else
				{
					result = 0;
				}
			}
		}
		else
		{
			if (buttons & BT_MOVELEFT && buttons & BT_MOVERIGHT && CallACS("MiscVarCheckDECORATE",244) > 0)
			{
				result = 2;
			}
			else
			{
				result = 0;
			}
		}
		return result;
	}

	action void A_CheckAChristinaCheck()
	{
		if (CallACS("MiscVarCheckDECORATE",2500) != 0 || CallACS("GetBuffTimer",20) > 0) return;
		int buttons = GetPlayerInput(INPUT_BUTTONS);
		int PlayerLevel = CallACS("StatCheck",0);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int result = 0;

		if (buttons & BT_RELOAD)
		{
			result = 3;
		}

		if (buttons & BT_ZOOM) // A. Christina weapons fire mode
		{
			if (vel.z < 0) // LGA Dodge can activate when Zoom key is pressed and on the ground
			{
				result = 2; // LGA Dodge can be used
			}
			else
			{
				result = 1; // Bouncing Beams and Heel Kick are only allowed when airborne
			}
		}
		A_SetInventory("AChristinaAltFireType",result,AAPTR_DEFAULT,true);
	}

	action void A_GauntletsCheckCharacter()
	{
		string nm, nn, no, np;
		int CharacterClass = CallACS("CheckCharacterClass");
		if (CountInv("SauronGauntletsItem",AAPTR_PLAYER1)) Thing_Remove(0); 
		else A_SetInventory("CharacterClassCheck",CharacterClass);
	}

	action int A_CheckMeleeDestroyProj(int type = 0)
	{
		int debugmelee = dvdsdebug_showmeleeinformation;
		int MeleeDestroyProjectiles = 0;
		int PerkCheck = 10035;
		int MaxCheck = 16;

		if (type == 0) // 10035 [Martial Arts Mastery (Flora)]
		{
			PerkCheck = 10035;
			MaxCheck = 16;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 1) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 2) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 3) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 4) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 5) MaxCheck /= 2;
		}
		if (type == 1) // 10051 [Berserker Fit (Marines)]
		{
			PerkCheck = 10051;
			MaxCheck = 32;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 1) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 2) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 3) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 4) MaxCheck /= 2;
			if (CallACS("MiscVarCheckDECORATE",PerkCheck) >= 5) MaxCheck /= 2;
		}
		MaxCheck = clamp(MaxCheck, 1, MaxCheck);

		int randomroll = random(1,MaxCheck);
		if (randomroll <= 1) MeleeDestroyProjectiles = 1;
		if (debugmelee) Console.Printf("PerkCheck: %d, RandomRoll / MaxCheck: %d / %d, MeleeDestroyProjectiles: %d", PerkCheck, randomroll, MaxCheck, MeleeDestroyProjectiles);

		return MeleeDestroyProjectiles;
	}
	
	action double A_GetSoulSceptreRange(double base = 128.0)
	{
		int SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		int SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		int result = base;
		result *= (1.0 + (SoulMasteryPerkLevel * 0.10) + (SoulMasteryEXPerkLevel * 0.25));
		return result;
	}

	action state A_MarineWeaponClassCheck(statelabel deggarisstate = null, statelabel illuciastate = null)
	{
		int CharacterClass = CallACS("CheckCharacterClass");

		if (CharacterClass == 1) 
		{
			Console.Printf("1");
			return ResolveState(illuciastate);
		}
		else 
		{
			Console.Printf("0");
			return ResolveState(deggarisstate);
		}
	}

	action state A_UnmakerCheck(int heatuse = 300, int heathurt = 1, int celluse = 2)
	{
		int CharacterClass = CallACS("CheckCharacterClass");

		if (CountInv("UnmakerAmmoType") == 0)
		{
			if (A_UseManaAttack(CountInv("NormFireManaCost"),2,1,1) == 0) { return ResolveState("Ready"); }
		}
		else
		if (CountInv("UnmakerAmmoType") == 1)
		{
			if (CharacterClass != 2)
			{
				if (CountInv("Cell") < celluse) 
				{ 
					return ResolveState("Ready"); 
				} 
				else 
				{ 
					if (A_WeaponCheckInfiniteAmmo()) { } else 
					{
						A_TakeInventory("Cell",celluse,TIF_NOTAKEINFINITE); 
					}
				}
			}
			else
			{
				A_IncreaseHellcoreHeat(heatuse,heathurt);
			}
		}
		return ResolveState(null);
	}
	
	action void A_UnmakerFire(string normalatk = "UnmakerLaser", string crisisatk = "UnmakerLaserCrisis", double atkangle = 0.0)
	{
		CallACS("StartTensionCountDown");
		if (CountInv("UnmakerAmmoType") == 1)
		{
			if (CountInv("WeapCrisis"))
			{
				A_PlayCrisisAtkSound();
				A_SpreadAuraFireProjectile(crisisatk,atkangle);
			}
			else
			{
				A_SpreadAuraFireProjectile(normalatk,atkangle);
			}
		}
		else
		{
			A_SpreadAuraFireProjectile(normalatk,atkangle);
		}
	}
	
	action void A_FireOldBFG(string firetype1 = "PlasmaBall1", string firetype2 = "PlasmaBall2")
	{
		bool doesautoaim = false;

		if (player == null)
		{
			return;
		}
		Weapon weap = player.ReadyWeapon;

		if (invoker != weap || stateinfo == null || stateinfo.mStateType != STATE_Psprite) weap = null;
		if (weap != null)
		{
			if (!weap.DepleteAmmo (weap.bAltFire, true, 1))
				return;

			doesautoaim = weap.bNoAutoaim;
			weap.bNoAutoaim = true;
		}
		player.extralight = 2;

		// Save values temporarily
		double SavedPlayerAngle = angle;
		double SavedPlayerPitch = pitch;
		for (int i = 0; i < 2; i++) // Spawn two plasma balls in sequence
		{
			angle += random[OldBFG](-64, 63) * (90./768);
			pitch += random[OldBFG](-64, 63) * (90./640);
			SpawnPlayerMissile (i == 0? (class<Actor>)(firetype1) : (class<Actor>)(firetype2));
			// Restore saved values
			angle = SavedPlayerAngle;
			pitch = SavedPlayerPitch;
		}
		// Restore autoaim setting
		if (weap != null) weap.bNoAutoaim = doesautoaim;
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}

	action void A_WeaponReady(int flags = 0)
	{
		if (CallACS("DVDSSpecialArrayCheckDECORATE",0) > 0 || CountInv("IsUnconscious"))
		{
			if (dvdsdebug_weaponstatdisplays) Console.Printf("Flags (Pre [Base]): %d", flags);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (dvdsdebug_weaponstatdisplays) Console.Printf("Flags (post [Base]): %d", flags);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NOSWITCH));
		if ((flags & WRF_NOFIRE) != WRF_NOFIRE)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NOBOB))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);														
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (dvdsdebug_weaponstatdisplays) Console.Printf("Flags (final [Base]): %d", flags);
	}
	
	action void A_SigilPieceSpawn(int maxchance = 256, int chancethreshold = 1)
	{
		if (bDROPPED) maxchance *= 16;
		if (CountInv("SigilPieces",AAPTR_PLAYER1) >= 5) { return; }

		int roll = random(1,maxchance);
		if (dvdsdebug_weaponspawndisplays) Console.Printf("[\cx%s\c-] Sigil PreSpawn Check 1 [Dropped: %d] (%d/%d) [%d] ", GetClassName(), bDROPPED, chancethreshold, maxchance, roll);

		if (roll <= chancethreshold) 
		{
			if (dvdsdebug_weaponspawndisplays) Console.Printf("Sigil PreSpawn Check Succeeded");
			A_SpawnItemEx("SigilPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Thing_Remove(0);
			SetStateLabel("Null");
		}
	}

	action void A_UnmakerSpawn(int maxchance = 256, int chancethreshold = 1)
	{
		if (bDROPPED) maxchance *= 8;
		if (CountInv("UnmakerDVDS",AAPTR_PLAYER1) > 0) maxchance *= frandom(1.0,1.2);
		if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 1) maxchance *= frandom(1.0,1.4);
		if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 2) maxchance *= frandom(1.0,1.4);
		if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 3) { return; }

		int roll = random(1,maxchance);
		if (dvdsdebug_weaponspawndisplays) Console.Printf("[\cx%s\c-] Unmaker PreSpawn Check 1 [Dropped: %d] (%d/%d) [%d] ", GetClassName(), bDROPPED, chancethreshold, maxchance, roll);

		if (roll <= chancethreshold) 
		{
			if (dvdsdebug_weaponspawndisplays) Console.Printf("Unmaker PreSpawn Check Succeeded");
			A_SpawnItemEx("UnmakerDVDS",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			Thing_Remove(0);
			SetStateLabel("Null");
		}
	}

	States
	{
		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
			}
			loop;
	}
}

// To allow class gathering for weapons that allow Quick-Kicking :V
class QuickMeleeWeaponZSC : AetheriusBaseWeaponZSC
{
	action void A_FloraPunch(int type = 0)
	{
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);

		if (type == 1)
		{
			if (dvds_florahokutolol && MartialArtsMastery >= 4)
			{
				if (random(1,256) >= 1) { A_StartSound("FloraHokutoLol",CHAN_VOICE); }	
			}
			else
			{
				if (random(1,256) >= (193 + (MartialArtsMastery) * 7.5)) { A_StopSound(CHAN_VOICE); A_StartSound("FloraKiaiFull",CHAN_VOICE); }
			}
			if (MartialArtsMastery >= 3) 
			{ 
				if (MartialArtsMastery >= 5) 
				{ 
					if (random(1,8) <= 1) A_StartSound("fistswingheavy0",random(152,160)); 
													 else A_StartSound("fistswingmedium0",random(152,160)); 
				}
				else
				{
					if (random(1,4) <= 3) A_StartSound("fistswingmedium0",random(152,160)); 
													 else A_StartSound("fistswinglight0",random(152,160)); 
				}
			}
			else 
			{
				A_StartSound("fistswinglight0",random(152,160)); 
			}
		}
		CallACS("StartTensionCountDown");
		A_GetPunchSwingRecoil(0);
		A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",A_GetMeleeRange(0),0,0,"","","");
		
		int finalrange = A_GetMeleeRange(0);
		
		string shieldpiecetype;
		
		if (A_CheckMeleeDestroyProj(0) > 0)
		{
			if (MartialArtsMastery >= 5)
			{
				if (random(1,8) <= 3) shieldpiecetype = "ShieldPartMeleeReflect";
												 else shieldpiecetype = "ShieldPartMeleeNoReflect";
			}
			else
			{
				if (random(1,8) <= 1) shieldpiecetype = "ShieldPartMeleeReflect";
												 else shieldpiecetype = "ShieldPartMeleeNoReflect";
			}
			
			A_MeleeShieldPiece(shieldpiecetype,33,16);
			A_MeleeShieldPiece(shieldpiecetype,33,48);
		}
	}

	action void A_QMWKickInit()
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		int BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);

		A_GunFlash("LightDone",GFF_NOEXTCHANGE); // A_ClearFlash;
		if (random(1,256) >= 253)
		{
			if (CountInv("PlayingStrife") > 0) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
			else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
		}
		CallACS("StartTensionCountDown");
		if (CharacterClass == 2)
		{
			if (MartialArtsMastery >= 5) { A_GiveInventory("KickAttackDEFLvl",2); } else { A_GiveInventory("KickAttackDEFLvl",1); }
			A_SetMartialArtsMastery(1);
		}
		else
		{
			if (BerserkerFit >= 4) { A_GiveInventory("KickAttackDEFLvl",2); } else { A_GiveInventory("KickAttackDEFLvl",1); }
		}
		if (random(1,256) > 64) { A_GiveInventory("KickCritBonus",1); } else { A_GiveInventory("KickCritBonus",2); }
		A_GiveInventory("UsingMeleeAttack",1);
	}
	
	action void A_WeaponReady(int flags = 0)
	{
		if (CallACS("DVDSSpecialArrayCheckDECORATE",0) > 0 || CountInv("IsUnconscious"))
		{
			if (dvdsdebug_weaponstatdisplays) Console.Printf("Flags (Pre [QuickMelee]): %d", flags);
			// Enforces Various Locks on weapons if the player is "Unconscious"
			if (!(flags & WRF_NOBOB)) flags |= WRF_NOBOB; // Turns on WRF_NOBOB
			if (!(flags & WRF_NOFIRE)) flags |= WRF_NOFIRE; // Turns on WRF_NOFIRE
			if (!(flags & WRF_NOPRIMARY)) flags |= WRF_NOPRIMARY; // Turns on WRF_NOPRIMARY
			if (!(flags & WRF_NOSECONDARY)) flags |= WRF_NOSECONDARY; // Turns on WRF_NOSECONDARY
			if (!(flags & WRF_NOSWITCH)) flags |= WRF_NOSWITCH; // Turns on WRF_NOSWITCH
			if (!(flags & WRF_DISABLESWITCH)) flags |= WRF_DISABLESWITCH; // Turns on WRF_DISABLESWITCH

			if ((flags & WRF_ALLOWRELOAD)) flags &= ~WRF_ALLOWRELOAD; // Turns off WRF_ALLOWRELOAD
			if ((flags & WRF_ALLOWZOOM)) flags &= ~WRF_ALLOWZOOM; // Turns off WRF_ALLOWZOOM
			if ((flags & WRF_ALLOWUSER1)) flags &= ~WRF_ALLOWUSER1; // Turns off WRF_ALLOWUSER1
			if ((flags & WRF_ALLOWUSER2)) flags &= ~WRF_ALLOWUSER2; // Turns off WRF_ALLOWUSER2
			if ((flags & WRF_ALLOWUSER3)) flags &= ~WRF_ALLOWUSER3; // Turns off WRF_ALLOWUSER3
			if ((flags & WRF_ALLOWUSER4)) flags &= ~WRF_ALLOWUSER4; // Turns off WRF_ALLOWUSER4
			if (dvdsdebug_weaponstatdisplays) Console.Printf("Flags (post [QuickMelee]): %d", flags);
		}

		if (!player) return;
														DoReadyWeaponToSwitch(player, !(flags & WRF_NoSwitch));
		if ((flags & WRF_NoFire) != WRF_NoFire)			DoReadyWeaponToFire(player.mo, !(flags & WRF_NoPrimary), !(flags & WRF_NoSecondary));
		if (!(flags & WRF_NoBob))						DoReadyWeaponToBob(player);

		A_Overlay(-1000,"GrandControlLayer",true);
		player.WeaponState |= GetButtonStateFlags(flags);														
		DoReadyWeaponDisableSwitch(player, flags & WRF_DisableSwitch);
		if (dvdsdebug_weaponstatdisplays) Console.Printf("Flags (final [QuickMelee]): %d", flags);
	}

	States
	{
		BlankKick: // Clears Layer -2 [kicking]
			TNT1 A 1
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;

		GrandControlLayer: // layer -1000
			TNT1 A 1
			{
				let weapon = player.ReadyWeapon;
				if (player.mo.health > 0)
				{
					//if (dvdsdebug_weaponstatdisplays) Console.Printf("GrandControlLayer - 2a");
					if (GetPlayerInput(INPUT_BUTTONS) & BT_USER1)
					{
						//if (dvdsdebug_weaponstatdisplays) Console.Printf("GrandControlLayer - 3a");
						if (CountInv("UsingSceptreAltFire"))
						{
							A_PrintBold(String.Format("\cgQuick Kick can't be used while shielding!"), frandom(0.685,0.8));
						}
						else
						if (CallACS("GetBuffTimer",20) > 0)
						{
							A_PrintBold(String.Format("\cgQuick Kick can't be used while you've been put to sleep!"), frandom(0.685,0.8));
						}
						else
						if (CallACS("DVDSSpecialArrayCheckDECORATE",0) > 0 || CountInv("IsUnconscious"))
						{
							A_PrintBold(String.Format("\cgYou're currently incapacitated, and this can't quick kick!"), frandom(0.685,0.8));
						}
						else
						if (CallACS("MenuVarCheckDECORATE",0) != 0)
						{
							A_PrintBold(String.Format("\cgCan't quick kick in the in-game menu, you cheater! :V"), frandom(0.685,0.8));
						}
						else
						{
							A_Overlay(-2,"Kick",true);
						}
					}
					if (CountInv("UsingSceptreAltFire"))
					{
						if (dvdsdebug_weaponstatdisplays) Console.Printf("GrandControlLayer - 3b");
						A_ClearOverlays(-2,-2,true);
						A_KickBonusOff();
						A_SetMartialArtsMastery(0);
					}

					if (weapon is "NNSigil")
					{
						A_Overlay(8,"SigilHands",true);
					}
					else
					{
						A_ClearOverlays(8,8,true);
					}
				}
				else
				{
					if (dvdsdebug_weaponstatdisplays) Console.Printf("GrandControlLayer - 2b");
					A_ClearOverlays(-2,-2,true);
					A_ClearOverlays(8,8,true);
					A_KickBonusOff();
					A_SetMartialArtsMastery(0);
				}
			}
			loop;

		// KICK END
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;
	}
}

class CWeapStaffDVDS : AetheriusBaseWeaponZSC
{
	Default
	{
		Weapon.SelectionOrder 1600;
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 25;
		Weapon.KickBack 150;
		Weapon.YAdjust 10;
		Weapon.AmmoType1 "Mana1";
		Inventory.PickupMessage "$TXT_WEAPON_C2";
		Obituary "$OB_MPCWEAPSTAFFM";
		Tag "$TAG_CWEAPSTAFF";
	}

	States
	{
		Spawn:
			WCSS A -1;
			Stop;
		Select:
			CSSF C 1 A_DVDSRaise(6);
			Loop;
		Deselect:
			CSSF B 3;
			CSSF C 4;
			CSSF C 1 A_DVDSLower(6);
			Wait;
		Ready:
			CSSF C 4;
			CSSF B 3 A_CStaffInitBlink;
			CSSF AAAAAAA 1 A_WeaponReady();
			CSSF A 1 A_CStaffCheckBlink;
			Goto Ready+2;
		Fire:
			CSSF A 1 Offset (0, 45) A_CStaffCheck;
			CSSF J 1 Offset (0, 50) A_CStaffAttack;
			CSSF J 2 Offset (0, 50);
			CSSF J 2 Offset (0, 45);
			CSSF A 2 Offset (0, 40);
			CSSF A 2 Offset (0, 36);
			Goto Ready+2;
		Blink:
			CSSF BBBCCCCCBBB 1 A_WeaponReady();
			Goto Ready+2;
		Drain:
			CSSF K 10 Offset (0, 36);
			Goto Ready+2;
	}

	//============================================================================
	//
	// A_CStaffCheck
	//
	//============================================================================

	action void A_CStaffCheck()
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}
		Weapon weapon = player.ReadyWeapon;

		int damage = 20 + (random[StaffCheck]() & 15);
		int max = CallACS("StatCheck",1); // player.mo.GetMaxHealth();
		for (int i = 0; i < 3; i++)
		{
			for (int j = 1; j >= -1; j -= 2)
			{
				double ang = angle + j*i*(45. / 16);
				double slope = AimLineAttack(ang, 1.5 * DEFMELEERANGE, t, 0., ALF_CHECK3D);
				if (t.linetarget)
				{
					LineAttack(ang, 1.5 * DEFMELEERANGE, slope, damage, 'Melee', "CStaffPuff", false, t);
					if (t.linetarget != null)
					{
						angle = t.angleFromSource;
						if (((t.linetarget.player && (!t.linetarget.IsTeammate(self) || level.teamdamage != 0)) || t.linetarget.bIsMonster)
							&& (!t.linetarget.bDormant && !t.linetarget.bInvulnerable))
						{
							int newLife = player.health + (damage >> 3);
							newLife = newLife > max ? max : newLife;
							if (newLife > player.health)
							{
								health = player.health = newLife;
							}
							if (weapon != null)
							{
								State newstate = weapon.FindState("Drain");
								if (newstate != null) player.SetPsprite(PSP_WEAPON, newstate);
							}
						}
						if (weapon != null)
						{
							weapon.DepleteAmmo(weapon.bAltFire, false);
						}
					}
					return;
				}
			}
		}
	}

	//============================================================================
	//
	// A_CStaffAttack
	//
	//============================================================================

	action void A_CStaffAttack()
	{
		if (player == null)
		{
			return;
		}

		Weapon weapon = player.ReadyWeapon;
		if (weapon != null)
		{
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}
		Actor mo = SpawnPlayerMissile ("CStaffMissile", angle - 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 32;
		}
		mo = SpawnPlayerMissile ("CStaffMissile", angle + 3.0);
		if (mo)
		{
			mo.WeaveIndexXY = 0;
		}
		A_StartSound("ClericCStaffFire", CHAN_WEAPON);
	}

	//============================================================================
	//
	// A_CStaffInitBlink
	//
	//============================================================================

	action void A_CStaffInitBlink()
	{
		weaponspecial = (random[CStaffBlink]() >> 1) + 20;
	}

	//============================================================================
	//
	// A_CStaffCheckBlink
	//
	//============================================================================

	action void A_CStaffCheckBlink()
	{
		if (player && player.ReadyWeapon)
		{
			if (!--weaponspecial)
			{
				player.SetPsprite(PSP_WEAPON, player.ReadyWeapon.FindState ("Blink"));
				weaponspecial = (random[CStaffBlink]() + 50) >> 2;
			}
			else
			{
				A_WeaponReady();
			}
		}
	}
}



//***************************
//***************************
//* CORE Flora Weapon Class *
//***************************
//***************************
class QuickMeleeWeapon : QuickMeleeWeaponZSC
{
	States
	{
		KickStart: // 15 Tics (7 (MAMlv3), 3 (MAMlv5))
			FKIC A 1 
			{
				A_SceptreShieldOff();
				CallACS("MiscVarSetDECORATE",397,0);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) // -1
				{
					A_SetTics(0); 
				}
			}
			FKIC B 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) // -1
				{
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_StartSound("fistswingheavy0",1); } else { A_StartSound("fistswingmedium0",1); }
			}
			FKIC C 1 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) 
				{ 
					A_SetTics(0); 
				}

				if (dvds_florahokutolol && CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					if (random(1,256) >= 1) { A_StartSound("FloraHokutoLol",CHAN_VOICE); }
				}
				else
				{
					if (random(1,256) >= (128 + (CallACS("MiscVarCheckDECORATE",10035)) * 10)) { A_StopSound(CHAN_VOICE); A_StartSound("FloraKiaiFull",CHAN_VOICE); } 
				}
			}
			FKIC D 1 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) == 2 || CallACS("MiscVarCheckDECORATE",10035) == 4) 
				{
					A_SetTics(0); 
				}
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			FKIC E 1
			{ 
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) 
				{
					A_SetTics(0); 
				} 
			}
			FKIC F 1
			{ 
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) 
				{
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			FKIC G 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) 
				{
					A_SetTics(0); 
				} 
			}
			FKIC H 1
			{
				A_GetKickSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetKickDamage(0,0,false),1,CPF_NOTURN,"KickPuff",A_GetMeleeRange(4),0,0,"","","");
	
				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (random(1,8) <= 3)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,56);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,88);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,56);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,88);
						}
					}
					else
					{
						if (random(1,8) <= 1)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,56);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,88);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,56);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,88);
						}
					}
				}
			}
			FKIC G 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) 
				{
					A_SetTics(0); 
				} 
			}
			FKIC F 1
			{ 
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) 
				{
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			FKIC E 1
			{ 
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) 
				{
					A_SetTics(0); 
				} 
			}
			FKIC D 1 
			{
				if ((CallACS("MiscVarCheckDECORATE",10035) >= 1 && CallACS("MiscVarCheckDECORATE",10035) <= 2) || CallACS("MiscVarCheckDECORATE",10035) == 4) 
				{ 
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			FKIC C 1 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) // -1
				{
					A_SetTics(0); 
				}
			}
			FKIC B 1 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) // -1
				{
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			FKIC A 1 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) // -1
				{
					A_SetTics(0); 
				}
			}
			FKIC A 0 { return resolvestate("KickEnd"); }
		// KICK END
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;
	}
}

class MarineWeapon : QuickMeleeWeaponZSC //Weapon
{
	default
	{
		Weapon.Kickback 100;
	}
	
	States
	{
		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickStart: // 19/13 (Deg/Illu) Tics, 13/7 (-6) [MAMlv3], 12/6 (-1) [MAMlv5]
			LEG2 A 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
				}
			}
			LEG2 B 2
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(1); 
				}
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_StartSound("fistswingheavy0",1); } else { A_StartSound("fistswingmedium0",1); }
			}
			LEG2 C 1
			{
				if (random(1,256) >= 128) 
				{
					if (CallACS("CheckCharacterClass") == 0) { A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0); }
					if (CallACS("CheckCharacterClass") == 1) { A_StartSound("GauntletIlluciaSwing",CHAN_VOICE,CHANF_DEFAULT,10.0); }
				}
			}
			LEG2 D 1
			{
				if (A_WeaponCheckDoubleFireRate())
				{
					A_SetTics(0); 
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				A_GetKickSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetKickDamage(0,0,false),1,CPF_NOTURN,"KickPuff",A_GetMeleeRange(4),0,0,"","","");
	
				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),88);
					}
					else
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),88);
					}
				}
			}
			LEG2 F 5 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(2); 
					} 
					else 
					{ 
						A_SetTics(3); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(3); 
					}
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
			}
			LEG2 D 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			LEG2 C 1 
			{ 
				if (CallACS("CheckCharacterClass") == 1) { A_SetTics(0); } 
			}
			LEG2 B 1
			{
				if (A_WeaponCheckDoubleFireRate())
				{
					A_SetTics(0); 
				}
			}
			LEG2 A 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } 
			}
			LEG2 A 0 { return resolvestate("KickEnd"); }
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;
	}
}

class FloraWeapon : QuickMeleeWeapon
{
	default
	{
		Weapon.Kickback 100;
	}
	
	States
	{
		// Quick Kick
		User1: // Kick - Most Weapons
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
	}
}

// Base Heretic Weapon
class HereticWeaponBase : QuickMeleeWeapon
{
	default
	{
		Weapon.Kickback 150;
	}
	
	States
	{
		// Quick Kick
		User1: // Kick - Heretic Weapons
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
	}
}

// Base Hexen Weapon
class HexenWeaponBase : QuickMeleeWeapon
{
	default
	{
		Weapon.Kickback 150;
	}
	
	States
	{
		// Quick Kick
		User1: // Kick - Hexen Weapons
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
	}
}

// Base Strife Weapon
class StrifeWeaponBase : QuickMeleeWeapon
{
	default
	{
		Weapon.Kickback 100;
	}
	
	States
	{
		// Quick Kick
		User1: // Kick - Strife Weapons
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
	}
}

// Base Circus 2 Weapon
class Circus2Weapon : QuickMeleeWeapon
{
	default
	{
		Weapon.Kickback 100;
	}
	
	States
	{
		// Quick Kick
		User1: // Kick - Happy Time Circus 2 Weapons
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") != 2) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
	}
}

// Mod specific
// Base KDIZD Weapon
class KDIZDWeapon : QuickMeleeWeapon
{
	default
	{
		Weapon.Kickback 100;
	}
	
	States
	{
		// Quick Kick
		User1: // Kick - KDIZD Weapons
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") != 2) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
	}
}



// Moved Weapon Definitions go below here later :V
class FistDeggaris : MarineWeapon
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 100;
		+WEAPON.NOALERT;
		+WEAPON.MELEEWEAPON;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Tag "Fist";
		Obituary "%o chewed on %k's fist.";
	}
	
	States
	{
		Ready:
			PUNG A 1
			{
				A_WeaponReady(WRF_ALLOWUSER4);
				if (CountInv("FistPlayerBlockItem") > 0) { return resolvestate("User4Hold"); }
				return resolvestate(null);
			}
			loop;
		Deselect:
			PUNG A 1 
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			loop;
		Select: 
			PUNG A 1 
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			loop;
		Fire: // 22 Tics, 17 (-5) [MAMLv2], 12 (-5) [MAMLv4]
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(0),2) == 1) { return resolvestate("PunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		PunchSuccess:
			TNT1 A 0 A_GiveInventory("UsingMeleeAttack",1);
			TNT1 A 0 A_Jump(128,"RightPunch");
			goto LeftPunch;
		LeftPunch:
			PUNG B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
			}
			PUNG C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (random(1,256) <= 4) { A_AlertMonsters(); }
				A_StartSound("fistswingheavy",1);
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",A_GetMeleeRange(0),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUNG D 5
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
			}
			PUNG C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
			}
			PUNG B 5
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				A_Refire();
			}
			PUNG B 0 A_SetInventory("UsingMeleeAttack",0);
			goto Ready;

		RightPunch:
			PUNG F 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
			}
			PUNG G 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (random(1,256) <= 4) { A_AlertMonsters(); }
				A_StartSound("fistswingheavy",1);
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",A_GetMeleeRange(0),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,48);
					}
				}
			}
			PUNG H 5
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
			}
			PUNG G 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
			}
			PUNG F 5
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				A_Refire();
			}
			PUNG F 0 A_SetInventory("UsingMeleeAttack",0);
			goto Ready;
		
		AltFire:
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(4),2) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			TNT1 A 0
			{
				A_SetMartialArtsMastery(1);
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto UppercutStart;
		// 23 Tics [18 (MAMlv1), 14 (MAMlv2), 11 (MAMlv3), 8 (MAMlv4), 6 (MAMlv5)]
		UppercutStart:
			MPU0 A 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU0 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU0 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } }
			MPU0 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU0 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); A_UppercutBonus(); } }
			MPU1 A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				if (random(1,256) <= 75) { A_StartSound("*grunt",CHAN_VOICE); }
				A_StartSound("fistswingheavy",1); // D [Left] or B [Right] 
			}
			MPU1 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } }
			MPU1 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU1 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(0); } }
			MPU1 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU1 F 1
			{
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(1);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"UppercutPuff",A_GetMeleeRange(1),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,42);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,42);
					}
				}
			}
			MPU1 G 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU1 F 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2 || CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } }
			MPU1 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU1 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU1 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU1 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(0); } }
			MPU1 A 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 1 || CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU1 A 0 { return resolvestate("UppercutEnd"); }
		UppercutEnd:
			TNT1 A 0
			{
				A_UppercutBonusTake(); 
				A_SetInventory("UsingMeleeAttack",0); 
			}
			MPU0 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU0 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU0 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(0); } }
			MPU0 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU0 A 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			TNT1 A 0
			{
				A_SetMartialArtsMastery(0);
				A_Refire();
				return resolvestate("Ready");
			}
			goto Ready;

		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0)
				{
					if (CountInv("FistPlayerBlockHold")) { return resolvestate("User4Hold"); } 
					return resolvestate("KickEnd"); 
				}
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;

		// Guard
		User4:
			DPDF A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			DPDF B 1
			{
				A_PFistBlockOn(10051);
			}
			DPDF C 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn(10051);
			}
			DPDF D 1
			{
				A_PFistBlockOn(10051);
			}
			DPDF E 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			DPDF F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			DPDF G 1
			{
				A_PFistBlockOn(10051);
			}
			DPDF H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			DPDF I 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
		User4Hold:
			DPDF J 1 // BRIGHT
			{
				A_PFistBlockOn(10051); 

				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				return resolvestate(null);
			}
			EWS2 G 0 A_Refire("User4End");
			loop;
		User4End:
			DPDF I 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF G 1
			{
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF E 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF D 1
			{
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF C 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF B 1
			{
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			DPDF A 0
			{
				A_PFistBlockOff();
			}
			Goto Ready;
	}
}

class FistIllucia : MarineWeapon
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 90;
		+WEAPON.NOALERT;
		+WEAPON.MELEEWEAPON;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Tag "Fist";
		Obituary "%o chewed on %k's fist.";
	}
	
	States
	{
		Ready:
			PUNI A 1
			{
				A_WeaponReady(WRF_ALLOWUSER4);
				if (CountInv("FistPlayerBlockItem") > 0) { return resolvestate("User4Hold"); }
				return resolvestate(null);
			}
			loop;
		Deselect:
			PUNI A 1 
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			loop;
		Select: 
			PUNI A 1 
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			loop;
		Fire: // 17 Tics, 12 (-5) [MAMLv2], 7 (-5) [MAMLv4]
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(0),2) == 1) { return resolvestate("PunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		PunchSuccess:
			TNT1 A 0 A_GiveInventory("UsingMeleeAttack",1);
			TNT1 A 0 A_Jump(128,"RightPunch");
		goto LeftPunch;
		LeftPunch:
			PUNI B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			PUNI C 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				if (random(1,256) <= 4) { A_AlertMonsters(); }
				A_StartSound("fistswingmedium",1);
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",A_GetMeleeRange(0),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",26,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",26,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",26,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",26,48);
					}
				}
			}
			PUNI D 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
			}
			PUNI C 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			PUNI B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				A_Refire();
			}
			PUNI B 0 A_SetInventory("UsingMeleeAttack",0);
			goto Ready;

		RightPunch:
			PUNI F 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			PUNI G 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				if (random(1,256) <= 4) { A_AlertMonsters(); }
				A_StartSound("fistswingmedium",1);
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"FistPuff",A_GetMeleeRange(0),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",26,16);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",26,48);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",26,16);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",26,48);
					}
				}
			}
			PUNI H 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
			}
			PUNI G 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			PUNI F 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1 && A_WeaponCheckDoubleFireRate()) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3 && A_WeaponCheckDoubleFireRate()) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				A_Refire();
			}
			PUNI F 0 A_SetInventory("UsingMeleeAttack",0);
			goto Ready;
		
		AltFire: // ? tics,
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(4),2) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			TNT1 A 0
			{
				A_SetMartialArtsMastery(1);
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto UppercutStart;
		// 23 Tics [18 (MAMlv1), 14 (MAMlv2), 11 (MAMlv3), 8 (MAMlv4), 6 (MAMlv5)]
		UppercutStart:
			MPU2 A 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU2 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU2 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } }
			MPU2 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU2 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); A_UppercutBonus(); } }
			MPU3 A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
				if (random(1,256) <= 75) { A_StartSound("GauntletIlluciaSwing",CHAN_VOICE); }
				A_StartSound("fistswingheavy",1); // D [Left] or B [Right] 
			}
			MPU3 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } }
			MPU3 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU3 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(0); } }
			MPU3 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU3 F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
				if (CallACS("CheckCharacterClass") == 1) { A_SetTics(0); }
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(1);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"UppercutPuff",A_GetMeleeRange(1),0,0,"","","");
	
				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",52,42);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,10);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,42);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,42);
					}
				}
			}
			MPU3 G 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU3 F 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2 || CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } }
			MPU3 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU3 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU3 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU3 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(0); } }
			MPU3 A 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 1 || CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU3 A 0 { return resolvestate("UppercutEnd"); }
		UppercutEnd:
			TNT1 A 0
			{
				A_UppercutBonusTake(); 
				A_SetInventory("UsingMeleeAttack",0); 
			}
			MPU2 E 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			MPU2 D 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU2 C 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(0); } }
			MPU2 B 1 { if (CallACS("MiscVarCheckDECORATE",10051) == 1 || CallACS("MiscVarCheckDECORATE",10051) == 2) { A_SetTics(0); } }
			MPU2 A 1 { if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); } }
			TNT1 A 0
			{
				A_SetMartialArtsMastery(0);
				A_Refire();
				return resolvestate("Ready");
			}
			goto Ready;

		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0)
				{
					if (CountInv("FistPlayerBlockHold")) { return resolvestate("User4Hold"); } 
					return resolvestate("KickEnd"); 
				}
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;

		// Guard
		User4:
			IPDF A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			IPDF B 1
			{
				A_PFistBlockOn(10051);
			}
			IPDF C 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn(10051);
			}
			IPDF D 1
			{
				A_PFistBlockOn(10051);
			}
			IPDF E 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			IPDF F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			IPDF G 1
			{
				A_PFistBlockOn(10051);
			}
			IPDF H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
			IPDF I 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051);
			}
		User4Hold:
			IPDF J 1 // BRIGHT
			{
				A_PFistBlockOn(10051); 

				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				return resolvestate(null);
			}
			EWS2 G 0 A_Refire("User4End");
			loop;
		User4End:
			IPDF I 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF G 1
			{
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF E 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF D 1
			{
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF C 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF B 1
			{
				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); }

				A_PFistBlockOn(10051); 
				A_SetInventory("FistPlayerBlockHold",0);
			}
			IPDF A 0
			{
				A_PFistBlockOff();
			}
			Goto Ready;
	}
}

class FistFlora : FloraWeapon
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 80;
		+WEAPON.NOALERT;
		+WEAPON.MELEEWEAPON;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Tag "Fist";
		Obituary "%o chewed on %k's fist.";
	}
	
	States
	{
		Ready:
			FLHN F 1
			{
				A_WeaponReady(WRF_ALLOWUSER4); // A [Left] or F [Right]
				if (dvds_florauseorarush && CallACS("MiscVarCheckDECORATE",10035) >= 4) { return resolvestate("Ready2"); }
				return resolvestate(null);
			}
			loop;
		Ready2:
			FLHF A 1
			{
				A_WeaponReady(WRF_ALLOWUSER4); // A [Left] or F [Right]
				if (!(dvds_florauseorarush && CallACS("MiscVarCheckDECORATE",10035) >= 4)) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			loop;
		Deselect:
			FLHN F 1
			{
				A_DVDSLower(0,10035,3);
				A_DVDSLower(0,10036,7.5);
				A_DVDSLower(18);
				if (dvds_florauseorarush && CallACS("MiscVarCheckDECORATE",10035) >= 4) { return resolvestate("Deselect2"); }
				return resolvestate(null);
			}
			loop;
		Deselect2:
			FLHF A 1
			{
				A_DVDSLower(0,10035,3);
				A_DVDSLower(0,10036,7.5);
				A_DVDSLower(18);
				if (!(dvds_florauseorarush && CallACS("MiscVarCheckDECORATE",10035) >= 4)) { return resolvestate("Deselect"); }
				return resolvestate(null);
			}
			loop;
		Select: 
			FLHN F 1
			{
				A_DVDSRaise(0,10035,3);
				A_DVDSRaise(0,10036,7.5);
				A_DVDSRaise(18);
				if (dvds_florauseorarush && CallACS("MiscVarCheckDECORATE",10035) >= 4) { return resolvestate("Select2"); }
				return resolvestate(null);
			}
			loop;
		Select2: 
			FLHF A 1
			{
				A_DVDSRaise(0,10035,3);
				A_DVDSRaise(0,10036,7.5);
				A_DVDSRaise(18);
				if (!(dvds_florauseorarush && CallACS("MiscVarCheckDECORATE",10035) >= 4)) { return resolvestate("Select"); }
				return resolvestate(null);
			}
			loop;
		Fire:
			TNT1 A 0 
			{
				if (dvds_florauseorarush && CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					return resolvestate("OraRush");
				}
				else
				{
					if (A_UseStaminaAttack(A_GetPunchStaminaUse(0),2) == 1) { return resolvestate("PunchSuccess"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			goto Ready;
		PunchSuccess:
			TNT1 A 0
			{
				A_SetMartialArtsMastery(1);
			}
			TNT1 A 0
			{
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
			}
			TNT1 A 0
			{
				if (dvds_florahokutolol && CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					if (random(1,256) >= 1) { A_StartSound("FloraHokutoLol",CHAN_VOICE); }	
				}
				else
				{
					if (random(1,256) >= (225 + (CallACS("MiscVarCheckDECORATE",10035)) * 5)) { A_StopSound(CHAN_VOICE); A_StartSound("FloraKiaiFull",CHAN_VOICE); }
				}
			}
			TNT1 A 0 A_GiveInventory("UsingMeleeAttack",1);
			TNT1 A 0 A_Jump(128,"RightPunch");
			goto LeftPunch;
		LeftPunch:
			// 13 Tics [10 (MAMlv2), 8 (MAMlv3), 5 (MAMlv4), 3 (MAMlv5)]
			FLHN G 3 // B [Left] or G [Right]
			{
				A_SetMartialArtsMastery(1);
				A_SetInventory("UsingMeleeAttack",1);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_StartSound("fistswingmedium0",1); } else { A_StartSound("fistswinglight0",1); }
			}
			FLHN H 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
				A_FloraPunch(0);
			}
			FLHN I 3 // D [Left] or I [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
			}
			FLHN H 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
			}
			FLHN G 3 // B [Left] or G [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				A_SetMartialArtsMastery(0);
				A_SetInventory("UsingMeleeAttack",0);
				A_Refire();
			}
			FLHN G 0;
			goto Ready;
		RightPunch:
			// 13 Tics [10 (MAMlv2), 8 (MAMlv3), 5 (MAMlv4), 3 (MAMlv5)]
			FLHN B 3 // B [Left] or G [Right]
			{
				A_SetMartialArtsMastery(1);
				A_SetInventory("UsingMeleeAttack",1);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }

				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_StartSound("fistswingmedium0",1); } else { A_StartSound("fistswinglight0",1); }
			}
			FLHN C 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
				A_FloraPunch(0);
			}
			FLHN D 3 // D [Left] or I [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
			}
			FLHN C 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
			}
			FLHN B 3 // B [Left] or G [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				A_SetMartialArtsMastery(0);
				A_SetInventory("UsingMeleeAttack",0);
				A_Refire();
			}
			FLHN B 0;
			goto Ready;
			
		OraRush:
			FLHF B 0
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(0)*2.25,2) == 1) { } else { return resolvestate("Ready2"); }
				return resolvestate(null);
			}
			FLHF B 2
			{
				A_SetMartialArtsMastery(1);
				A_SetInventory("UsingMeleeAttack",1);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				A_FloraPunch(1);
			}
			FLHF C 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				A_FloraPunch(1);
			}
			FLHF D 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				A_FloraPunch(1);
			}
			FLHF E 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			FLHF E 0
			{
				A_SetMartialArtsMastery(0);
				A_SetInventory("UsingMeleeAttack",0);
				A_Refire("OraRush2");
			}
			goto Ready2;
		OraRush2:
			FLHF F 0
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(0)*1.5,2) == 1) { } else { return resolvestate("Ready2"); }
				return resolvestate(null);
			}
			FLHF F 2
			{
				A_SetMartialArtsMastery(1);
				A_SetInventory("UsingMeleeAttack",1);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				A_FloraPunch(1);
			}
			FLHF G 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				A_FloraPunch(1);
			}
			FLHF H 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
			}
			FLHF H 0
			{
				A_SetMartialArtsMastery(0);
				A_SetInventory("UsingMeleeAttack",0);
				A_Refire("OraRush3");
			}
		OraRush3:
			FLHF I 0
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(0)*1.5,2) == 1) { } else { return resolvestate("Ready2"); }
				return resolvestate(null);
			}
			FLHF I 2
			{
				A_SetMartialArtsMastery(1);
				A_SetInventory("UsingMeleeAttack",1);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5 && A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				A_FloraPunch(1);
			}
			FLHF J 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4 && A_WeaponCheckDoubleFireRate()) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				A_FloraPunch(1);
			}
			FLHF J 0
			{
				A_SetMartialArtsMastery(0);
				A_SetInventory("UsingMeleeAttack",0);
				A_Refire("OraRush");
			}
			goto Ready2;

		AltFire:
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(4),2) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			TNT1 A 0
			{
				A_SetMartialArtsMastery(1);
				A_GiveInventory("UsingMeleeAttack",1);
			}
			goto UppercutStart;
		UppercutStart:
			// 23 Tics [18 (MAMlv1), 14 (MAMlv2), 11 (MAMlv3), 8 (MAMlv4), 6 (MAMlv5)]
			FLUP A 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 1 || CallACS("MiscVarCheckDECORATE",10035) == 2) { A_SetTics(0); } }
			FLUP B 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLUP C 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); } } // -1
			FLUP D 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLUP E 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 2) { A_SetTics(0); } A_UppercutBonus(); }
			FLU2 A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
				if (random(1,256) >= 253)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
	
				if (dvds_florahokutolol && CallACS("MiscVarCheckDECORATE",10035) >= 4)
				{
					if (random(1,256) >= 1) { A_StartSound("FloraHokutoLol",CHAN_VOICE); }	
				}
				else
				{
					if (random(1,256) <= (75 + (CallACS("MiscVarCheckDECORATE",10035)) * 10)) { A_StopSound(CHAN_VOICE); A_StartSound("FloraKiaiFull",CHAN_VOICE); }
				}
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_StartSound("fistswingheavy0",1); } else { A_StartSound("fistswingmedium0",1); }
			}
			FLU2 B 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); } } // -1
			FLU2 C 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLU2 D 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(0); } } // -1
			FLU2 E 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLU2 F 1
			{
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(1);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"UppercutPuff",A_GetMeleeRange(1),0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (random(1,8) <= 3)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",28,10);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",52,10);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",28,42);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",52,42);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,10);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,10);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,42);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,42);
						}
					}
					else
					{
						if (random(1,8) <= 1)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",28,10);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",52,10);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",28,42);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",52,42);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,10);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,10);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,42);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",52,42);
						}
					}
				}
			}
			FLU2 G 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLU2 F 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 1 || CallACS("MiscVarCheckDECORATE",10035) == 2 || CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); } } // -1
			FLU2 E 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLU2 D 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 1 || CallACS("MiscVarCheckDECORATE",10035) == 2) { A_SetTics(0); } }
			FLU2 C 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLU2 B 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(0); } } // -1
			FLU2 A 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 1 || CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLU2 A 0 { return resolvestate("UppercutEnd"); }
		UppercutEnd:
			TNT1 A 0
			{
				A_UppercutBonusTake();
			}
			FLUP E 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 2) { A_SetTics(0); } }
			FLUP D 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLUP C 1 { if (CallACS("MiscVarCheckDECORATE",10035) == 1 || CallACS("MiscVarCheckDECORATE",10035) == 2) { A_SetTics(0); } }
			FLUP B 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); } }
			FLUP A 1 { if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(0); } }
			TNT1 A 0
			{
				A_SetMartialArtsMastery(0);
				A_Refire();
				return resolvestate("Ready");
			}
			goto Ready;

		User1:
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0)
				{
					if (CountInv("FistPlayerBlockHold")) { return resolvestate("User4Hold"); } 
					return resolvestate("KickEnd"); 
				}
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;

		// Guard
		User4:
			FLFG A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG B 1
			{
				A_PFistBlockOn(10035);
			}
			FLFG C 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
	
				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn(10035);
			}
			FLFG D 1
			{
				A_PFistBlockOn(10035);
			}
			FLFG E 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG G 1
			{
				A_PFistBlockOn(10035);
			}
			FLFG H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG I 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
		User4Hold:
			FLFG J 1 // BRIGHT
			{
				A_PFistBlockOn(10035);
	
				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				return resolvestate(null);
			}
			EWS2 G 0 A_Refire("User4End");
			loop;
		User4End:
			FLFG I 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG G 1
			{
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG E 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG D 1
			{
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG C 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG B 1
			{
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG A 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG A 0
			{
				A_PFistBlockOff();
			}
			Goto Ready;
	}
}

// Gauntlet Weapons
class SauronGauntlets : MarineWeapon
{
	default
	{
		Scale 0.925;
		Height 16;
		Radius 16;
		Tag "Sauron's Gauntlets";
		+BLOODSPLATTER;
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.MELEEWEAPON;
		+WEAPON.BFG;
		+WEAPON.NOALERT;
		Weapon.SelectionOrder 3400;
		Weapon.KickBack 210;
		Inventory.PickupMessage "'\cqThe hell are these things supposed to be?!\c-' \cx[Slot 1]\c-";
		Obituary "$o was decked to the curb by %k's gauntlets of Sauron.";
		AttackSound "GauntletHit";
	}

	States
	{
		IlluciaPickup:
			WGNT A 0 A_SpawnItemEx("SauronGauntletsIllucia",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		FloraPickup:
			WGNT A 0 A_SpawnItemEx("SauronGauntletsFlora",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		/*
		AilishPickup:
			WGNT A 0 A_SpawnItemEX("SauronGauntletsAilish",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		PetraPickup:
			WGNT A 0 A_SpawnItemEX("SauronGauntletsPetra",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		*/
		NoMore:
			WGNT A 0 Thing_Remove(0);
			Loop;

		Spawn:
			WGNT A 0;
			WGNT AAA 1
			{
				if (dvds_saurongauntletsdrops) 
				{ 
					A_GauntletsCheckCharacter();
							if (CountInv("CharacterClassCheck") == 1) { return resolvestate("IlluciaPickup"); }
					else if (CountInv("CharacterClassCheck") == 2) { return resolvestate("FloraPickup"); }
					return resolvestate(null);
				}
				else
				{
					Thing_Remove(0); 
				}
				return resolvestate(null);
			}
		SpawnSoundEmit:
			WGNT A 0 
			{
				A_Stopsound(CHAN_ITEM);
				A_StartSound("SauronGauntlets/Hum",CHAN_ITEM);
				A_SetInventory("ActorVar1",0);
			}
		SpawnPhase1:
			WGNT AA 1
			{
				if (dvds_saurongauntletsdrops) 
				{ 
					A_GauntletsCheckCharacter();
							if (CountInv("CharacterClassCheck") == 1) { return resolvestate("IlluciaPickup"); }
					else if (CountInv("CharacterClassCheck") == 2) { return resolvestate("FloraPickup"); }
					return resolvestate(null);
				}
				else
				{
					Thing_Remove(0); 
				}
				return resolvestate(null);
			}
			WGNT A 0 
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 70) { return resolvestate("SpawnSoundEmit"); }
				return resolvestate(null);
			}
			Loop;

		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0;
			Stop;

		Deselect:
			FPCH A 1
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			FPCH A 1
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			Loop;
		Ready:
			FPCH A 1
			{
				A_WeaponReady();
			}
			Loop;
		Fire:
			TNT1 A 0 A_Jump(244,2);
			TNT1 A 0 A_AlertMonsters(); // Sometimes a swing will be enough to wake up all monsters in the area.
			TNT1 A 0 
			{
				A_GetPunchSwingRecoil(2);
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(1),2) == 1) { return resolvestate("PunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		PunchSuccess:
			DGPH A 5
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_StartSound("GauntletSwing",CHAN_WEAPON);
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(3); }
			}
			DGPH B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(2);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"GauntletPuff",A_GetMeleeRange(2),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,24);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,56);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,24);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,56);
					}
				}
			}
			DGPH C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
			}
			DGPH B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
			}
			DGPH A 5
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(3); }
				A_ReFire();
			}
			DGPH A 0 A_SetInventory("UsingMeleeAttack",0);
			Goto Ready;

		AltFire:
			TNT1 A 0 A_Jump(200,2);
			TNT1 A 0 A_AlertMonsters(); // Sometimes a swing will be enough to wake up all monsters in the area.
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(2),2) == 1) { return resolvestate("AltPunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		AltPunchSuccess:
			DGPH A 5
			{
				A_GiveInventory("UsingMeleeAttack",1);
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(3); }
				A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0);
				A_StartSound("GauntletSwing",CHAN_WEAPON);
			}
			DGPH B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(3);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"GauntletPuff",A_GetMeleeRange(3),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,32);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,64);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,32);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,64);
					}
				}
			}
			DGPH CD 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
			}
			DGPH E 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			DGPH F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }
			}
			DGPH G 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			DGPH H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }
			}
			DGPH I 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			DGPH J 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }
			}
			DGPH K 10
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(6); }
			}
			DGPH K 0 A_SetInventory("UsingMeleeAttack",0);
			Goto Ready;
	}
}

// Illucia-specific version with slightly less base damage but more attack speed
class SauronGauntletsIllucia : MarineWeapon
{
	default
	{
		Tag "Sauron's Gauntlets";
		Scale 0.875;
		+BLOODSPLATTER;
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.MELEEWEAPON;
		+WEAPON.BFG;
		+WEAPON.NOALERT;
		Weapon.SelectionOrder 3400;
		Weapon.KickBack 175;
		Inventory.PickupMessage "'\cdWhat the feck are these things...?!\c-' \cx[Slot 1]\c-";
		Obituary "$o was decked to the curb by %k's gauntlets of Sauron.";
		AttackSound "GauntletHit";
	}

	States
	{
		DeggarisPickup:
			WGNT A 0 A_SpawnItemEx("SauronGauntlets",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		FloraPickup:
			WGNT A 0 A_SpawnItemEx("SauronGauntletsFlora",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		/*
		AilishPickup:
			WGNT A 0 A_SpawnItemEX("SauronGauntletsAilish",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		PetraPickup:
			WGNT A 0 A_SpawnItemEX("SauronGauntletsPetra",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		*/
		NoMore:
			WGNT A 0 Thing_Remove(0);
			Loop;

		Spawn:
			TNT1 A 0;
			WGNT AAA 1
			{
				if (dvds_saurongauntletsdrops) 
				{ 
					A_GauntletsCheckCharacter();
							if (CountInv("CharacterClassCheck") == 0) { return resolvestate("DeggarisPickup"); }
					else if (CountInv("CharacterClassCheck") == 2) { return resolvestate("FloraPickup"); }
					return resolvestate(null);
				}
				else
				{
					Thing_Remove(0); 
				}
				return resolvestate(null);
			}
		SpawnSoundEmit:
			WGNT A 0 
			{
				A_Stopsound(CHAN_ITEM);
				A_StartSound("SauronGauntlets/Hum",CHAN_ITEM);
				A_SetInventory("ActorVar1",0);
			}
		SpawnPhase1:
			WGNT AA 1
			{
				if (dvds_saurongauntletsdrops) 
				{ 
					A_GauntletsCheckCharacter();
							if (CountInv("CharacterClassCheck") == 0) { return resolvestate("DeggarisPickup"); }
					else if (CountInv("CharacterClassCheck") == 2) { return resolvestate("FloraPickup"); }
					return resolvestate(null);
				}
				else
				{
					Thing_Remove(0); 
				}
				return resolvestate(null);
			}
			WGNT A 0 
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 70) { return resolvestate("SpawnSoundEmit"); }
				return resolvestate(null);
			}
			Loop;

		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0;
			Stop;
		Deselect:
			FPCH A 1
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			FPCH A 1
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			Loop;
		Ready:
			FPCH A 1
			{
				A_WeaponReady();
			}
			Loop;
		Fire:
			TNT1 A 0 A_Jump(244,2);
			TNT1 A 0 A_AlertMonsters(); // Sometimes a swing will be enough to wake up all monsters in the area.
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(1),2) == 1) { return resolvestate("PunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		PunchSuccess:
			ILPH A 4
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_StartSound("GauntletSwing",CHAN_WEAPON);
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(2); }
			}
			ILPH B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
			}
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(2);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"GauntletPuff",A_GetMeleeRange(2),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,24);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",28,56);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,24);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",28,56);
					}
				}
			}
			ILPH C 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
			}
			ILPH B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(2); }
			}
			ILPH A 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(2); }
				A_ReFire();
			}
			ILPH A 0 A_SetInventory("UsingMeleeAttack",0);
			Goto Ready;

		AltFire:
			TNT1 A 0 A_Jump(200,2);
			TNT1 A 0 A_AlertMonsters(); // Sometimes a swing will be enough to wake up all monsters in the area.
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(2),2) == 1) { return resolvestate("AltPunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		AltPunchSuccess:
			ILPH A 4
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_StartSound("GauntletIlluciaSwing",CHAN_VOICE,CHANF_DEFAULT,10.0);
				A_StartSound("GauntletSwing",CHAN_WEAPON);
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(2); }
			}
			ILPH B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
			}
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(3);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"GauntletPuff",A_GetMeleeRange(3),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_MeleeShieldPiece("ShieldPartMeleeReflect",26,32);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",26,64);
					}
					else
					{
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",26,32);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",26,64);
					}
				}
			}
			ILPH CD 3
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(2); }
			}
			ILPH E 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			ILPH F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(0); }
			}
			ILPH G 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			ILPH H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
			}
			ILPH I 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_SetTics(6); }
				}
			}
			ILPH J 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
			}
			ILPH K 8
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 1) { A_SetTics(7); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(4); }
			}
			ILPH K 0 A_SetInventory("UsingMeleeAttack",0);
			Goto Ready;
	}
}

// Flora-specific version with even less base damage but more attack speed
class SauronGauntletsFlora : FloraWeapon
{
	default
	{
		+BLOODSPLATTER;
		Weapon.SelectionOrder 3400;
		+WEAPON.MELEEWEAPON;
		Weapon.KickBack 140;
		Tag "Sauron's Gauntlets";
		Scale 0.825;
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.BFG;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "'\cnHmmm... these look like they'll be of use...\c-' \cx[Slot 1]\c-";
		Obituary "$o was decked to the curb by %k's gauntlets of Sauron.";
		AttackSound "GauntletHit";
	}

	States
	{
		DeggarisPickup:
			WGNT A 0 A_SpawnItemEx("SauronGauntlets",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		IlluciaPickup:
			WGNT A 0 A_SpawnItemEx("SauronGauntletsIllucia",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		/*
		AilishPickup:
			WGNT A 0 A_SpawnItemEX("SauronGauntletsAilish",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		PetraPickup:
			WGNT A 0 A_SpawnItemEX("SauronGauntletsPetra",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
			WGNT A 0 Thing_Remove(0);
			Loop;
		*/
		NoMore:
			WGNT A 0 Thing_Remove(0);
			Loop;
		Spawn:
			TNT1 A 0;
			WGNT AAA 1
			{
				if (dvds_saurongauntletsdrops) 
				{ 
					A_GauntletsCheckCharacter();
							 if (CountInv("CharacterClassCheck") == 0) { return resolvestate("DeggarisPickup"); }
					else if (CountInv("CharacterClassCheck") == 1) { return resolvestate("IlluciaPickup"); }
					return resolvestate(null);
				}
				else
				{
					Thing_Remove(0); 
				}
				return resolvestate(null);
			}
		SpawnSoundEmit:
			WGNT A 0 
			{
				A_Stopsound(CHAN_ITEM);
				A_StartSound("SauronGauntlets/Hum",CHAN_ITEM);
				A_SetInventory("ActorVar1",0);
			}
		SpawnPhase1:
			WGNT AA 1
			{
				if (dvds_saurongauntletsdrops) 
				{ 
					A_GauntletsCheckCharacter();
							 if (CountInv("CharacterClassCheck") == 0) { return resolvestate("DeggarisPickup"); }
					else if (CountInv("CharacterClassCheck") == 1) { return resolvestate("IlluciaPickup"); }
					return resolvestate(null);
				}
				else
				{
					Thing_Remove(0); 
				}
				return resolvestate(null);
			}
			WGNT A 0 
			{
				A_GiveInventory("ActorVar1",1);
				if (CountInv("ActorVar1") >= 70) { return resolvestate("SpawnSoundEmit"); }
				return resolvestate(null);
			}
			Loop;

		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_StartSound("generalequip", 5);
			TNT1 A 0;
			Stop;
		Deselect:
			GNTF A 1
			{
				A_DVDSLower(0,10035,3);
				A_DVDSLower(0,10036,7.5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			GNTF A 1
			{
				A_DVDSRaise(0,10035,3);
				A_DVDSRaise(0,10036,7.5);
				A_DVDSRaise(18);
			}
			Loop;
		Ready:
			GNTF A 1
			{
				A_WeaponReady();
			}
			Loop;
		Fire:
			TNT1 A 0 A_Jump(244,2);
			TNT1 A 0 A_AlertMonsters(); // Sometimes a swing will be enough to wake up all monsters in the area.
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(1),2) == 1) { return resolvestate("PunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		PunchSuccess:
			TNT1 A 0
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_SetMartialArtsMastery(1);
				if (random(1,256) >= (225 + (CallACS("MiscVarCheckDECORATE",10035)) * 5)) { A_StopSound(CHAN_VOICE); A_StartSound("FloraKiaiFull",CHAN_VOICE); }
			}
			GNTP B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(2); }
				A_StartSound("GauntletSwing",CHAN_WEAPON);
			}
			GNTP C 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
			}
			TNT1 A 0 
			{
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(2);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(0,0,false),1,CPF_NOTURN,"GauntletPuff",A_GetMeleeRange(2),0,0,"","","");
	
				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (random(1,8) <= 3)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,56);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,56);
						}
					}
					else
					{
						if (random(1,8) <= 1)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,56);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,24);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,56);
						}
					}
				}
			}
			GNTP D 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
			}
			GNTP C 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(2); }
			}
			GNTP B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				A_SetMartialArtsMastery(0);
				A_ReFire();
			}
			GNTP B 0 A_SetInventory("UsingMeleeAttack",0);
			Goto Ready;

		AltFire:
			TNT1 A 0 A_Jump(200,2);
			TNT1 A 0 A_AlertMonsters(); // Sometimes a swing will be enough to wake up all monsters in the area.
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(2),2) == 1) { return resolvestate("AltPunchSuccess"); }
				return resolvestate(null);
			}
			goto Ready;
		AltPunchSuccess:
			TNT1 A 0
			{
				A_GiveInventory("UsingMeleeAttack",1);
				A_SetMartialArtsMastery(1);
			}
			GNTP B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(2); }
				A_StartSound("GauntletFloraSwing",CHAN_VOICE,CHANF_DEFAULT,10.0);
				A_StartSound("GauntletSwing",CHAN_WEAPON);
			}
			GNTP C 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
			}
			TNT1 A 0 
			{
				CallACS("StartTensionCountDown");
				A_GetPunchSwingRecoil(3);
				A_SpreadAuraCustomPunch(A_GetPunchDamage(1,0,false),1,CPF_NOTURN,"GauntletPuff",A_GetMeleeRange(3),0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (random(1,8) <= 3)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,32);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,64);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,32);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,64);
						}
					}
					else
					{
						if (random(1,8) <= 1)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,32);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,64);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,32);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,64);
						}
					}
				}
			}
			GNTP D 2
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
			}
			GNTP E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(2); }
			}
			GNTP F 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
			}
			GNTP G 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			GNTP H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
			}
			GNTP I 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			GNTP J 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
			}
			GNTP K 1
			{
				if (A_WeaponCheckDoubleFireRate()) { A_SetTics(0); }
			}
			GNTP L 7
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(4); }
				A_SetMartialArtsMastery(0);
			}
			GNTP L 0 A_SetInventory("UsingMeleeAttack",0);
			Goto Ready;
	}
}


// Flora Specific Weapons
class DiarisLongBow : FloraWeapon 
{
	default
	{
		//$NotAngled;
		//$Color 14;
		//$Category "DV-DS Weapons/Flora/Normal";
		+WEAPON.NOALERT;
		+FLOATBOB;
		+DONTGIB;
		+WEAPON.NOAUTOAIM;
		Scale 0.30;
		Inventory.ForbiddenTo "FighterPlayer", "MagePlayer", "ClericPlayer", "StrifePlayer", "HereticPlayer", "DeggarisMontegger", "IlluciaHenderShot";
		Inventory.PickupMessage "You got the \cjDiaris Longbow\c-! \cx[Slot 3]\c-";
		// Inventory.PickupSound "diarisbow/pickupweap";
		Obituary "%o was purified by %k's \cjDiaris Longbow\c-.";
		Tag "Diaris Longbow";
		Weapon.AmmoType1 "DiarisArrow";
		Weapon.AmmoGive 3;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") != 2) { Thing_Remove(0); }
			}
		Idle:
			DIBO A 2
			{
				if (GetCVar("dvds_floralongbowcandrop") <= 0)
				{
					A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,56);
					A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
					A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,243);
					A_FadeOut(1,1);
				}
			}
			loop;

		User1: // Kick - Diaris Longbow version
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				if (CountInv("DrawingDiarisBow")) { return resolvestate("Hold"); }
				return resolvestate("Ready"); 
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;

		Ready: 
			DBOW A 0 A_DrawBow(0);
			DBOW A 0 A_JumpIfInventory("DiarisArrow",1,1);
			Goto ReadyEmpty;
			DBOW A 1 
			{
				A_WeaponReady(WRF_ALLOWUSER4);
				if (CountInv("DrawingDiarisBow")) { return resolvestate("Hold"); }
				return resolvestate(null);
			}
			Loop;
		ReadyEmpty: 
			DBOW Z 0 A_DrawBow(0);
			DBOW Z 1 A_WeaponReady(WRF_ALLOWUSER4);
			DBOW Z 0 A_JumpIfInventory("DiarisArrow",1,1);
			Loop;
			DBOW A 0;
			Goto Ready;
		Deselect: 
			DBOW A 0 A_DrawBow(0);
			DBOW A 0 A_JumpIfInventory("DiarisArrow",1,1);
			Goto DeselectEmpty;
			DBOW A 1
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		DeselectEmpty: 
			DBOW Z 0 A_DrawBow(0);
			DBOW Z 0 A_JumpIfInventory("DiarisArrow",1,1);
			DBOW Z 1
			{
				A_DVDSLower(0,10031,3);
				A_DVDSLower(0,10032,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
			DBOW A 0;
			Goto Deselect;
		Select: 
			DBOW A 0 A_DrawBow(0);
			DBOW A 0 
			{
				if (CountInv("LongbowZoom") == 1) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("LongbowZoom") == 2) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("LongbowZoom") == 3) { A_ZoomFactor(8.0); A_Print("8x Zoom"); }
				else if (CountInv("LongbowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("LongbowZoom",0); A_Print("No Zoom"); }
			}
			DBOW A 0 A_JumpIfInventory("DiarisArrow",1,1);
			Goto SelectEmpty;
			DBOW A 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		SelectEmpty: 
			DBOW A 0 A_DrawBow(0);
			DBOW A 0 A_JumpIfInventory("DiarisArrow",1,1);
			DBOW Z 1 
			{
				A_DVDSRaise(0,10031,3);
				A_DVDSRaise(0,10032,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
			DBOW A 0;
			Goto Select;

		Fire: 
			DBOW A 0 A_JumpIfInventory("DiarisArrow",1,"FireMain");
			Goto ReadyEmpty;
		FireMain:
			DBOW A 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			DBOW B 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				}
			}
			DBOW C 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			DBOW D 3 
			{
				A_StartSound("DrawDiarisBow",CHAN_WEAPON);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) 
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				}
			}
			DBOW E 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			DBOW F 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) 
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				}
			}
			DBOW G 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			goto Hold;

		Hold:
			DBOW H 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				A_GiveInventory("DrawingDiarisBow",1);
				A_DrawBow(1); // Executes the script to slow you down based on your bow-level
				A_WeaponReady(WRF_NOFIRE|WRF_ALLOWUSER4|WRF_DISABLESWITCH);
			}
			DBOW H 0 
			{
				if (!CountInv("InGameMenu"))
				{
					if (dvds_longbowfirekeytype == 0)
					{
						If (A_HoldInWeapon(0) == 0) { return resolvestate("ReleaseArrow"); }
						If (A_HoldInWeapon(0) == 1) { return resolvestate("DeleaseArrow"); }
						If (A_HoldInWeapon(0) == 2) { return resolvestate("Hold"); }
						return resolvestate(null);
					}
					else
					{
						If (A_HoldInWeapon(0) == 2) { return resolvestate("ReleaseArrow"); }
						If (A_HoldInWeapon(0) == 1) { return resolvestate("DeleaseArrow"); }
						If (A_HoldInWeapon(0) == 0) { return resolvestate("Hold"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			loop;

		ReleaseArrow:
			DBOW I 0
			{
				A_DrawBow(0);
				A_SetInventory("DrawingDiarisBow",0);
				if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("DiarisArrow",1,TIF_NOTAKEINFINITE); }
				CallACS("StartTensionCountDown");
				A_SetInventory("ArrowRandomizer",random(1,260));
				if (CountInv("ArrowRandomizer") <= 180) { A_SpreadAuraFireProjectile("DiarisHolyArrow",0,0,"",0,0,0,0); A_StartSound("BowFired",CHAN_WEAPON); A_StartSound("diaarrowfly2",CHAN_ITEM,CHANF_DEFAULT,frandom(0.1230,0.1582)); }
				else if (CountInv("ArrowRandomizer") <= 240) { A_SpreadAuraFireProjectile("DiarisHolyArrow2XDmg",0,0,"",0,0,0,0); A_StartSound("BowFired2",CHAN_WEAPON); A_StartSound("diaarrowfly2",CHAN_ITEM,CHANF_DEFAULT,frandom(0.3281,0.4218)); }
				else { A_SpreadAuraFireProjectile("DiarisHolyArrow3xDmg",0,0,"",0,0,0,0); A_StartSound("BowFired3",CHAN_WEAPON); A_StartSound("diaarrowfly2",CHAN_ITEM,CHANF_DEFAULT,frandom(0.8750,1.1250)); }
			}
			DBOW I 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				if (random(1,256) <= 4) { A_AlertMonsters(); }
			}
			DBOW I 12
			{
				A_SetTics((12 - CallACS("MiscVarCheckDECORATE",10035) - (CallACS("MiscVarCheckDECORATE",10036)*2) - CallACS("MiscVarCheckDECORATE",10031) - (CallACS("MiscVarCheckDECORATE",10032)*2)));
			}
			Goto Ready;

		DeleaseArrow:
			DBOW G 3
			{
				A_SetInventory("DrawingDiarisBow",0);
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			DBOW F 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) 
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				}
			}
			DBOW E 3
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			DBOW D 3
			{
				A_StartSound("DrawDiarisBow",CHAN_WEAPON);
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) 
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				}
			}
			DBOW C 3
			{
				A_DrawBow(0);
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			DBOW B 3
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(2); }
				}
			}
			DBOW A 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10031) >= 1) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10031) >= 5) { A_SetTics(1); }
			}
			Goto Ready;

		// Zoom :V
		User4:
			DBOW A 0
			{
				if (CountInv("DrawingDiarisBow")) { return resolvestate("User4Hold"); }
				else if (CountInv("DiarisArrow") < 1) { return resolvestate("User4Empty"); }
				return resolvestate(null);
			}
			DBOW A 5
			{
				A_GiveInventory("LongbowZoom",1);
				if (CountInv("LongbowZoom") == 1) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("LongbowZoom") == 2) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("LongbowZoom") == 3) { A_ZoomFactor(8.0); A_Print("8x Zoom"); }
				else if (CountInv("LongbowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("LongbowZoom",0); A_Print("No Zoom"); }
			}
			goto Ready;
		User4Empty:
			DBOW Z 5
			{
				A_GiveInventory("LongbowZoom",1);
				if (CountInv("LongbowZoom") == 1) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("LongbowZoom") == 2) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("LongbowZoom") == 3) { A_ZoomFactor(8.0); A_Print("8x Zoom"); }
				else if (CountInv("LongbowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("LongbowZoom",0); A_Print("No Zoom"); }
			}
			goto Ready;
		User4Hold:
			DBOW H 5
			{
				A_GiveInventory("LongbowZoom",1);
				if (CountInv("LongbowZoom") == 1) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("LongbowZoom") == 2) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("LongbowZoom") == 3) { A_ZoomFactor(8.0); A_Print("8x Zoom"); }
				else if (CountInv("LongbowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("LongbowZoom",0); A_Print("No Zoom"); }
			}
			goto Hold;
	}
}

// Magic Boomerrang Weapon - Magic Weapon #2
// TODO

class SapphireWandNew : FloraWeapon
{
	default
	{
		//$NotAngled;
		//$Color 14;
		//$Category "DV-DS Weapons/Flora/Normal";
		Weapon.SelectionOrder 3600;
		Weapon.KickBack 0;
		Tag "$TAG_MWEAPWAND";
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Tag "Sapphire Wand";
		Inventory.PickupMessage "Picked up a \cvSapphire Wand\c-! \cx[Slot 2]\c-";
		Inventory.PickupSound "pickupwand";
	}
	
	States
	{
		Spawn:
			SWND A 0 NoDelay
			{
				if (dvds_florawandscandrop <= 0)
				{
					A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,56);
					A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
					A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,243);
					A_FadeOut(1,1);
				}
				else
				{
					if (CountInv("SapphireWandNew",AAPTR_PLAYER1) > 0)
					{
						if (CountInv("DualSapphireWandsNew",AAPTR_PLAYER1) > 0)
						{
							A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,56);
							A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
							A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,243);
							A_FadeOut(1,1);
						}
						else
						{
							A_SpawnItemEx("DualSapphireWandsNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1,1);
						}
					}
					if (CallACS("CheckCharacterClass") != 2)
					{
						A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,56);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,243);
						A_FadeOut(1,1);
					}
				}
			}
			SWND A 1;
			Loop;
		Select:
			MWN2 A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Deselect:
			MWN2 A 1 
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Ready:
			MWN2 A 1 A_WeaponReady();
			Loop;
		Fire:
			MWN2 A 0
			{
				if (A_UseManaAttack(CountInv("NormFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			MWN2 A 6
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
			}
			MWN2 B 6 Bright Offset(0, 48)
			{
				if (random(1,256) >= 240) { A_AlertMonsters(); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissileNew", 0.0,0,"",0.0,0,0,0.0); 
			}
			MWN2 A 3 Offset(0, 40)
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(2); }
			}
			MWN2 A 3 Offset(0, 36) 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(2); }
				A_ReFire();
			}
			Goto Ready;
		AltFire:
			MWN2 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			MWN2 A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			MWN2 B 3 Bright Offset(0, 48)
			{
				if (random(1,256) >= 240) { A_AlertMonsters(); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissile2New",(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
			}
			MWN2 A 1 Offset(0, 40);
			MWN2 A 1 Offset(0, 36) 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(0); }
			}
			MWN2 B 3 Bright Offset(0, 48)
			{
				if (random(1,256) >= 240) { A_AlertMonsters(); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissile2New",(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
			}
			MWN2 A 1 Offset(0, 40);
			MWN2 A 1 Offset(0, 36) 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(0); }
			}
			MWN2 B 3 Bright Offset(0, 48)
			{
				if (random(1,256) >= 240) { A_AlertMonsters(); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissile2New",(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
			}
			MWN2 A 1 Offset(0, 40);
			MWN2 A 1 Offset(0, 36) 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(0); }
				A_ReFire();
			}
			Goto Ready;
	}
}

class DualSapphireWandsNew : FloraWeapon
{
	default
	{
		Weapon.SelectionOrder 3600;
		Weapon.KickBack 0;
		Tag "Dual Sapphire Wands";
		+WEAPON.NOAUTOAIM;
		+WEAPON.NOALERT;
		Inventory.PickupMessage "Picked up a SECOND \cvSapphire Wand\c-! \cx[Slot 2] (can now dual wield)\c-";
		Inventory.PickupSound "pickupwand";
	}
	
	States
	{
		Spawn:
			SWND A 0 NoDelay
			{
				if (dvds_florawandscandrop <= 0)
				{
					A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,56);
					A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
					A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,243);
					A_FadeOut(1,1);
				}
				else
				{
					if (CountInv("DualSapphireWandsNew",AAPTR_PLAYER1) > 0)
					{
						A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,56);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,243);
						A_FadeOut(1,1);
					}
					if (CallACS("CheckCharacterClass") != 2)
					{
						A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,56);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
						A_SpawnItemEx("DoomSpellMana3",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,243);
						A_FadeOut(1,1);
					}
				}
			}
			SWND A 1;
			Loop;
		Select:
			SWN2 A 1 
			{
				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop;
		Deselect:
			SWN2 A 1 
			{
				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop;
		Ready:
			SWN2 A 1 A_WeaponReady();
			Loop;
		Fire:
			SWN2 A 0
			{
				if (A_UseManaAttack(CountInv("NormFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			SWN2 A 6
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
			}
			SWN2 F 6 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissileNew", 1.0,0,"", 1.0,0,0,0.0); 
				A_SpreadAuraFireProjectile("MageWandMissileNew",-1.0,0,"",-1.0,0,0,0.0); 
			}
			SWN2 G 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(2); }
			}
			SWN2 H 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(2); }
				A_ReFire();
			}
			Goto Ready;
		AltFire:
			SWN2 A 0
			{
				if (A_UseManaAttack(CountInv("AltFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			SWN2 A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
			}
			SWN2 F 3 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissile2New", 1.0+(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
				A_SpreadAuraFireProjectile("MageWandMissile2New",-1.0+(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
				
			}
			SWN2 G 1;
			SWN2 H 1 
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(0); }
			}
			SWN2 F 3 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissile2New", 1.0+(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
				A_SpreadAuraFireProjectile("MageWandMissile2New",-1.0+(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
			}
			SWN2 G 1;
			SWN2 H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(0); }
			}
			SWN2 F 3 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(1); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("MageWandMissile2New", 1.0+(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
				A_SpreadAuraFireProjectile("MageWandMissile2New",-1.0+(random(-A_GetSapphireWandAltSpread(1),A_GetSapphireWandAltSpread(1))/100.0),0,"",0.0,0,0,0.0); 
			}
			SWN2 G 1;
			SWN2 H 1
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(0); }
				A_ReFire();
			}
			Goto Ready;
	}
}

class PoisonNeedle : FloraWeapon
{
	default
	{
		//$NotAngled;
		//$Color 14;
		//$Category "DV-DS Weapons/Flora/Normal";
		Scale 0.2;
		Radius 8;
		Height 8;
		Weapon.AmmoType2 "PoisonNeedleAmmo";
		Weapon.AmmoUse2 1;
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 80;
		+WEAPON.AMMO_OPTIONAL;
		+WEAPON.ALT_AMMO_OPTIONAL;
		+WEAPON.NOALERT;
		+WEAPON.MELEEWEAPON;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		Inventory.ForbiddenTo "FighterPlayer", "MagePlayer", "ClericPlayer", "StrifePlayer", "HereticPlayer", "DeggarisMontegger", "IlluciaHenderShot";
		Inventory.PickupMessage "You got the \cjPoison Needle\c-! Poke. Poke. Poke! Oops...! \cx[Slot 1]\c-";
		Tag "Poison Needle";
		Obituary "%o was envenomed by the point of %k's Poison Needle.";
		HitObituary "%o was instantly slain by %k's Poison Needle.";
	}
	
	States
	{
		Spawn:
			PSNP A 1 NoDelay
			{
				if (CountInv("PoisonNeedle",AAPTR_PLAYER1) > 0) 
				{
					A_SpawnItemEx("PoisonNeedleAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					Thing_Remove(0);
				}
				if (CallACS("CheckCharacterClass") != 2) { Thing_Remove(0); }
			}
			loop;
		Ready:
			PSND A 1
			{
				A_WeaponReady(WRF_ALLOWUSER4); // A [Left] or F [Right]
				if (CountInv("FistPlayerBlockItem") > 0) { return resolvestate("User4Hold"); }
				return resolvestate(null);
			}
			loop;
		Deselect:
			PSND A 1
			{
				A_DVDSLower(0,10035,3);
				A_DVDSLower(0,10036,7.5);
				A_DVDSLower(18);
			}
			loop;
		Select: 
			PSND A 1 
			{
				A_DVDSRaise(0,10035,3);
				A_DVDSRaise(0,10036,7.5);
				A_DVDSRaise(18);
			}
			loop;
		Fire:
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(-1),2) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			TNT1 A 0
			{
				A_SetMartialArtsMastery(1);
			}
			TNT1 A 0
			{
				if (random(1,1024) >= 1024)
				{
					if (CountInv("PlayingStrife")) { } // Strife mode makes the punch work like the Punch Dagger where it NEVER makes sound
					else { A_AlertMonsters(); } // Sometimes a swing will be enough to wake up all monsters in the area.
				}
			}
			TNT1 A 0 A_GiveInventory("UsingMeleeAttack",1);
			TNT1 A 0 A_Jump(128,"RightPunch");
			goto LeftPunch;
		LeftPunch:
			PSND G 2 // B [Left] or G [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(1); }
			}
			PSND H 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_StartSound("fistswingmedium0",1); } else { A_StartSound("fistswinglight0",1); }
			}
			PSND I 2 // D [Left] or I [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
			}
			PSND J 2 // E [Left] or J [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraCustomPunch((A_GetPunchDamage(0,0,false)/10),1,CPF_NOTURN,"PoisonNeedlePuff",A_GetMeleeRange(7),0,0,"","","");

				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (random(1,8) <= 3)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,72);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,72);
						}
					}
					else
					{
						if (random(1,8) <= 1)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,72);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,72);
						}
					}
				}
			}
			PSND I 2 // D [Left] or I [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(1); }
			}
			PSND H 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
			}
			PSND G 2 // B [Left] or G [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				A_SetMartialArtsMastery(0);
				A_ReFire();
			}
			PSND G 0 A_SetInventory("UsingMeleeAttack",0);
			goto Ready;
		RightPunch:
			PSND B 2 // B [Left] or G [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(1); }
			}
			PSND C 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_StartSound("fistswingmedium0",1); } else { A_StartSound("fistswinglight0",1); }
			}
			PSND D 2 // D [Left] or I [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
			}
			PSND E 2 // E [Left] or J [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 1) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraCustomPunch((A_GetPunchDamage(0,0,false)/10),1,CPF_NOTURN,"PoisonNeedlePuff",A_GetMeleeRange(7),0,0,"","","");

				if (A_CheckMeleeDestroyProj(0) > 0)
				{
					if (CallACS("MiscVarCheckDECORATE",10035) >= 5)
					{
						if (random(1,8) <= 3)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,72);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,72);
						}
					}
					else
					{
						if (random(1,8) <= 1)
						{
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeReflect",33,72);
						}
						else
						{
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,8);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,40);
							A_MeleeShieldPiece("ShieldPartMeleeNoReflect",33,72);
						}
					}
				}
			}
			PSND D 2 // D [Left] or I [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(1); }
			}
			PSND C 2 // C [Left] or H [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
			}
			PSND B 2 // B [Left] or G [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				A_SetMartialArtsMastery(0);
				A_ReFire();
			}
			PSND B 0 A_SetInventory("UsingMeleeAttack",0);
			goto Ready;

		AltFire:
			TNT1 A 0
			{
				if (CountInv("PoisonNeedleAmmo") <= 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			TNT1 A 0 
			{
				if (A_UseStaminaAttack(A_GetPunchStaminaUse(-1),1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			TNT1 A 0 
			{
				if (dvds_florathrownneedlemode == 1) 
				{ 
					if (A_UseManaAttack(CountInv("AltFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
					else { A_UseStaminaAttack(A_GetPunchStaminaUse(-1),2); }
					return resolvestate(null);
				}
				else
				{
					A_UseStaminaAttack(A_GetPunchStaminaUse(-1),2);
				}
				return resolvestate(null);
			}
		AltFireThrow:
			PSNT B 2 // B [Left] or M [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(0); }
				else if (CallACS("MiscVarCheckDECORATE",10035) >= 1) { A_SetTics(1); }
			}
			PSNT C 2 // C [Left] or N [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
				else if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(1); }
			}
			PSNT D 2 // D [Left] or O [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
			}
			PSNT E 2 // E [Left] or P [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_StartSound("fistswingmedium0",1); } else { A_StartSound("fistswinglight0",1); }
			}
			PSNT F 2 // F [Left] or Q [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
			}
			PSNT G 2 // G [Left] or R [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(1); }
				CallACS("StartTensionCountDown");

				A_StartSound("subweapons/daggerthrow",7);
				if (A_WeaponCheckInfiniteAmmo())
				{ 
					A_SpreadAuraFireProjectile("PoisonNeedleProjExtra",0.0,0,"",0,0,0,0);
				}
				else
				{
					A_SpreadAuraFireProjectileAoE("PoisonNeedleProj","PoisonNeedleProjExtra",0.0,1,"PoisonNeedleAmmo",0,0,0,0);
				}
			}
			PSNT H 2 // H [Left] or S [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(1); }
			}
			PSNT I 2 // I [Left] or T [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(1); }
			}
			PSNT J 2 // J [Left] or U [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
				else if (CallACS("MiscVarCheckDECORATE",10035) >= 2) { A_SetTics(1); }
			}
			PSNT K 2 // K [Left] or V [Right]
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 4) { A_SetTics(0); }
				else if (CallACS("MiscVarCheckDECORATE",10035) >= 1) { A_SetTics(1); }
				A_SetMartialArtsMastery(0);
				A_ReFire();
			}
			goto Ready;

		User1: // Kick - Flora PoisonNeedle version
			TNT1 A 0 
			{
				A_Overlay(-2,"Kick",true);
				if (CountInv("FistPlayerBlockHold")) { return resolvestate("User4Hold"); } 
				return resolvestate("Ready");
			}
		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
			}
			goto KickStart;
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;

		// Guard
		User4:
			FLFG K 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG L 1
			{
				A_PFistBlockOn(10035);
			}
			FLFG M 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
	
				A_GiveInventory("FistPlayerBlockItem",1);
				A_PFistBlockOn(10035);
			}
			FLFG N 1
			{
				A_PFistBlockOn(10035);
			}
			FLFG O 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG P 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG Q 1
			{
				A_PFistBlockOn(10035);
			}
			FLFG R 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
			FLFG S 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
			}
		User4Hold:
			FLFG T 1 // BRIGHT
			{
				A_PFistBlockOn(10035);
	
				A_GiveInventory("FistPlayerBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				return resolvestate(null);
			}
			EWS2 G 0 A_Refire("User4End");
			loop;
		User4End:
			FLFG S 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG R 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG Q 1
			{
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG P 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG O 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG N 1
			{
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG M 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 3) { A_SetTics(0); }

				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG L 1
			{
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG K 1
			{
				if (CallACS("MiscVarCheckDECORATE",10035) >= 5) { A_SetTics(0); }
	
				A_PFistBlockOn(10035);
				A_SetInventory("FistPlayerBlockHold",0);
			}
			FLFG K 0
			{
				A_PFistBlockOff();
			}
			Goto Ready;
	}
}

// Multi-Character Shared Weapons

// EVIL WARRIOR'S SHIELD
class EvilWarriorShield : KDIZDWeapon
{
	int shieldrefire;
	default
	{
		//$Category DV-DS KDIZD Weapons;
		//$Sprite "EWSHF0";
		Radius 16;
		Height 16;
		Speed 6;
		Weapon.SlotNumber 9;
		Weapon.SlotPriority 1;
		Weapon.BobSpeed 0.334;
		Weapon.BobStyle "Smooth";
		Weapon.KickBack 0;
		Tag "Hell Warrior's Shield";
		Inventory.PickupMessage "You got the \czHell Warrior's Shield\c-! \cx[Slot 9]\c-";
		Obituary "%o was ripped apart by %k's Shield.";
		BounceType "Doom";
		+WEAPON.NOALERT;
		+DROPOFF;
		+DONTGIB;
	}
	
	action void A_CheckShieldRefire()
	{
		int tic;
		if (invoker.shieldrefire)
		{
			if (random(1,4) <= randompick(1,1,1,2))
			{
				tic = random(2,4);
				if (CountInv("PowerStrength") || CountInv("AetheriusPowerStrength")) tic = random(1,2);
			}
			else
			{
				tic = random(3,5);
				if (CountInv("PowerStrength") || CountInv("AetheriusPowerStrength")) tic = random(2,3);
			}
		}
		else
		{
			if (random(1,4) <= randompick(1,1,1,2))
			{
				tic = random(3,5);
				if (CountInv("PowerStrength") || CountInv("AetheriusPowerStrength")) tic = random(2,3);
			}
			else
			{
				tic = random(4,6);
				if (CountInv("PowerStrength") || CountInv("AetheriusPowerStrength")) tic = random(3,4);
			}
		}
		if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { tic -= 1; }
		if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { tic -= 1; }
		if (tic < 1) tic = 1;
		A_SetTics(tic);
	}
	
	States
	{
		Pickup:
			TNT1 A 0 
			{ 
				if (CountInv("EvilWarriorShield",AAPTR_PLAYER1))
				{
					if (CallACS("MiscVarCheckDECORATE",300) < 10)
					{
						A_GiveInventory("HellWarriorShieldLevel",1);
						A_FadeOut(1,1);
					}
				}
			}
			Fail;

		Ready:
			EWSP A 0
			{
				if (CallACS("CheckCharacterClass") == 2) 
				{ 
					if (CountInv("EWShieldDefendMode")) { return resolvestate("AltHold3"); }
					else { return resolvestate("Ready3"); }
				}
				else 
				if (CallACS("CheckCharacterClass") == 1) 
				{ 
					if (CountInv("EWShieldDefendMode")) { return resolvestate("AltHold2"); }
					else { return resolvestate("Ready2"); }
				}
				else 
				{
					if (CountInv("EWShieldDefendMode")) { return resolvestate("AltHold1"); }
					else { return resolvestate("Ready1"); }
				}
				return resolvestate(null);
			}
		Ready1:
			EWS0 D 1 A_WeaponReady();
			Goto Ready;
		Ready2:
			EWS1 D 1 A_WeaponReady();
			Goto Ready;
		Ready3:
			EWS2 D 1 A_WeaponReady();
			Goto Ready;

		Select:
			EWSP D 0
			{
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Select3"); }
				else if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Select2"); }
				else { return resolvestate("Select1"); }
				return resolvestate(null);
			}
		Select1:
			EWS0 D 1
			{
				A_SetInventory("EWShieldIdleMode",1);

				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			EWS1 D 1
			{
				A_SetInventory("EWShieldIdleMode",1);

				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select3:
			EWS2 D 1
			{
				A_SetInventory("EWShieldIdleMode",1);

				A_DVDSRaise(0,10053,3);
				A_DVDSRaise(0,10054,7.5);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;

		Deselect:
			EWSP D 0
			{
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Deselect3"); }
				else if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Deselect2"); }
				else { return resolvestate("Deselect1"); }
				return resolvestate(null);
			}
		Deselect1:
			EWS0 D 1
			{
				A_SetInventory("EWShieldIdleMode",0);

				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			EWS1 D 1
			{
				A_SetInventory("EWShieldIdleMode",0);

				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect3:
			EWS2 D 1
			{
				A_SetInventory("EWShieldIdleMode",0);

				A_DVDSLower(0,10053,3);
				A_DVDSLower(0,10054,7.5);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;

		Fire:
			TNT1 A 0
			{
				if (A_UseManaAttack(CountInv("NormFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
				return resolvestate(null);
			}
			EWSP D 0
			{
				if (CallACS("CheckCharacterClass") == 2) { return resolvestate("Fire3"); }
				else if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Fire2"); }
				else if (CallACS("CheckCharacterClass") == 0) { return resolvestate("Fire1"); }
				return resolvestate(null);
			}

		Fire1:
			EWS0 D 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS0 C 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS0 B 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
		Fire1Shot:
			EWS0 A 6 Bright
			{
				A_SetPitch(pitch + 0.5);
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_CheckShieldRefire();
				A_PHellWarShieldOn();
			}
			EWS0 A 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
				CallACS("StartTensionCountDown");

				if (A_HellCoreCrisisCheck())
				{
					A_PlayCrisisAtkSound();
					A_SpreadAuraFireProjectile("EvilWarriorShieldBallCrisis", 0,0,"",0,3,0,0); 
				}
				else
				{
					A_SpreadAuraFireProjectile("EvilWarriorShieldBall", 0,0,"",0,3,0,0); 
				}
				if (random(1,8) <= 1) { A_AlertMonsters(); }
				A_Recoil(0.25);
			}
			EWS0 A 6 Bright
			{
				A_SetPitch(pitch - 0.5);
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_CheckShieldRefire();
				A_PHellWarShieldOn();
			}
			EWS0 A 0 Bright
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				A_PHellWarShieldOn();
				if (buttons & BT_ATTACK) 
				{
					invoker.shieldrefire = 1;
					if (A_UseManaAttack(CountInv("NormFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
					return resolvestate("Fire1Shot");
				}
				return resolvestate(null);
			}
		Fire1End:
			EWS0 B 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS0 C 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS0 D 2 Bright
			{
				A_PHellWarShieldOff();
			}
			Goto Ready;
		Fire2:
			EWS1 D 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS1 C 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS1 B 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
		Fire2Shot:
			EWS1 A 6 Bright
			{
				A_SetPitch(pitch + 0.5);
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_CheckShieldRefire();
				A_PHellWarShieldOn();
			}
			EWS1 A 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
				CallACS("StartTensionCountDown");

				if (A_HellCoreCrisisCheck())
				{
					A_PlayCrisisAtkSound();
					A_SpreadAuraFireProjectile("EvilWarriorShieldBallCrisis", 0,0,"",0,3,0,0); 
				}
				else
				{
					A_SpreadAuraFireProjectile("EvilWarriorShieldBall", 0,0,"",0,3,0,0); 
				}
				if (random(1,8) <= 1) { A_AlertMonsters(); }
				A_Recoil(0.375);
			}
			EWS1 A 6 Bright
			{
				A_SetPitch(pitch - 0.5);
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_CheckShieldRefire();
				A_PHellWarShieldOn();
			}
			EWS1 A 0 Bright
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				A_PHellWarShieldOn();
				if (buttons & BT_ATTACK) 
				{
					invoker.shieldrefire = 1;
					if (A_UseManaAttack(CountInv("NormFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
					return resolvestate("Fire2Shot");
				}
				return resolvestate(null);
			}
		Fire2End:
			EWS1 B 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS1 C 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS1 D 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
				A_PHellWarShieldOff();
			}
			Goto Ready;
		Fire3:
			EWS2 D 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS2 C 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS2 B 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
		Fire3Shot:
			EWS2 A 6 Bright
			{
				A_SetPitch(pitch + 0.5);
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_CheckShieldRefire();
				A_PHellWarShieldOn();
			}
			EWS2 A 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
				CallACS("StartTensionCountDown");

				if (A_HellCoreCrisisCheck())
				{
					A_PlayCrisisAtkSound();
					A_SpreadAuraFireProjectile("EvilWarriorShieldBallCrisis", 0,0,"",0,3,0,0); 
				}
				else
				{
					A_SpreadAuraFireProjectile("EvilWarriorShieldBall", 0,0,"",0,3,0,0); 
				}
				if (random(1,8) <= 1) { A_AlertMonsters(); }
				A_Recoil(0.5);
			}
			EWS2 A 6 Bright
			{
				A_SetPitch(pitch - 0.5);
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 4) { A_SetTics(4); }
				A_CheckShieldRefire();
				A_PHellWarShieldOn();
			}
			EWS0 A 0 Bright
			{
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				A_PHellWarShieldOn();
				if (buttons & BT_ATTACK) 
				{
					invoker.shieldrefire = 1;
					if (A_UseManaAttack(CountInv("NormFireManaCost"),2,1,1) == 0) { return resolvestate("Ready"); }
					return resolvestate("Fire3Shot");
				}
				return resolvestate(null);
			}
		Fire3End:
			EWS2 B 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 1) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS2 C 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 3) { A_SetTics(1); }
				A_PHellWarShieldOn();
			}
			EWS2 D 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(1); }
				A_PHellWarShieldOff();
			}
			Goto Ready;

		AltFire:
			EWSP D 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					return resolvestate("AltFire3");
				}
				else
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("AltFire2");
				}
				else
				{
					return resolvestate("AltFire1");
				}
				return resolvestate(null);
			}

		AltFire1:
			EWS0 DEF 2
			{
				A_PHellWarShieldOn();
			}
		AltHold1:
			EWS0 G 2 BRIGHT
			{
				A_SetInventory("HWShieldBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				A_PHellWarShieldOn();

				if (A_UseStaminaAttack(A_GetHellWarShieldStamUse(0),2) == 0) { return resolvestate("AltEnd1"); } // 10
				return resolvestate(null);
			}
			EWS0 H 0 
			{
				if (dvds_hwshieldaltfirekeytype == 0)
				{
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltEnd1"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltHold1"); }
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd1"); }
					return resolvestate(null);
				}
				else
				{
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd1"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltEnd1"); }
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltHold1"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			//EWS0 G 0 A_Refire("AltHold1");
			goto AltEnd1;
		AltEnd1:
			EWS0 FE 2
			{
				A_SetInventory("HWShieldBlockHold",0);
				A_PHellWarShieldOn();
			}
			EWS0 D 2
			{
				A_PHellWarShieldOff();
			}
			Goto Ready;
		AltEnd2Fire:
			EWS0 FE 2
			{
				A_SetInventory("HWShieldBlockHold",0);
				A_PHellWarShieldOn();
			}
			EWS0 D 2
			{
				A_PHellWarShieldOff();
			}
			Goto Fire;
		AltFire2:
			EWS1 DEF 2
			{
				A_PHellWarShieldOn();
			}
		AltHold2:
			EWS1 G 2 BRIGHT
			{
				A_SetInventory("HWShieldBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				A_PHellWarShieldOn();
				
				if (A_UseStaminaAttack(A_GetHellWarShieldStamUse(0),2) == 0) { return resolvestate("AltEnd2"); } // 10
				return resolvestate(null);
			}
			EWS1 H 0 
			{
				if (dvds_hwshieldaltfirekeytype == 0)
				{
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltEnd2"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltHold2"); }
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd2"); }
					return resolvestate(null);
				}
				else
				{
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd2"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltEnd2"); }
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltHold2"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			//EWS1 G 0 A_Refire("AltHold2");
			goto AltEnd2;
		AltEnd2:
			EWS1 FE 2
			{
				A_SetInventory("HWShieldBlockHold",0);
				A_PHellWarShieldOn();
			}
			EWS1 D 2
			{
				A_PHellWarShieldOff();
			}
			Goto Ready;
		AltEnd2Fire:
			EWS1 FE 2
			{
				A_SetInventory("HWShieldBlockHold",0);
				A_PHellWarShieldOn();
			}
			EWS1 D 2
			{
				A_PHellWarShieldOff();
			}
			Goto Fire;
		AltFire3:
			EWS2 D 2
			{
				A_PHellWarShieldOn();
			}
			EWS2 EF 2
			{
				A_PHellWarShieldOn();
			}
		AltHold3:
			EWS2 G 2 BRIGHT
			{
				A_SetInventory("HWShieldBlockHold",1);
				A_WeaponReady(WRF_NOFIRE|WRF_DISABLESWITCH);
				A_PHellWarShieldOn();
				
				if (A_UseStaminaAttack(A_GetHellWarShieldStamUse(0),2) == 0) { return resolvestate("AltEnd3"); } // 10
				return resolvestate(null);
			}
			EWS0 H 0 
			{
				if (dvds_hwshieldaltfirekeytype == 0)
				{
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltEnd3"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltHold3"); }
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd3"); }
					return resolvestate(null);
				}
				else
				{
					If (A_HoldInWeapon(0) == 2) { return resolvestate("AltEnd3"); }
					If (A_HoldInWeapon(0) == 1) { return resolvestate("AltEnd3"); }
					If (A_HoldInWeapon(0) == 0) { return resolvestate("AltHold3"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			//EWS2 G 0 A_Refire("AltHold3");
			goto AltEnd3;
		AltEnd3:
			EWS2 FE 2
			{
				A_SetInventory("HWShieldBlockHold",0);
				A_PHellWarShieldOn();
			}
			EWS2 D 2
			{
				A_PHellWarShieldOff();
			}
			Goto Ready;
		AltEnd3Fire:
			EWS2 FE 2
			{
				A_SetInventory("HWShieldBlockHold",0);
				A_PHellWarShieldOn();
			}
			EWS2 D 2
			{
				A_PHellWarShieldOff();
			}
			Goto Fire;

		Spawn:
			EWSH ABCDEFGH 3
			{
				if (CountInv("EvilWarriorShield", AAPTR_PLAYER1))
				{
					A_SpawnItemEx("EvilWarriorShieldExtraPickup",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_FadeOut(1,1);
				}
			}
			Goto Spawn2;
		Spawn2:
			EWSH I 5
			{
				if (CountInv("EvilWarriorShield", AAPTR_PLAYER1))
				{
					A_SpawnItemEx("EvilWarriorShieldExtraPickupGround",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_FadeOut(1,1);
				}
			}
			loop;

		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
				if (CallACS("CheckCharacterClass") != 2) { return resolvestate("KickStart2"); }
				return resolvestate(null); 
			}
			goto KickStart;
		KickStart2: // 19/13 (Deg/Illu) Tics, 13/7 (-6) [MAMlv3], 12/6 (-1) [MAMlv5]
			LEG2 A 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
				}
			}
			LEG2 B 2
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(1); 
				}
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_StartSound("fistswingheavy0",1); } else { A_StartSound("fistswingmedium0",1); }
			}
			LEG2 C 1
			{
				if (random(1,256) >= 128) 
				{
					if (CallACS("CheckCharacterClass") == 0) { A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0); }
					if (CallACS("CheckCharacterClass") == 1) { A_StartSound("GauntletIlluciaSwing",CHAN_VOICE,CHANF_DEFAULT,10.0); }
				}
			}
			LEG2 D 1
			{
				if (A_WeaponCheckDoubleFireRate())
				{
					A_SetTics(0); 
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				A_GetKickSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetKickDamage(0,0,false),1,CPF_NOTURN,"KickPuff",A_GetMeleeRange(4),0,0,"","","");
	
				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),88);
					}
					else
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),88);
					}
				}
			}
			LEG2 F 5 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(2); 
					} 
					else 
					{ 
						A_SetTics(3); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(3); 
					}
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
			}
			LEG2 D 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			LEG2 C 1 
			{ 
				if (CallACS("CheckCharacterClass") == 1) { A_SetTics(0); } 
			}
			LEG2 B 1
			{
				if (A_WeaponCheckDoubleFireRate())
				{
					A_SetTics(0); 
				}
			}
			LEG2 A 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } 
			}
			LEG2 A 0 { return resolvestate("KickEnd"); }
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;
	}
}

/* --- UNMAKER -------------------------------------------------------------- */
// The ammo types used by the Unmaker are based on who is using it. MP is always the default ammo, but
// Deggaris/Illucia/Petra use Cells for the alternate ammo type, as in Doom64, while Flora uses Hellcore
// Heat for the alternate "ammo" type. The perks that affect the Unmaker's speed/damage will also be
// based on which ammo type is in use. A 'hybrid' ammo mode might also get added that splits the "costs"
// between both MP and the alternative type, while slightly boosting power but also costing slightly
// more "ammo".

class UnmakerDVDS : KDIZDWeapon
{
	default
	{
		//$Color 14;
		//$NotAngled;
		//$Sprite LGUNA0;
		//$Category "Doom 64 Retribution";
		Radius 20;
		Height 20;
		Weapon.SelectionOrder 2900;
		Weapon.SlotNumber 8;
		//Weapon.AmmoUse 1;
		//Weapon.AmmoGive 40;
		//Weapon.AmmoType "Cell";
		Inventory.PickupMessage "Picked up... picked up some kind of... weapon? \cx[Slot 8]\c-";
		Inventory.PickupSound "misc/w_pkup";
		AttackSound "NULL";
		Inventory.Icon "LGUNA0";
		Tag "Unmaker";
		-WEAPON.NOAUTOFIRE;
		+WEAPON.NOAUTOAIM;
		+DONTGIB;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				if (CountInv("UnmakerDVDS",AAPTR_PLAYER1) > 0)
				{
					if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 1)
					{
						if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 2)
						{
							if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 3)
							{
								Thing_Remove(0);
							}
							else
							{
								A_SpawnItemEx("UnmakerDVDSUpgrade3");
								Thing_Remove(0);
							}
						}
						else
						{
							A_SpawnItemEx("UnmakerDVDSUpgrade2");
							Thing_Remove(0);
						}
					}
					else
					{
						A_SpawnItemEx("UnmakerDVDSUpgrade1");
						Thing_Remove(0);
					}
				}
			}
			LGUN A 1;
			loop;
		Ready:
			UNMA A 1 
			{
				A_SetInventory("WeapCrisis",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Deselect:
			UNMA A 1 
			{
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(0,10023,0.4);
				A_DVDSLower(0,10024,1);
				A_DVDSLower(0,10033,0.4);
				A_DVDSLower(0,10034,1);
				A_DVDSLower(0,10053,0.4);
				A_DVDSLower(0,10054,1);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			UNMA A 1 
			{
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(0,10023,0.4);
				A_DVDSRaise(0,10024,1);
				A_DVDSRaise(0,10033,0.4);
				A_DVDSRaise(0,10034,1);
				A_DVDSRaise(0,10053,0.4);
				A_DVDSRaise(0,10054,1);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			UNMA A 0 A_UnmakerCheck(300,1,3);
			/* --- UPGRADES INFORMATION: -------------------------------------------
			No upgrade level = standard single shot (10 tics)
			1st upgrade level = slightly faster single shot (7 tics)
			2nd upgrade level = two beams and much faster fire rate (5 tics)
			3rd upgrade level = beams fire outward from middle, 4 each side
			--------------------------------------------------------------------- */
			
			// This will be used if the player has no upgrades
			UNMA A 0 
			{
				A_SetInventory("WeapCrisis",0);
				if (A_HellCoreCrisisCheck()) { A_SetInventory("WeapCrisis",1); }
			}
			UNMA A 0 A_JumpIfInventory("UnmakerUpgrades", 1, "FireUpgradeOne", AAPTR_PLAYER1);
			UNMA A 0 A_GunFlash();
			UNMA A 0 A_StartSound("weapons/unmaker", CHAN_WEAPON, CHANF_DEFAULT, 0.8, ATTN_NORM);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis");
			UNMA A 10
			{
				A_SetTics(10 - (CallACS("MiscVarCheckDECORATE",10053) / 3) - (CallACS("MiscVarCheckDECORATE",10023) / 3) - (CallACS("MiscVarCheckDECORATE",10033) / 3));
			}
			UNMA A 0 A_ReFire();
			Goto Ready;
		
		// This will be used if the player has one upgrade
		FireUpgradeOne:
			UNMA A 0 A_JumpIfInventory("UnmakerUpgrades", 2, "FireUpgradeTwo", AAPTR_PLAYER1);
			UNMA A 0 A_GunFlash();
			UNMA A 0 A_StartSound("weapons/unmaker", CHAN_WEAPON, CHANF_DEFAULT, 0.8, ATTN_NORM);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis");
			UNMA A 7
			{
				A_SetTics(7 - (CallACS("MiscVarCheckDECORATE",10053) / 4) - (CallACS("MiscVarCheckDECORATE",10023) / 4) - (CallACS("MiscVarCheckDECORATE",10033) / 4));
			}
			UNMA A 0 A_ReFire();
			Goto Ready;
		
		// This will be used if the player has two upgrades
		FireUpgradeTwo:
			UNMA A 0 A_JumpIfInventory("UnmakerUpgrades", 3, "FireUpgradeThree", AAPTR_PLAYER1);
			UNMA A 0 A_GunFlash();
			UNMA A 0 A_StartSound("weapons/unmaker", CHAN_WEAPON, CHANF_DEFAULT, 0.8, ATTN_NORM);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",1.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",-1.0);
			UNMA A 5
			{
				A_SetTics(5 - (CallACS("MiscVarCheckDECORATE",10053) / 5) - (CallACS("MiscVarCheckDECORATE",10023) / 5) - (CallACS("MiscVarCheckDECORATE",10033) / 5));
			}
			UNMA A 0 A_ReFire();
			Goto Ready;
		
		// This will be used if the player has three upgrades
		FireUpgradeThree:
			UNMA A 0 A_GunFlash();
			UNMA A 0 A_StartSound("weapons/unmaker", CHAN_WEAPON, CHANF_DEFAULT, 0.8, ATTN_NORM);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",0.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",3.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",-3.0);
			UNMA A 5
			{
				A_SetTics(5 - (CallACS("MiscVarCheckDECORATE",10053) / 5) - (CallACS("MiscVarCheckDECORATE",10023) / 5) - (CallACS("MiscVarCheckDECORATE",10033) / 5));
			}
			UNMA A 0 A_ReFire("Hold1");
			Goto Ready;
		Hold1:
			UNMA A 0 A_UnmakerCheck(300,1,3);
			UNMA A 0 
			{
				A_SetInventory("WeapCrisis",0);
				if (A_HellCoreCrisisCheck()) { A_SetInventory("WeapCrisis",1); }
			}
			UNMA A 0 A_GunFlash();
			UNMA A 0 A_StartSound("weapons/unmaker", CHAN_WEAPON, CHANF_DEFAULT, 0.8, ATTN_NORM);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",0.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",6.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",-6.0);
			UNMA A 5
			{
				A_SetTics(5 - (CallACS("MiscVarCheckDECORATE",10053) / 5) - (CallACS("MiscVarCheckDECORATE",10023) / 5) - (CallACS("MiscVarCheckDECORATE",10033) / 5));
			}
			UNMA A 0 A_ReFire("Hold2");
			Goto Ready;
		Hold2:
			UNMA A 0 A_UnmakerCheck(300,1,3);
			UNMA A 0
			{
				A_SetInventory("WeapCrisis",0);
				if (A_HellCoreCrisisCheck()) { A_SetInventory("WeapCrisis",1); }
			}
			UNMA A 0 A_GunFlash();
			UNMA A 0 A_StartSound("weapons/unmaker", CHAN_WEAPON, CHANF_DEFAULT, 0.8, ATTN_NORM);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",0.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",9.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",-9.0);
			UNMA A 5
			{
				A_SetTics(5 - (CallACS("MiscVarCheckDECORATE",10053) / 5) - (CallACS("MiscVarCheckDECORATE",10023) / 5) - (CallACS("MiscVarCheckDECORATE",10033) / 5));
			}
			UNMA A 0 A_ReFire("Hold3");
			Goto Ready;
		Hold3:
			UNMA A 0 A_UnmakerCheck(300,1,3);
			UNMA A 0 
			{
				A_SetInventory("WeapCrisis",0);
				if (A_HellCoreCrisisCheck()) { A_SetInventory("WeapCrisis",1); }
			}
			UNMA A 0 A_GunFlash();
			UNMA A 0 A_StartSound("weapons/unmaker", CHAN_WEAPON, CHANF_DEFAULT, 0.8, ATTN_NORM);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",0.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",12.0);
			UNMA A 0 A_UnmakerCheck(300,0,3);
			UNMA A 0 A_UnmakerFire("UnmakerLaser","UnmakerLaserCrisis",-12.0);
			UNMA A 5
			{
				A_SetTics(5 - (CallACS("MiscVarCheckDECORATE",10053) / 5) - (CallACS("MiscVarCheckDECORATE",10023) / 5) - (CallACS("MiscVarCheckDECORATE",10033) / 5));
			}
			UNMA A 0 A_CheckReload();
			Goto Ready;

		Flash:
			UNMF A 3 BRIGHT A_Light1();
			Goto LightDone;


		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return resolvestate("KickEnd"); }
				return resolvestate(null); 
			}
			TNT1 A 0
			{
				A_QMWKickInit();
				if (CallACS("CheckCharacterClass") != 2) { return resolvestate("KickStart2"); }
				return resolvestate(null); 
			}
			goto KickStart;
		KickStart2: // 19/13 (Deg/Illu) Tics, 13/7 (-6) [MAMlv3], 12/6 (-1) [MAMlv5]
			LEG2 A 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
				}
			}
			LEG2 B 2
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(1); 
				}
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_StartSound("fistswingheavy0",1); } else { A_StartSound("fistswingmedium0",1); }
			}
			LEG2 C 1
			{
				if (random(1,256) >= 128) 
				{
					if (CallACS("CheckCharacterClass") == 0) { A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0); }
					if (CallACS("CheckCharacterClass") == 1) { A_StartSound("GauntletIlluciaSwing",CHAN_VOICE,CHANF_DEFAULT,10.0); }
				}
			}
			LEG2 D 1
			{
				if (A_WeaponCheckDoubleFireRate())
				{
					A_SetTics(0); 
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				A_GetKickSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetKickDamage(0,0,false),1,CPF_NOTURN,"KickPuff",A_GetMeleeRange(4),0,0,"","","");
	
				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),88);
					}
					else
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),88);
					}
				}
			}
			LEG2 F 5 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(2); 
					} 
					else 
					{ 
						A_SetTics(3); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(3); 
					}
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate())
						{
							A_SetTics(0); 
						}
					}
				}
			}
			LEG2 D 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate())
					{
						A_SetTics(0); 
					}
				}
			}
			LEG2 C 1 
			{ 
				if (CallACS("CheckCharacterClass") == 1) { A_SetTics(0); } 
			}
			LEG2 B 1
			{
				if (A_WeaponCheckDoubleFireRate())
				{
					A_SetTics(0); 
				}
			}
			LEG2 A 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } 
			}
			LEG2 A 0 { return resolvestate("KickEnd"); }
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff();
				A_SetMartialArtsMastery(0);
			}
			stop;
	
		// Ammo Type/Mode
		User4:
			MISG A 0
			{
				if (CountInv("UnmakerAmmoType") == 0)
				{
					A_SetInventory("UnmakerAmmoType",1);
					if (CallACS("CheckCharacterClass") == 2) { A_Print("Using Hellcore Heat for 'ammo'"); }
					else { A_Print("Using Cells for Ammo"); }
					A_StartSound("nail/hitworld",0);
				}
				else
				if (CountInv("UnmakerAmmoType") == 1)
				{
					A_SetInventory("UnmakerAmmoType",0);
					A_Print("Using MP/Mana for Ammo");
					A_StartSound("nail/hitworld",0);
				}
			}
			UNMA A 8;
			goto Ready;
	}
}

//******************
//* Marine Weapons *
//******************
class Chainsaw2 : MarineWeapon
{ 
	default
	{
		Weapon.Kickback 0;
		Weapon.SelectionOrder 2200;
		Weapon.UpSound "weapons/sawup";
		Weapon.ReadySound "weapons/sawidle";
		Inventory.PickupMessage "$GOTCHAINSAW";
		Obituary "$OB_MPCHAINSAW";
		Tag "Chainsaw";
		Decal "BulletChip";
		+WEAPON.MELEEWEAPON;
		Inventory.PickupMessage "A \caChainsaw\c-! Find some meat! \cx[Slot 1]\c-";
	}
	
	States
	{
		Spawn:
			CSAW A 1
			{
				if (CountInv("DoubleBladedChainsaw",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("Berserk2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
				else
				{
					if (CountInv("Chainsaw2",AAPTR_PLAYER1) > 0)
					{
						if (random(1,256 <= 32))
						{
							A_SpawnItemEx("DoubleBladedChainsaw",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy();
						}
						else
						{
							A_SpawnItemEx("Berserk2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy();
						}
					}
				}
			}
			loop;
		Ready:
			SAWG C 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Ready2");
				}
				else
				{
					return resolvestate("Ready1");
				}
				return resolvestate(null);
			}
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Deselect2");
				}
				else
				{
					return resolvestate("Deselect1");
				}
				return resolvestate(null);
			}
		Ready1:
			SAWG CD 4
			{
				A_WeaponReady();
				A_StartSound("weapons/sawidle",87);
			}
			goto Ready;
		Ready2:
			SAWG GH 4
			{
				A_WeaponReady();
				A_StartSound("weapons/sawidle",87);
			}
			goto Ready;
		Deselect:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Deselect2");
				}
				else
				{
					return resolvestate("Deselect1");
				}
				return resolvestate(null);
			}
		Deselect1:
			SAWG A 1
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			SAWG E 1 
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Select2");
				}
				else
				{
					return resolvestate("Select1");
				}
				return resolvestate(null);
			}
		Select1:
			SAWG A 1 
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			SAWG E 1
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			goto Select;
		Fire:
			TNT1 A 0 A_Jump(252,2);
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Fire2");
				}
				else
				{
					return resolvestate("Fire1");
				}
				return resolvestate(null);
			}
		Fire1:
			SAWG AB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraSaw("weapons/sawfull","weapons/sawhit",A_GetChainsawDamage(1),"ChainsawPuff",SF_NOPULLIN|SF_NOTURN|SF_NORANDOM,SF_NORANDOM,A_GetMeleeRange(5),2.8125,0,0,0,"");
			}
			SAWG B 0 A_ReFire();
			goto Ready;
		Fire2:
			SAWG EF 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraSaw("weapons/sawfull","weapons/sawhit",A_GetChainsawDamage(1),"ChainsawPuff",SF_NOPULLIN|SF_NOTURN|SF_NORANDOM,SF_NORANDOM,A_GetMeleeRange(5),2.8125,0,0,0,"");
			}
			SAWG D 0 A_ReFire();
			goto Ready;
	}
}

class DoubleBladedChainsaw : MarineWeapon
{
	default
	{
		Weapon.Kickback 0;
		Weapon.SelectionOrder 2200;
		Weapon.UpSound "weapons/saw2up";
		Weapon.ReadySound "weapons/saw2idle";
		Inventory.PickupMessage "A \cadouble-bladed Chainsaw\c-! This was obviously made with killing in mind! \cx[Slot 1]\c-";
		Tag "Double-Bladed Chainsaw";
		Obituary "%o was mowed twice-over by %k's double-bladed chainsaw.";
		Decal "BulletChip";
		+WEAPON.MELEEWEAPON;
	}
	
	States
	{
		Spawn:
			2SAW A 1
			{
				if (CountInv("DoubleBladedChainsaw",AAPTR_PLAYER1) > 0)
				{
					A_SpawnItemEx("Berserk2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy();
				}
			}
			loop;
		Ready:
			SAW2 C 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Ready2");
				}
				else
				{
					return resolvestate("Ready1");
				}
				return resolvestate(null);
			}
		Ready1:
			SAW2 CD 4
			{
				A_WeaponReady();
				A_StartSound("weapons/sawidle",87);
				A_StartSound("weapons/sawidle",88);
			}
			goto Ready;
		Ready2:
			SAW2 GH 4
			{
				A_WeaponReady();
				A_StartSound("weapons/sawidle",87);
				A_StartSound("weapons/sawidle",88);
			}
			goto Ready;
		Deselect:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Deselect2");
				}
				else
				{
					return resolvestate("Deselect1");
				}
				return resolvestate(null);
			}
		Deselect1:
			SAW2 A 1
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			SAW2 E 1 
			{
				A_DVDSLower(0,10051,3);
				A_DVDSLower(0,10052,7.5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Select2");
				}
				else
				{
					return resolvestate("Select1");
				}
				return resolvestate(null);
			}
		Select1:
			SAW2 A 1
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			Loop;
		Select2:
			SAW2 E 1
			{
				A_DVDSRaise(0,10051,3);
				A_DVDSRaise(0,10052,7.5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			TNT1 A 0 A_Jump(252,2);
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Fire2");
				}
				else
				{
					return resolvestate("Fire1");
				}
				return resolvestate(null);
			}
		Fire1:
			SAW2 AB 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraSaw("weapons/sawfull","weapons/sawhit",A_GetChainsawDamage(2),"Chainsaw2Puff",SF_NOPULLIN|SF_NOTURN|SF_NORANDOM,SF_NORANDOM,A_GetMeleeRange(6),7.03125,0.125,0,0,"");
			}
			SAW2 B 0 A_ReFire();
			goto Ready;
		Fire2:
			SAW2 EF 4
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10051) >= 4) { A_SetTics(2); }
				CallACS("StartTensionCountDown");
				A_SpreadAuraSaw("weapons/sawfull","weapons/sawhit",A_GetChainsawDamage(2),"Chainsaw2Puff",SF_NOPULLIN|SF_NOTURN|SF_NORANDOM,SF_NORANDOM,A_GetMeleeRange(6),7.03125,0.125,0,0,"");
			}
			SAW2 B 0 A_ReFire();
			goto Ready;
	}
}

class DualPistols : MarineWeapon
{
	default
	{
		Weapon.SlotPriority 1;
		Weapon.SelectionOrder 1900;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Clip";
		Inventory.PickupMessage "You got an extra \cuPistol\c-! \cx[Slot 2]\c-";
		Obituary "%o got pecked by %k's twin peashooters!";
		Tag "Dual Pistols";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,96,0);
					A_SpawnItemEx("HealthBonus",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,254,0);
					A_Destroy();
				}
			}
			PIST C 1;
			Loop;

		Ready:
			PISG A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Ready2");
				}
				else
				{
					return resolvestate("Ready1");
				}
				return resolvestate(null);
			}
		Ready1:
			PISD A 1 A_WeaponReady();
			goto Ready;
		Ready2:
			PISD D 1 A_WeaponReady();
			goto Ready;
		Deselect:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Deselect2");
				}
				else
				{
					return resolvestate("Deselect1");
				}
				return resolvestate(null);
			}
		Deselect1:
			PISD A 1 
			{
				A_DVDSLower(0,10019,3);
				A_DVDSLower(0,10020,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			PISD D 1
			{
				A_DVDSLower(0,10019,3);
				A_DVDSLower(0,10020,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Select2");
				}
				else
				{
					return resolvestate("Select1");
				}
				return resolvestate(null);
			}
		Select1:
			PISD A 1 
			{
				A_DVDSRaise(0,10019,3);
				A_DVDSRaise(0,10020,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			PISD D 1 
			{
				A_DVDSRaise(0,10019,3);
				A_DVDSRaise(0,10020,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;

		Fire:
			PISD A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Fire2");
				}
				else
				{
					return resolvestate("Fire1");
				}
				return resolvestate(null);
			}
		Fire1:
			PISD A 0
			{
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(2), A_GetHitScanYSpread(2), 1, A_GetPlayerAttackDamage(2,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			PISD B 3 A_GunFlash("Flash");
			PISD B 2
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(0); }
			}
			TNT1 A 0
			{
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(2), A_GetHitScanYSpread(2), 1, A_GetPlayerAttackDamage(2,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			PISD C 3 A_GunFlash();
			PISD C 2
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(0); }
			}
			PISD A 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(1); }
				A_ReFire();
			}
			Goto Ready;
		Fire2:
			PISD D 0
			{
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(2), A_GetHitScanYSpread(2), 1, A_GetPlayerAttackDamage(2,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			PISD E 3 A_GunFlash("Flash");
			PISD E 2
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(0); }
			}
			TNT1 A 0
			{
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(2), A_GetHitScanYSpread(2), 1, A_GetPlayerAttackDamage(2,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			PISD F 3 A_GunFlash();
			PISD F 2
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(0); }
			}
			PISD D 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(1); }
				A_ReFire();
			}
			Goto Ready;

		Flash:
			TNT1 A 0 Bright A_Light1();
			Goto LightDone;
		Flash2:
			TNT1 A 0 Bright A_Light1();
			Goto LightDone;
	}
}

class Pistol2 : MarineWeapon
{
	default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1900;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Clip";
		Obituary "$OB_MPPISTOL";
		+WEAPON.WIMPY_WEAPON;
		Tag "$TAG_PISTOL";
		Inventory.PickupMessage "Picked up a \cupistol\c-! \cx[Slot 2]\c-";
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,96,0);
					A_SpawnItemEx("HealthBonus",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,254,0);
					if (random(1,256) == 1 && dvds_florawandscandrop) 
					{ 
						A_SpawnItemEx("SapphireWandNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0); 
					}
					A_Destroy();
				}
			}
			PIST C 0
			{
				if (CountInv("Pistol2",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("DualPistols",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_FadeOut(1,1);
				}
			}
		Idle:
			PIST C 1;
			Loop;

		Ready:
			PISG A 0
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Ready2"); } else { return resolvestate("Ready1"); }
				return resolvestate(null);
			}
		Ready1:
			PISG A 1 A_WeaponReady();
			goto Ready;
		Ready2:
			PISG F 1 A_WeaponReady();
			goto Ready;
		Deselect:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Deselect2"); } else { return resolvestate("Deselect1"); }
				return resolvestate(null);
			}
		Deselect1:
			PISG A 1
			{
				A_DVDSLower(0,10019,3);
				A_DVDSLower(0,10020,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			PISG F 1
			{
				A_DVDSLower(0,10019,3);
				A_DVDSLower(0,10020,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Select2"); } else { return resolvestate("Select1"); }
				return resolvestate(null);
			}
		Select1:
			PISG A 1 
			{
				A_DVDSRaise(0,10019,3);
				A_DVDSRaise(0,10020,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			PISG F 1
			{
				A_DVDSRaise(0,10019,3);
				A_DVDSRaise(0,10020,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Fire:
			PISG A 0
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Fire2"); } else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			PISG A 4
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
			}
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(1), A_GetHitScanYSpread(1), 1, A_GetPlayerAttackDamage(1,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			PISG B 6 A_GunFlash("Flash");
			PISG C 4
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
			}
			PISG B 5 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(3); }
				A_ReFire();
			}
			Goto Ready;
		Fire2:
			PISG F 4
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
			}
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("weapons/pistol", CHAN_WEAPON);
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(1), A_GetHitScanYSpread(1), 1, A_GetPlayerAttackDamage(1,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			PISG G 6 A_GunFlash("Flash2");
			PISG H 4
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
			}
			PISG G 5 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(3); }
				A_ReFire();
			}
			Goto Ready;
		Flash:
			PISF A 7 Bright A_Light1();
			Goto LightDone;
			PISF A 7 Bright A_Light1();
			Goto LightDone;
		Flash2:
			PISF B 7 Bright A_Light1();
			Goto LightDone;
			PISF B 7 Bright A_Light1();
			Goto LightDone;
	}
}

class Shotgun2 : MarineWeapon
{
	default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
		Inventory.PickupMessage "Picked up a \cushotgun\c-! \cx[Slot 3]\c-";
	}
	
	States
	{
		Spawn:
			SHOT A -1;
			Stop;
		Ready:
			SHTG A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Ready2");
				}
				else
				{
					return resolvestate("Ready1");
				}
				return resolvestate(null);
			}
		Ready1:
			SHTG A 1 A_WeaponReady();
			goto Ready;
		Ready2:
			SHTG I 1 A_WeaponReady();
			goto Ready;
		Deselect:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Deselect2");
				}
				else
				{
					return resolvestate("Deselect1");
				}
				return resolvestate(null);
			}
		Deselect1:
			SHTG A 1
			{
				A_DVDSLower(0,10021,3);
				A_DVDSLower(0,10022,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			SHTG I 1 
			{
				A_DVDSLower(0,10021,3);
				A_DVDSLower(0,10022,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Select2");
				}
				else
				{
					return resolvestate("Select1");
				}
				return resolvestate(null);
			}
		Select1:
			SHTG A 1
			{
				A_DVDSRaise(0,10021,3);
				A_DVDSRaise(0,10022,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			SHTG I 1
			{
				A_DVDSRaise(0,10021,3);
				A_DVDSRaise(0,10022,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Flash:
			SHTF A 4 Bright A_Light1();
			SHTF B 3 Bright A_Light2();
			Goto LightDone;
		Flash2:
			SHTF C 4 Bright A_Light1();
			SHTF D 3 Bright A_Light2();
			Goto LightDone;

		FireActual:
			SHTG A 0
			{
				A_StartSound("weapons/shotgf", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(3), A_GetHitScanYSpread(3), 7, A_GetPlayerAttackDamage(3,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Shell");
			}
			SHTG A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Fire2End");
				}
				else
				{
					return resolvestate("Fire1End");
				}
				return resolvestate(null);
			}
			goto Fire1End;

		Fire:
			SHTG A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Fire2");
				}
				else
				{
					return resolvestate("Fire1");
				}
				return resolvestate(null);
			}
		Fire1:
			SHTG A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 3) { A_SetTics(2); }
			}
			goto FireActual;
		Fire1End:
			SHTG A 7 A_GunFlash("Flash");
			TNT1 A 0 A_JumpIf(CallACS("MiscVarCheckDECORATE",10021) >= 3, "Fire1EndAuto");
			SHTG BC 5
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(3); }
			}
			SHTG D 4
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(2); }
			}
			SHTG CB 5
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(3); }
			}
			SHTG A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(2); }
			}
			SHTG A 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(5); }
				A_ReFire();
			}
			Goto Ready;
		Fire1EndAuto:
			/* The formula here is:
			*   let d = duration of this frame
			*   let p = perk level (up to 5)
			*   d = 8 + (4 * (3 - p))
			*
			* Hence, the durations of this frame will be:
			*   p  d
			*   3  8
			*   4  4
			*   5  0
			*/
			SHTG B 8 A_SetTics(	8 + (4 * (3 - min(CallACS("MiscVarCheckDECORATE",10021), 5))));
			Goto Ready;
		Fire2:
			SHTG I 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 3) { A_SetTics(2); }
			}
			goto FireActual;
		Fire2End:
			SHTG I 7 A_GunFlash("Flash2");
			TNT1 A 0 A_JumpIf(CallACS("MiscVarCheckDECORATE",10021) >= 3, "Fire2EndAuto");
			SHTG JK 5
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(3); }
			}
			SHTG L 4
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(2); }
			}
			SHTG KJ 5
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(3); }
			}
			SHTG I 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(2); }
			}
			SHTG I 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 1) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(5); }
				A_ReFire();
			}
			Goto Ready;
		Fire2EndAuto:
			/* The formula here is:
			*   let d = duration of this frame
			*   let p = perk level (up to 5)
			*   d = 8 + (4 * (3 - p))
			*
			* Hence, the durations of this frame will be:
			*   p  d
			*   3  8
			*   4  4
			*   5  0
			*/
			SHTG J 8 A_SetTics(8 + (4 * (3 - min(CallACS("MiscVarCheckDECORATE",10021), 5))));
			Goto Ready;
	}
}

class SuperShotgun2 : MarineWeapon 
{ 
	default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 400;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Obituary "$OB_MPSSHOTGUN";
		Tag "$TAG_SUPERSHOTGUN";
		Inventory.PickupMessage "Picked up a \cusuper shotgun\c-! \cx[Slot 3]\c-";
	}
	
	States
	{
		Spawn:
			SGN2 A -1;
			Stop;
		Ready:
			SHT2 A 0
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Ready2"); }
				else { return resolvestate("Ready1"); }
				return resolvestate(null);
			}
		Ready1:
			SHT2 A 1 A_WeaponReady();
			goto Ready;
		Ready2:
			SHT2 K 1 A_WeaponReady();
			goto Ready;
		Deselect:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Deselect2"); }
				else { return resolvestate("Deselect1"); }
				return resolvestate(null);
			}
		Deselect1:
			SHT2 A 1 
			{
				A_DVDSLower(0,10021,3);
				A_DVDSLower(0,10022,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			SHT2 K 1
			{
				A_DVDSLower(0,10021,3);
				A_DVDSLower(0,10022,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Select2"); }
				else { return resolvestate("Select1"); }
				return resolvestate(null);
			}
		Select1:
			SHT2 A 1
			{
				A_DVDSRaise(0,10021,3);
				A_DVDSRaise(0,10022,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			SHT2 K 1
			{
				A_DVDSRaise(0,10021,3);
				A_DVDSRaise(0,10022,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Flash:
			SHT2 I 4 Bright A_Light1();
			SHT2 J 3 Bright A_Light2();
			Goto LightDone;
		Flash2:
			SHT2 S 4 Bright A_Light1();
			SHT2 T 3 Bright A_Light2();
			Goto LightDone;

		FireActual:
			TNT1 A 0
			{
				A_StartSound("weapons/sshotf", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(4), A_GetHitScanYSpread(4), 20, A_GetPlayerAttackDamage(4,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,2,"Shell");
			}
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Fire2End"); }
				else { return resolvestate("Fire1End"); }
				return resolvestate(null);
			}
			goto Fire1End;

		Fire:
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 1) { return resolvestate("Fire2"); }
				else { return resolvestate("Fire1"); }
				return resolvestate(null);
			}
		Fire1:
			SHT2 A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 3) { A_SetTics(2); }
			}
			goto FireActual;
		Fire1End:
			SHT2 A 7 A_GunFlash();
			SHT2 B 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
			}
			SHT2 C 7 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
				A_CheckReload();
			}
			SHT2 D 7 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
				A_OpenShotgun2();
			}
			SHT2 E 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
			}
			SHT2 F 7 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
				A_LoadShotgun2();
			}
			SHT2 G 6
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(4); }
			}
			SHT2 H 6 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(4); }
				A_CloseShotgun2();
			}
			SHT2 A 5 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(3); }
				A_ReFire();
			}
			Goto Ready;
			// unused states
			SHT2 B 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
			}
			SHT2 A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 3) { A_SetTics(2); }
			}
			Goto Deselect;
		Fire2:
			SHT2 K 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 3) { A_SetTics(2); }
			}
		goto FireActual;
		Fire2End:
			SHT2 K 7 A_GunFlash("Flash2");
			SHT2 L 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
			}
			SHT2 M 7 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
				A_CheckReload();
			}
			SHT2 N 7 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
				A_OpenShotgun2();
			}
			SHT2 O 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
			}
			SHT2 P 7 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
				A_LoadShotgun2();
			}
			SHT2 Q 6
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(4); }
			}
			SHT2 R 6 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(4); }
				A_CloseShotgun2();
			}
			SHT2 K 5 
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(4); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(3); }
				A_ReFire();
			}
			Goto Ready;
			// unused states
			SHT2 L 7
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 2) { A_SetTics(6); }
				if (CallACS("MiscVarCheckDECORATE",10021) >= 4) { A_SetTics(5); }
			}
			SHT2 K 3
			{
				if (CallACS("MiscVarCheckDECORATE",10021) >= 3) { A_SetTics(2); }
			}
			Goto Deselect;
	}
}

class Chaingun2 : MarineWeapon
{
	default
	{
		Weapon.Kickback 100;
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "Clip";
		Obituary "%o was mowed down by %k's chaingun.";
		Tag "$TAG_CHAINGUN";
		Inventory.PickupMessage "Picked up a \cuchaingun\c-! \cx[Slot 4]\c-";
	}
	
	States
	{
		Spawn:
			MGUN A -1;
			Stop;
		Ready:
			CHGG A 1 A_WeaponReady();
			Loop;
		Deselect:
			CHGG A 1
			{
				A_DVDSLower(0,10019,3);
				A_DVDSLower(0,10020,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			CHGG A 1 
			{
				A_DVDSRaise(0,10019,3);
				A_DVDSRaise(0,10020,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			CHGG A 4 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
				A_GunFlash("Flash");
				A_StartSound("weapons/chngun", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(11), A_GetHitScanYSpread(11), 1, A_GetPlayerAttackDamage(5,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			CHGG B 4
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
				A_GunFlash("Flash2");
				A_StartSound("weapons/chngun", CHAN_WEAPON);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(11), A_GetHitScanYSpread(11), 1, A_GetPlayerAttackDamage(5,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
			}
			CHGG B 0 A_ReFire();
			Goto Ready;
		Flash:
			CHGF A 4 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
				A_Light1();
			}
			Goto LightDone;
		Flash2:
			CHGF B 4 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10019) >= 4) { A_SetTics(2); }
				A_Light1();
			}
			Goto LightDone;
	}
}

// Skulltag's Minigun
class Minigun : MarineWeapon
{
	default
	{
		Weapon.AmmoType "Clip";
		Weapon.AmmoGive 20;
		Weapon.AmmoUse 1;
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "Picked up a \cuminigun\c-! \cx[Slot 4]\c-";
		Obituary "%o was shredded by %k's minigun.";
	}
	
	States
	{
		Spawn:
			MNGN A -1;
			Loop;
		Ready:
			MNG2 A 0
			{
				A_SetInventory("MinigunHeat",0);
				A_SetInventory("MinigunSlowdownWhenFiring",0);
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Ready2");
				}
				else
				{
					return resolvestate("Ready1");
				}
				return resolvestate(null);
			}
		Ready1:
			MNG2 A 1 A_WeaponReady();
			goto Ready;
		Ready2:
			MNG2 G 1 A_WeaponReady();
			goto Ready;
		Deselect:
			MNG2 A 0
			{
				A_SetInventory("MinigunHeat",0);
				A_SetInventory("MinigunSlowdownWhenFiring",0);
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Deselect2");
				}
				else
				{
					return resolvestate("Deselect1");
				}
				return resolvestate(null);
			}
		Deselect1:
			MNG2 A 1
			{
				A_DVDSLower(0,10019,3);
				A_DVDSLower(0,10020,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			MNG2 G 1
			{
				A_DVDSLower(0,10019,3);
				A_DVDSLower(0,10020,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			MNG2 A 0
			{
				A_SetInventory("MinigunHeat",0);
				A_SetInventory("MinigunSlowdownWhenFiring",0);
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Select2");
				}
				else
				{
					return resolvestate("Select1");
				}
				return resolvestate(null);
			}
		Select1:
			MNG2 A 1
			{
				A_DVDSRaise(0,10019,3);
				A_DVDSRaise(0,10020,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			MNG2 G 1 
			{
				A_DVDSRaise(0,10019,3);
				A_DVDSRaise(0,10020,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Fire:
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Fire2");
				}
				else
				{
					return resolvestate("Fire1");
				}
				return resolvestate(null);
			}
		Fire1:
			TNT1 A 0
			{
				if (CountInv("MinigunHeat") >= 100)
				{
					if (random(1,256) <= 8){ return resolvestate("HyperCooldown"); }
					else if (random(1,256) <= 32) { return resolvestate("FastCooldown"); }
					return resolvestate("SlowCooldown");
				}
				return resolvestate(null);
			}
			MNG2 EF 2 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 5) { A_SetTics(1); }
				A_StartSound("weapons/minigunfire", CHAN_WEAPON);
	
				if (CallACS("MiscVarCheckDECORATE",10019) == 5) { if (random(1,100) <= 66) { A_GiveInventory("MinigunHeat",1); } }
				else if (CallACS("MiscVarCheckDECORATE",10019) == 4) { if (random(1,100) <= 72) { A_GiveInventory("MinigunHeat",1); } } 
				else if (CallACS("MiscVarCheckDECORATE",10019) == 3) { if (random(1,100) <= 78) { A_GiveInventory("MinigunHeat",1); } } 
				else if (CallACS("MiscVarCheckDECORATE",10019) == 2) { if (random(1,100) <= 84) { A_GiveInventory("MinigunHeat",1); } } 
				else if (CallACS("MiscVarCheckDECORATE",10019) == 1) { if (random(1,100) <= 90) { A_GiveInventory("MinigunHeat",1); } } 
				else { if (random(1,100) <= 96) { A_GiveInventory("MinigunHeat",1); } }
				A_CheckMinigunHeat(20);
	
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(12), A_GetHitScanYSpread(12), 1, A_GetPlayerAttackDamage(6,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
				A_GiveInventory("MinigunSlowdownWhenFiring");
			}
			MNG2 F 0 A_ReFire("Fire");
			TNT1 A 0
			{
				if (CountInv("MinigunHeat") >= 51 && CountInv("MinigunHeat") <= 100)
				{
					if (random(1,256) <= 8){ return resolvestate("HyperCooldown"); }
					else if (random(1,256) <= 32) { return resolvestate("FastCooldown"); }
					return resolvestate("SlowCooldown");
				}
				else
				if (CountInv("MinigunHeat") >= 21 && CountInv("MinigunHeat") <= 50)
				{
					if (random(1,256) <= 32) { return resolvestate("HyperCooldown"); }
					return resolvestate("FastCooldown");
				}
				else
				if (CountInv("MinigunHeat") >= 0 && CountInv("MinigunHeat") <= 20)
				{
					return resolvestate("HyperCooldown");
				}
				return resolvestate("SlowCooldown");
			}
			goto SlowCoolDown;
		Fire2:
			TNT1 A 0
			{
				if (CountInv("MinigunHeat") >= 100)
				{
					if (random(1,256) <= 8){ return resolvestate("HyperCooldown2"); }
					else if (random(1,256) <= 32) { return resolvestate("FastCooldown2"); }
					return resolvestate("SlowCooldown2");
				}
				return resolvestate(null);
			}
			MNG2 KL 2 
			{
				if (CallACS("MiscVarCheckDECORATE",10019) >= 5) { A_SetTics(1); }
				A_StartSound("weapons/minigunfire", CHAN_WEAPON);
	
				if (CallACS("MiscVarCheckDECORATE",10019) == 5) { if (random(1,100) <= 66) { A_GiveInventory("MinigunHeat",1); } }
				else if (CallACS("MiscVarCheckDECORATE",10019) == 4) { if (random(1,100) <= 72) { A_GiveInventory("MinigunHeat",1); } } 
				else if (CallACS("MiscVarCheckDECORATE",10019) == 3) { if (random(1,100) <= 78) { A_GiveInventory("MinigunHeat",1); } } 
				else if (CallACS("MiscVarCheckDECORATE",10019) == 2) { if (random(1,100) <= 84) { A_GiveInventory("MinigunHeat",1); } } 
				else if (CallACS("MiscVarCheckDECORATE",10019) == 1) { if (random(1,100) <= 90) { A_GiveInventory("MinigunHeat",1); } } 
				else { if (random(1,100) <= 96) { A_GiveInventory("MinigunHeat",1); } }
				A_CheckMinigunHeat(20);
	
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(12), A_GetHitScanYSpread(12), 1, A_GetPlayerAttackDamage(6,1), "BulletPuff",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"Clip");
				A_GiveInventory("MinigunSlowdownWhenFiring");
			}
			MNG2 L 0 A_ReFire("Fire");
			TNT1 A 0
			{
				if (CountInv("MinigunHeat") >= 51 && CountInv("MinigunHeat") <= 100)
				{
					if (random(1,256) <= 8){ return resolvestate("HyperCooldown2"); }
					else if (random(1,256) <= 32) { return resolvestate("FastCooldown2"); }
					return resolvestate("SlowCooldown2");
				}
				else
				if (CountInv("MinigunHeat") >= 21 && CountInv("MinigunHeat") <= 50)
				{
					if (random(1,256) <= 32) { return resolvestate("HyperCooldown2"); }
					return resolvestate("FastCooldown2");
				}
				else
				if (CountInv("MinigunHeat") >= 0 && CountInv("MinigunHeat") <= 20)
				{
					return resolvestate("HyperCooldown2");
				}
				return resolvestate("SlowCooldown2");
			}
			goto SlowCoolDown2;

		SlowCooldown: // Up to 20 Tics
			TNT1 A 0 A_SetInventory("MinigunSlowdownWhenFiring",0);
			MNG2 A 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 B 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 C 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }  
			MNG2 D 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 4 tics / 2
			MNG2 A 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 B 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 C 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 D 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			// 8 tics / 4 [12 so far]
			MNG2 A 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 B 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 C 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 D 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			// 12 tics [24 so far]
			MNG2 A 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 B 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 C 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 D 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			// 16 tics [40 so far]
			MNG2 A 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(3); } A_CheckMinigunHeat(0); }
			MNG2 B 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 C 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(3); } A_CheckMinigunHeat(0); }
			MNG2 D 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			// 20 tics [60 so far]
			goto Ready;
		FastCooldown:
			TNT1 A 0 A_SetInventory("MinigunSlowdownWhenFiring",0);
			MNG2 A 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 B 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 C 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 D 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 2 tics
			MNG2 A 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 B 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 C 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 D 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			// 4 tics [6 so far]
			MNG2 A 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 B 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 C 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 D 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			// 6 tics [12 so far]
			MNG2 A 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }  
			MNG2 B 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 C 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 D 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			// 8 tics [20 so far]
			MNG2 A 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); } 
			MNG2 B 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 C 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 D 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
		// 10 tics [30 so far]
			goto Ready;
		HyperCooldown:
			TNT1 A 0 A_SetInventory("MinigunSlowdownWhenFiring",0);
			MNG2 A 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 B 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }  
			MNG2 C 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 D 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 1 tics
			MNG2 A 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 B 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 C 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 D 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 2 tics [3 so far]
			MNG2 A 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 B 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 C 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(random(0,1)); } A_CheckMinigunHeat(0); } 
			MNG2 D 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			// 3 tics [6 so far]
			MNG2 A 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 B 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 C 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 D 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 4 tics [10 so far]
			MNG2 A 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 B 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(random(0,1)); } A_CheckMinigunHeat(0); }
			MNG2 C 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 D 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			// 5 tics [15 so far]
			goto Ready;

		SlowCooldown2:
			TNT1 A 0 A_SetInventory("MinigunSlowdownWhenFiring",0);
			MNG2 G 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 H 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 I 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }  
			MNG2 J 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 4 tics / 2
			MNG2 G 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 H 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 I 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 J 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			// 8 tics / 4 [12 so far]
			MNG2 G 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 H 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 I 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 J 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			// 12 tics [24 so far]
			MNG2 G 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 H 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 I 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 J 4 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			// 16 tics [40 so far]
			MNG2 G 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(3); } A_CheckMinigunHeat(0); }
			MNG2 H 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			MNG2 I 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(3); } A_CheckMinigunHeat(0); }
			MNG2 J 5 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); }
			// 20 tics [60 so far]
			goto Ready;
		FastCooldown2:
			TNT1 A 0 A_SetInventory("MinigunSlowdownWhenFiring",0);
			MNG2 G 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 H 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 I 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 J 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 2 tics
			MNG2 G 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 H 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 I 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 J 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			// 4 tics [6 so far]
			MNG2 G 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 H 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 I 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 J 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			// 6 tics [12 so far]
			MNG2 G 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }  
			MNG2 H 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 I 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 J 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			// 8 tics [20 so far]
			MNG2 G 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(2); } A_CheckMinigunHeat(0); } 
			MNG2 H 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 I 3 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 J 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			// 10 tics [30 so far]
			goto Ready;
		HyperCooldown2:
			TNT1 A 0 A_SetInventory("MinigunSlowdownWhenFiring",0);
			MNG2 G 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 H 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }  
			MNG2 I 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 J 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 1 tics
			MNG2 G 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 H 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 I 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			MNG2 J 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 2 tics [3 so far]
			MNG2 G 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); } 
			MNG2 H 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 I 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(random(0,1)); } A_CheckMinigunHeat(0); } 
			MNG2 J 0 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			// 3 tics [6 so far]
			MNG2 G 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 H 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 I 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 J 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); } 
			// 4 tics [10 so far]
			MNG2 G 2 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			MNG2 H 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(random(0,1)); } A_CheckMinigunHeat(0); }
			MNG2 I 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(0); } A_CheckMinigunHeat(0); }
			MNG2 J 1 { if (CallACS("MiscVarCheckDECORATE",10019) >= 3) { A_SetTics(1); } A_CheckMinigunHeat(0); }
			// 5 tics [15 so far]
			goto Ready;
	}
}

class RocketLauncher2 : MarineWeapon
{
	default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "RocketAmmo";
		Weapon.AmmoType1 "RocketAmmo";
		Weapon.AmmoType2 "RocketAmmo";
		+WEAPON.NOAUTOFIRE;
		Tag "$TAG_ROCKETLAUNCHER";
		Inventory.PickupMessage "Picked up a \carocket launcher\c-! \cx[Slot 5]\c-";
	}
	
	States
	{
		Spawn:
			LAUN A -1;
			Stop;
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			MISG A 1 
			{
				A_DVDSLower(0,10025,3);
				A_DVDSLower(0,10026,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			MISG A 1
			{
				A_DVDSRaise(0,10025,3);
				A_DVDSRaise(0,10026,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			// 20/15/10 Tics
			MISG B 4
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(7); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(3); }
				}
				A_GunFlash("Flash");
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(7); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(3); }
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(3); }
				}
			}
			MISG B 4 
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(7); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(3); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(2); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(3); }
				}

				CallACS("StartTensionCountDown");
				if (CountInv("RLMode") == 0)
				{
					A_SpreadAuraFireProjectileAoE("RocketPlayer","RocketPlayerNoAOE",0,1,"RocketAmmo",0,0,0,0);
				}
				else
				if (CountInv("RLMode") == 1)
				{
					A_SpreadAuraFireProjectileAoE("STGrenade","STGrenadeNoAOE",0,1,"RocketAmmo",0,0,0,-9.4921875);
				}
				else 
				if (CountInv("RLMode") == 2)
				{
					A_SpreadAuraFireProjectileAoE("RocketPlayerSeeking","RocketPlayerSeekingNoAOE",0,1,"RocketAmmo",0,0,0,0);
				}
				else 
				if (CountInv("RLMode") == 3)
				{
					A_StartSound("howitzer/shot",CHAN_7);
					A_GetWeaponShotRecoil(0);
					A_Quake(A_QuakeWShakeIntensity(0), 8, 0, 1024, "nosound/silent");
					A_Quake(A_QuakeWShakeIntensity(1), 8, 0, 512, "nosound/silent");
					A_Quake(A_QuakeWShakeIntensity(2), 8, 0, 256, "nosound/silent");
					A_SpreadAuraFireBullets(0, 0, 1, (A_GetPlayerAttackDamage(8,1)*2), "HowitzerBase",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"RocketAmmo",1,"HowitzerNoAOE");
				}
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(7); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(3); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(2); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(3); }
				}
			}
			MISG B 4
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(7); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(3); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(2); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(3); }
				}
			}
			MISG B 0 A_ReFire();
			Goto Ready;

		AltFire:
			MISG B 3
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(6);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(4); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(2); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(2); }
				}
				A_GunFlash("AltFlash");
			}
			MISG B 2
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(4);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(2); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(1); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(2); }
				}

				CallACS("StartTensionCountDown");
				if (CountInv("RLMode") == 0)
				{
					A_SpreadAuraFireProjectileAoE("RocketPlayer","RocketPlayerNoAOE",frandom(-(A_GetHitScanXSpread(8)),(A_GetHitScanXSpread(8))),1,"RocketAmmo",0,0,0,frandom(-(A_GetHitScanYSpread(8)),(A_GetHitScanYSpread(8))));
				}
				else
				if (CountInv("RLMode") == 1)
				{
					A_SpreadAuraFireProjectileAoE("STGrenade","STGrenadeNoAOE",frandom(-(A_GetHitScanXSpread(10)),(A_GetHitScanXSpread(10))),1,"RocketAmmo",0,0,0,-9.4921875+frandom(-(A_GetHitScanYSpread(10)),(A_GetHitScanYSpread(10))));
				}
				else
				if (CountInv("RLMode") == 2)
				{
					A_SpreadAuraFireProjectileAoE("RocketPlayerDrunk","RocketPlayerDrunkNoAOE",0,1,"RocketAmmo",0,0,0,0);
				}
				else 
				if (CountInv("RLMode") == 3)
				{
					A_StartSound("howitzer/shot",CHAN_7);
					A_GetWeaponShotRecoil(0);
					A_Quake(A_QuakeWShakeIntensity(0), 8, 0, 1024, "nosound/silent");
					A_Quake(A_QuakeWShakeIntensity(1), 8, 0, 512, "nosound/silent");
					A_Quake(A_QuakeWShakeIntensity(2), 8, 0, 256, "nosound/silent");
					A_SpreadAuraFireBullets(frandom(-(A_GetHitScanXSpread(15)),(A_GetHitScanXSpread(15))), frandom(-(A_GetHitScanYSpread(15)),(A_GetHitScanYSpread(15))), 1, (A_GetPlayerAttackDamage(8,1)*2), "HowitzerBase",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,0,"",0,0,1,"RocketAmmo",1,"HowitzerNoAOE");
				}
			}
			MISG B 1
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(2);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(1); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(0); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(1); }
				}
			}
			MISG B 0 A_ReFire();
			Goto Ready;

		// Fire Mode
		User4:
			MISG A 0
			{
				if (CountInv("RLMode") == 0)
				{
					A_SetInventory("RLMode",1);
					A_Print("Using Grenades");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 1)
				{
					if (CallACS("MiscVarCheckDECORATE",10025) > 0)
					{
						A_SetInventory("RLMode",2);
						A_Print("Using Homing Rockets");
						A_StartSound("GetRockets",0);
					}
					else
					{
						A_SetInventory("RLMode",3);
						A_Print("Using Howitzer");
						A_StartSound("GetRockets",0);
					}
				}
				else
				if (CountInv("RLMode") == 2)
				{
					A_SetInventory("RLMode",3);
					A_Print("Using Howitzer");
					A_StartSound("GetRockets",0);
				}
				else
				if (CountInv("RLMode") == 3)
				{
					A_SetInventory("RLMode",0);
					A_Print("Using Rockets");
					A_StartSound("GetRockets",0);
				}
			}
			MISG A 8;
			goto Ready;

		Flash:
			// 15 tics
			MISF A 3 Bright
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(6);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(4); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(1); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(2); }
				}
				A_Light1();
			}
			MISF B 4 Bright
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(7); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(3); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(2); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(3); }
				}
			}
			MISF CD 4 Bright
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(8);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(7); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(6); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(5); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(3); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(2); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(3); }
				}
				A_Light2();
			}
			Goto LightDone;

		AltFlash:
			// 11 tics
			MISF A 1 Bright
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(2);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(2); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(1); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(1); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(0); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(0); }
				}
				A_Light1();
			}
			MISF B 2 Bright
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(4);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(2); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(0); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(1); }
				}
			}
			MISF CD 2 Bright
			{
				if (CountInv("RLMode") == 3)
				{
					A_SetTics(4);
					if (CallACS("MiscVarCheckDECORATE",10025) >= 1) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 2) { A_SetTics(4); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 3) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 4) { A_SetTics(3); }
					if (CallACS("MiscVarCheckDECORATE",10025) >= 5) { A_SetTics(2); }
				}
				else
				{
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 4) { A_SetTics(1); }
					if ((CallACS("MiscVarCheckDECORATE",10025) - (CountInv("RLMode") == 2)) >= 2) { A_SetTics(1); }
				}
				A_Light2();
			}
			Goto LightDone;
	}
}

class PlasmaRifle2 : MarineWeapon
{
	default
	{
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Weapon.Kickback 25;
		Tag "$TAG_PLASMARIFLE";
		Inventory.PickupMessage "Picked up a \cvplasma rifle\c-! \cx[Slot 6]\c-";
	}
	
	States
	{
		Spawn:
			PLAS A -1;
			Stop;
		Ready:
			PLSG A 0
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Ready2");
				}
				else
				{
					return resolvestate("Ready1");
				}
				return resolvestate(null);
			}
		Ready1:
			PLSG A 1 A_WeaponReady();
			goto Ready;
		Ready2:
			PLSG C 1 A_WeaponReady();
			goto Ready;
		Deselect:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Deselect2");
				}
				else
				{
					return resolvestate("Deselect1");
				}
				return resolvestate(null);
			}
		Deselect1:
			PLSG A 1 
			{
				A_DVDSLower(0,10023,3);
				A_DVDSLower(0,10024,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Deselect2:
			PLSG C 1
			{
				A_DVDSLower(0,10023,3);
				A_DVDSLower(0,10024,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			goto Deselect;
		Select:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Select2");
				}
				else
				{
					return resolvestate("Select1");
				}
				return resolvestate(null);
			}
		Select1:
			PLSG A 1 
			{
				A_DVDSRaise(0,10023,3);
				A_DVDSRaise(0,10024,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Select2:
			PLSG C 1
			{
				A_DVDSRaise(0,10023,3);
				A_DVDSRaise(0,10024,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			goto Select;
		Fire:
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("PlasmaBallPlayer",0,1,"Cell",0,0,0,0);
			}
			TNT1 A 0 
			{ 
				A_CheckWeaponFlash(2,1);
				A_CheckWeaponFlash(2,0);
				if (CountInv("WeaponFlashResult") == 1) { return resolvestate("Flash1"); }
				if (CountInv("WeaponFlashResult") == 0) { return resolvestate("Flash2"); }
				return resolvestate(null);
			}
		AltFire:
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				for (A_SetInventory("PlasmaBurstLevel",0); CountInv("PlasmaBurstLevel") < random(3,5); A_GiveInventory("PlasmaBurstLevel",1))
				{
					A_SpreadAuraFireProjectile("PlasmaBallPlayer",frandom(-(A_GetHitScanXSpread(9)),(A_GetHitScanXSpread(9))),1,"Cell",0,0,0,frandom(-(A_GetHitScanYSpread(9)),(A_GetHitScanYSpread(9))));
				}
			}
			TNT1 A 0 
			{ 
				A_CheckWeaponFlash(2,1);
				A_CheckWeaponFlash(2,0);
				if (CountInv("WeaponFlashResult") == 1) { return resolvestate("Flash1"); }
				if (CountInv("WeaponFlashResult") == 0) { return resolvestate("Flash2"); }
				return resolvestate(null);
			}
		Flash1:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Flash1b");
				}
				else
				{
					return resolvestate("Flash1a");
				}
				return resolvestate(null);
			}
			goto Flash1a;
		Flash2:
			TNT1 A 0 
			{
				if (CallACS("CheckCharacterClass") == 1)
				{
					return resolvestate("Flash2b");
				}
				else
				{
					return resolvestate("Flash2a");
				}
				return resolvestate(null);
			}
			goto Flash2a;

		Flash1a:
			PLSG A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(2); }
				A_GunFlash("FlashOne");
			}
			PLSG B 12
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(7); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(10); }
				A_ReFire();
			}
			Goto Ready;
		Flash2a:
			PLSG A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(2); }
				A_GunFlash("FlashTwo");
			}
			PLSG B 12
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(7); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(10); }
				A_ReFire();
			}
			Goto Ready;
		Flash1b:
			PLSG A 3
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(2); }
				A_GunFlash("FlashOne2");
			}
			PLSG D 12
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(7); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(10); }
				A_ReFire();
			}
			Goto Ready;
		Flash2b:
			PLSG A 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(2); }
				A_GunFlash("FlashTwo2");
			}
			PLSG D 12
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(5); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(7); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(10); }
				A_ReFire();
			}
			Goto Ready;

		FlashOne:
			PLSF A 4 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(3); }
				A_Light1();
			}
			Goto LightDone;
		FlashTwo:
			PLSF B 4 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(3); }
				A_Light1();
			}
			Goto LightDone;
		FlashOne2:
			PLSF C 4 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(3); }
				A_Light1();
			}
			Goto LightDone;
		FlashTwo2:
			PLSF D 4 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(3); }
				A_Light1();
			}
			Goto LightDone;
	}
}

class Repeater2 : MarineWeapon
{
	default
	{
		Inventory.PickupSound "misc/w_pkup";
		Inventory.PickupMessage "You got a \cvplasma repeater\c-! \cx[Slot 6]\c-";
		Obituary "%o was disintegrated by %k's repeater.";
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Weapon.AmmoGive 8;
		Weapon.AmmoUse 2;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 10;
		+Weapon.Explosive;
		+Weapon.NoAlert;
		Tag "Plasma Repeater";
	}
	
	States
	{
		Spawn:
			REPG I -1;
			Loop;
		Ready:
			REPG A 1 
			{
				A_TakeInventory("RepeaterSpin", 3);
				A_GiveInventory("RepeaterFrameA", 1);;
				A_WeaponReady();
			}
			Loop;
		Deselect:
			REPG A 1 
			{
				A_TakeInventory("RepeaterSpin", 3);
				A_GiveInventory("RepeaterFrameA", 1);;

				A_DVDSLower(0,10023,3);
				A_DVDSLower(0,10024,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			REPG A 1
			{
				A_DVDSRaise(0,10023,3);
				A_DVDSRaise(0,10024,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			Loop;
		Fire:
			//===========Spinup
			REPG A 0 A_StartSound("Weapons/RepeaterSpinup");
			REPG A 0 A_JumpIfInventory("RepeaterSpin", 1, 8);
			REPG A 0 A_JumpIfInventory("RepeaterB", 1, 4);
			REPG A 0 A_JumpIfInventory("RepeaterC", 1, 4);
			REPG A 0 A_JumpIfInventory("RepeaterD", 1, 4);
			REPG ABCD 4
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(2); }
			}
			REPG A 0 A_GiveInventory("RepeaterFrameA");
			REPG A 0 A_JumpIfInventory("RepeaterSpin", 2, 9);
			REPG A 0 A_GiveInventory("RepeaterSpin", 1);
			REPG A 0 A_JumpIfInventory("RepeaterB", 1, 4);
			REPG A 0 A_JumpIfInventory("RepeaterC", 1, 4);
			REPG A 0 A_JumpIfInventory("RepeaterD", 1, 4);
			REPG ABCD 3
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(1); }
			}
			REPG D 0 A_GiveInventory("RepeaterFrameA");
			REPG A 0 A_JumpIfInventory("RepeaterB", 1, 4);
			REPG A 0 A_JumpIfInventory("RepeaterC", 1, 4);
			REPG A 0 A_JumpIfInventory("RepeaterD", 1, 4);
			REPG ABCD 2
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(1); }
			}
			REPG D 0 A_GiveInventory("RepeaterFrameA");
			//===========Fire
			REPG A 0 A_Refire();
			//===========Spindown
			REPG A 0 A_StartSound("Weapons/RepeaterSpindown");
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_TakeInventory("RepeaterSpin", 1);
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_TakeInventory("RepeaterSpin", 1);
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			Goto Ready;
		Hold:
			//===========Fire
			REPG E 0 Bright 
			{
				A_GunFlash();
				A_AlertMonsters();
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/RepeaterFire", CHAN_WEAPON);
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(5), A_GetHitScanYSpread(5), 2, A_GetPlayerAttackDamage(7,1),"RepeaterPuffPlayer",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,10240,"",0,0,2,"Cell");
			}
			REPG E 2
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(1); }
			}
			REPG F 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(1); }
			}
			REPG G 0 Bright 
			{
				A_AlertMonsters();
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/RepeaterFire", CHAN_WEAPON);
				A_SpreadAuraFireBullets(A_GetHitScanXSpread(5), A_GetHitScanYSpread(5), 2, A_GetPlayerAttackDamage(7,1),"RepeaterPuffPlayer",FBF_NORANDOM|FBF_NORANDOMPUFFZ,FBF_NORANDOM|FBF_NORANDOMPUFFZ,10240,"",0,0,2,"Cell");
			}
			REPG H 2 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(1); }
			}
			REPG A 0 A_Refire();
			//===========Spindown
			REPG A 0 A_StartSound("Weapons/RepeaterSpindown");
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_TakeInventory("RepeaterSpin", 1);
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_TakeInventory("RepeaterSpin", 1);
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameA", 1);
			REPG AAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameB", 1);
			REPG BBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameC", 1);
			REPG CCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			REPG A 0 A_GiveInventory("RepeaterFrameD", 1);
			REPG DDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_DISABLESWITCH);
			Goto Ready;
		Flash:
			TNT1 A 2 A_Light2();
			TNT1 A 2 A_Light1();
			TNT1 A 0 A_Light0();
			Stop;
	}
}

class KaraSawa2 : MarineWeapon
{
	default
	{
		Inventory.PickupSound "Misc/W_PkUp";
		Inventory.PickupMessage "You got a \cv'Karasawa' High-Density Plasma Cannon\c-! \cx[Slot 6]\c-";
		Obituary "%o was fried by %k's Karasawa!";
		Tag "'Karasawa' High-Density Plasma Cannon";
		Weapon.AmmoType "Cell";
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Weapon.AmmoGive 32;
		Weapon.AmmoUse 8; // changed due to attunement perk
		Weapon.AmmoUse1 8; // changed due to attunement perk
		Weapon.AmmoUse2 8; // changed due to attunement perk
		Weapon.KickBack 0;
		+WEAPON.NOAUTOAIM;
	}
	
	states
	{
		Spawn:
			KSWP A -1;
			loop;
		Deselect:
			KSAW C 1 
			{
				A_DVDSLower(0,10023,3);
				A_DVDSLower(0,10024,7.5);
				A_DVDSLower(0,10027,6);
				A_DVDSLower(0,10028,15);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			loop;
		Select:
			KSAW C 1
			{
				A_DVDSRaise(0,10023,3);
				A_DVDSRaise(0,10024,7.5);
				A_DVDSRaise(0,10027,6);
				A_DVDSRaise(0,10028,15);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			loop;
		Ready:
			KSAW A 0 A_StartSound("Weapons/KarasawaIdle");
			KSAW ABCB 4 A_WeaponReady();
			loop;
		Fire:
			TNT1 A 0
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					if (CallACS("MiscVarCheckDECORATE",10027) >= 2) { return resolvestate("FireSuccess2"); }
					else if (CallACS("MiscVarCheckDECORATE",10027) == 1) { return resolvestate("FireSuccess1"); }
					else { return resolvestate("FireSuccess0"); }
					return resolvestate(null);
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10027) >= 2)
					{
						if (CountInv("Cell") >= 8) { return resolvestate("FireSuccess2"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					if (CallACS("MiscVarCheckDECORATE",10027) == 1)
					{
						if (CountInv("Cell") >= 12) { return resolvestate("FireSuccess1"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					{
						if (CountInv("Cell") >= 16) { return resolvestate("FireSuccess0"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
			}
		FireSuccess0:
			// 38 Tics
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
				A_SpreadAuraFireProjectile("KsawBoltPlayer",0,0,"",0,0,0,0);
			}
			KSAW D 1 Bright { if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",16,TIF_NOTAKEINFINITE); } }
			KSAW E 1;
			KSAW FGH 2 Bright A_Light2();
			KSAW I 0 A_StartSound("Weapons/KarasawaCharge",7,CHANF_DEFAULT,1);
			KSAW IA 4 A_Light1();
			KSAW JKLMN 4;
			KSAW A 0 A_Light0();
			KSAW N 6;
			Goto Ready;
		FireSuccess1:
			// 30 Tics [-8]
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
				A_SpreadAuraFireProjectile("KsawBoltPlayer",0,0,"",0,0,0,0);
			}
			KSAW D 1 Bright { if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",12,TIF_NOTAKEINFINITE); } }
			KSAW E 1;
			KSAW FGH 2 Bright A_Light2();
			KSAW I 0 A_StartSound("Weapons/KarasawaCharge",7,CHANF_DEFAULT,1);
			KSAW IA 3 A_Light1();
			KSAW JKLMN 3;
			KSAW A 0 A_Light0();
			KSAW N 5;
			Goto Ready;
		FireSuccess2:
			// 22 Tics [-16]
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
				A_SpreadAuraFireProjectile("KsawBoltPlayer",0,0,"",0,0,0,0);
			}
			KSAW D 1 Bright { if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",8,TIF_NOTAKEINFINITE); } }
			KSAW E 1;
			KSAW FGH 2 Bright A_Light2();
			KSAW I 0 A_StartSound("Weapons/KarasawaCharge",7,CHANF_DEFAULT,1);
			KSAW IA 2 A_Light1();
			KSAW JKLMN 2;
			KSAW A 0 A_Light0();
			KSAW N 4;
			Goto Ready;
		AltFire:
			TNT1 A 0
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					if (CallACS("MiscVarCheckDECORATE",10027) >= 2) { return resolvestate("AltFireSuccess2"); }
					else if (CallACS("MiscVarCheckDECORATE",10027) == 1) { return resolvestate("AltFireSuccess1"); }
					else { return resolvestate("AltFireSuccess0"); }
					return resolvestate(null);
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10027) >= 2)
					{
						if (CountInv("Cell") >= 40) { return resolvestate("AltFireSuccess2"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					if (CallACS("MiscVarCheckDECORATE",10027) == 1)
					{
						if (CountInv("Cell") >= 60) { return resolvestate("AltFireSuccess1"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					{
						if (CountInv("Cell") >= 80) { return resolvestate("AltFireSuccess0"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
			}
		AltFireSuccess0:
			// 38 Tics
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
				
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
			}
			KSAW D 1 Bright { if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",80,TIF_NOTAKEINFINITE); } }
			KSAW D 2 Bright;
			KSAW E 3;
			KSAW FGH 6 Bright A_Light2();
			KSAW I 0 A_StartSound("Weapons/KarasawaCharge",7,CHANF_DEFAULT,1);
			KSAW IA 12 A_Light1();
			KSAW JKLMN 12;
			KSAW A 0 A_Light0();
			KSAW N 18;
			Goto Ready;
		AltFireSuccess1:
			// 30 Tics [-8]
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);

				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
			}
			KSAW D 1 Bright { if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",60,TIF_NOTAKEINFINITE); } }
			KSAW E 2;
			KSAW E 3;
			KSAW FGH 6 Bright A_Light2();
			KSAW I 0 A_StartSound("Weapons/KarasawaCharge",7,CHANF_DEFAULT,1);
			KSAW IA 9 A_Light1();
			KSAW JKLMN 9;
			KSAW A 0 A_Light0();
			KSAW N 15;
			Goto Ready;
		AltFireSuccess2:
			// 22 Tics [-16]
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
				A_SpreadAuraFireProjectile("KsawBoltPlayer",0,0,"",0,0,0,0);
				
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
				A_SpreadAuraFireProjectile("KsawBoltPlayer",frandom(-(A_GetHitScanXSpread(9)*3),(A_GetHitScanXSpread(9)*3)),0,"",0,0,0,frandom(-(A_GetHitScanYSpread(9)*3),(A_GetHitScanYSpread(9)*3)));
			}
			KSAW D 1 Bright { if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",40,TIF_NOTAKEINFINITE); } }
			KSAW D 2;
			KSAW E 3;
			KSAW FGH 6 Bright A_Light2();
			KSAW I 0 A_StartSound("Weapons/KarasawaCharge",7,CHANF_DEFAULT,1);
			KSAW IA 6 A_Light1();
			KSAW JKLMN 6;
			KSAW A 0 A_Light0();
			KSAW N 12;
			Goto Ready;
	}
}

class Railgun2 : MarineWeapon
{
	default
	{
		Radius 20;
		Height 16;
		Weapon.Selectionorder 100;
		Weapon.AmmoUse 0;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Weapon.KickBack 0;
		Inventory.Pickupmessage "You got the railgun! \cx[Slot 6]\c-";
		Obituary "%o was railed by %k.";
		Decal "RailScorch";
		Tag "Railgun";
	}
	
	States
	{
		Ready:
			RLGG A 0 
			{
				A_StartSound("Railgun/IdlePulse",CHAN_BODY,CHANF_DEFAULT,(0.01*CountInv("RailgunCharge")));
			}
			RLGG AAAAAAAAAAAAAAAA 1 
			{
				if (CountInv("RailgunCharge") < 4 && CountInv("Cell") >= 5)
				{
					A_StartSound("baby/chargerailgun");
					A_GiveInventory("RailgunCharge",5);
					if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",5,TIF_NOTAKEINFINITE); }
					if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
				}
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Deselect:
			RLGG A 1 
			{
				A_ZoomFactor(1.0,ZOOM_INSTANT);

				A_DVDSLower(0,10023,3);
				A_DVDSLower(0,10024,7.5);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			RLGG A 1
			{
				if (CountInv("RailgunZoom") == 1) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("RailgunZoom") == 2) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("RailgunZoom") == 3) { A_ZoomFactor(8.0); A_Print("8x Zoom"); }
				else if (CountInv("RailgunZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("RailgunZoom",0); A_Print("No Zoom"); }

				A_DVDSRaise(0,10023,3);
				A_DVDSRaise(0,10024,7.5);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			Loop;

		AltFire:
			RLGG A 0
			{
				if (CountInv("Cell") < 5)
				{
					A_StartSound("inv_fail");
					return resolvestate("NoCharge");
				}
				else
				{
					if (CountInv("RailgunCharge") >= 100)
					{
						A_StartSound("inv_fail");
						return resolvestate("NoCharge");
					}
					else
					{
						A_StartSound("baby/chargerailgun");
						A_GiveInventory("RailgunCharge",5);
						if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",5,TIF_NOTAKEINFINITE); }
						if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			RLGG A 12
			{
				A_SetTics(random(12,13));
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(random(7,8)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(random(8,9)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(random(9,10)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(random(10,11)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(random(11,12)); }
			}
			goto Ready;

		Fire:
			RLGG E 0
			{
				if (CountInv("RailgunCharge") < 5 && CountInv("Cell") < 5)
				{
					A_StartSound("inv_fail");
					return resolvestate("NoCharge");
				}
				else
				{
					if (CountInv("RailgunCharge") <= 0)
					{
						A_StartSound("inv_fail");
						return resolvestate("NoCharge");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			RLGG E 12 
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(7); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(8); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(9); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(10); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(11); }
	
				A_GunFlash("Flash");
				if (CountInv("RailgunCharge") >= 25) { A_StartSound("weapons/railgf",5); }
				if (CountInv("RailgunCharge") >= 50) { A_StartSound("weapons/railgf",6); }
				if (CountInv("RailgunCharge") >= 75) { A_StartSound("weapons/railgf",7); }
				if (CountInv("RailgunCharge") >= 100) { A_StartSound("weapons/railgf",8); }

				double driftspeed = 1.0 + (0.005 * CountInv("RailgunCharge"));
				double sparsity = 1.0 + (0.01 * CountInv("RailgunCharge"));
				double pduration = 29.0 + (CountInv("RailgunCharge") * 1.25);
				
				CallACS("StartTensionCountDown");
				A_SpreadAuraRailAttack(A_GetPlayerAttackDamage(58,0),
															 ringcolor:"6165ff",
															 corecolor:"0005e0",
															 pufftype:"DBTRailPuff",
															 range:8192,
															 duration:pduration,
															 sparsity:sparsity,
															 driftspeed:driftspeed);
				A_SetInventory("RailgunCharge",0);
			}
			RLGG FGHIJKL 3 
			{
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(1); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(3); }
			}
			RLGG A 0
			{
				if (CountInv("Cell") >= 5)
				{
					if (CountInv("RailgunCharge") >= 100)
					{
						return resolvestate("NoCharge");
					}
					else
					{
						A_StartSound("baby/chargerailgun");
						A_GiveInventory("RailgunCharge",5);
						if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",5,TIF_NOTAKEINFINITE); }
						if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
						A_SetTics(random(12,13));
						if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(random(9,10)); }
						if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(random(9,11)); }
						if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(random(10,11)); }
						if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(random(10,12)); }
						if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(random(11,12)); }
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			RLGG A 0 A_ReFire();
			Goto Ready;
		NoCharge:
			RLGG A 12
			{
				A_SetTics(random(12,13));
				if (CallACS("MiscVarCheckDECORATE",10023) >= 5) { A_SetTics(random(9,10)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 4) { A_SetTics(random(9,11)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 3) { A_SetTics(random(10,11)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 2) { A_SetTics(random(10,12)); }
				if (CallACS("MiscVarCheckDECORATE",10023) >= 1) { A_SetTics(random(11,12)); }
			}
			goto Ready;
		Flash:
			TNT1 A 5 bright A_Light1();
			TNT1 A 5 bright A_Light2();
			TNT1 A 0 bright A_Light0();
			Goto LightDone;
		
		// Zoom :V
		User4:
			RLGG A 5
			{
				A_GiveInventory("RailgunZoom",1);
				if (CountInv("RailgunZoom") == 1) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("RailgunZoom") == 2) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("RailgunZoom") == 3) { A_ZoomFactor(8.0); A_Print("8x Zoom"); }
				else if (CountInv("RailgunZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("RailgunZoom",0); A_Print("No Zoom"); }
			}
			goto Ready;

		Spawn:
			RAIL A -1;
			Stop;
	}
}

class BFG90002 : MarineWeapon
{ 
	default
	{
		Height 20;
		Weapon.Kickback 100;
		Weapon.SelectionOrder 2800;
		Weapon.AmmoUse 40;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		+WEAPON.NOAUTOFIRE;
		Tag "$TAG_BFG9000";
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoType2 "Cell";
		Weapon.AmmoUse1 24; // 40
		Weapon.AmmoUse2 24;
		Inventory.PickupMessage "Picked up a \cvBFG9000\c-! \cx[Slot 7]\c-";
	}
	States
	{
		Spawn:
			BFUG A -1;
			Stop;
		Ready:
			BFGG A 1 A_WeaponReady();
			Loop;
		Deselect:
			BFGG A 1 
			{
				A_DVDSLower(0,10023,3);
				A_DVDSLower(0,10024,7.5);
				A_DVDSLower(0,10029,6);
				A_DVDSLower(0,10030,15);
				A_DVDSLower(0,10051,2);
				A_DVDSLower(0,10052,5);
				A_DVDSLower(18);
			}
			Loop;
		Select:
			BFGG A 1
			{
				A_DVDSRaise(0,10023,3);
				A_DVDSRaise(0,10024,7.5);
				A_DVDSRaise(0,10029,6);
				A_DVDSRaise(0,10030,15);
				A_DVDSRaise(0,10051,2);
				A_DVDSRaise(0,10052,5);
				A_DVDSRaise(18);
			}
			Loop;

		Fire:
			TNT1 A 0
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { return resolvestate("FireSuccess"); }
					else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { return resolvestate("FireSuccess"); }
					else { return resolvestate("FireSuccess"); }
					return resolvestate(null);
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10029) >= 2)
					{
						if (CountInv("Cell") >= 24) { return resolvestate("FireSuccess"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					if (CallACS("MiscVarCheckDECORATE",10029) == 1)
					{
						if (CountInv("Cell") >= 32) { return resolvestate("FireSuccess"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					{
						if (CountInv("Cell") >= 40) { return resolvestate("FireSuccess"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
			}
		FireSuccess:
			// 60/50/40 tics
			BFGG A 20 
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(14); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(17); }
				A_BFGSound();
			}
			BFGG B 10 
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(6); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(8); }
				A_GunFlash("Flash");
			}
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("BFGBallPlayer",0,0,"",0,0,0,0);
			}
			BFGG B 10 
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) 
				{
					A_SetTics(6); 
					if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",24,TIF_NOTAKEINFINITE); } 
				}
				else 
				if (CallACS("MiscVarCheckDECORATE",10029) == 1) 
				{
					A_SetTics(8); 
					if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",32,TIF_NOTAKEINFINITE); } 
				}
				else
				{
					if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",40,TIF_NOTAKEINFINITE); } 
				}
			}
			BFGG B 20 
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(14); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(17); }
				A_ReFire();
			}
			Goto Ready;

		Flash:
			// 17/14/11 tics
			BFGF A 11 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(7); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(9); }
				A_Light1();
			}
			BFGF B 6 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(4); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(5); }
				A_Light2();
			}
			Goto LightDone;

		AltFlash:
			// 49/40/41 tics
			BFGF A 32 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(20); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(26); }
				A_Light1();
			}
			BFGF B 17 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(11); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(14); }
				A_Light2();
			}
			Goto LightDone;

		AltFire:
			TNT1 A 0
			{
				if (A_WeaponCheckInfiniteAmmo())
				{
					if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { return resolvestate("AltFireSuccess"); }
					else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { return resolvestate("AltFireSuccess"); }
					else { return resolvestate("AltFireSuccess"); }
					return resolvestate(null);
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10029) >= 2)
					{
						if (CountInv("Cell") >= 24) { return resolvestate("AltFireSuccess"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					if (CallACS("MiscVarCheckDECORATE",10029) == 1)
					{
						if (CountInv("Cell") >= 32) { return resolvestate("AltFireSuccess"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					else
					{
						if (CountInv("Cell") >= 40) { return resolvestate("AltFireSuccess"); } else { return resolvestate("DeSelect"); }
						return resolvestate(null);
					}
					return resolvestate(null);
				}
			}
		AltFireSuccess:
			// 43/35/27 tics [2 firing]
			TNT1 A 0 A_JumpIf(GetCVar("dvds_BFG2704") == 0,"Ready");
			BFGG A 14 
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(8); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(11); }
				A_BFGSound();
			}
			BFGG B 7 
			{
				A_GunFlash("AltFlash");
				A_GiveInventory("BFG2704Array",(40 + (CallACS("MiscVarCheckDECORATE",10029) * randompick(4,4,4,4,4,4,6,6,6,6,8,8,10)) + (CallACS("MiscVarCheckDECORATE",10030) * randompick(12,12,12,12,12,12,18,18,18,18,24,24,30))));
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) 
				{
					A_SetTics(4); 
					if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",24,TIF_NOTAKEINFINITE); } 
				}
				else 
				if (CallACS("MiscVarCheckDECORATE",10029) == 1) 
				{
					A_SetTics(5); 
					if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",32,TIF_NOTAKEINFINITE); } 
				}
				else
				{
					if (A_WeaponCheckInfiniteAmmo()) { } else { A_TakeInventory("Cell",40,TIF_NOTAKEINFINITE); } 
				}
			}
			TNT1 A 0 ACS_NamedExecuteAlways("StartTensionCountDown");
		AltFireNormal:
			BFGG B 0 A_TakeInventory("BFG2704Array",1,0);
			BFGG B 1
			{
				A_SpreadAuraFireProjectile("PlasmaBall1Player",(random[OldBFG](-64, 64) * (90./768)),0,"",0,0,0,(random[OldBFG](-64, 64) * (90./640)));
				A_SpreadAuraFireProjectile("PlasmaBall2Player",(random[OldBFG](-64, 64) * (90./768)),0,"",0,0,0,(random[OldBFG](-64, 64) * (90./640)));
			}
			BFGG B 0 A_JumpIfInventory("BFG2704Array", 1, "AltFireNormal");
			goto AltFireEnd;
		AltFireEnd:
			BFGG B 0 A_Light0();
			BFGG B 20 
			{
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { A_SetTics(14); }
				else if (CallACS("MiscVarCheckDECORATE",10029) == 1) { A_SetTics(17); }
				A_ReFire();
			}
			Goto Ready;
	}
}
