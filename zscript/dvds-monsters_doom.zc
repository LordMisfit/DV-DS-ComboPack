class DSScriptedMarine : AetheriusMonsterZSC replaces ScriptedMarine
{
	const MARINE_PAIN_CHANCE = 160;

	enum EMarineWeapon
	{
		WEAPON_Dummy,
		WEAPON_Fist,
		WEAPON_BerserkFist,
		WEAPON_Chainsaw,
		WEAPON_Pistol,
		WEAPON_Shotgun,
		WEAPON_SuperShotgun,
		WEAPON_Chaingun,
		WEAPON_RocketLauncher,
		WEAPON_PlasmaRifle,
		WEAPON_Railgun,
		WEAPON_BFG
	};
	
	struct WeaponStates
	{
		state melee;
		state missile;
	}

	int CurrentWeapon;
	SpriteID SpriteOverride;
	
	default
	{
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance MARINE_PAIN_CHANCE;
		MONSTER;
		-COUNTKILL
		Translation 0;
		Damage 100;
		DeathSound "*death";
		PainSound "*pain50";
		Tag "UAC Marine Buddy";
		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana2", 24;
		dropitem "DoomSpellMana3", 24;
		dropitem "Chainsaw", 2;
		dropitem "DoubleBladedChainsaw", 2;
		dropitem "Pistol", 2;
		dropitem "Shotgun", 2;
		dropitem "SuperShotgun", 2;
		dropitem "Chaingun", 2;
		dropitem "Minigun", 2;
		dropitem "RocketLauncher", 2;
		dropitem "PlasmaRifle", 2;
		dropitem "Railgun2", 2;
		dropitem "Repeater2", 2;
		dropitem "KaraSawa2", 2;
		dropitem "BFG9000", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	States
	{
		Spawn:
			PLAY A 4 A_MarineLook;
			PLAY A 4 A_MarineNoise;
			Loop;
		Idle:
			PLAY A 4 A_MarineLook;
			PLAY A 4 A_MarineNoise;
			PLAY A 4 A_MarineLook;
			PLAY B 4 A_MarineNoise;
			PLAY B 4 A_MarineLook;
			PLAY B 4 A_MarineNoise;
			Loop;
		See:
			PLAY ABCD 4 A_MarineChase;
			Loop;

		Melee.Fist:		
			PLAY E 4 A_FaceTarget;
			PLAY E 4 A_M_Punch(1);
			PLAY A 9;
			PLAY A 0 A_M_Refire(1, "FistEnd");
			Loop;
		FistEnd:
			PLAY A 5 A_FaceTarget;
			Goto See;
		Melee.Berserk:
			PLAY E 2 A_FaceTarget;
			PLAY E 2 A_M_Punch(10);
			PLAY A 4
			{
				A_SetTics(random(4,5));
			}
			PLAY A 0 A_M_Refire(1, "FistEnd");
			Loop;
		Melee.Chainsaw:
			PLAY E 4 A_MarineNoise;
			PLAY E 4 A_M_Saw;
			PLAY E 0 A_M_SawRefire;
			goto Melee.Chainsaw+1;

		Missile:
		Missile.None:
			PLAY E 12 A_FaceTarget;
			Goto Idle;
			PLAY F 6 BRIGHT;
			Loop;
		Missile.Pistol:
			PLAY E 4 A_FaceTarget;
			PLAY F 6 BRIGHT A_M_FirePistol(1);
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "ShootEnd");
			Goto Fireloop.Pistol;
		ShootEnd:
			PLAY A 5;
			Goto See;
		Fireloop.Pistol:
			PLAY F 6 BRIGHT A_M_FirePistol(0);
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "ShootEnd");
			Goto Fireloop.Pistol;
		Missile.Shotgun:
			PLAY E 3 A_M_CheckAttack;
			PLAY F 7 BRIGHT A_M_FireShotgun;
			Goto See;
		Missile.SSG:
			PLAY E 3 A_M_CheckAttack;
			PLAY F 7 BRIGHT A_M_FireShotgun2;
			Goto See;
		Missile.Chaingun:
			PLAY E 4 A_FaceTarget;
			PLAY FF 4 BRIGHT A_M_FireCGun(1);
			PLAY FF 4 BRIGHT A_M_FireCGun(0);
			PLAY A 0 A_M_Refire(0, "See");
			Goto Missile.Chaingun+3;
		Missile.Rocket:
			PLAY E 8;
			PLAY F 6 BRIGHT A_M_FireMissile;
			PLAY E 6;
			PLAY A 0 A_M_Refire(0, "See");
			Loop;
		Missile.Plasma:
			PLAY E 2 A_FaceTarget;
			PLAY E 0 A_FaceTarget;
			PLAY F 3 BRIGHT A_M_FirePlasma;
			PLAY A 0 A_M_Refire(0, "See");
			Goto Missile.Plasma+1;
		Missile.Railgun:
			PLAY E 4 A_M_CheckAttack;
			PLAY F 6 BRIGHT A_M_FireRailgun;
			Goto See;
		Missile.BFG:
			PLAY E 5 A_M_BFGSound;
			PLAY EEEEE 5 A_FaceTarget;
			PLAY F 6 BRIGHT A_M_FireBFG;
			PLAY A 4 A_FaceTarget;
			PLAY A 0 A_M_Refire(0, "See");
			Loop;

		SkipAttack:
			PLAY A 1;
			Goto See;
		Pain:
			PLAY G 4;
			PLAY G 4 A_Pain;
			Goto Idle;
		Death:
			PLAY H 10;
			PLAY I 10 A_Scream;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			PLAY O 5;
			PLAY P 5 A_XScream;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		Raise:
			PLAY MLKJIH 5;
			Goto See;
	}
	
	
	//============================================================================
	//
	// 
	//
	//============================================================================

	private bool GetWeaponStates(int weap, out WeaponStates wstates)
	{
		static const statelabel MeleeNames[] = 
		{
			"Melee.None", "Melee.Fist", "Melee.Berserk", "Melee.Chainsaw", "Melee.Pistol", "Melee.Shotgun", 
			"Melee.SSG", "Melee.Chaingun", "Melee.Rocket", "Melee.Plasma", "Melee.Railgun", "Melee.BFG"
		};

		static const statelabel MissileNames[] = 
		{
			"Missile.None", "Missile.Fist", "Missile.Berserk", "Missile.Chainsaw", "Missile.Pistol", "Missile.Shotgun", 
			"Missile.SSG", "Missile.Chaingun", "Missile.Rocket", "Missile.Plasma", "Missile.Railgun", "Missile.BFG"
		};
		
		if (weap < WEAPON_Dummy || weap > WEAPON_BFG) weap = WEAPON_Dummy;

		wstates.melee = FindState(MeleeNames[weap], true);
		wstates.missile = FindState(MissileNames[weap], true);

		return wstates.melee != null || wstates.missile != null;
	}

	//============================================================================
	//
	// 
	//
	//============================================================================

	override void BeginPlay ()
	{
		Super.BeginPlay ();

		// Set the current weapon
		for(int i = WEAPON_Dummy; i <= WEAPON_BFG; i++)
		{
			WeaponStates wstates;
			if (GetWeaponStates(i, wstates))
			{
				if (wstates.melee == MeleeState && wstates.missile == MissileState)
				{
					CurrentWeapon = i;
				}
			}
		}
	}

	//============================================================================
	//
	// 
	//
	//============================================================================
	
	override void Tick ()
	{
		Super.Tick ();

		// Override the standard sprite, if desired
		if (SpriteOverride != 0 && sprite == SpawnState.sprite)
		{
			sprite = SpriteOverride;
		}

		if (special1 != 0)
		{
			if (CurrentWeapon == WEAPON_SuperShotgun)
			{ // Play SSG reload sounds
				int ticks = level.maptime - special1;
				if (ticks < 47)
				{
					switch (ticks)
					{
					case 14:
						A_StartSound ("weapons/sshoto", CHAN_WEAPON);
						break; 
					case 28:   
						A_StartSound ("weapons/sshotl", CHAN_WEAPON);
						break;
					case 41:  
						A_StartSound ("weapons/sshotc", CHAN_WEAPON);
						break;
					}
				}
				else
				{
					special1 = 0;
				}
			}
			else
			{ // Wait for a long refire time
				if (level.maptime >= special1)
				{
					special1 = 0;
				}
				else
				{
					bJustAttacked = true;
				}
			}
		}
	}

	//============================================================================
	//
	// A_M_Refire
	//
	//============================================================================

	void A_M_Refire (bool ignoremissile = false, statelabel jumpto = null)
	{
		if (target == null || target.health <= 0)
		{
			if (MissileState && random[SMarineRefire]() < 160)
			{ // Look for a new target most of the time
				if (LookForPlayers (true) && CheckMissileRange ())
				{ // Found somebody new and in range, so don't stop shooting
					return;
				}
			}
			if (jumpto != null) SetStateLabel (jumpto);
			else SetState(CurState + 1);
			return;
		}
		if (((ignoremissile || MissileState == null) && !CheckMeleeRange ()) ||
			!CheckSight (target) ||	random[SMarineRefire]() < 4)	// Small chance of stopping even when target not dead
		{
			if (jumpto != null) SetStateLabel (jumpto);
			else SetState(CurState + 1);
		}
	}

	//============================================================================
	//
	// A_M_SawRefire
	//
	//============================================================================

	void A_M_SawRefire ()
	{
		if (target == null || target.health <= 0 || !CheckMeleeRange ())
		{
			SetStateLabel ("See");
		}
	}

	//============================================================================
	//
	// A_MarineNoise
	//
	//============================================================================

	void A_MarineNoise ()
	{
		if (CurrentWeapon == WEAPON_Chainsaw)
		{
			A_StartSound ("weapons/sawidle", CHAN_WEAPON);
		}
	}

	//============================================================================
	//
	// A_MarineChase
	//
	//============================================================================

	void A_MarineChase ()
	{
		A_MarineNoise();
		A_Chase ();
	}

	//============================================================================
	//
	// A_MarineLook
	//
	//============================================================================

	void A_MarineLook ()
	{
		A_MarineNoise();
		A_Look();
	}

	//============================================================================
	//
	// A_M_Punch (also used in the rocket attack.)
	//
	//============================================================================

	void A_M_Punch(int damagemul)
	{
		FTranslatedLineTarget t;

		if (target == null)
			return;

		int damage = (random[SMarinePunch](1, 10) << 1) * damagemul;

		A_FaceTarget ();
		double ang = angle + random2[SMarinePunch]() * (5.625 / 256);
		double pitch = AimLineAttack (ang, DEFMELEERANGE);
		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'Melee', "BulletPuff", true, t);

		// turn to face target
		if (t.linetarget)
		{
			A_StartSound ("*fist", CHAN_WEAPON);
			angle = t.angleFromSource;
		}
	}

	//============================================================================
	//
	// P_GunShot2
	//
	//============================================================================

	private void GunShot2 (bool accurate, double pitch, class<Actor> pufftype)
	{
		int damage = 5 * random[SMarineGunshot](1,3);
		double ang = angle;

		if (!accurate)
		{
			ang += Random2[SMarineGunshot]() * (5.625 / 256);
		}

		LineAttack (ang, MISSILERANGE, pitch, damage, 'Hitscan', pufftype);
	}

	//============================================================================
	//
	// A_M_FirePistol
	//
	//============================================================================

	void A_M_FirePistol (bool accurate)
	{
		if (target == null)
			return;

		A_StartSound ("weapons/pistol", CHAN_WEAPON);
		A_FaceTarget ();
		GunShot2 (accurate, AimLineAttack (angle, MISSILERANGE), "BulletPuff");
	}

	//============================================================================
	//
	// A_M_FireShotgun
	//
	//============================================================================

	void A_M_FireShotgun ()
	{
		if (target == null)
			return;

		A_StartSound ("weapons/shotgf", CHAN_WEAPON);
		A_FaceTarget ();
		double pitch = AimLineAttack (angle, MISSILERANGE);
		for (int i = 0; i < 7; ++i)
		{
			GunShot2 (false, pitch, "BulletPuff");
		}
		special1 = level.maptime + 27;
	}

	//============================================================================
	//
	// A_M_CheckAttack
	//
	//============================================================================

	void A_M_CheckAttack ()
	{
		if (special1 != 0 || target == null)
		{
			SetStateLabel ("SkipAttack");
		}
		else
		{
			A_FaceTarget ();
		}
	}

	//============================================================================
	//
	// A_M_FireShotgun2
	//
	//============================================================================

	void A_M_FireShotgun2 ()
	{
		if (target == null)
			return;

		A_StartSound ("weapons/sshotf", CHAN_WEAPON);
		A_FaceTarget ();
		double pitch = AimLineAttack (angle, MISSILERANGE);
		for (int i = 0; i < 20; ++i)
		{
			int damage = 5*(random[SMarineFireSSG](1, 3));
			double ang = angle + Random2[SMarineFireSSG]() * (11.25 / 256);

			LineAttack (ang, MISSILERANGE, pitch + Random2[SMarineFireSSG]() * (7.097 / 256), damage, 'Hitscan', "BulletPuff");
		}
		special1 = level.maptime;
	}

	//============================================================================
	//
	// A_M_FireCGun
	//
	//============================================================================

	void A_M_FireCGun(bool accurate)
	{
		if (target == null)
			return;

		A_StartSound ("weapons/chngun", CHAN_WEAPON);
		A_FaceTarget ();
		GunShot2 (accurate, AimLineAttack (angle, MISSILERANGE), "BulletPuff");
	}

	//============================================================================
	//
	// A_M_FireMissile
	//
	// Giving a marine a rocket launcher is probably a bad idea unless you pump
	// up his health, because he's just as likely to kill himself as he is to
	// kill anything else with it.
	//
	//============================================================================

	void A_M_FireMissile ()
	{
		if (target == null)
			return;

		if (CheckMeleeRange ())
		{ // If too close, punch it
			A_M_Punch(1);
		}
		else
		{
			A_FaceTarget ();
			SpawnMissile (target, "Rocket");
		}
	}

	//============================================================================
	//
	// A_M_FireRailgun
	//
	//============================================================================

	void A_M_FireRailgun ()
	{
		if (target == null)
			return;

		A_MonsterRail();
		special1 = level.maptime + 50;
	}

	//============================================================================
	//
	// A_M_FirePlasma
	//
	//============================================================================

	void A_M_FirePlasma ()
	{
		if (target == null)
			return;

		A_FaceTarget ();
		SpawnMissile (target, "PlasmaBall");
		special1 = level.maptime + 20;
	}

	//============================================================================
	//
	// A_M_BFGsound
	//
	//============================================================================

	void A_M_BFGsound ()
	{
		if (target == null)
			return;

		if (special1 != 0)
		{
			SetState (SeeState);
		}
		else
		{
			A_FaceTarget ();
			A_StartSound ("weapons/bfgf", CHAN_WEAPON);
			// Don't interrupt the firing sequence
			PainChance = 0;
		}
	}

	//============================================================================
	//
	// A_M_FireBFG
	//
	//============================================================================

	void A_M_FireBFG ()
	{
		if (target == null)
			return;

		A_FaceTarget ();
		SpawnMissile (target, "BFGBall");
		special1 = level.maptime + 30;
		PainChance = MARINE_PAIN_CHANCE;
	}
		
	//---------------------------------------------------------------------------

	final void SetWeapon (int type)
	{
		WeaponStates wstates;
		if (GetWeaponStates(type, wstates))
		{
			static const class<Actor> classes[] = {
				"DSScriptedMarine",
				"DSMarineFist",
				"DSMarineBerserk",
				"DSMarineChainsaw",
				"DSMarinePistol",
				"DSMarineShotgun",
				"DSMarineSSG",
				"DSMarineChaingun",
				"DSMarineRocket",
				"DSMarinePlasma",
				"DSMarineRailgun",
				"DSMarineBFG"
			};
			
			MeleeState = wstates.melee;
			MissileState = wstates.missile;
			DecalGenerator = GetDefaultByType(classes[type]).DecalGenerator;
		}
	}

	final void SetSprite (class<Actor> source)
	{
		if (source == null)
		{ // A valid actor class wasn't passed, so use the standard sprite
			SpriteOverride = sprite = SpawnState.sprite;
			// Copy the standard scaling
			Scale = Default.Scale;
		}
		else
		{ // Use the same sprite and scaling the passed class spawns with
			readonly<Actor> def = GetDefaultByType (source);
			SpriteOverride = sprite = def.SpawnState.sprite;
			Scale = def.Scale;
		}
	}
}

class DSMarineFist : DSScriptedMarine replaces MarineFist
{
	States
	{
		Melee:		
			Goto Super::Melee.Fist;
		Missile:
			Stop;
	}
}

class DSMarineBerserk : DSMarineFist replaces MarineBerserk
{
	States
	{
		Melee:		
			Goto Super::Melee.Berserk;
		Missile:
			Stop;
	}
}

class DSMarineChainsaw : DSScriptedMarine replaces MarineChainsaw
{
	States
	{
		Melee:
			Goto Super::Melee.Chainsaw;
		Missile:
			Stop;
	}
}

class DSMarinePistol : DSScriptedMarine replaces MarinePistol
{
	States
	{
		Missile:
			Goto Super::Missile.Pistol;
	}
}

class DSMarineShotgun : DSScriptedMarine replaces MarineShotgun
{
	States
	{
		Missile:
			Goto Super::Missile.Shotgun;
	}
}

class DSMarineSSG : DSScriptedMarine replaces MarineSSG
{
	States
	{
		Missile:
			Goto Super::Missile.SSG;
	}
}

class DSMarineChaingun : DSScriptedMarine replaces MarineChaingun
{
	States
	{
		Missile:
			Goto Super::Missile.Chaingun;
	}
}

class DSMarineRocket : DSMarineFist replaces MarineRocket
{
	States
	{
		Missile:
			Goto Super::Missile.Rocket;
	}
}

class DSMarinePlasma : DSScriptedMarine replaces MarinePlasma
{
	States
	{
		Missile:
			Goto Super::Missile.Plasma;
	}
}

class DSMarineRailgun : DSScriptedMarine replaces MarineRailgun
{
	States
	{
		Missile:
			Goto Super::Missile.Railgun;
	}
}

class DSMarineBFG : DSScriptedMarine replaces MarineBFG
{
	States
	{
		Missile:
			Goto Super::Missile.BFG;
	}
}

// Zombieman Class
//
//                           / > KaraSawaGuy
// Zombieman ---> PlasmaGuy -------------------> RocketLauncherGuy
//                           \ > RepeaterZombie
//

// Rifle Trooper
class DSZombieman : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/Zombieman Type";
		Tag "Zombieman";

		Health 20;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 255; // Zombies = +33% Pain Chance [maxed out in this case]
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 255; // Zombies = +33% Pain Chance [maxed out in this case]
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;

		dropitem "DoomSpellMana", 16;
		dropitem "Clip";
		dropitem "Clip", 4;
		dropitem "Clip", 4;
		dropitem "ClipBox", 2, 50;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "Pistol2", 2;

		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o was pecked to death by a zombieman.";
	}

	states
	{
		Spawn:
			POSS AB 10 A_Look();
			loop;
		See:
			POSS A 0
			{
				user_shotsfired = 0;
			}
			POSS AABBCCDD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			POSS E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2;
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/20); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/40); }
				}

				A_FaceTarget();
				user_shotsfired = 0;
				user_shotaccuracy = 10.45; // 22.5;
				user_shotzaccuracy = 5.225; // 0.0;
				if (user_charmed) { user_shotaccuracy *= 0.667; user_shotzaccuracy *= 0.667; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				//A_GetAccuracySpreads();
			}
		Missile1:
			POSS F 8 bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				A_StartSound("grunt/attack");
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Tracer
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(1,5) * 3, "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
			}
			POSS E 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				user_shotsfired += 1;
				A_FaceTarget();
			}
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 1) 
				{
					user_shotsfiredmax = 2; 
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/20); }
				}
				else 
				{
					user_shotsfiredmax = 1;
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/40); }
				}
	
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			POSS G 3;
			POSS G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			POSS G 3;
			POSS G 3 A_DVDSPain();
			POSS GG 3;
			Goto See;
		Pain.Kick:
			POSS G 3;
			POSS G 3 A_DVDSPain();
			POSS GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			POSS H 5;
			POSS I 5 A_Scream();
			POSS J 5 A_NoBlocking();
			POSS K 5
			{
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (!CountInv("Pistol2",AAPTR_PLAYER1)) { A_DropItem("Pistol2",1,32); }
				}
			}
			POSS L -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			POSS M 5;
			POSS N 5 A_XScream();
			POSS O 5 A_NoBlocking();
			POSS P 5
			{
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (!CountInv("Pistol2",AAPTR_PLAYER1)) { A_DropItem("Pistol2",1,32); }
				}
			}
			POSS QRST 5;
			POSS U -1;
			Stop;
		Ice:
			#### # 0 
			{
				A_DVDSIceDeath(-2,0,1);
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (!CountInv("Pistol2",AAPTR_PLAYER1)) { A_DropItem("Pistol2",1,32); }
				}
			}
			POSS G 5 A_GenericFreezeDeath();
			POSS G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			POSS K 5;
			POSS JIH 5;
			goto See;
	}
}

// Plasma Specialist
class PlasmaGuy : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/Zombieman Type";
		Tag "Plasma Dude";

		dropitem "DoomSpellMana", 32;
		dropitem "DoomSpellMana", 8;
		DropItem "PlasmaRifle";
		DropItem "PlasmaRifle", 2;
		DropItem "PlasmaRifle", 2;
		DropItem "Cell", 4, 40;
		DropItem "Cell", 4, 40;
		DropItem "CellPack", 2, 100;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;

		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		MONSTER;
		+FLOORCLIP;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o got burned by a plasma-rifle zombie.";
		MissileType "PlasmaBallMonster";

		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 166; // Zombies = +33% Pain Chance [maxed out in this case]
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 166; // Zombies = +33% Pain Chance

		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 150; // Fist attacks have a +50% chance of stunning an enemy
		+AVOIDMELEE;
		+DOHARMSPECIES;
	}

	States
	{
		Spawn:
			ZMAY AB 10 A_Look();
			loop;
		See:
			ZMAY A 0
			{
				user_shotsfired = 0;
			}
			ZMAY AABBCCDD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0;
			ZMAY E 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }

				user_shotsfiredmax = random(5,10);
				if (levelbehavior) { user_shotsfiredmax += random((user_monsterlevel/20),(user_monsterlevel/10)); }

				user_shotsfired = 0;
				user_attacktype = 0;
				if (levelbehavior)
				{
					if (user_monsterlevel > 180) { user_attacktype = randompick(0,0,0,1,1,1,1,1); }
					else if (user_monsterlevel > 135) { user_attacktype = randompick(0,0,0,0,1,1,1,1); }
					else if (user_monsterlevel > 90) { user_attacktype = randompick(0,0,0,0,0,1,1,1); }
					else if (user_monsterlevel > 45) { user_attacktype = randompick(0,0,0,0,0,0,1,1); }
					else { user_attacktype = randompick(0,0,0,0,0,0,0,1); }
				}
				A_FaceTarget();
			}
		Missile1:
			ZMAY F 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_MonsterCrisisCheck(); // Single Shot / Multiple Projectiles [Shotgun Style]
				if (user_attacktype == 0) 
				{ 
					A_CrisisSpawnProjectile("PlasmaBallMonster","PlasmaBallCrisis",32.0,0.0,0.0); 
					user_shotsfired += 1;
				}
				if (user_attacktype == 1) 
				{ 
					for (A_SetInventory("PlasmaBurstLevel",0); CountInv("PlasmaBurstLevel") < random(3,5); A_GiveInventory("PlasmaBurstLevel",1))
					{
						A_CrisisSpawnProjectile("PlasmaBallMonster","PlasmaBallCrisis",32.0,0.0,(0.5*random(-30,30)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-30,30))); 
					}
					user_shotsfired += 1;
				}

				A_FaceTarget();
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				user_shotsfiredmax = random(5,10);
				if (levelbehavior) { user_shotsfiredmax += random((user_monsterlevel/20),(user_monsterlevel/10)); }

				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			ZMAY G 3;
			ZMAY G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			ZMAY G 3;
			ZMAY G 3 A_DVDSPain();
			ZMAY GG 3;
			Goto See;
		Pain.Kick:
			ZMAY G 3;
			ZMAY G 3 A_DVDSPain();
			ZMAY GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ZMAY H 5;
			ZMAY I 5 A_Scream();
			ZMAY J 5 A_Fall();
			ZMAY K 5;
			ZMAY L -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ZMAY O 5;
			ZMAY P 5 A_XScream();
			ZMAY Q 5 A_Fall();
			ZMAY RSTU 5;
			ZMAY V -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			ZMAY G 5 A_GenericFreezeDeath();
			ZMAY G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			ZMAY K 5;
			ZMAY JIH 5;
			Goto See;
	}
}

// Rocket Commando
class RocketLauncherGuy : AetheriusMonsterZSC
{ 
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/Zombieman Type";
		Tag "Rocketeer Zombie";

		health 80;
		radius 20;
		height 56;
		Mass 100;
		speed 8;

		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance [maxed out in this case]
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 226; // Zombies = +33% Pain Chance
		MONSTER;
		+FLOORCLIP;
		+AVOIDMELEE;
		+DOHARMSPECIES;
		seesound "shotguy/sight";
		attacksound "shotguy/attack";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		activesound "shotguy/active";
		obituary "%o was 'sploded by a rocket-launcher guy.";

		dropitem "DoomSpellMana", 32;
		dropitem "DoomSpellMana", 8;
		dropitem "RocketLauncher";
		dropitem "RocketLauncher", 2;
		dropitem "RocketLauncher", 2;
		dropItem "RocketAmmo", 4, 1;
		dropItem "RocketAmmo", 4, 1;
		dropItem "RocketBox", 2, 5;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States 
	{
		Spawn:
			MPO2 AB 10 A_Look();
			goto Spawn;
		See:
			MPO2 A 0
			{
				user_shotsfired = 0;
			}
			MPO2 AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0;
			MPO2 E 10 
			{
				user_ammotype = random(1,2);
			
				user_shotsfired = 0;
				user_attacktype = 0;
				if (levelbehavior)
				{
					if (user_monsterlevel > 180) { user_attacktype = randompick(0,0,0,1,1,1,1,1); }
					else if (user_monsterlevel > 135) { user_attacktype = randompick(0,0,0,0,1,1,1,1); }
					else if (user_monsterlevel > 90) { user_attacktype = randompick(0,0,0,0,0,1,1,1); }
					else if (user_monsterlevel > 45) { user_attacktype = randompick(0,0,0,0,0,0,1,1); }
					else { user_attacktype = randompick(0,0,0,0,0,0,0,1); }
				}
				if (random(1,8) == 8) 
				{
					user_shotsfiredmax = 2; 
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/25); }
					if (user_attacktype == 1) { user_shotsfiredmax *= random(3,5); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/50); }
					if (user_attacktype == 1) { user_shotsfiredmax *= random(3,5); }
				}

				if (user_attacktype == 1)
				{
					if (levelbehavior && user_monsterlevel > 200) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(3); }
					else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
					else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
					else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
					else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				}
				A_FaceTarget();
			}
		Missile1:
			MPO2 F 10 bright
			{
				if (user_attacktype == 1)
				{
					if (levelbehavior && user_monsterlevel > 200) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(3); }
					else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
					else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
					else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
					else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				}
	
				A_MonsterCrisisCheck(); // Single Projectile
				if (user_ammotype == 2) 
				{
					if (user_attacktype == 1) 
					{ 
						A_CrisisSpawnProjectile("STGrenadeMonster","STGrenadeCrisis",32.0,0.0,(0.5*random(-30,30)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-30,30))); 
					}
					else
					{
						A_CrisisSpawnProjectile("STGrenadeMonster","STGrenadeCrisis",32.0,0.0,0.0,CMF_OFFSETPITCH|CMF_BADPITCH,-9.4921875); 
					}
				}
				else 
				{ 
					if (user_attacktype == 1) 
					{ 
						A_CrisisSpawnProjectile("RocketMonster","RocketCrisis",32.0,0.0,(0.5*random(-15,15)),CMF_OFFSETPITCH|CMF_BADPITCH,(0.5*random(-15,15))); 
					}
					else
					{
						A_CrisisSpawnProjectile("RocketMonster","RocketCrisis"); 
					}
				}
	
				user_shotsfired += 1;
				A_FaceTarget();
			}
			MPO2 E 10 
			{
				if (user_attacktype == 1)
				{
					if (levelbehavior && user_monsterlevel > 200) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(3); }
					else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
					else { A_SetTics(3); }
				}
				else
				{
					if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
					else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
					else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
					else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				}
	
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax,"Decide1");
			loop;
		Decide1:
			TNT1 A 0 A_Jump(240,"See");
			TNT1 A 0 
			{
				if (random(1,8) == 8) 
				{
					user_shotsfiredmax = 2; 
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/25); }
				}
				else 
				{
					user_shotsfiredmax = 1; 
					if (levelbehavior) { user_shotsfiredmax += (user_monsterlevel/50); }
				}
				user_shotsfired = 0;
				A_FaceTarget();
			}
			goto Missile1;

		Pain:
			MPO2 G 3;
			MPO2 G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			MPO2 G 3;
			MPO2 G 3 A_DVDSPain();
			MPO2 GG 3;
			Goto See;
		Pain.Kick:
			MPO2 G 3;
			MPO2 G 3 A_DVDSPain();
			MPO2 GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MPO2 H 5;
			MPO2 I 5 A_Scream();
			MPO2 J 5;
			MPO2 K 5 A_Fall();
			MPO2 L -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MPO2 M 5;
			MPO2 N 5 A_XScream();
			MPO2 O 5;
			MPO2 P 5 A_Fall();
			MPO2 QRST 5;
			MPO2 U -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			MPO2 G 5 A_GenericFreezeDeath();
			MPO2 G 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			MPO2 K 5;
			MPO2 JIH 5;
			Goto See;
	}
}

// Repeater Ranger
class RepeaterZombie : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Zombieman Type"

		dropitem "DoomSpellMana", 16;
		DropItem "RepeaterChecker", 256;
		DropItem "RepeaterChecker", 4;
		DropItem "RepeaterChecker", 4;
		DropItem "RepeaterChecker", 4;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;

		Health 100;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		Monster;
		+AVOIDMELEE;
		+DOHARMSPECIES;
		+FLOORCLIP;
		SeeSound "Grunt/Sight";
		PainSound "Grunt/Pain";
		DeathSound "Grunt/Death";
		ActiveSound "Grunt/Active";
		Obituary "%o was vapourized by a Repeater Zombie";
		Decal "MummyScorch";
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 128; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 128; // Zombies = +33% Pain Chance
		PainChance 96;
		Painchance "Fist", 144; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 240; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 144; // Fist attacks have a +50% chance of stunning an enemy
		Tag "Repeater Guy";
	}
	
	States 
	{
		Spawn:
			RPZM A 0 A_JumpIfInventory("RepeaterZombieFiring", 1, "SpinDown");
			RPZM AAAAAAAAAABBBBBBBBBB 1 A_Look();
			loop;
		See:
			RPZM A 0;
			RPZM A 0 A_JumpIfInventory("RepeaterZombieFiring", 1, "SpinDown");
			RPZM AABBCCDD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0;
			TNT1 A 0 A_GiveInventory("RepeaterZombieFiring", 1);
			TNT1 A 0 A_StartSound("Weapons/RepeaterSpinUp",CHAN_7);
			RPZM EEFFEFEF 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_FaceTarget();
			}
		MissileLoop:
			RPZM G 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
	
				A_GiveInventory("RepeaterZombieHeat", 1);
				A_FaceTarget();
				A_StartSound("Weapons/RepeaterFire");
				A_MonsterCrisisCheck(); // Multiple Projectiles
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(20, 16, 2, random(1,3)*6, "RepeaterPuff", 0, 1);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieRepeaterTracer", "ZombieRepeaterTracerCrisis", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
					A_CrisisSpawnProjectile("ZombieRepeaterTracer", "ZombieRepeaterTracerCrisis", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
				}
			}
			RPZM G 0 A_JumpIfInventory("RepeaterZombieHeat", 100, "Overload");
			RPZM H 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				A_FaceTarget();
	
				A_StartSound("Weapons/RepeaterFire");
				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(20, 16, 2, random(1,3)*6, "RepeaterPuff", 0, 1);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieRepeaterTracer", "ZombieRepeaterTracerCrisis", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
					A_CrisisSpawnProjectile("ZombieRepeaterTracer", "ZombieRepeaterTracerCrisis", 32, 12, frandom(-10.0,10.0), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-8.0,8.0));
				}
				A_GiveInventory("RepeaterZombieHeat", 1);
			}
			RPZM E 2 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				A_FaceTarget();
			}
			RPZM E 0 A_Jump(220, 2);
			RPZM E 0 A_SpidRefire();
			RPZM E 0 A_JumpIfInventory("RepeaterZombieHeat", 100, "Overload");
			loop;

		SpinDown:
			RPZM E 0 A_StartSound("Weapons/RepeaterSpinDown",CHAN_7);
			RPZM E 0 A_TakeInventory("RepeaterZombieFiring", 1);
			RPZM E 0 A_TakeInventory("RepeaterZombieHeat", 100);
			RPZM EFEFEEFF 4
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_FaceTarget();
			}
			Goto See;
		Overload:
			RPZM E 0 A_StartSound("Weapons/RepeaterSpinDown",CHAN_7);
			RPZM E 0 A_StartSound("RepeaterZombie/Steam",CHAN_WEAPON);
			RPZM E 0 A_TakeInventory("RepeaterZombieFiring", 1);
			RPZM E 0 A_TakeInventory("RepeaterZombieHeat", 100);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEEFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEEFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEEFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			RPZM EEEEEFFFFFF 1 A_SpawnItemEx("RepeaterZombieSteam", -5, Random(12, 14), Random(31, 33), 4, 0, (0.1)*Random(-5, 5), Random(85, 90), 128);
			Goto See;

		Pain:
			RPZM I 0
			{
				A_StopSound(CHAN_7);
				if (CountInv("RepeaterZombieFiring") > 0) { A_StartSound("Weapons/RepeaterSpinDown",CHAN_7); }
				A_TakeInventory("RepeaterZombieFiring", 1);
				A_TakeInventory("RepeaterZombieHeat", 100);
			}
			RPZM I 3;
			RPZM I 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			RPZM I 0
			{
				A_StopSound(CHAN_7);
				if (CountInv("RepeaterZombieFiring") > 0) { A_StartSound("Weapons/RepeaterSpinDown",CHAN_7); }
				A_TakeInventory("RepeaterZombieFiring", 1);
				A_TakeInventory("RepeaterZombieHeat", 100);
			}
			RPZM I 3;
			RPZM I 3 A_DVDSPain();
			RPZM II 3;
			Goto See;
		Pain.Kick:
			RPZM I 0
			{
				A_StopSound(CHAN_7);
				if (CountInv("RepeaterZombieFiring") > 0) { A_StartSound("Weapons/RepeaterSpinDown",CHAN_7); }
				A_TakeInventory("RepeaterZombieFiring", 1);
				A_TakeInventory("RepeaterZombieHeat", 100);
			}
			RPZM I 3;
			RPZM I 3 A_DVDSPain();
			RPZM IIII 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			RPZM I 4 A_StopSound(CHAN_7);
			RPZM J 5;
			RPZM K 5 A_Scream();
			RPZM L 5 A_Fall();
			RPZM M 5;
			RPZM N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			RPZM O 5 A_StopSound(CHAN_7);
			RPZM P 5 A_XScream();
			RPZM Q 5;
			RPZM R 5 A_Fall();
			RPZM STUV 5;
			RPZM W -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			RPZM I 5 A_GenericFreezeDeath();
			RPZM I 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			RPZM N 5;
			RPZM MLKJI 5;
			Goto See;
	}
}

// Karasawa Specialist
class KarasawaGuy : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/Zombieman Type";
		Tag "'Sawa Man";

		dropitem "DoomSpellMana", 16;
		dropItem "KarasawaChecker";
		dropitem "KarasawaChecker", 4;
		dropitem "KarasawaChecker", 4;
		dropitem "KarasawaChecker", 4;
		dropitem "BlurSphere2", 2;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;

		Health 150;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		MONSTER;
		+FLOORCLIP;
		+AVOIDMELEE;
		SeeSound "grunt/sight";
		AttackSound "Weapons/KarasawaFire";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o got ripped apart by a Karasawa zombie.";

		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 93; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 93; // Zombies = +33% Pain Chance [maxed out in this case]

		PainChance 70;
		Painchance "Fist", 105; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 175; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 105; // Fist attacks have a +50% chance of stunning an enemy
	}

	States
	{
		Spawn:
			KSWZ AB 10 A_Look();
			loop;
		See:
			KSWZ A 0;
			KSWZ AABBCCDD 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
				
				user_pulseinterval += 1;
				if (user_pulseinterval >= 4)
				{
					A_StartSound("Weapons/KarasawaIdle",0,1.0);
					user_pulseinterval = 0;
				}
			}
			Loop;

		Missile:
			TNT1 A 0;
			KSWZ E 0
			{
				A_FaceTarget();
				user_shotangle = 0;
				if (random(1,2) == 1)
				{
					user_shotangle = 0;
				}
				else
				{
					if (Distance3D(target) <= 512)
					{
						if (random(1,4) == 1)
						{
							user_shotangle = 0;
						}
						else
						{
							if (random(1,2) == 1) { user_shotangle = -8; } else { user_shotangle = 8; }
						}
					}
				}
			}
			KSWZ E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
			}
			KSWZ F 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("KsawBolt", "KsawBoltCrisis", 32, 1, user_shotangle, 0);
			}
			KSWZ E 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
			}
			KSWZ E 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_StartSound("Weapons/KarasawaCharge");
			}
			KSWZ AABBCCDD 4
			{
				if (levelbehavior && user_monsterlevel > 120) { bAVOIDMELEE = true; A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				A_DVDSWander(0,1,3,1,1);
			}
			Goto See;

		Pain:
			KSWZ G 3;
			KSWZ G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			KSWZ G 3;
			KSWZ G 3 A_DVDSPain();
			KSWZ GG 3;
			Goto See;
		Pain.Kick:
			KSWZ G 3;
			KSWZ G 3 A_DVDSPain();
			KSWZ GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			KSWZ H 5;
			KSWZ I 5 A_Scream();
			KSWZ J 5 A_Fall();
			KSWZ K 5;
			KSWZ L 5;
			KSWZ M 5;
			KSWZ N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			KSWZ O 5;
			KSWZ P 5 A_XScream();
			KSWZ Q 5 A_Fall();
			KSWZ RSTUV 5;
			KSWZ W -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			KSWZ G 5 A_GenericFreezeDeath();
			KSWZ G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			KSWZ N 5;
			KSWZ MLKJIH 5;
			Goto See;
	}
}

// Shotgun Guy Class
//
//
// ShotgunGuy ---> SuperShotgunGuy ---> FemaleRailZombie
//
//

// Shotgun Sargeant
class DSShotgunGuy : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/ShotgunGuy Type";
		Tag "Shotgun Guy";

		Health 30;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 226; // Zombies = +33% Pain Chance

		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;

		SeeSound "shotguy/sight";
		AttackSound "shotguy/attack";
		PainSound "shotguy/pain";
		DeathSound "shotguy/death";
		ActiveSound "shotguy/active";
		Obituary "$OB_SHOTGUY";

		dropitem "DoomSpellMana", 16;
		dropitem "Shotgun";
		dropitem "Shotgun", 4;
		dropitem "Shotgun", 4;
		dropitem "ShellBox", 2, 10;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			SPOS AB 10 A_Look();
			loop;
		See:
			SPOS A 0;
			SPOS AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			SPOS E 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			SPOS F 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
				A_StartSound("shotguy/attack");
				if (GetCVar("dvds_shotgunnerspread") == 0) { user_pelletsfired = 3; } else { user_pelletsfired = 7; }
	
				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0) // Hitscan
				{
					A_CustomBulletAttack(22.4, 5.68, user_pelletsfired, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_currenttracer = 0; user_currenttracer < user_pelletsfired; user_currenttracer++)
					{
						A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(-11.2,11.2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-2.84,2.84));
					}
				}
			}
			SPOS E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
			}
			goto See;

		Pain:
			SPOS G 3;
			SPOS G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			SPOS G 3;
			SPOS G 3 A_DVDSPain();
			SPOS GG 3;
			Goto See;
		Pain.Kick:
			SPOS G 3;
			SPOS G 3 A_DVDSPain();
			SPOS GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SPOS H 5;
			SPOS I 5 A_Scream();
			SPOS J 5 A_NoBlocking();
			SPOS K 5;
			SPOS L -1;
			stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SPOS M 5;
			SPOS N 5 A_XScream();
			SPOS O 5 A_NoBlocking();
			SPOS PQRST 5;
			SPOS U -1;
			stop;
		Ice:
			SPOS G 0 A_DVDSIceDeath(-2,0,1);
			SPOS G 5 A_GenericFreezeDeath();
			SPOS G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			SPOS L 5;
			SPOS KJIH 5;
			goto See;
	}
}

// Super Shotgun Sargeant
class SuperShotgunGuy : AetheriusMonsterZSC 
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/ShotgunGuy Type";
		Tag "SuperShotgun Guy";
		Health 120;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 9;
		Translation "112:127=16:47";
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "weapons/sshotf"; // "ssgguy/attack";
		MONSTER;
		+FLOORCLIP;
		Obituary "%o was jacked by a super shotgun guy.";
		dropitem "DoomSpellMana", 16;
		DropItem "SuperShotgun";
		dropitem "SuperShotgun", 4;
		dropitem "SuperShotgun", 4;
		dropitem "ShellBox", 2, 10;
		dropitem "ShellBox", 2, 10;
		dropitem "ShellBox", 2, 10;
		dropitem "ShellBox", 2, 10;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;

		+AVOIDMELEE;
		+DOHARMSPECIES;

		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 207; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 207; // Zombies = +33% Pain Chance

		Painchance 155;
		Painchance "Fist", 233; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 233; // Fist attacks have a +50% chance of stunning an enemy
	}
	
	States
	{
		Spawn:
			GPOS AB 10 A_Look();
			loop;
		See:
			GPOS A 0;
			GPOS AABBCCDD 4
			{
				if (levelbehavior && user_monsterlevel > 20) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			GPOS E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			GPOS F 8 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				A_StartSound("weapons/sshotf");
				if (GetCVar("dvds_shotgunnerspread") == 0) { user_pelletsfired = 7; } else { user_pelletsfired = 20; }

				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0) // Hitscan
				{
					A_CustomBulletAttack(44.8, 28.4, user_pelletsfired, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_currenttracer = 0; user_currenttracer < user_pelletsfired; user_currenttracer++)
					{
						A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(-22.4,22.4), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(-14.2,14.2));
					}
				}
			}
			GPOS E 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			Goto See;

		Pain:
			GPOS G 3;
			GPOS G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			GPOS G 3;
			GPOS G 3 A_DVDSPain();
			GPOS GG 3;
			Goto See;
		Pain.Kick:
			GPOS G 3;
			GPOS G 3 A_DVDSPain();
			GPOS GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			GPOS H 5;
			GPOS I 5 A_Scream();
			GPOS J 5 A_NoBlocking();
			GPOS KLM 5;
			GPOS N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			GPOS O 5;
			GPOS P 5 A_XScream();
			GPOS Q 5 A_NoBlocking();
			GPOS RS 5;
			GPOS T -1;
			Stop;
		Ice:
			GPOS G 0 A_DVDSIceDeath(-2,0,1);
			GPOS G 5 A_GenericFreezeDeath();
			GPOS G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			GPOS L 5;
			GPOS KJIH 5;
			Goto See;
	}
}

// Railgunner Captain
class FemaleRailZombie : AetheriusMonsterZSC 
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/ShotgunGuy Type";
		Tag "Railgunner Captain";

		Health 160; // 40 
		Radius 14; // 20 
		Height 52; // 56
		Speed 11; // 10
		Mass 100;
		Damage 10;
		Scale 0.975; // 0.9
		MONSTER;
		+FLOORCLIP;
		Obituary "%o was spiked by a Railgunner Captain!";
		seesound "fem/sight";
		painsound "fem/pain";
		deathsound "fem/death";
		activesound "fem/active";
		Decal "RedRailScorch";
		MaxTargetRange 8192;
	 
		PainChance 150;
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 207; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 207; // Zombies = +33% Pain Chance

		Painchance "Fist", 225; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 225; // Fist attacks have a +50% chance of stunning an enemy

		dropitem "DoomSpellMana", 16;
		DropItem "RailgunChecker", 256;
		DropItem "RailgunChecker", 4;
		DropItem "RailgunChecker", 4;
		DropItem "RailgunChecker", 4;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 10, 20;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	States 
	{
		Spawn: 
			RZOW A 0 NoDelay A_SetInventory("RailgunCharge",5);
			RZOW AB 10 A_Look();
			goto Spawn+1;
		See: 
			RZOW AABBCCDD 4 
			{
				if (levelbehavior && user_monsterlevel > 20) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);

				// Randomly Charges Railgun while roaming...
				user_chargeinterval += 1;
				if (user_chargeinterval >= 4)
				{
					if (random(1,100) <= (2 + (user_monsterlevel/10)) - (CountInv("RailgunCharge")/10))
					{
						if (CountInv("RailgunCharge") < (dvds_railcaptainmaxcharge*5))
						{
							A_StartSound("baby/chargerailgun");
							A_GiveInventory("RailgunCharge",5);
						}
					}
					user_chargeinterval = 0;
				}
				if (CountInv("RailgunCharge") >= (dvds_railcaptainmaxcharge*5)) { A_SetInventory("RailgunCharge",(dvds_railcaptainmaxcharge*5)); }
				
				// Charge Pulse
				user_pulseinterval += 1;
				if (user_pulseinterval >= 4)
				{
					A_StartSound("Railgun/IdlePulse",CHAN_WEAPON,CHANF_DEFAULT,(0.01*CountInv("RailgunCharge")));
					user_pulseinterval = 0;
				}
			}
			loop;

		Missile: 
			RZOW E 0
			{
				if (CountInv("RailgunCharge") < 5) { return resolvestate("See"); }
				return resolvestate(null);
			}
			RZOW E 7
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(6); }

				A_FaceTarget();
			}
			RZOW F 5
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }
				user_randominaccuracy = 15.0 - (user_monsterlevel/20);
				user_randominaccuracy2 = user_randominaccuracy * 0.2;
				if (user_randominaccuracy <= 3.0) { user_randominaccuracy = 3.0; }
				if (user_randominaccuracy2 <= 0.6) { user_randominaccuracy2 = 0.6; }
				A_FaceTarget();
			
				if (CountInv("RailgunCharge") >= 25) { A_StartSound("weapons/railgf",3); }
				if (CountInv("RailgunCharge") >= 50) { A_StartSound("weapons/railgf",4); }
				if (CountInv("RailgunCharge") >= 75) { A_StartSound("weapons/railgf",5); }
				if (CountInv("RailgunCharge") >= 100) { A_StartSound("weapons/railgf",8); }

				double driftspeed = 1.0 + (0.005 * CountInv("RailgunCharge"));
				double sparsity = 1.0 + (0.01 * CountInv("RailgunCharge"));
				double pduration = 29.0 + (CountInv("RailgunCharge") * 1.25);

				A_MonsterCrisisCheck();
				A_CrisisRailgun(A_EnemyRailgunDamage(random(1,3)*10), 0, "ac1819", "FF6C00", 0, 1, 0, "DBTRailPuff", user_randominaccuracy, 0, 8192, pduration, sparsity, driftspeed, "None", 0, 270, 0, 0.0);
				A_SetInventory("RailgunCharge",0);
			}
			RZOW EEE 6
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 200) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(5); }
	
				A_FaceTarget();
			}
			RZOW E 3
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(2); }
	
				if (CountInv("RailgunCharge") < 100)
				{
					A_StartSound("baby/chargerailgun");
					A_GiveInventory("RailgunCharge",5);
					if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
				}
				A_FaceTarget();
			}
			RZOW E 5
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }
	
				A_FaceTarget();
			}
			RZOW E 0
			{
				if (random(1,256) <= 64) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			goto See;
		Pain: 
			RZOW G 5;
			RZOW G 3 A_DVDSPain();
			Goto PainEnd;
		Pain.Fist:
			RZOW G 5;
			RZOW G 3 A_DVDSPain();
			RZOW GG 3;
			Goto PainEnd;
		Pain.Kick:
			RZOW G 5;
			RZOW G 3 A_DVDSPain();
			RZOW GGGG 3;
			Goto PainEnd;
		PainEnd:
			RZOW G 0
			{
				if (CountInv("RailgunCharge") < 4)
				{
					A_StartSound("baby/chargerailgun");
					A_GiveInventory("RailgunCharge",5);
					if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
				}
				else
				{
					if (random(1,100) <= (10+(user_monsterlevel/2)) )
					{
						if (CountInv("RailgunCharge") < 100)
						{
							A_StartSound("baby/chargerailgun");
							A_GiveInventory("RailgunCharge",5);
							if (CountInv("RailgunCharge") >= 100) { A_SetInventory("RailgunCharge",100); }
						}
					}
				}
			}
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			RZOW H 5;
			RZOW I 5 A_Scream();
			RZOW J 5 A_Fall();
			RZOW K 5;
			RZOW L 5;
			RZOW M 5;
			RZOW N -1;
			Stop;
		XDeath: 
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			RZOW O 5;
			RZOW P 5 A_XScream();
			RZOW Q 5 A_Fall();
			RZOW RSTUV 5;
			RZOW W -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			RZOW G 5 A_GenericFreezeDeath();
			RZOW G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			RZOW M 5;
			RZOW LKJIH 5;
			Goto See;
	}
}

// SS Nazi
class DSWolfensteinSS : AetheriusMonsterZSC replaces WolfensteinSS
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/Others";
		Tag "SS Nazi";
		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 100;
		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 226; // Zombies = +33% Pain Chance
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "wolfss/sight";
		PainSound "nazi/pain";
		DeathSound "wolfss/death";
		ActiveSound "wolfss/active";
		AttackSound "wolfss/attack";
		Obituary "$OB_WOLFSS";
		
		dropitem "DoomSpellMana", 16;
		dropitem "Clip";
		dropitem "Clip", 4;
		dropitem "Clip", 4;
		dropitem "ClipBox", 2, 50;
		dropitem "ClipBox", 2, 50;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			SSWV AB 10 A_Look();
			loop;
		See:
			SSWV A 0;
			SSWV AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0;
			SSWV E 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			SSWV F 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
		MissileLoop:
			SSWV G 4 bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
	
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(22.4, 0, 1, random(1,5)*3, "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(-11.2,11.2));
				}
			}
			SSWV F 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			SSWV G 4 bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
	
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(22.4, 0, 1, random(1,5)*3, "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(-11.2,11.2));
				}
			}
			SSWV F 1 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(0); }
				A_CPosRefire();
			}
			loop;

		Pain:
			SSWV H 3;
			SSWV H 3 A_StartSound("nazi/pain");
			Goto See;
		Pain.Fist:
			SSWV H 3;
			SSWV H 3 A_StartSound("nazi/pain");
			SSWV HH 3;
			Goto See;
		Pain.Kick:
			SSWV H 3;
			SSWV H 3 A_StartSound("nazi/pain");
			SSWV HHHH 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SSWV I 5;
			SSWV J 5 A_Scream();
			SSWV K 5 A_NoBlocking();
			SSWV L 5;
			TNT1 A 0;
			SSWV M -1;
			stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SSWV N 5;
			SSWV O 5 A_XScream();
			SSWV P 5 A_NoBlocking();
			SSWV QRSTU 5;
			TNT1 A 0;
			SSWV V -1;
			stop;
		Ice:
			SSWV H 0 A_DVDSIceDeath(-2,0,1);
			SSWV H 5 A_GenericFreezeDeath();
			SSWV H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			SSWV M 5;
			SSWV LKJI 5;
			goto See;
	}
}

// Chaingun Commando
class DSChaingunGuy : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/ChaingunGuy Type";
		Tag "Chaingun Guy";

		Health 70;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 226; // Zombies = +33% Pain Chance

		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "chainguy/attack";
		Obituary "$OB_CHAINGUY";

		dropitem "DoomSpellMana", 16;
		dropitem "Chaingun";
		dropitem "Chaingun", 4, 10;
		dropitem "Chaingun", 4, 10;
		dropitem "ClipBox", 2, 50;
		dropitem "ClipBox", 2, 50;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			CPOS AB 10 A_Look();
			loop;
		See:
			CPOS A 0
			{
				user_shotsfired = 0;
			}
			CPOS AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (levelbehavior) { user_shotsfiredmax += random((25 + (user_monsterlevel / 8)),(50 + (user_monsterlevel / 4))); }
					else { user_shotsfiredmax = random(25,50); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			CPOS E 10
			{
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 5.625; // 0.0;
				if (user_charmed) { user_shotaccuracy *= 0.667; user_shotzaccuracy *= 0.667; }
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			CPOS FE 4 bright
			{
				A_CheckIfTargetDead("See");

				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(1,5)*3, "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			CPOS F 1 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(0); }
			}
			CPOS F 0 A_MonsterRefire(40,"See"); // A_CPosRefire();
			loop;

		MissileEnd:
			TNT1 A 0 
			{
				user_shotsfired = 0;
			}
			CPOS F 0 A_FaceTarget();
			Goto See;

		Pain:
			CPOS G 3;
			CPOS G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			CPOS G 3;
			CPOS G 3 A_DVDSPain();
			CPOS GG 3;
			Goto See;
		Pain.Kick:
			CPOS G 3;
			CPOS G 3 A_DVDSPain();
			CPOS GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CPOS H 5;
			CPOS I 5 A_Scream();
			CPOS J 5 A_NoBlocking();
			CPOS KLM 5;
			TNT1 A 0;
			CPOS N -1;
			stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CPOS O 5;
			CPOS P 5 A_XScream();
			CPOS Q 5 A_NoBlocking();
			CPOS RS 5;
			TNT1 A 0;
			CPOS T -1;
			stop;
		Ice:
			CPOS G 0 A_DVDSIceDeath(-2,0,1);
			CPOS G 5 A_GenericFreezeDeath();
			CPOS G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CPOS N 5;
			CPOS MLKJIH 5;
			goto See;
	}
}

// Mingunner Corporal
class Minigunner : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/ChaingunGuy Type";
		Tag "Minigun Zombie";
		
		Health 105; // 70
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 170;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 226; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 226; // Zombies = +33% Pain Chance
		Monster;
		+FLOORCLIP;
		+DOHARMSPECIES;
		SeeSound "grunt/sight";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		AttackSound "weapons/minigunfire";
		Obituary "%o was shredded by a minigun zombie.";
		dropitem "DoomSpellMana", 16;
		DropItem "MinigunChecker";
		DropItem "MinigunChecker", 4, 10;
		DropItem "MinigunChecker", 4, 10;
		DropItem "Clip";
		DropItem "Clip", 64;
		DropItem "Clip", 16;
		DropItem "Clip", 4;
		DropItem "Clip", 1;
		dropitem "ClipBox", 2, 50;
		dropitem "ClipBox", 2, 50;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States
	{
		Spawn:
			MINZ AB 10 A_Look();
			loop;
		See:
			MINZ A 0
			{
				user_shotsfired = 0;
			}
			MINZ AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("MinigunCooldown")))
				{
					if (levelbehavior) { user_shotsfiredmax += random((40 + (user_monsterlevel / 5)),(100 + (user_monsterlevel / 2))); }
					else { user_shotsfiredmax = random(40,100); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			MINZ E 10
			{
				user_shotaccuracy = 35.5; // 30.0;
				user_shotzaccuracy = 14.2; // 2.0;
				if (user_charmed) { user_shotaccuracy *= 0.667; user_shotzaccuracy *= 0.667; }
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 4 / 9; }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 5 / 9; }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
		MissileLoop:
			MINZ FE 2
			{
				A_CheckIfTargetDead("See");

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(1); }
				A_FaceTarget();
	
				A_StartSound("weapons/minigunfire", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(2,4)*random(6,7), "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0
			{
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("MinigunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			MINZ F 0 A_MonsterRefire(40,"See"); // A_CPosRefire
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			MINZ F 0 A_FaceTarget();
			Goto See;

		Pain:
			MINZ G 3;
			MINZ G 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			MINZ G 3;
			MINZ G 3 A_DVDSPain();
			MINZ GG 3;
			Goto See;
		Pain.Kick:
			MINZ G 3;
			MINZ G 3 A_DVDSPain();
			MINZ GGGG 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MINZ H 6;
			MINZ I 6 A_Scream();
			MINZ J 6 A_Fall();
			MINZ KLM 6;
			MINZ N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			MINZ O 4;
			MINZ P 4 A_XScream();
			MINZ Q 4 A_Fall();
			MINZ RSTUV 4;
			MINZ W -1;
			Stop;
		Raise:
			MINZ N 5;
			MINZ MLKJIH 5;
			Goto See;
	}
}

// BFG General
class BFGGuy : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/ChaingunGuy Type";
		Tag "BFG Commando";
		
		health 200;
		radius 20;
		height 56;
		Mass 100;
		speed 8;
		Painchance 125;
		Painchance "Fist", 188; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 188; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Fire", 1.333; // Zombies = +33% Fire Damage
		Painchance "Fire", 167; // Zombies = +33% Pain Chance
		DamageFactor "Holy", 1.333; // Zombies = +33% Holy Damage
		Painchance "Holy", 167; // Zombies = +33% Pain Chance
		MONSTER;
		+FLOORCLIP;
		+AVOIDMELEE;
		missiletype "BFGBallMonster";
		seesound "chainguy/sight";
		painsound "chainguy/pain";
		deathsound "chainguy/death";
		activesound "chainguy/active";
		obituary "%o was vapourized by a zombie's BFG9000.";
		dropitem "DoomSpellMana", 32;
		dropitem "BFG9000";
		dropitem "BFG9000", 4, 10;
		dropitem "BFG9000", 4, 10;
		dropitem "CellPack", 2, 50;
		dropitem "CellPack", 2, 50;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			BFGZ AB 10 A_Look();
			loop;
		See:
			BFGZ A 0;
			BFGZ AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0;
			TNT1 A 0 A_JumpIf(GetCVar("dvds_BFG2704") == 0,"MissileBFG9000");
			TNT1 A 0 A_Jump(256,"MissileBFG9000","MissileBFG2704");
			goto See;
		MissileBFG9000:
			BFGZ E 20
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }
				A_StartSound("weapons/bfgf");
			}
			BFGZ F 10 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
			}
			BFGZ F 10 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis");
			}
			BFGZ E 20
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }
			}
			goto See;

		MissileBFG2704:
			BFGZ E 0 A_FaceTarget();
			BFGZ E 18
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 210) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(17); }
				A_FaceTarget();
				A_StartSound("weapons/bfgf");
			}
			BFGZ F 9 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(8); }
				A_FaceTarget();
			}
			BFGZ F 0  
			{
				user_shotsfired = 0;
			}
		MissileBFG2704Shoot:
			BFGZ F 1 Bright
			{
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("PlasmaBall1Monster","PlasmaBall1Crisis",32,0,random(-10,10),CMF_OFFSETPITCH|CMF_BADPITCH,random(-10,10));
			}
			BFGZ F 1 Bright
			{
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("PlasmaBall2Monster","PlasmaBall2Crisis",32,0,random(-10,10),CMF_OFFSETPITCH|CMF_BADPITCH,random(-10,10));
			}
			BFGZ F 0 
			{
				user_shotsfired += 1;
			}
			BFGZ F 0 A_JumpIf(user_shotsfired==20,"MissileBFG2704End");
			Loop;
		MissileBFG2704End:
			BFGZ E 18
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 210) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(17); }
			}
			goto See;

		Pain:
			BFGZ G 3;
			BFGZ G 3 A_DVDSPain();
			goto See;
		Pain.Fist:
			BFGZ G 3;
			BFGZ G 3 A_DVDSPain();
			BFGZ GG 3;
			goto See;
		Pain.Kick:
			BFGZ G 3;
			BFGZ G 3 A_DVDSPain();
			BFGZ GGGG 3;
			goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BFGZ H 5;
			BFGZ I 5 A_Scream();
			BFGZ J 5 A_NoBlocking();
			BFGZ KLM 5;
			TNT1 A 0;
			BFGZ N -1;
			stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BFGZ O 5;
			BFGZ P 5 A_XScream();
			BFGZ Q 5 A_NoBlocking();
			BFGZ RS 5;
			TNT1 A 0;
			BFGZ T -1;
			stop;
		Ice:
			BFGZ G 0 A_DVDSIceDeath(-2,0,1);
			BFGZ G 5 A_GenericFreezeDeath();
			BFGZ G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BFGZ N 5;
			BFGZ MLKJIH 5;
			goto See;
	}
}

// Suicide Bomber
class SuicideBomber : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Others"
		Tag "Suicide Bomber";
		
		health 80;
		radius 20;
		height 56;
		Mass 100;
		speed 16;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.0;

		MONSTER;
		+FLOORCLIP;
		+JUMPDOWN;
		+NOFEAR;
		-NOTARGET;
		-NOTARGETSWITCH;
		-NEVERTARGET;
		-NOINFIGHTING;
		seesound "suicide/sit";
		attacksound "shotguy/death";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		obituary "%o was exploded by a crazy suicide bomber.";
		DamageType "Explosive";

		dropitem "DoomSpellMana", 32;
		dropitem "DoomSpellMana", 8;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	states
	{
		Spawn:
			BMBE A 0 NoDelay;
			BMBE AB 10 A_Look();
			goto Spawn+1;
		See:
			BMBE A 0;
			BMBE AAABBBCCCDDD 2
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			BMBE A 0 A_StartSound("suicide/scream");
			loop;

		Melee:
			TNT1 A 0 A_Die();
			Goto Death;

		Pain:
			BMBE A 3;
			BMBE A 3 A_DVDSPain();
			goto See;
		Pain.Fist:
			BMBE A 3;
			BMBE A 3 A_DVDSPain();
			BMBE AA 3;
			goto See;
		Pain.Kick:
			BMBE A 3;
			BMBE A 3 A_DVDSPain();
			BMBE AAAA 3;
			goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BMBE M 5 bright 
			{
				if (user_monsterlevel > 540)
				{
					if (random(1,2) <= 1) 
					{
						if (random(1,4) <= 1) { A_SpawnProjectile("SuicideBombUltra",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					}
					else 
					{ 
						if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
						else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					}
				}
				else
				if (user_monsterlevel > 135)
				{
					if (random(1,4) <= 3) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
				}
				else
				{
					if (random(1,16) <= 1) { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
					else { A_SpawnProjectile("SuicideBombStrong",0,0,0,0); }
				}
			}
			BMBE N 5 bright A_XScream();
			BMBE O 5 A_NoBlocking();
			BMBE PQRST 5;
			BMBE U -1;
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BMBE D 5 A_GenericFreezeDeath();
			BMBE D 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BMBE T 5;
			BMBE SRQPONM 5;
			Goto See;
	}
}

class DSDoomImp : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/DoomImp Type"
		Tag "Imp";

		Health 60;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5; // Imps = -50% Fire Damage
		Painchance "Fire", 100; // Imps = -50% Pain Chance
		DamageFactor "Holy", 1.5; // Imps = +50% Holy Damage
		Painchance "Holy", 255; // Imps = +50% Pain Chance

		Species "Imp";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "imp/sight";
		PainSound "imp/pain";
		DeathSound "imp/death";
		ActiveSound "imp/active";
		HitObituary "$OB_IMPHIT";
		Obituary "$OB_IMP";

		dropitem "DoomSpellMana", 16;
		dropitem "Stimpack", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	states
	{
		Spawn:
			TROO A 0 NoDelay;
			TROO AB 10 A_Look();
			goto Spawn+1;
		See:
			TROO A 0;
			TROO AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				if (levelbehavior && user_monsterlevel > 60) { return resolvestate("Missile2"); }
				return resolvestate("Missile1");
			}
		Missile1:
			TROO EF 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
		goto MissileEnd;
		Missile2:
			IMP3 AB 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
		goto MissileEnd;
		MissileEnd:
			TROO G 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				if (levelbehavior && user_monsterlevel > 180) { A_CrisisComboAttack("BelphegorBall", "BelphegorBallCrisis", 32, (random(9,12)*random(1,8)), "imp/melee"); }
				else if (levelbehavior && user_monsterlevel > 120) { A_CrisisComboAttack("BaronOfHellBall", "BaronOfHellBallCrisis", 32, (random(6,9)*random(1,8)), "imp/melee"); }
				else if (levelbehavior && user_monsterlevel > 60) { A_CrisisComboAttack("HellKnightBall", "HellKnightBallCrisis", 32, (random(3,6)*random(1,8)), "imp/melee"); }
				else { A_CrisisComboAttack("DoomImpBall", "DoomImpBallCrisis", 32, (3*random(1,8)), "imp/melee"); }       
			}
			goto See;

		Pain:
			TROO H 2;
			TROO H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			TROO H 2;
			TROO H 2 A_DVDSPain();
			TROO HH 2;
			Goto See;
		Pain.Kick:
			TROO H 2;
			TROO H 2 A_DVDSPain();
			TROO HHHH 2;
			Goto See;

		Pain.Holy:
			TROO H 2;
			TROO H 2 A_DVDSPain();
			TROO H 2;
			TROO H 2;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TROO I 8;
			TROO J 8 A_Scream();
			TROO K 6;
			TROO L 6 A_NoBlocking();
			TROO M -1;
			stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TROO N 5;
			TROO O 5 A_XScream();
			TROO P 5;
			TROO Q 5 A_NoBlocking();
			TROO RST 5;
			TROO U -1;
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			TROO H 5 A_GenericFreezeDeath();
			TROO H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			TROO ML 8;
			TROO KJI 6;
			goto See;
	}
}

class DarkImp : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/DoomImp Type"
		Tag "Dark Imp";
		Health 120;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		MissileType "DarkSeeker";
		MeleeDamage 3;
		Painchance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
	
		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5; // Imps = -50% Fire Damage
		Painchance "Fire", 100; // Imps = -50% Pain Chance
		DamageFactor "Holy", 1.5; // Imps = +50% Holy Damage
		Painchance "Holy", 255; // Imps = +50% Pain Chance
		Species "Imp";
		Monster;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "darkimp/sight";
		PainSound "darkimp/pain";
		DeathSound "darkimp/death";
		ActiveSound "darkimp/active";
		MeleeSound "darkimp/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
			
		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana", 24;
		dropitem "Stimpack", 3;
		dropitem "Stimpack", 3;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	States
	{
		Spawn:
			DRKI AB 10 A_Look();
			loop;
		See:
			DRKI AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			DRKI EF 8
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			DRKI G 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("DarkSeeker", "DarkSeekerCrisis", 32, (3*random(1,8)), "imp/melee");
			}
			goto See;

		Pain.Holy:
			DRKI H 2;
			DRKI H 2 A_DVDSPain();
			DRKI H 2;
			DRKI H 2;
			Goto See;
		Pain:
			DRKI H 2;
			DRKI H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			DRKI H 2;
			DRKI H 2 A_DVDSPain();
			DRKI HH 2;
			Goto See;
		Pain.Kick:
			DRKI H 2;
			DRKI H 2 A_DVDSPain();
			DRKI HHHH 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKI I 8;
			DRKI J 8 A_Scream();
			DRKI K 6;
			DRKI L 6 A_NoBlocking();
			DRKI M -1;
			Stop;
		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_NoBlocking();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DRKI H 5 A_GenericFreezeDeath();
			DRKI H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DRKI M 8;
			DRKI L 8;
			DRKI KJI 6;
			Goto See;
	}
}

class STDarkImp : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/DoomImp Type"
		Tag "Dark Imp [Weak]";
		
		Health 110;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 9;
		MissileType "DarkFast";
		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Explosive", 1;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5; // Imps = -50% Fire Damage
		Painchance "Fire", 100; // Imps = -50% Pain Chance
		DamageFactor "Holy", 1.5; // Imps = +50% Holy Damage
		Painchance "Holy", 255; // Imps = +50% Pain Chance
		MeleeDamage 3;
		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp2/sight";
		PainSound "darkimp2/pain";
		DeathSound "darkimp2/death";
		ActiveSound "darkimp2/active";
		MeleeSound "darkimp2/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
		
		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana", 24;
		dropitem "Stimpack", 3;
		dropitem "Stimpack", 3;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States
	{
		Spawn:
			DRKS AB 10 A_Look();
			loop;
		See:
			DRKS AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			DRKS EF 8
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			DRKS G 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("DarkFast", "DarkFastCrisis", 32, (3*random(1,8)), "imp/melee");
			}
			Goto See;

		Pain.Holy:
			DRKS H 2;
			DRKS H 2 A_DVDSPain();
			DRKS HH 2;
			Goto See;
		Pain:
			DRKS H 2;
			DRKS H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			DRKS H 2;
			DRKS H 2 A_DVDSPain();
			DRKS HH 2;
			Goto See;
		Pain.Kick:
			DRKS H 2;
			DRKS H 2 A_DVDSPain();
			DRKS HHHH 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKS I 8;
			DRKS J 8 A_Scream();
			DRKS K 6;
			DRKS L 6 A_Fall();
			DRKS M -1;
			Stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DRKS H 5 A_GenericFreezeDeath();
			DRKS H 1 A_FreezeDeathChunks();
			wait;

		Raise:
			DRKS M 8;
			DRKS L 8;
			DRKS KJI 6;
			Goto See;
	}
}

class VoidDarkImp : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/DoomImp Type"
		Tag "Dark Imp [Strong]";

		Health 130;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 7;
		MissileType "DarkNormal";
		MeleeDamage 3;

		PainChance 200;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.825;
		RadiusDamageFactor 0.825;
		DamageFactor "Explosive", 0.825;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5; // Imps = -50% Fire Damage
		Painchance "Fire", 100; // Imps = -50% Pain Chance
		DamageFactor "Holy", 1.5; // Imps = +50% Holy Damage
		Painchance "Holy", 255; // Imps = +50% Pain Chance

		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp3/sight";
		PainSound "darkimp3/pain";
		DeathSound "darkimp3/death";
		ActiveSound "darkimp3/active";
		MeleeSound "darkimp3/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
		
		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana", 24;
		dropitem "Stimpack", 3;
		dropitem "Stimpack", 3;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States
	{
		Spawn:
			DRKV AB 10 A_Look();
			loop;
		See:
			DRKV AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
		MissileStart:
			TNT1 A 0 A_Jump(256,"MissileNormal","MissileStrong");
		MissileNormal:
			DRKV EF 8 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			DRKV G 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("DarkNormal", "DarkNormalCrisis", 32, (3*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;
		MissileStrong:
			DRKV IJ 8 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			DRKV K 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("DarkStrong", "DarkStrongCrisis", 32, (random(4,5)*random(1,8)), "imp/melee");
			}
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired==2,"See");
			Goto MissileStart;

		Pain.Holy:
			DRKV H 2;
			DRKV H 2 A_DVDSPain();
			DRKV HH 2;
			Goto See;
		Pain:
			DRKV H 2;
			DRKV H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			DRKV H 2;
			DRKV H 2 A_DVDSPain();
			DRKV HH 2;
			Goto See;
		Pain.Kick:
			DRKV H 2;
			DRKV H 2 A_DVDSPain();
			DRKV HHHH 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKV L 8;
			DRKV M 8 A_Scream();
			DRKV N 5;
			DRKV O 5 A_Fall();
			DRKV P -1;
			Stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DRKV H 5 A_GenericFreezeDeath();
			DRKV H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DRKV P 8;
			DRKV O 8;
			DRKV NML 6;
			Goto See;
	}
}

class NetherDarkImp : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/DoomImp Type"
		Tag "Nether Dark Imp";

		Health 300;
		Radius 22;
		Height 60;
		Speed 9;
		Mass 250;
		Scale 1.2;
		MeleeDamage 6;
		MissileType "InfernoBall";
		Missileheight 32;
		PainChance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 150; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.7;
		RadiusDamageFactor 0.7;
		DamageFactor "Explosive", 0.7;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.5; // Imps = -50% Fire Damage
		Painchance "Fire", 50; // Imps = -50% Pain Chance
		DamageFactor "Holy", 1.5; // Imps = +50% Holy Damage
		Painchance "Holy", 150; // Imps = +50% Pain Chance

		Species "Imp";
		MONSTER;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		SeeSound "darkimp4/sight";
		PainSound "darkimp4/pain";
		DeathSound "darkimp4/death";
		ActiveSound "darkimp4/active";
		MeleeSound "darkimp4/melee";
		Obituary "%o was cursed by a nether dark imp.";
		HitObituary "%o was touched by a nether dark imp.";

		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana", 24;
		dropitem "Stimpack", 3;
		dropitem "Stimpack", 3;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States
	{
		Spawn:
			DRKF AB 10 A_Look();
			loop;
		See:
			DRKF AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Melee:
		Missile:
			DRKF E 0 A_Jump (256, "Missile1", "Missile2");
			Goto See;
		Missile1:
			DRKF EF 8
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			DRKF G 6 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("NetherLightning", "NetherLightningCrisis", 32, 6*random(1,8), "imp/melee");
			}
			Goto See;
		Missile2:
			DRKF IJ 8
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			DRKF K 6 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Combo Attack
				A_CrisisComboAttack("InfernoBall", "InfernoBallCrisis", 32, 6*random(1,8), "imp/melee");
			}
			Goto See;

		Pain.Holy:
			DRKF H 2;
			DRKF H 2 A_DVDSPain();
			DRKF HH 2;
			Goto See;
		Pain:
			DRKF H 2;
			DRKF H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			DRKF H 2;
			DRKF H 2 A_DVDSPain();
			DRKF HH 2;
			Goto See;
		Pain.Kick:
			DRKF H 2;
			DRKF H 2 A_DVDSPain();
			DRKF HHHH 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKF L 8;
			DRKF M 8 A_Scream();
			DRKF N 5;
			DRKF O 5 A_Fall();
			DRKF P -1;
			Stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DRKF Q 5;
			DRKF R 5 A_XScream();
			DRKF S 5;
			DRKF T 5 A_Fall();
			DRKF UVW 5;
			DRKF X -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DRKF H 5 A_GenericFreezeDeath();
			DRKF H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DRKF P 8 ;
			DRKF O 8;
			DRKF NML 6;
			Goto See;
	}
}

class DSLostSoul : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Others"
		Tag "Lost Soul";

		Health 100;
		Radius 16;
		Height 56;
		Mass 50;
		Speed 8;
		damage 3;
		meleerange 80;
		ReactionTime 8;
		Painchance 255;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.9;
		DamageFactor "Ice", 1.5; // Lost Souls = +50% Ice Damage
		Painchance "Ice", 255;
		DamageFactor "Fire", 0.2; // Lost Souls = -80% Fire Damage
		Painchance "Fire", 51; // Lost Souls = -80% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+MISSILEMORE;
		+DONTFALL;
		+NOICEDEATH;
		AttackSound "skull/melee";
		PainSound "skull/pain";
		DeathSound "skull/death";
		ActiveSound "skull/active";
		RenderStyle "SoulTrans";
		Obituary "$OB_SKULL"; // "%o was spooked by a lost soul."

		dropitem "DoomSpellMana", 16;
		dropitem "SoulSphere2", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "RockBombShard", 2;
		dropitem "RockBombShard", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			SKUL A 0 NoDelay;
			SKUL A 0 A_UnSetDmgWeaknesses();
			SKUL AB 10 BRIGHT A_Look();
			goto Spawn+1;
		See:
			SKUL A 0
			{
				A_UnSetDmgWeaknesses();
				if (health <= user_HPLowRange)
				{
					bNOFEAR = true;
					bCANTSEEK = true;
					bNOINFIGHTING = true;
					bTHRUSPECIES = true;
					bDONTHARMSPECIES = true;
					bNORADIUSDMG = true;
					if (health <= user_HPCritRange)
					{
						bVISIBILITYPULSE = true;
						bDONTRIP = true;
						bDONTSQUASH = true;
						bDONTMORPH = true;
						bDONTBLAST = true;
					}
					else
					{
						bVISIBILITYPULSE = false;
						bDONTRIP = false;
						bDONTSQUASH = false;
						bDONTMORPH = false;
						bDONTBLAST = false;
					}
				}
				else
				{
					bNOFEAR = false;
					bCANTSEEK = false;
					bNOINFIGHTING = false;
					bTHRUSPECIES = false;
					bDONTHARMSPECIES = false;
					bNORADIUSDMG = false;
				}
			}
			SKUL AB 6 BRIGHT
			{
				A_UnSetDmgWeaknesses();
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 45) { A_SetTics(5); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(4); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			SKUL C 10 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(9); }
				A_FaceTarget();
			}
			SKUL D 4 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
	
				A_LostSoulChargeWeakness();
				A_MonsterCrisisCheck(); // SkullAttack
				if (user_canusecrisisatk == 1)
				{
					A_PlayCrisisAtkSound();
					A_SkullAttack(25);
				}
				else
				{
					A_SkullAttack(20);
				}
			}
			SKUL CCDD 2 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 180) { A_FaceTarget(); }
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
	
				A_MonsterCrisisCheck(); // Adds a Single Melee Attack to the SkullAttack
				if (user_canusecrisisatk == 1) { A_CustomMeleeAttack(random(1,8)*3,"none","none","Melee",true); }
			}
			Goto Missile+3;

		Pain:
			SKUL E 0 Bright
			{
				A_UnSetDmgWeaknesses();
			}
			SKUL E 3 Bright;
			SKUL E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 2 * random(1,8);
			}
			Goto See;
		Pain.Fist:
			SKUL E 0 Bright
			{
				A_UnSetDmgWeaknesses();
			}
			SKUL E 3 Bright;
			SKUL E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 2 * random(1,8);
			}
			SKUL EE 3 Bright;
			Goto See;
		Pain.Kick:
			SKUL E 0 Bright
			{
				A_UnSetDmgWeaknesses();
			}
			SKUL E 3 Bright;
			SKUL E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 3 * random(1,8);
			}
			SKUL EEEE 3 Bright;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SKUL F 0 Bright A_UnSetDmgWeaknesses();
			SKUL F 6 BRIGHT;
			SKUL G 6 BRIGHT A_Scream();
			SKUL H 6 BRIGHT;
			SKUL I 6 BRIGHT A_NoBlocking();
			SKUL J 6;
			SKUL K 6;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SKUL Z 5 A_GenericFreezeDeath();
			SKUL Z 1 A_FreezeDeathChunks();
			wait;
	}
}
class DSLostSoul2 : DSLostSoul
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Others"
		Tag "Annoying Lost Soul";

		health 125;
		damage 4;
		speed 10;
		meleerange 80;
		Mass 75;
		ReactionTime 4;
		Painchance 160;
		Painchance "Fist", 240; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 240; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.75;
		DamageFactor "Crush", 0.9;
		DamageFactor "Ice", 1.5; // Lost Souls = +50% Ice Damage
		Painchance "Ice", 255;
		DamageFactor "Fire", 0.2; // Lost Souls = -80% Fire Damage
		Painchance "Fire", 38; // Lost Souls = -80% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		AttackSound "skull/melee2";
		PainSound "skull/pain";
		DeathSound "skull/death";
		ActiveSound "skull/active";
		RenderStyle "SoulTrans";
		Obituary "%o was spooked by an annoying lost soul.";
		+MISSILEEVENMORE;
		-MISSILEMORE;
		dropitem "DoomSpellMana", 16;
		dropitem "DoomSpellMana", 4;
		dropitem "SoulSphere2", 4;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "RockBombShard", 2;
		dropitem "RockBombShard", 2;
		dropitem "RockBombShard", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			SKUL A 0 NoDelay;
			SKUL A 0 A_UnSetDmgWeaknesses();
			SKUL AB 10 BRIGHT A_Look();
			goto Spawn+1;
		See:
			SKUL A 0
			{
				A_UnSetDmgWeaknesses();
				if (health <= user_HPLowRange)
				{
					bNOFEAR = true;
					bCANTSEEK = true;
					bNOINFIGHTING = true;
					bTHRUSPECIES = true;
					bDONTHARMSPECIES = true;
					bNORADIUSDMG = true;
					if (health <= user_HPCritRange)
					{
						bVISIBILITYPULSE = true;
						bDONTRIP = true;
						bDONTSQUASH = true;
						bDONTMORPH = true;
						bDONTBLAST = true;
					}
					else
					{
						bVISIBILITYPULSE = false;
						bDONTRIP = false;
						bDONTSQUASH = false;
						bDONTMORPH = false;
						bDONTBLAST = false;
					}
				}
				else
				{
					bNOFEAR = false;
					bCANTSEEK = false;
					bNOINFIGHTING = false;
					bTHRUSPECIES = false;
					bDONTHARMSPECIES = false;
					bNORADIUSDMG = false;
				}
			}
			SKUL AABB 3 BRIGHT
			{
				A_UnSetDmgWeaknesses();
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			SKUL C 8 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			SKUL D 4 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }

				A_LostSoulChargeWeakness();
				A_MonsterCrisisCheck(); // SkullAttack
				if (user_canusecrisisatk == 1)
				{
					A_PlayCrisisAtkSound();
					A_SkullAttack(36);
				}
				else
				{
					A_SkullAttack(30);
				}
			}
			SKUL CCDD 2 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 180) { A_FaceTarget(); }
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
	
				A_MonsterCrisisCheck(); // Adds a Single Melee Attack to the SkullAttack
				if (user_canusecrisisatk == 1) { A_CustomMeleeAttack(random(1,8)*4,"none","none","Melee",true); }
			}
			Goto Missile+3;

		Pain:
			SKUL E 0 Bright
			{
				A_UnSetDmgWeaknesses();
			}
			SKUL E 3 Bright;
			SKUL E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 3 * random(1,8);
			}
			Goto See;
		Pain.Fist:
			SKUL E 0 Bright
			{
				A_UnSetDmgWeaknesses();
			}
			SKUL E 3 Bright;
			SKUL E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 3 * random(1,8);
			}
			SKUL EE 3 Bright;
			Goto See;
		Pain.Kick:
			SKUL E 0 Bright
			{
				A_UnSetDmgWeaknesses();
			}
			SKUL E 3 Bright;
			SKUL E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 4 * random(1,8);
			}
			SKUL EEEE 3 Bright;
			Goto See;

		Death:
			TNT1 A 0 
			{
				A_Explode(64,64,0,0,(random(1,4)*8));
				A_DVDSNormalDeath(-2,0,1);
			}
			SKUL F 0 Bright A_UnSetDmgWeaknesses();
			SKUL F 6 BRIGHT;
			SKUL G 6 BRIGHT A_Scream();
			SKUL H 6 BRIGHT;
			SKUL I 6 BRIGHT A_NoBlocking();
			SKUL J 6;
			SKUL K 6;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SKUL Z 5 A_GenericFreezeDeath();
			SKUL Z 1 A_FreezeDeathChunks();
			wait;
	}
}

class BetaLostSoul : DSLostSoul
{
	default
	{
		Tag "Strange Lost Soul";
	}
	
	States
	{
		Spawn:
			BSKL A 10 A_Look();
			Loop;
		See:
			BSKL BCDA 5
			{
				if (levelbehavior && user_monsterlevel > 90) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			BSKL E 4 
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
			}
			BSKL F 5 
			{
				if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				A_BetaSkullAttack(randompick(1,1,1,2),1,randompick(4,4,4,8));
			}
			BSKL F 4
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			Goto See;
		Pain:
			BSKL G 4;
			BSKL H 2
			{
				A_DVDSPain();
				user_painfastchase = 6 * random(1,8);
			}
			Goto See;
			BSKL I 4;
			Goto See;
		Pain.Fist:
			BSKL G 4;
			BSKL H 2
			{
				A_DVDSPain();
				user_painfastchase = 6 * random(1,8);
			}
			BSKL HH 2;
			Goto See;
			BSKL II 4;
			Goto See;
		Pain.Kick:
			BSKL G 4;
			BSKL H 2
			{
				A_DVDSPain();
				user_painfastchase = 8 * random(1,8);
			}
			BSKL HHHH 2;
			Goto See;
			BSKL IIII 4;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BSKL JKLM 5;
			BSKL N 5 A_Scream();
			BSKL O 5;
			BSKL P 5 A_Fall();
			BSKL Q 5 A_Stop();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BSKL G 5 A_GenericFreezeDeath();
			BSKL G 1 A_FreezeDeathChunks();
			wait;
	}
}
class ForgottenOne : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Others"
		Tag "Forgotten One";

		Obituary "A Forgotten One rammed %o off into the distance :V";
		Health 40;
		Radius 14;
		Height 30;
		meleerange 80;
		Mass 25;
		Speed 8;
		PainChance 115;
		PainChance "Melee", 230;
		PainChance "Fist", 230;
		PainChance "Kick", 230;
		PainChance "Gauntlets", 230;
		PainChance "Chainsaw", 230;
		PainChance "Sceptre", 230;

		DamageFactor 0.25;
		DamageFactor "Crush", 0.9;
		DamageFactor "Ice", 1.5; // Lost Souls = +50% Ice Damage
		Painchance "Ice", 172;
		DamageFactor "Fire", 0.2; // Lost Souls = -80% Fire Damage
		Painchance "Fire", 22; // Lost Souls = -80% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 230; // Demons = +300% Pain Chance

		Damagefactor "Stomp", 0.667;
		Damagefactor "Trample", 0.667;
		DamageFactor "Melee", 0.667;
		DamageFactor "Fist", 0.667;
		DamageFactor "Kick", 0.667;
		DamageFactor "Gauntlets", 0.667;
		DamageFactor "Chainsaw", 0.667;
		DamageFactor "Sceptre", 0.667;
		Scale 0.7;
		PainSound "Forgotten/Pain";
		DeathSound "Forgotten/Death";
		ActiveSound "Forgotten/Active";
		Damage 3;
		Monster;
		+FLOORCLIP;
		+FLOAT;
		+NOGRAVITY;
		+NOICEDEATH;
		+DONTFALL;
		+FLOATBOB;
		+NOBLOOD;
		+NOTARGET;
		+NOTARGETSWITCH;
		+NOINFIGHTING;
	}
	
	States
	{
		Spawn:
			FRGO A 0 Bright NoDelay 
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = true;
			}
			FRGO AAAAAABBBBBB 1 Bright A_Look();
			Loop;
		See:
			FRGO A 0 Bright
			{
				bFLOATBOB = true;
				A_UnSetDmgWeaknesses();
				if (health <= user_HPLowRange)
				{
					bNOFEAR = true;
					bCANTSEEK = true;
					bNOINFIGHTING = true;
					bTHRUSPECIES = true;
					bDONTHARMSPECIES = true;
					bNORADIUSDMG = true;
					if (health <= user_HPCritRange)
					{
						bVISIBILITYPULSE = true;
						bDONTRIP = true;
						bDONTSQUASH = true;
						bDONTMORPH = true;
						bDONTBLAST = true;
					}
					else
					{
						bVISIBILITYPULSE = false;
						bDONTRIP = false;
						bDONTSQUASH = false;
						bDONTMORPH = false;
						bDONTBLAST = false;
					}
				}
				else
				{
					bNOFEAR = false;
					bCANTSEEK = false;
					bNOINFIGHTING = false;
					bTHRUSPECIES = false;
					bDONTHARMSPECIES = false;
					bNORADIUSDMG = false;
				}
			}
			FRGO AABB 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			Loop;
		Missile:
			FRGO C 0
			{
				bFLOATBOB = false;
				user_painfastchase = 0;
			}
			FRGO CCDDC 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				A_FaceTarget();
			}
			FRGO D 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				A_StartSound("Forgotten/Attack");
				A_LostSoulChargeWeakness();

				A_MonsterCrisisCheck(); // SkullAttack
				if (user_canusecrisisatk == 1)
				{
					A_PlayCrisisAtkSound();
					A_SkullAttack(24);
				}
				else
				{
					A_SkullAttack(20);
					A_SkullAttack();
				}
			}
			FRGO C 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				A_MonsterCrisisCheck(); // Adds a Single Melee Attack to the SkullAttack
				if (user_canusecrisisatk == 1) { A_CustomMeleeAttack(random(1,8)*3,"none","none","Melee",true); }
			}
			FRGO C 0 Bright A_JumpIfTargetInLOS(4, (75+(user_monsterlevel/5)));
			FRGO C 0 A_Jump(24, "StopCharge");
			FRGO DC 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				A_MonsterCrisisCheck(); // Adds a Single Melee Attack to the SkullAttack
				if (user_canusecrisisatk == 1) { A_CustomMeleeAttack(random(1,8)*3,"none","none","Melee",true); }
			}
			Goto Missile+9;
			FRGO C 0 Bright;
			Goto Missile+6;
		StopCharge:
			FRGO C 0 A_Stop();
			Goto See;
		Pain:
			FRGO E 0 Bright
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = true;
			}
			FRGO E 3 Bright;
			FRGO E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 6 * random(1,8);
			}
			Goto See;
		Pain.Fist:
			FRGO E 0 Bright
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = true;
			}
			FRGO E 3 Bright;
			FRGO E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 6 * random(1,8);
			}
			FRGO EE 3 Bright;
			Goto See;
		Pain.Kick:
			FRGO E 0 Bright
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = true;
			}
			FRGO E 3 Bright;
			FRGO E 3 Bright
			{
				A_DVDSPain();
				user_painfastchase = 8 * random(1,8);
			}
			FRGO EEEE 3 Bright;
			Goto See;
		Death:
			TNT1 A 0 
			{
				A_Explode(32,32,0,0,(random(1,4)*4));
				A_DVDSNormalDeath(-2,0,1);
			}
			FRGO E 0 Bright;
			FRGO E 0 
			{
				A_UnSetDmgWeaknesses();
				bFLOATBOB = false;
			}
			FRGO E 0 A_Stop();
			FRGO E 4 Bright;
			FRGO F 4 Bright;
			FRGO G 6 Bright A_Scream();
			FRGO H 6 Bright;
			FRGO I 6 Bright A_NoBlocking();
			FRGO J 6 Bright;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FRGO E 5 A_GenericFreezeDeath();
			FRGO E 1 A_FreezeDeathChunks();
			wait;
	}
}

class DSDemon : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/PinkyDemon Type"
		Tag "Pinky Demon";

		Health 150;
		Speed 10;
		Radius 30;
		Height 56;
		Mass 400;
		Painchance 180;
		Painchance "Fist", 255; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 255; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.7;
		DamageFactor "Fire", 0.9; // Pinkies = -10% Fire Damage
		Painchance "Fire", 162; // Pinkies = -10% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		Monster;
		Species "Pinky";
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "demon/sight";
		AttackSound "demon/melee";
		PainSound "demon/pain";
		DeathSound "demon/death";
		ActiveSound "demon/active";
		Obituary "%o was chomped up by a demon.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		
		dropitem "DoomSpellMana", 16;
		dropitem "Medikit", 2;
		dropitem "GuardSphere", 2;
		dropitem "GuardSphere", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			SARG A 0 NoDelay;
			SARG AB 10 A_Look();
			goto Spawn+1;
		See:
			SARG A 0;
			SARG AABBCCDD 2
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				if (levelbehavior && user_monsterlevel > 480) 
				{ 
					if (random(1,1) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (levelbehavior && user_monsterlevel > 360) 
				{ 
					if (random(1,2) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (levelbehavior && user_monsterlevel > 240) 
				{ 
					if (random(1,3) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				} 
				else
				if (levelbehavior && user_monsterlevel > 120) 
				{ 
					if (random(1,4) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				} 
				else { A_DVDSChase("Melee",null,0); }
			}
			loop;

		Missile:
			SARG AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						if (levelbehavior && user_monsterlevel > 240) { A_SetTics(2); }
						else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		MissileLoop:
			SARG F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
						else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
						A_FaceTarget();
						A_MonsterCrisisCheck(); // Single Projectile
						A_CrisisSpawnProjectile("DemonFire","DemonFireCrisis");
					}
					else
					{
						return resolvestate("See");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			TNT1 A 0;
			SARG EF 8
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(7); }
			}
			SARG G 8
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,10)*4,"none","none","Melee",true); // A_SargAttack
			}
			goto See;

		Pain:
			SARG H 2 Fast;
			SARG H 2 Fast A_DVDSPain();
			Goto See;
		Pain.Fist:
			SARG H 2 Fast;
			SARG H 2 Fast A_DVDSPain();
			SARG HH 2 Fast;
			Goto See;
		Pain.Kick:
			SARG H 2 Fast;
			SARG H 2 Fast A_DVDSPain();
			SARG HHHH 2 Fast;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SARG I 8;
			SARG J 8 A_Scream();
			SARG K 4;
			SARG L 4 A_NoBlocking();
			SARG M 4;
			SARG N -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SARG H 5 A_GenericFreezeDeath();
			SARG H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SARG N 5;
			SARG MLKJI 5;
			Goto See;
	}
}
class DSSpectre : DSDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/PinkyDemon Type"
		Tag "Pinky Spectre";

		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		SeeSound "spectre/sight";
		AttackSound "spectre/melee";
		PainSound "spectre/pain";
		DeathSound "spectre/death";
		ActiveSound "spectre/active";
		HitObituary "%o was munched by a spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;

		dropitem "DoomSpellMana", 16;
		dropitem "GuardSphere", 2;
		dropitem "GuardSphere", 2;
		dropitem "BlurSphere2", 2;
		dropitem "BlurSphere2", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
}
class BloodDemon : DSDemon
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/PinkyDemon Type"
		Tag "Blood Pinky";

		Health 300;
		Speed 15;
		Height 56;
		Radius 30;
		Mass 600;
		Meleedamage 10;
		ReactionTime 8;

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;

		Painchance 135;
		Painchance "Fist", 201; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 201; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.7;

		DamageFactor "Plasma", 1.25;
		Painchance "Plasma", 169;
		DamageFactor "Thunder", 1.5; // Pinkies = +50% Thunder Damage
		Painchance "Thunder", 202; // Pinkies = +50% Pain Chance
		DamageFactor "Electric", 1.5; // Pinkies = +50% Thunder Damage
		Painchance "Electric", 202; // Pinkies = +50% Pain Chance
		DamageFactor "Lightning", 1.5; // Pinkies = +50% Thunder Damage
		Painchance "Lightning", 202; // Pinkies = +50% Pain Chance

		DamageFactor "Fire", 0.666; // Pinkies = -33% Fire Damage
		Painchance "Fire", 90; // Pinkies = -33% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		MONSTER;
		+FLOORCLIP;
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		
		SeeSound "blooddemon/sight";
		PainSound "blooddemon/pain";
		DeathSound "blooddemon/death";
		ActiveSound "blooddemon/active";
		//MeleeSound "blooddemon/melee";
		Obituary "%o Was chewed up and spat out by a Blood demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";

		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana", 24;
		dropitem "Medikit", 2;
		dropitem "Medikit", 2;
		dropitem "GuardSphere", 2;
		dropitem "GuardSphere", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States 
	{
		
		Spawn:
			SRG2 A 0 NoDelay;
			SRG2 AB 10 A_Look();
			goto Spawn+1;
		See: 
			SRG2 A 0;
			SRG2 AABBCCDD 2
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				user_fastchasetimermax = 8;
				if (levelbehavior && user_monsterlevel > 225) { user_fastchasetimermax = 5; }
				else if (levelbehavior && user_monsterlevel > 150) { user_fastchasetimermax = 6; }
				else if (levelbehavior && user_monsterlevel > 75) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					A_StartSound("blooddemon/walk", 0, CHANF_DEFAULT, 1.0, ATTN_NORM, frandompick(0.95,1.0,1.05));
					user_walksound = 0; 
				}
				if (user_fastchasetimer >= user_fastchasetimermax) 
				{ 
					if (dvds_pinkiescanbreathfire)
					{
						if (levelbehavior && user_monsterlevel > 600) 
						{ 
							if (random(1,1) <= 1) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_DVDSChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (levelbehavior && user_monsterlevel > 450) 
						{ 
							if (random(1,2) <= 1) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_DVDSChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (levelbehavior && user_monsterlevel > 300) 
						{ 
							if (random(1,3) <= 1) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_DVDSChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else
						if (levelbehavior && user_monsterlevel > 150) 
						{ 
							if (random(1,4) <= 1) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); } else { A_DVDSChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
						} 
						else { A_DVDSChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					}
					else { A_DVDSChase("Melee",null,CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); }
					
					user_fastchasetimer = 0; 
				} 
				else 
				{ 
					if (dvds_pinkiescanbreathfire)
					{
						if (levelbehavior && user_monsterlevel > 600) 
						{ 
							if (random(1,1) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (levelbehavior && user_monsterlevel > 450) 
						{ 
							if (random(1,2) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (levelbehavior && user_monsterlevel > 300) 
						{ 
							if (random(1,3) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
						} 
						else
						if (levelbehavior && user_monsterlevel > 150) 
						{
							if (random(1,4) <= 1) { A_DVDSChase("Melee","Missile",0,1,3,1,1); } else { A_DVDSChase("Melee",null,0,1,3,1,1); }
						}
						else { A_DVDSChase("Melee",null,0,1,3,1,1); }
					}
					else { A_DVDSChase("Melee",null,0,1,3,1,1); }
				}
			}
			loop;

		Missile:
			SRG2 AEF 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{ 
						if (levelbehavior && user_monsterlevel > 240) { A_SetTics(2); }
						else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
						A_FaceTarget(); 
					} 
					else 
					{ 
						return resolvestate("See"); 
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
		MissileLoop:
			SRG2 F 3 // 4
			{
				if (target)
				{
					if (Distance3D(target) <= 264)
					{
						if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
						else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
						A_FaceTarget();
						A_MonsterCrisisCheck(); // Single Projectile
						A_CrisisSpawnProjectile("DemonFire","DemonFireCrisis");
					}
					else
					{
						return resolvestate("See");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			SARG F 0 A_JumpIfHealthLower(1,"See",AAPTR_TARGET);
			loop;

		Melee:
			TNT1 A 0;
			SRG2 E 0 A_StartSound("blooddemon/melee");
			SRG2 EF 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			SRG2 G 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,10)*10,"none","none","Melee",true); // A_SargAttack; // A_SargAttack
			}
			Goto See;

		Pain: 
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_DVDSPain();
			Goto See;
		Pain.Fist:
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_DVDSPain();
			SRG2 HH 2 Fast;
			Goto See;
		Pain.Kick:
			SRG2 H 2 Fast;
			SRG2 H 2 Fast A_DVDSPain();
			SRG2 HHHH 2 Fast;
			Goto See;
		
		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			SRG2 HH 2;
			SRG2 H 2
			{
				A_DVDSPain();
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			SRG2 HHH 1;
			Goto See;
		Pain.Electric: 
		Pain.Lightning: 
		Pain.Thunder: 
			SRG2 HH 2;
			SRG2 H 2
			{
				A_DVDSPain();
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			SRG2 HH 2;
			SRG2 H 2
			{
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			SRG2 HHH 2;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1; 
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}
class BloodSpectre : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/PinkyDemon Type"
		Tag "Blood Spectre";
		
		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o Was chewed up and spat out by a Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;

		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana", 24;
		dropitem "Medikit", 2;
		dropitem "Medikit", 2;
		dropitem "GuardSphere", 2;
		dropitem "GuardSphere", 2;
		dropitem "BlurSphere2", 2;
		dropitem "BlurSphere2", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	States
	{
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, 128);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
	}
}
class ChaingunDemon : BloodDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/PinkyDemon Type"
		Tag "Blood Pinky [Chaingun]";

		Speed 14;
		Mass 650;
		AttackSound "";
		Obituary "%o was mowed down by a chaingun-wielding Blood Demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;
		
		Dropitem "Chaingun";
		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana", 24;
		dropitem "Medikit", 2;
		dropitem "Medikit", 2;
		dropitem "GuardSphere", 2;
		dropitem "GuardSphere", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States 
	{
		Spawn: 
			CRG2 A 0 NoDelay;
			CRG2 AB 10 A_Look();
			goto Spawn+1;
		See: 
			CRG2 A 0;
			CRG2 AABBCCDD 2
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				user_fastchasetimermax = 8;
				if (levelbehavior && user_monsterlevel > 225) { user_fastchasetimermax = 5; }
				else if (levelbehavior && user_monsterlevel > 150) { user_fastchasetimermax = 6; }
				else if (levelbehavior && user_monsterlevel > 75) { user_fastchasetimermax = 7; }
				user_fastchasetimer++;
				user_walksound++;
				if (user_walksound >= 4) 
				{
					A_StartSound("blooddemon/walk", 0, CHANF_DEFAULT, 1.0, ATTN_NORM, frandompick(0.80,0.825,0.85));
					user_walksound = 0; 
				}
				if (user_fastchasetimer >= user_fastchasetimermax) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1); user_fastchasetimer = 0; } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
			}
			loop;

		Melee: 
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("ChaingunCooldown")))
				{
					if (levelbehavior) { user_shotsfiredmax += random((15 + (user_monsterlevel / 20)),(45 + (user_monsterlevel / 6.67))); }
					else { user_shotsfiredmax = random(15,45); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			CRG2 H 9
			{
				A_FaceTarget();
				user_shotaccuracy = 11.25; // 22.5;
				user_shotzaccuracy = 0.0;
				if (user_charmed) { user_shotaccuracy *= 0.667; user_shotzaccuracy *= 0.667; }
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(4); user_shotaccuracy = user_shotaccuracy * 5 / 8; user_shotzaccuracy = user_shotzaccuracy * 3 / 8; }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(5); user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 4 / 8; }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 5 / 8; }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 6 / 8; user_shotzaccuracy = user_shotzaccuracy * 6 / 8; }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 8; user_shotzaccuracy = user_shotzaccuracy * 7 / 8; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
		StartMissile:
			TNT1 E 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 E 3 bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(1,5)*3, "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"See");
			TNT1 F 0
			{
				A_CheckIfTargetDead("See");
			}
			CRG2 F 3 bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
				A_StartSound("chainguy/attack", CHAN_WEAPON);
				A_MonsterCrisisCheck(); // Single Projectile/Tracer
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 1, random(1,5)*3, "BulletPuff", 0, CBAF_NORANDOM);
				}
				else
				{
					A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 32, 12, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
				}
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("ChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			TNT1 A 0 A_MonsterRefire(32,"MissileEnd");
			goto StartMissile;
		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CRG2 H 9
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 160) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(8); }
			}
			Goto See;

		Pain: 
			CRG2 H 2 Fast;
			CRG2 H 2 Fast A_DVDSPain();
			Goto See;
		Pain.Fist:
			CRG2 H 2 Fast;
			CRG2 H 2 Fast A_DVDSPain();
			CRG2 HH 2 Fast;
			Goto See;
		Pain.Kick:
			CRG2 H 2 Fast;
			CRG2 H 2 Fast A_DVDSPain();
			CRG2 HHHH 2 Fast;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			CRG2 HH 2;
			CRG2 H 2
			{
				A_DVDSPain();
				A_StartSound("elecstun");
				A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			CRG2 HHH 1;
			Goto See;
		Pain.Electric: 
		Pain.Lightning: 
		Pain.Thunder: 
			CRG2 H 2;
			CRG2 H 2;
			CRG2 H 2 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CRG2 H 2;
			CRG2 H 2;
			CRG2 H 2;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CRG2 H 2;
			CRG2 H 2;
			CRG2 H 2;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SRG2 I 8 ;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SRG2 H 5 A_GenericFreezeDeath();
			SRG2 H 1 A_FreezeDeathChunks();
			wait;
		Raise: 
			SRG2 N 5;
			SRG2 MLKJI 5;
			Goto See;
	}
}
class ChaingunSpectre : ChaingunDemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/PinkyDemon Type"
		Tag "Blood Spectre [Chaingun]";
		Species "Pinky";
		+DONTHARMCLASS;
		+DONTHARMSPECIES;

		+SHADOW;
		RenderStyle "OptFuzzy";
		Alpha 0.5;
		Obituary "%o was mowed down by a chaingun-wielding Blood spectre.";
		HitObituary "%o Was chewed up and spat out by a Blood spectre.";
	}
	
	States 
	{
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodSpectreArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
 }
}

class DSRevenant : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Revenant Type"
		Tag "Revenant";

		Health 300;
		Radius 20;
		Height 56;
		ProjectilePassHeight 84;
		Mass 500;
		Speed 10;
		Painchance 100;
		Painchance "Fist", 150; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 250; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 150; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.5; // 12.0
		DamageFactor "Plasma", 1.125;
		Painchance "Plasma", 113;
		DamageFactor "Thunder", 1.25; // Revenants = +25% Thunder Damage
		Painchance "Thunder", 125; // Revenants = +25% Pain Chance
		DamageFactor "Electric", 1.25; // Revenants = +25% Thunder Damage
		Painchance "Electric", 125; // Revenants = +25% Pain Chance
		DamageFactor "Lightning", 1.25; // Revenants = +25% Thunder Damage
		Painchance "Lightning", 125; // Revenants = +25% Pain Chance
		DamageFactor "Fire", 1.33; // Revenants = +33% Fire Damage
		Painchance "Fire", 133; // Revenants = +33% Pain Chance
		DamageFactor "Holy", 2.25; // Undead = +125% Holy Damage
		Painchance "Holy", 225; // Undead = +125% Pain Chance
		Monster;
		MeleeThreshold 196;
		+MISSILEMORE;
		+FLOORCLIP;
		SeeSound "skeleton/sight";
		PainSound "revenant/pain";
		DeathSound "skeleton/death";
		ActiveSound "skeleton/active";
		MeleeSound "skeleton/melee";
		HitObituary "%o was beaten down by a revenant.";
		Obituary "%o couldn't evade a revenant's missile.";
		
		dropitem "DoomSpellMana2", 16;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	states
	{
		Spawn:
			SKEL A 0 NoDelay;
			SKEL AB 10 A_Look();
			goto Spawn+1;
		See:
			SKEL A 0;
			SKEL AABBCCDDEEFF 2
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			TNT1 A 0;
			SKEL G 6 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_SkelWhoosh();
				A_FaceTarget();
			}
			SKEL H 6 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			SKEL I 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,10)*6,"skeleton/melee","none","Melee",true);
			}
			goto See;

		Missile:
			TNT1 A 0;
			SKEL J 0 bright A_FaceTarget();
			SKEL J 10 bright 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
		MissileStart:
			SKEL K 10 // A_SkelMissile
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
	
				A_MonsterCrisisCheck(); // Multiple Projectiles
				if (levelbehavior && user_monsterlevel > 120) 
				{
					A_CrisisSpawnProjectile("RevenantTracerNew", "RevenantTracerCrisis", 40, 10); 
					A_CrisisSpawnProjectile("RevenantTracerNew", "RevenantTracerCrisis", 40, -10); 
				}
				else
				if (levelbehavior && user_monsterlevel > 60) 
				{
					if (random(1,4) == 1)
					{
						A_CrisisSpawnProjectile("RevenantTracerNew", "RevenantTracerCrisis", 40, 10); 
						A_CrisisSpawnProjectile("RevenantTracerNew", "RevenantTracerCrisis", 40, -10); 
					}
					else
					{
						A_CrisisSpawnProjectile("RevenantTracerNew", "RevenantTracerCrisis", 40); 
					}
				}
				else
				{
					A_CrisisSpawnProjectile("RevenantTracerNew", "RevenantTracerCrisis", 40);
				}
			}
			SKEL K 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
			}
			SKEL K 0
			{
				if (random(1,256) <= (16 + (user_monsterlevel/15))) { return resolvestate("MissileStart"); }
				return resolvestate(null);
			}
			goto See;

		Pain:
			SKEL L 5;
			SKEL L 5 A_DVDSPain();
			Goto See;
		Pain.Fist:
			SKEL L 5;
			SKEL L 5 A_DVDSPain();
			SKEL LL 5;
			Goto See;
		Pain.Kick:
			SKEL L 5;
			SKEL L 5 A_DVDSPain();
			SKEL LLLL 5;
			Goto See;


		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			SKEL L 5;
			SKEL L 5 A_DVDSPain();
			SKEL L 5;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SKEL LM 7;
			SKEL N 7 A_Scream();
			SKEL O 7 A_NoBlocking();
			SKEL P 7;
			SKEL Q -1;
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SKEL L 5 A_GenericFreezeDeath();
			SKEL L 1 A_FreezeDeathChunks();
			wait;
		Raise:
			SKEL Q 5;
			SKEL PONML 5;
			Goto See;
	}
}
class DeathIncarnate : AetheriusMonsterZSC
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Revenant Type"
		Tag "Death Incarnate";

		Health 600;
		Radius 20;
		Height 56;
		ProjectilePassHeight 84;
		Mass 500;
		Speed 12;
		MeleeDamage 7;
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 96; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 1.5;

		RadiusDamageFactor 0.667;
		DamageFactor "Explosive", 0.667;
		Painchance "Explosive", 43;

		Damagefactor "IncarnateGlare", 0;
		Painchance "IncarnateGlare", 0;
		Damagefactor "Holy", 18; // Hades Scions are already 6x weak to Holy. Death Incarnate itself is 3x more weak to Holy, for a total of 18x damage.
		Damagefactor "Sceptre", 6;
		Painchance "Holy", 255; // Undead = +250% Pain Chance
		DamageFactor "Crush", 1.5; // 12.0
		DamageFactor "Fire", 0.1; // Incarnates = -80% Fire Damage
		Painchance "Fire", 13; // Incarnates = -80% Pain Chance
		DamageFactor "Plasma", 1.5;
		Painchance "Plasma", 96;
		DamageFactor "Thunder", 2;
		Painchance "Thunder", 120;
		DamageFactor "Electric", 2;
		Painchance "Electric", 120;
		DamageFactor "Lightning", 2;
		Painchance "Lightning", 120;
		DamageFactor "Shock", 2;
		Painchance "Shock", 120;
		MaxTargetRange 896;
		MONSTER;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SeeSound "monster/incsit";
		PainSound "dincarnate/pain";
		DeathSound "monster/incdth";
		ActiveSound "monster/incact";
		AttackSound "monster/incatk";
		MeleeSound "monster/inchit";
		Obituary "%o was killed by a Death Incarnate's glare.";
		HitObituary "%o was beaten to death by a Death Incarnate.";
		dropitem "DoomSpellMana", 64;
		dropitem "DoomSpellMana2", 32;
		dropitem "DoomSpellMana3", 8;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "RocketAmmo", 2, 1;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	States 
	{
		Spawn:
			INCA A 0 NoDelay;
			INCA AB 10 A_Look();
			goto Spawn+1;
		See:
			INCA A 0;
			INCA AABBCCDDEEFF 2
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; MaxTargetRange = 2048; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			TNT1 A 0;
		Melee2:
			INCA G 0 A_Jump(128,5);
			INCA G 0 A_FaceTarget();
			INCA G 6  
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_SkelWhoosh();
			}
			INCA H 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			INCA I 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,10)*7,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			Goto See;
			INCA R 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_SkelWhoosh();
			}
			INCA S 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			INCA T 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,11)*6,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			INCA G 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				
				A_SkelWhoosh();
			}
			INCA H 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			INCA I 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,11)*6,"skeleton/melee","none","Melee",true); // A_SkelFist
			}
			Goto See;

		Missile:
			TNT1 A 0;
			INCA J 5
			{
				user_shotsfiredmax = 10;
				user_shotaccuracy = 30.0;
				user_shotzaccuracy = 0.0;
				if (user_charmed) { user_shotaccuracy *= 0.667; user_shotzaccuracy *= 0.667; }
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); user_shotsfiredmax += 12; user_shotaccuracy = user_shotaccuracy * 1 / 4; user_shotzaccuracy = user_shotzaccuracy * 1 / 4; }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); user_shotsfiredmax += 8; user_shotaccuracy = user_shotaccuracy * 2 / 4; user_shotzaccuracy = user_shotzaccuracy * 2 / 4; }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); user_shotsfiredmax += 4; user_shotaccuracy = user_shotaccuracy * 3 / 4; user_shotzaccuracy = user_shotzaccuracy * 3 / 4; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
				A_FaceTarget();
			}
			INCA J 5
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
		MissileStart:
			INCA U 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				A_FaceTarget();
	
				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0) // Hitscan
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, user_shotsfiredmax, 3, "DIPuff", 1024);
				}
				else // Tracers
				{
					for (user_shotsfired = 0; user_shotsfired < user_shotsfiredmax; user_shotsfired++)
					{
						A_CrisisSpawnProjectile("IncarnateGlareTracer", "IncarnateGlareTracerCrisis", 56, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
			}
			INCA K 10
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
			}
			INCA K 0
			{
				if (random(1,256) <= (16 + (user_monsterlevel/15))) { return resolvestate("MissileStart"); }
				return resolvestate(null);
			}
			Goto See;

		Pain: 
			INCA L 5;
			INCA L 5 A_DVDSPain();
			Goto See;
		Pain.Plasma:
			INCA L 5;
			INCA L 5 A_DVDSPain();
			INCA LL 5;
			Goto See;
		Pain.Thunder:
		Pain.Electric:
		Pain.Lightning:
		Pain.Shock:
			INCA L 5;
			INCA L 5 A_DVDSPain();
			INCA LLL 5;
			Goto See;
		Pain.Fist:
			INCA L 5;
			INCA L 5 A_DVDSPain();
			INCA LL 5;
			Goto See;
		Pain.Kick:
			INCA L 5;
			INCA L 5 A_DVDSPain();
			INCA LLLL 5;
			Goto See;

		Death:
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				int chance = (192 - (user_deathcounter * 24));
				
				if (random(1,256) <= chance) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;
		Death.Plasma:
			TNT1 A 0
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				int chance = (144 - (user_deathcounter * 16));
				
				if (random(1,256) <= chance) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;
		Death.Thunder:
		Death.Electric:
		Death.Lightning:
		Death.Shock:
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				int chance = (96 - (user_deathcounter * 12));
				
				if (random(1,256) <= chance) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;
		Death.SpectralLow:
		Death.Sigil:
			TNT1 A 0 
			{
				if (health <= ((SpawnHealth() + Stamina) * -1)) return resolvestate("XDeath");
				if (random(1,256) <= 8) return resolvestate("FakeDeath");
				return resolvestate(null);
			}
			goto Death2;

		Death2:
			TNT1 A 0 
			{
				A_DVDSNormalDeath(-2,0,1); // True death
				user_truekill == 1;
			}
			INCA L 7;
			INCA M 7;
			INCA N 7 A_Scream();
			INCA O 7 A_NoBlocking();
			INCA P 7;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCA Q 38;
			INCA Q 39;
			INCX Q 0 Bright A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCA Q -1;
			Stop;
		FakeDeath:
			TNT1 A 0 
			{
				A_DVDSNormalDeath(-2,2,1); // Fake death
				user_deathcounter += 1;
			}
			INCA L 6;
			INCA M 6;
			INCA N 6 A_Scream();
			INCA O 6 A_NoBlocking();
			INCA P 6;
			INCA Q 0 A_Jump(192,4);
			INCA Q 0 A_Jump(128,4);
			INCA Q 0 A_Jump(96,4);
			INCA Q 0 A_Jump(64,4);
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
			INCA Q 115;
		RegenCycle:
			INCA Q 0 CanRaise Thing_Raise(0);
			INCA Q 5;
			loop;

		Death.Massacre:
		Death.SilentMassacre:
		XDeath:
			TNT1 A 0 
			{
				A_DVDSNormalDeath(-2,0,1);
				user_truekill == 1;
			}
			INCX A 10 Bright A_StartSound("monster/incexp");
			INCX BC 5 Bright;
			INCX D 5 Bright A_NoBlocking();
			INCX D 0 Bright A_SpawnItemEx("HadesSphere",0,0,32,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCX EFGHIJ 5 Bright;
			INCX K -1;
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			INCA L 5 A_GenericFreezeDeath();
			INCA L 1 A_FreezeDeathChunks();
			wait;
		Raise:
			INCA Q 0
			{
				A_KillChildren();
				if (user_truekill)
				{
					user_truekill == 0;
					user_deathcounter == 0;
				}
			}
			INCA Q 5;
			INCA PONML 5;
			Goto See;
	}
}

class HadesSphere : AetheriusMonsterZSC  
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hades Scions"
		Tag "Hades Sphere";

		Health 35;
		Radius 16;
		Height 32;
		Mass 3000;
		Speed 10;
		ExplosionDamage 112;
		ExplosionRadius 112;
		Damagefactor "IncarnateGlare", 0;
		Damagefactor "Holy", 6;
		Damagefactor "Sceptre", 2;
		RenderStyle "Normal";
		Obituary "%o was blown away by a Hades Sphere.";
		PAINCHANCE 0;
		MONSTER;
		+NOPAIN;
		+LOOKALLAROUND;
		+DONTGIB;
		+NOTARGET;
		+NOGRAVITY; 
		+FLOAT;
		+DONTFALL;
		+DONTHARMSPECIES;
		+LONGMELEERANGE;
		+THRUSPECIES;
		Species "HadesSphere";
		SeeSound "monster/hadsit";

		DamageFactor "Crush", 2.0; // 16.0
		Damagefactor "Magic", 2.56;
		Painchance "Holy", 255; // Demons = +300% Pain Chance
	}

	States 
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 4 Bright A_Look();
			goto Spawn+1;
		See:
			HADE E 0;
			HADE EFGH 4 Bright;
			goto Chase;

		Chase:
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				A_UnSetInvulnerable();
				A_SetShootable();
				A_SetSolid();
				
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
	
				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0
			{
				A_HadesSphereTeleport("PhaseOut",128,1024);
			}
			loop;

		PhaseOut:
			HADE H 0 Bright
			{
				A_UnSetSolid();
				A_UnSetShootable();
			}
			HADE H 5 Bright A_StartSound("monster/hadtel");
			HADE GFEIJKL 4 Bright;
			goto Stalking;

		Stalking:
			TNT1 AAAAAAA 2 Bright A_DVDSChase(null,null,CHF_NOPLAYACTIVE|CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 Bright A_Jump(96,"PhaseIn");
			loop;

		PhaseIn:
			HADE L 3 Bright A_StartSound("monster/hadtel");
			HADE KJIEFG 4 Bright;
			HADE H 0 Bright 
			{
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HSphereTeleportCooldown", 1);
			}
			Goto Chase;

		Melee:
			TNT1 A 0;
			HADE H 0 A_SetInvulnerable();
			HADE HGFE 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
			}
			HADE E 0 
			{
				A_GetHSHealthPreExp();
				A_Die("HSExplode");
			}
			Stop;
			
		Pain:
		Pain.Fist:
		Pain.Kick:
		Pain.PoisonNeedle:
			Goto See;
			
		Death.HSExplode:
		Death:
			HADE E 0 Bright A_Noblocking();
			HADE E 0 Bright A_SpawnProjectile("HSBoom",0,0,0,0);
			HADE E 0 A_UnSetInvulnerable();
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			Stop;
		XDeath:
			HADE E 0 A_Jump(8,"Death");
			HADE E 0 A_UnSetInvulnerable();
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HADE N 0 Bright A_Noblocking();
			HADE H 5 Bright A_StartSound("monster/haddth");
			HADE GFE 4 Bright;
			HADE RSTUVWX 4 Bright;
			Stop;
		Ice:
			goto Death;
	}
}

class DSCacodemon : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Cacodemon Type"
		Tag "Cacodemon";
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.6;
		DamageFactor "Plasma", 0.833;
		Painchance "Plasma", 107;
		DamageFactor "Thunder", 0.66; // Cacodemons = -33% Thunder Damage
		Painchance "Thunder", 85; // Demons = -33% Pain Chance
		DamageFactor "Electric", 0.66; // Cacodemons = -33% Thunder Damage
		Painchance "Electric", 85; // Demons = -33% Pain Chance
		DamageFactor "Lightning", 0.66; // Cacodemons = -33% Thunder Damage
		Painchance "Lightning", 85; // Demons = -33% Pain Chance
		DamageFactor "Fire", 0.66; // Cacodemons = -33% Fire Damage
		Painchance "Fire", 85; // Demons = -33% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		Species "Cacodemon";
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+DONTHARMSPECIES;
		bloodcolor "blue";
		SeeSound "caco/sight";
		PainSound "cacodemon/pain";
		DeathSound "caco/death";
		ActiveSound "caco/active";
		Obituary "$OB_CACO";
		HitObituary "$OB_CACOHIT";

		dropitem "DoomSpellMana2", 16;
		dropitem "GreenArmor", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	states
	{
		Spawn:
			HEAD A 0 NoDelay;
			HEAD A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			HEAD A 0;
			HEAD A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				
				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0 
			{
				user_painfastchase = 0;
			}
			HEAD BC 5
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
			}
			HEAD D 5 bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("CacodemonBall", "CacodemonBallCrisis", user_tempvar1, (random(1,10)*6), "caco/melee"); // See CacodemonBall
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("CacodemonBall","CacodemonBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("CacodemonBall","CacodemonBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("CacodemonBall","CacodemonBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("CacodemonBall","CacodemonBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			goto See;

		Pain:
			TNT1 A 0 A_ActorShadowSplit(120,256);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HEAD F 6;
			Goto See;
		Pain.Sceptre:
		Pain.Holy:
			TNT1 A 0 A_ActorShadowSplit(120,4);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HEAD F 6;
			Goto See;
		Pain.Fist:
			TNT1 A 0 A_ActorShadowSplit(120,64);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 5 * random(1,8);
			}
			HEAD FF 6;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_ActorShadowSplit(120,192);
			HEAD E 3;
			HEAD E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 7 * random(1,8);
			}
			HEAD FFFF 6;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			TNT1 A 0 A_ActorShadowSplit(120,random(96,160));
			HEAD E 2;
			HEAD E 2
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HEAD F 4;
			Goto See;
		
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacodemonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacodemonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("CacodemonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HEAD G 8;
			HEAD H 8 A_Scream();
			HEAD IJ 8;
			HEAD K 8 A_NoBlocking();
			HEAD L -1 A_SetFloorClip();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HEAD F 5 A_GenericFreezeDeath;
			HEAD F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HEAD L 8 A_UnsetFloorClip();
			HEAD KJIHG 8;
			Goto See;
	}
}
class CacodemonShadowSplitAfterImage : AetheriusBaseZSC
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}
class CacodemonShadowSplit1 : CacodemonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacodemonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class CacodemonShadowSplit2 : CacodemonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacodemonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class CacodemonShadowSplit3 : CacodemonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacodemonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class CacodemonShadowSplit4 : CacodemonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacodemonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class Cacolantern : DSCacodemon
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Cacodemon Type"
		Tag "Cacolantern";

		Health 800;
		Painchance 112;
		Painchance "Fist", 168; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 168; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.9375;
		RadiusDamageFactor 0.9375;
		DamageFactor "Explosive", 0.9375;

		DamageFactor "Crush", 0.6;
		DamageFactor "Plasma", 0.92;
		Painchance "Plasma", 103;
		DamageFactor "Thunder", 0.83; // Cacodemons = -17% Thunder Damage
		Painchance "Thunder", 94; // Demons = -17% Pain Chance
		DamageFactor "Electric", 0.83; // Cacodemons = -17% Thunder Damage
		Painchance "Electric", 94; // Demons = -17% Pain Chance
		DamageFactor "Lightning", 0.83; // Cacodemons = -17% Thunder Damage
		Painchance "Lightning", 94; // Demons = -17% Pain Chance
		DamageFactor "Fire", 0.50; // Cacodemons = -50% Fire Damage
		Painchance "Fire", 56; // Demons = -50% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		bloodcolor "blue";
		Species "Cacodemon";
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		Obituary "%o was smitten by a cacolantern.";
		HitObituary "%o got too close to a cacolantern.";
		PainSound "cacodemon/pain";

		dropitem "DoomSpellMana2", 24;
		dropitem "DoomSpellMana2", 24;
		dropitem "GreenArmor", 2;
		dropitem "BlueArmor", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	States
	{
		Spawn:
			HED2 A 0 NoDelay;
			HED2 A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			HED2 A 0;
			HED2 A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0 
			{
				user_painfastchase = 0;
			}
			HED2 BC 5
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HED2 D 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("CacolanternBall", "CacolanternBallCrisis", user_tempvar1, (random(1,10)*8), "caco/melee"); // See CacodemonBall
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("CacolanternBall","CacolanternBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("CacolanternBall","CacolanternBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("CacolanternBall","CacolanternBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("CacolanternBall","CacolanternBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			goto See;

		Pain:
			TNT1 A 0 A_ActorShadowSplit(90,256);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED2 F 6;
			Goto See;
		Pain.Sceptre:
		Pain.Holy:
			TNT1 A 0 A_ActorShadowSplit(90,4);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED2 F 6;
			Goto See;
		Pain.Fist:
			TNT1 A 0 A_ActorShadowSplit(90,64);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 5 * random(1,8);
			}
			HED2 FF 6;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_ActorShadowSplit(90,192);
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 7 * random(1,8);
			}
			HED2 FFFF 6;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			TNT1 A 0 A_ActorShadowSplit(90,random(96,160));
			HED2 E 3;
			HED2 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED2 F 4;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("CacolanternShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("CacolanternShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HED2 G 8 A_NoBlocking();
			HED2 H 8 A_Scream();
			HED2 IJK 8;
			HED2 L -1 A_SetFloorClip();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HED2 F 5 A_GenericFreezeDeath();
			HED2 F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HED2 L 8 A_UnsetFloorClip();
			HED2 KJIHG 8;
			Goto See;
	}
}
class CacolanternShadowSplitAfterImage : CacodemonShadowSplitAfterImage
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}
class CacolanternShadowSplit1 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class CacolanternShadowSplit2 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class CacolanternShadowSplit3 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class CacolanternShadowSplit4 : CacolanternShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("CacolanternShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class Abaddon : Cacolantern
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Cacodemon Type"
		Tag "Abaddon";

		Health 1200;
		Speed 12;
		Painchance 80;
		Painchance "Fist", 120; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 200; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 120; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;

		DamageFactor "Crush", 0.6;
		DamageFactor "Fire", 0.33; // Cacodemons = -66% Fire Damage
		Painchance "Fire", 26; // Demons = -66% Pain Chance
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 240; // Demons = +300% Pain Chance
		Species "Cacodemon";
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		PainSound "cacodemon/pain";
		Obituary "%o was smitten by an abaddon.";
		HitObituary "%o became food for an abaddon.";
		bloodcolor "red";

		dropitem "DoomSpellMana2", 32;
		dropitem "DoomSpellMana2", 32;
		dropitem "DoomSpellMana2", 32;
		dropitem "DoomSpellMana3", 16;
		dropitem "GreenArmor", 2;
		dropitem "BlueArmor", 2;
		dropitem "StoneSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States
	{
		Spawn:
			HED3 A 0 NoDelay;
			HED3 A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			HED3 A 0;
			HED3 A 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(8,8);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0 
			{
				user_painfastchase = 0;
			}
			HED3 BC 5
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HED3 D 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("AbaddonBall", "AbaddonBallCrisis", user_tempvar1, (random(1,10)*10), "caco/melee"); // See CacodemonBall
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HED3 CBC 5
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HED3 D 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("AbaddonBall", "AbaddonBallCrisis", user_tempvar1, (random(1,10)*10), "caco/melee"); // See CacodemonBall
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("AbaddonBall","AbaddonBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			goto See;
		Pain:
			TNT1 A 0 A_ActorShadowSplit(60,256);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Pain.Sceptre:
		Pain.Holy:
			TNT1 A 0 A_ActorShadowSplit(60,4);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Pain.Fist:
			TNT1 A 0 A_ActorShadowSplit(60,64);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 5 * random(1,8);
			}
			HED3 FF 6;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_ActorShadowSplit(60,192);
			HED3 E 3;
			HED3 E 3
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 7 * random(1,8);
			}
			HED3 FFFF 6;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			TNT1 A 0 A_ActorShadowSplit(60,random(96,160));
			HED3 E 3;
			HED3 E 3 
			{
				A_FloatPain(0,8,64);
				user_painfastchase = 4 * random(1,8);
			}
			HED3 F 6;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("AbaddonShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("AbaddonShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			HDSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HED3 G 8 A_NoBlocking();
			HED3 H 8 A_Scream();
			HED3 IJK 8;
			HED3 L -1 A_SetFloorClip();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HED3 F 5 A_GenericFreezeDeath();
			HED3 F 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HED3 L 8 A_UnsetFloorClip();
			HED3 KJIHG 8;
			Goto See;
	}
}
class AbaddonShadowSplitAfterImage : CacodemonShadowSplitAfterImage
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	States
	{
		Spawn:
			HDSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}

class AbaddonShadowSplit1 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class AbaddonShadowSplit2 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class AbaddonShadowSplit3 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class AbaddonShadowSplit4 : AbaddonShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			HDSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("AbaddonShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class DSPainElemental : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Others"
		Tag "Pain Elemental";
		
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		MeleeRange 80;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.6;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		Monster;
		+FLOAT;
		+NOGRAVITY;
		+AVOIDMELEE;
		SeeSound "pain/sight";
		PainSound "pain/pain";
		DeathSound "pain/death";
		ActiveSound "pain/active";
		obituary "%o got munched on by a Pain Elemental.";

		dropitem "DoomSpellMana2", 16;
		dropitem "SoulSphere2", 2;
		dropitem "SoulSphere2", 2;
		dropitem "SoulSphere2", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}
	
	states
	{
		Spawn:
			PAIN A 0 NoDelay;
			PAIN A 10 A_FloatLook(16);
			goto Spawn+1;
		See:
			PAIN A 0;
			PAIN AABBC 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			PAIN C 3
			{
				A_FloatChaseCheck(4,8,12,16,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(6,12);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;

				if (A_JumpIfCloser(1024,"IdleMissile"))
				{
					if (levelbehavior && user_monsterlevel > 240) { if (random(1,1000) <= 700) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 180) { if (random(1,1000) <= 550) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 120) { if (random(1,1000) <= 400) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 60) { if (random(1,1000) <= 200) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			loop;

		IdleMissile:
			PAIN DE 5
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			PAIN F 5 bright    // See LostSoul
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
				
				string classname = "DSLostSoul";
				int flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
				if (random(1,256) <= A_GetEvolveChance())
				{
					if (random(1,384) <= A_GetEvolveChance())
					{
						if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																								 else classname = "ForgottenOne";
					}
					else
					{
						if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																								 else classname = "DSLostSoul2";
					}
				}
				else
				{
					if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																							 else classname = "DSLostSoul";
				}
				if (classname == "BetaLostSoul") flags |= PAF_NOSKULLATTACK;
				A_PainAttack(classname,0,flags,10);
			}
			goto See;

		Melee:
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			PAIN DE 5
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			PAIN F 5 bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
				
				if (CheckMeleeRange()) 
				{ 
					A_CrisisMeleeAttack(10*random(1,6),"caco/melee","none","Melee",true); 
				}
				else
				{
					A_MonsterCrisisCheck();  // PainAttack
					string classname = "DSLostSoul";
					int flags = PAF_AIMFACING|PAF_INDIVIDUALLIMIT|PAF_LIMITCOUNTALLTYPES;
					if (user_canusecrisisatk == 1)
					{
						if (random(1,256) <= A_GetEvolveChance()) 
						{
							if (random(1,384) <= A_GetEvolveChance()) 
							{
								if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																										 else classname = "ForgottenOne";
							}

							else
							{
								if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																										 else classname = "DSLostSoul2";
							}
						}
						else
						{
							if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																									 else classname = "DSLostSoul";
						}

						A_DualPainAttack(classname,0,flags,10);
						A_PainAttack(classname,0,flags,10);
					}
					else
					{
						if (random(1,256) <= A_GetEvolveChance())
						{
							if (random(1,384) <= A_GetEvolveChance())
							{
								if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																										 else classname = "ForgottenOne";
							}
							
							else
							{
								if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																										 else classname = "DSLostSoul2";
							}
						}
						else
						{
							if (random(1,256) <= A_GetEvolveChance()) classname = "BetaLostSoul";
																									 else classname = "DSLostSoul";
						}
						
						A_PainAttack(classname,0,flags,10);
					}
				}
			}
			goto See;

		Pain:
			TNT1 A 0 A_ActorShadowSplit(60,64);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			Goto See;
		Pain.Sceptre:
		Pain.Holy:
			TNT1 A 0 A_ActorShadowSplit(60,1);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			Goto See;
		Pain.Fist:
			TNT1 A 0 A_ActorShadowSplit(60,4);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			PAIN GG 6;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_ActorShadowSplit(60,12);
			PAIN G 6;
			PAIN G 6 A_FloatPain(0,8,64);
			PAIN GGGG 6;
			Goto See;
		Shadowsplit1:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit1a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+192, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit2a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+64, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit3a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit3", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+0, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		Shadowsplit4a:
			TNT1 A 0
			{
				A_ActorStartShadowSplit();
				A_SpawnItemEx("PElementalShadowSplit1", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit2", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PElementalShadowSplit4", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				ThrustThing(angle*256/360+128, 20, 0, 0);
			}
			Goto FinishShadowSplit;
		FinishShadowSplit:
			PNSS AAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx ("PElementalShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			TNT1 A 0 A_ActorEndShadowSplit();
			TNT1 A 0
			{
				if (random(1,4) <= 3) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			PAIN H 8 bright;
			PAIN I 8 bright A_Scream();
			PAIN JK 8 bright;
			PAIN L 8 bright A_PainDie();    // See LostSoul
			PAIN M 8 bright;
			stop;
		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			PAIN G 5 A_GenericFreezeDeath();
			PAIN G 1 A_FreezeDeathChunks();
			wait;
	}
}
class PElementalShadowSplitAfterImage : AetheriusBaseZSC
{
	default
	{
		Radius 31;
		Height 56;
		+NOGRAVITY;
		+FLOORCLIP;
		+NOLIFTDROP;
		Alpha 0.4;
		RenderStyle "Translucent";
	}
	
	States
	{
		Spawn:
			PNSS B 1 A_FadeTo (0, 0.04, 1);
			Loop;
	}
}
class PElementalShadowSplit1 : PElementalShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+64, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("PElementalShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class PElementalShadowSplit2 : PElementalShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+192, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("PElementalShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class PElementalShadowSplit3 : PElementalShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+128, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("PElementalShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}
class PElementalShadowSplit4 : PElementalShadowSplitAfterImage
{
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 ThrustThing(angle*256/360+0, 20, 0, 0);
			PNSS AAAAAAAAAAAAAAA 1 A_SpawnItemEx ("PElementalShadowSplitAfterImage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Stop;
	}
}

class HadesElemental : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hades Scions"
		Tag "Hades Elemental";

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;

		obituary "%o was electrocuted by a Hades Elemental.";
		hitobituary "%o got chomped by a Hades Elemental.";
		health 1600;
		radius 31;
		height 60;
		Mass 800;
		speed 10;
		MeleeDamage 10;
		DamageType "Normal";
		seesound "monster/helsit";
		painsound "monster/helpai";
		deathsound "monster/heldth";
		activesound "monster/helact";
		meleesound "caco/melee";
		MONSTER;
		+FLOAT;
		+NOGRAVITY;
		+MISSILEMORE;
		+NOTARGET;
		+DONTHARMSPECIES;
		+NORADIUSDMG;
		+AVOIDMELEE;

		DamageFactor "Holy", 6;
		DamageFactor "Lightning", 0;
		Damagefactor "Crush", 0.5;
		Damagefactor "Fire", 0.5;
		Damagefactor "Ice", 1.5;
		Damagefactor "Magic", 2.56;

		painchance 32;
		Painchance "Fist", 48; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 80; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 48; // Fist attacks have a +50% chance of stunning an enemy
		PainChance "Ice", 64;
		PainChance "Fire", 16;
		Painchance "Holy", 255; // Demons = +300% Pain Chance
	}
	
	states
	{
		Spawn:
			HELE A 0 NoDelay;
			HELE A 10 A_FloatLook(12);
			Goto Spawn+1;
		See:
			HELE A 0;
			HELE A 0 A_SetShootable();
			HELE AAAAAAAAAAA 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HELE A 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(3,24);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;

				if (A_JumpIfCloser(1024,"IdleMissile"))
				{
					if (levelbehavior && user_monsterlevel > 180) { if (random(1,1000) <= 550) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 120) { if (random(1,1000) <= 400) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 60) { if (random(1,1000) <= 200) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			HELE A 0
			{
				A_HETeleport("TeleportChoose");
			}
			goto See+1;

		TeleportChoose:
			HELE A 0 A_HadesTeleportChoose(90);
			goto Teleport;
		Teleport:
			HELE A 0 
			{
				A_UnSetShootable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.90);
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(0.70);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.50);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.30);
			HELE A 1 A_SetTranslucent(0.20);
			HELE A 1 A_SetTranslucent(0.10);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSWander(0,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.10);
			HELE A 1 A_SetTranslucent(0.20);
			HELE A 1 A_SetTranslucent(0.30);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.50);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.70);
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(0.90);
			HELE A 1 A_SetTranslucent(1.0);
			HELE A 0 
			{
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HadesTeleportCooldown", 1);
			}
			goto See+1;
			
		Teleport2:
			HELE A 0 
			{
				A_UnSetShootable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.20);
			TNT1 A 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSWander(0,1,3,1,1);
			TNT1 A 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			HELE A 1 A_StartSound("monster/heltel");
			HELE A 1 A_SetTranslucent(0.20);
			HELE A 1 A_SetTranslucent(0.40);
			HELE A 1 A_SetTranslucent(0.60);
			HELE A 1 A_SetTranslucent(0.80);
			HELE A 1 A_SetTranslucent(1.0);
			HELE A 0 
			{
				A_SetSolid();
				A_SetShootable();
				A_GiveInventory("HadesTeleportCooldown", 1);
			}
			goto See+1;

		IdleMissile:
			HELE BC 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
			}
			HELE D 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();

				A_PainAttack("HadesSphere",0,PAF_NOSKULLATTACK|PAF_AIMFACING);
			}
			goto See+1;

		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
		ChooseMissile:
			HELE A 0 A_Jump(256,"Missile1","Missile2","Missile3");
		Missile1:
			HELE EF 5 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HELE G 5 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }

				double angvar = 1.0 + frandompick(-0.25,-0.125,-0.125,0,0,0,0.125,0.125,0.25);
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HadesElementalBall","HadesElementalBallCrisis",24,0,(-10*angvar));
				A_CrisisSpawnProjectile("HadesElementalBall","HadesElementalBallCrisis",24,0,(-5*angvar));
				A_CrisisSpawnProjectile("HadesElementalBall","HadesElementalBallCrisis",24,0,(0*angvar));
				A_CrisisSpawnProjectile("HadesElementalBall","HadesElementalBallCrisis",24,0,(5*angvar));
				A_CrisisSpawnProjectile("HadesElementalBall","HadesElementalBallCrisis",24,0,(10*angvar));
			}
			goto See+1;

		Missile2:
			HELE EF 5 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HELE G 5 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HadesBolt","HadesBoltCrisis",32,0,-16);
				A_CrisisSpawnProjectile("HadesBolt","HadesBoltCrisis",32,0,0);
				A_CrisisSpawnProjectile("HadesBolt","HadesBoltCrisis",32,0,16);
			}
			goto See+1;

		Missile3:
			HELE BC 5 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HELE D 5 Bright 
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }

				A_DualPainAttack("HadesSphere");
			}
			goto See+1;

		Melee:
			TNT1 A 0;
			HELE ABD 5 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HELE C 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,10) * 10, "caco/melee","none","Melee",true);
			}
			goto See+1;

		Pain:
			TNT1 A 0 A_HadesTeleport(90,96);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE H 6;
			goto See;
		Pain.Magic:
			TNT1 A 0 A_HadesTeleport(90,96);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE HH 6;
			goto See;
		Pain.Sceptre:
			TNT1 A 0 A_HadesTeleport(90,6);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE H 6;
			goto See;
		Pain.Fist:
			TNT1 A 0 A_HadesTeleport(90,24);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE HH 6;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_HadesTeleport(90,72);
			HELE H 3;
			HELE H 3 A_FloatPain(0,6,64);
			HELE HHHH 6;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HELE I 5 Bright A_Scream();
			HELE JKL 5 Bright;
			HELE M 5 Bright A_NoBlocking();
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",36,36);
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",-36,36);
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",-36,-36);
			HELE M 0 Bright A_SpawnItemEx("HadesSphere",36,-36);
			HELE NOP 5 Bright;
			HELE QRSTU 5;
			HELE V -1 A_SetFloorClip();
			stop;
		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			HELE H 5 A_GenericFreezeDeath();
			HELE H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HELE V 0 A_UnsetFloorClip();
			HELE U 0;
			HELE TSRQPONMLKJI 5;
			goto See;
	}
}

class HadesOverLord : AetheriusMonsterZSC
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/Hades Scions";
		Tag "Hades Overlord";

		dropitem "DoomSpellMana", 112;
		dropitem "DoomSpellMana", 112;
		dropitem "DoomSpellMana2", 84;
		dropitem "DoomSpellMana2", 84;
		dropitem "DoomSpellMana3", 56;
		dropitem "DoomSpellMana3", 56;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;

		Health 4000;
		Radius 31;
		Height 78;
		Mass 2000;
		Speed 13;
		DamageType "Normal";
		MONSTER;
		Obituary "%o was smitten by a Hades Overlord.";
		HitObituary "A Hades Overlord ate %o for lunch.";
		+FLOORCLIP;
		+NORADIUSDMG;
		+NOTARGET;
		+MISSILEEVENMORE;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		+AVOIDMELEE;
		MeleeDamage 20;
		MeleeRange 68;
		SeeSound "monster/ovlsit";
		PainSound "monster/ovlpai";
		DeathSound "monster/ovldth";
		ActiveSound "monster/ovlact";
		MeleeSound "caco/melee";

		PainChance 30;
		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 45; // Fist attacks have a +50% chance of stunning an enemy
		PainChance "Ice", 40;
		PainChance "Fire", 10;
		Painchance "Holy", 120; // Demons = +300% Pain Chance
		DamageFactor "Holy", 6;
		DamageFactor "Lightning", 0;
		Damagefactor "Crush", 0.5;
		Damagefactor "Fire", 0.5;
		Damagefactor "Ice", 1.5;
		Damagefactor "Magic", 2.56;
	}

	states
	{
		Spawn:
			OVER A 0 NoDelay;
			OVER A 10 A_FloatLook(12);
			Goto Spawn+1;
		See:
			OVER A 0;
			OVER A 0 A_UnSetInvulnerable();
			OVER AABBAAC 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			OVER C 3
			{
				A_FloatChaseCheck(3,6,9,12,0.5,0.5);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }

				A_FastChaseCalc(4,16);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,4)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;

				if (A_JumpIfCloser(1024,"IdleMissile"))
				{
					if (levelbehavior && user_monsterlevel > 240) { if (random(1,1000) <= 700) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 180) { if (random(1,1000) <= 550) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 120) { if (random(1,1000) <= 400) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					else if (levelbehavior && user_monsterlevel > 60) { if (random(1,1000) <= 200) { return resolvestate("IdleMissile"); } return resolvestate(null); }
					return resolvestate(null);
				}
				else { return resolvestate(null); }
				return resolvestate(null);
			}
			OVER A 0
			{
				A_HOTeleport("TeleportChoose");
				return resolvestate(null);
			}
			goto See;

		TeleportChoose:
			OVER F 0 A_HadesTeleportChoose(90);
			goto Teleport;
		Teleport:
			OVER F 0;
			OVER F 0 
			{
				A_SetInvulnerable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.90);
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(0.70);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.50);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.30);
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 1 A_SetTranslucent(0.10);
			OVER F 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.10);
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 1 A_SetTranslucent(0.30);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.50);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.70);
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(0.90);
			OVER F 1 A_SetTranslucent(1.0);
			OVER F 0
			{
				A_SetSolid();
				A_UnSetInvulnerable();
				A_GiveInventory("HadesTeleportCooldown", 1);
			}
			goto See;
		Teleport2:
			OVER F 0 
			{
				A_SetInvulnerable();
				if (random(1,4) <= 1) { A_UnSetSolid(); }
			}
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			TNT1 A 0 A_Jump(128,50);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			OVER F 1 A_StartSound("monster/heltel");
			OVER F 1 A_SetTranslucent(0.20);
			OVER F 1 A_SetTranslucent(0.40);
			OVER F 1 A_SetTranslucent(0.60);
			OVER F 1 A_SetTranslucent(0.80);
			OVER F 1 A_SetTranslucent(1.0);
			OVER F 0
			{
				A_SetSolid();
				A_UnSetInvulnerable();
				A_GiveInventory("HadesTeleportCooldown", 1);
			}
			goto See;

		IdleMissile:
			OVER DE 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			OVER FFFF 4 bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
				A_PainAttack("HSOverlord",0,PAF_AIMFACING);
			}
			OVER FF 0 bright
			{
				if (levelbehavior && user_monsterlevel > 90)
				{
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
					A_FaceTarget();
					A_PainAttack("HSOverlord",0,PAF_AIMFACING);
				}
				else
				{
					A_SetTics(0);
				}
			}
			goto See+1;

		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			OVER D 0 A_Jump(256,"Missile1","Missile2","Missile3");
		Missile1:
			OVER DE 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			OVER FFFF 4 bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
				A_PainAttack("HSOverlord",0,PAF_AIMFACING);
			}
			OVER FF 0 bright
			{
				if (levelbehavior && user_monsterlevel > 90)
				{
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
					else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
					A_FaceTarget();
					A_PainAttack("HSOverlord",0,PAF_AIMFACING);
				}
				else
				{
					A_SetTics(0);
				}
			}
			goto See;
		Missile2:
			OVER GH 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			OVER H 8 Bright 
			{
				A_FaceTarget();
				A_StartSound("weapons/shock");
				A_MonsterCrisisCheck(); // Single Projectile
				if (health <= user_HPLowRange)
				{
					A_CrisisSpawnProjectile("StormShot2","StormShot2Crisis",43,0,0,0,0);
				}
				else
				{
					A_CrisisSpawnProjectile("StormShot1","StormShot1Crisis",43,0,0,0,0);
				}
			}
			goto See;
		Missile3:
			OVER JJJJ 2
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_FaceTarget();
			}
			OVER K 4 Bright 
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HadesOverlordBall","HadesOverlordBallCrisis",92,-40,random(-3,3),0,random(-3,3));
				A_CrisisSpawnProjectile("HadesOverlordBall","HadesOverlordBallCrisis",8,-40,random(-3,3),0,random(-3,3));
				A_CrisisSpawnProjectile("HadesOverlordBall","HadesOverlordBallCrisis",92,40,random(-3,3),0,random(-3,3));
				A_CrisisSpawnProjectile("HadesOverlordBall","HadesOverlordBallCrisis",8,40,random(-3,3),0,random(-3,3));
				A_CrisisSpawnProjectile("OverBall","OverBallCrisis",54,-50,random(-3,3),0,random(-3,3));
				A_CrisisSpawnProjectile("OverBall","OverBallCrisis",54,50,random(-3,3),0,random(-3,3));
			}
			OVER J 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				
				A_SpidRefire();
			}
			OVER J 0 A_Jump(32,"See");
			goto Missile3+4;

		Melee:
			TNT1 A 0;
			OVER ADF 5
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
			}
			OVER E 5
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(random(1,10) * 14, "caco/melee","none","Melee",true);
			}
			goto See;

		Pain:
			TNT1 A 0 A_HadesTeleport(90,48);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			goto See;
		Pain.Magic:
			TNT1 A 0 A_HadesTeleport(90,48);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			OVER LL 12;
			goto See;
		Pain.Sceptre:
			TNT1 A 0 A_HadesTeleport(90,3);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			goto See;
		Pain.Fist:
			TNT1 A 0 A_HadesTeleport(90,12);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			OVER LL 6;
			Goto See;
		Pain.Kick:
			TNT1 A 0 A_HadesTeleport(90,36);
			OVER L 6;
			OVER L 6 A_FloatPain(0,6,64);
			OVER LLLL 6;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			OVER M 0 bright A_Facetarget();
			OVER M 8 bright A_Scream();
			OVER NO 8 bright;
			OVER P 0 bright A_Noblocking();
			OVER PPPPP 0 bright A_SpawnProjectile("OverFlesh1",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPP 0 bright A_SpawnProjectile("OverFlesh2",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh3",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh4",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh5",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER PPPPPPPPPP 0 A_SpawnProjectile("OverFlesh6",random(0,90),random(0,40),random(-180,180),2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverBigArm1",40,-40,-90,2,random(-1,1));
			OVER P 0 bright A_SpawnProjectile("OverBigArm2",40,40,90,2,random(-1,1));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm1",100,-30,-90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm1",100,30,90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm2",100,-30,-90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverSmallArm2",100,30,90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverHorn1",110,-16,-90,2,random(-15,15));
			OVER P 0 bright A_SpawnProjectile("OverHorn2",110,16,90,2,random(-15,15));
			OVER PQRSTUV 8 bright;
			stop;
		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			OVER L 5 A_GenericFreezeDeath();
			OVER L 1 A_FreezeDeathChunks();
			wait;
	}
}

class HSOverlord : AetheriusMonsterZSC
{ 
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hades Scions"
		Tag "Hades Sphere";

		Health 35;
		Radius 16;
		Height 32;
		Mass 3000; 
		Speed 10;
		RenderStyle "Normal";
		Obituary "%o was blown away by a Hades Sphere.";

		MONSTER;
		+NOPAIN;
		+LOOKALLAROUND;
		+DONTGIB;
		+NOTARGET;
		+NOGRAVITY;
		+FLOAT;
		+DONTFALL;
		+DONTHARMSPECIES;
		+FORCEXYBILLBOARD;
		+AVOIDMELEE;
		+THRUSPECIES;
		Species "HadesSphere";

		DamageFactor "Crush", 2.0;
		Damagefactor "Magic", 2.56;
		Damagefactor "Holy", 6;
		Damagefactor "Sceptre", 2;
		Painchance "Holy", 255; // Demons = +300% Pain Chance

		MeleeThreshold 192;
		SeeSound "monster/hadsit";
	}
	States 
	{
		Spawn:
			TNT1 A 0 NoDelay;
			TNT1 A 4 Bright A_Look();
			goto Spawn+1;
		See:
			HADE EFGH 4 Bright;
			HADE A 0;
			goto Chasing;
		Chasing:
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				A_UnSetInvulnerable();
				A_SetShootable();
				A_SetSolid();
				
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0 Bright 
			{
				A_HadesSphereTeleport("Teleport",128,1024);
			}
			loop;

		Teleport:
			HADE H 0 Bright 
			{
				A_UnSetSolid();
				A_UnSetShootable();
				A_SetInvulnerable();
			}
			HADE H 5 Bright A_StartSound("monster/hadtel");
			HADE GFEIJKL 3 Bright;
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 Bright A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			HADE L 3 Bright A_StartSound("monster/hadtel");
			HADE KJIEFG 4 Bright;
			HADE H 0 Bright 
			{
				A_SetSolid();
				A_SetShootable();
				A_UnSetInvulnerable();
				A_GiveInventory("HSphereTeleportCooldown", 1);
			}
			Goto Chasing;

		Melee:
			HADE A 0;
			HADE H 0 A_SetInvulnerable();
			HADE HGFE 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 80) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(3); }
			}
			HADE E 0 
			{
				A_GetHSHealthPreExp();
				A_Die("HSExplode");
			}
			stop;
			
		Pain:
		Pain.Fist:
		Pain.Kick:
		Pain.PoisonNeedle:
			Goto See;
			
		Death.HSExplode:
		Death:
			HADE E 0 Bright A_Noblocking();
			HADE E 0 Bright A_SpawnProjectile("HSBoomOverlord",0,0,0,0);
			TNT1 A 0 A_UnSetInvulnerable();
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			TNT1 A 5;
			Stop;
		XDeath:
			TNT1 A 0 A_UnSetInvulnerable();
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HADE N 0 Bright A_Noblocking();
			HADE H 5 Bright A_StartSound("monster/haddth");
			HADE GFE 4 Bright;
			HADE RSTUVWX 4 Bright;
			Stop;
		Ice:
			goto Death;
	}
}

class DSArachnotron : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Arachnotron Type"
		Tag "Arachnotron";

		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		Painchance 128;
		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Fire", 96;
		DamageFactor "Fire", 0.75;

		Painchance "Plasma", 176;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 224;
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 224;
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 224;
		DamageFactor "Lightning", 1.75;

		Damagefactor "Crush", 0.65;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance

		Species "Arachnotron";
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+DONTHARMSPECIES;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "$OB_BABY";
		
		dropitem "DoomSpellMana2", 18;
		dropitem "Cell", 2, 20;
		dropitem "Cell", 2, 20;
		dropitem "CellPack", 2, 100;
		dropitem "PlasmaRifle", 2, 40;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}
 
	states
	{
		Spawn:
			BSPI A 0 NoDelay;
			BSPI AB 10 A_Look();
			goto Spawn+1;
		See:
			BSPI A 0;
			BSPI A 20;
			BSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1) 
				{
					A_BabyMetal(); 
				}
				else
				{
					A_DVDSChase("Melee","Missile",0,1,3,1,1); 
				}
				if (user_walksound >= 6) { user_walksound = 0; }
			}
			goto See+2;

		Missile:
			TNT1 A 0;
			BSPI AA 10 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_FaceTarget();
			}
		Missile2:
			TNT1 A 0;
			BSPI G 4 bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("ArachnotronPlasma","ArachnotronPlasmaCrisis");
			}
			BSPI H 4 bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(3); }
			}
			BSPI H 1 bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(0); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(randompick(0,0,1,1,1)); }
				A_SpidRefire();
			}
			goto Missile2;

		Pain:
			BSPI I 3;
			BSPI I 3 A_DVDSPain();
			Goto See+2;
		Pain.Fist:
			BSPI I 3;
			BSPI I 3 A_DVDSPain();
			BSPI II 3;
			Goto See+2;
		Pain.Kick:
			BSPI I 3;
			BSPI I 3 A_DVDSPain();
			BSPI IIII 3;
			Goto See+2;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			BSPI II 3;
			BSPI I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSPI I 2;
			BSPI I 1;
			BSPI I 2;
			Goto See+1;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			BSPI I 3;
			BSPI I 3;
			BSPI I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSPI I 3;
			BSPI I 3;
			BSPI I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSPI I 3;
			BSPI I 3;
			BSPI I 3;
			Goto See+1;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BSPI J 20 A_Scream();
			BSPI K 7 A_NoBlocking();
			BSPI LMNO 7;
			BSPI P -1 A_DVDSBossDeath();
			stop;
		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			BSPI I 5 A_GenericFreezeDeath();
			BSPI I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BSPI P 5;
			BSPI ONMLKJ 5;
			Goto See+1;
	}
}

class ArachnotronMK2 : DSArachnotron
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Arachnotron Type"
		Tag "Augmented Arachnotron";

		Obituary "%o was toasted by an augmented arachnotron.";
		Health 1000;
		Radius 64;
		Height 64;
		Mass 900;
		Speed 14;
		Scale 1;
		BloodColor "bf af 20";
		Painchance 64;
		Painchance "Fist", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 160; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 96; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Fire", 72;

		DamageFactor 0.75;
		RadiusDamageFactor 0.75;
		DamageFactor "Explosive", 0.75;

		DamageFactor "Fire", 0.75;
		Painchance "Plasma", 88;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 112;
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 112;
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 112;
		DamageFactor "Lightning", 1.75;

		Damagefactor "Crush", 0.65;

		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		Species "Arachnotron";
		+DONTHARMSPECIES;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";

		dropitem "DoomSpellMana2", 18;
		dropitem "Cell", 2, 20;
		dropitem "Cell", 2, 20;
		dropitem "CellPack", 2, 100;
		dropitem "PlasmaRifle", 2, 40;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}

	States
	{
		Spawn:
			BSP2 A 0 NoDelay;
			BSP2 AB 10 A_Look();
			goto Spawn+1;
		See:
			BSP2 A 0;
			BSP2 A 20;
			BSP2 AABBCCDDEEFF 3
			{
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1) { A_BabyMetal(); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 6) { user_walksound = 0; }
			}
			Goto See+2;
		Missile:
			TNT1 A 0;
			BSP2 AA 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }

				A_FaceTarget();
			}
		Missile2:
			TNT1 A 0;
			BSP2 G 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("ArachnotronPlasma","ArachnotronPlasmaCrisis",19,-12);
			}
			BSP2 R 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
			}
			BSP2 H 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("ArachnotronPlasma","ArachnotronPlasmaCrisis",19,12);
			}
			BSP2 Q 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_SpidRefire();
			}
			Goto Missile2;

		Pain:
			BSP2 I 3;
			BSP2 I 3 A_DVDSPain();
			Goto See+2;
		Pain.Fist:
			BSP2 I 3;
			BSP2 I 3 A_DVDSPain();
			BSP2 II 3;
			Goto See+2;
		Pain.Kick:
			BSP2 I 3;
			BSP2 I 3 A_DVDSPain();
			BSP2 IIII 3;
			Goto See+2;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			BSP2 II 3;
			BSP2 I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSP2 I 2;
			BSP2 I 1;
			BSP2 I 2;
			Goto See+1;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			BSP2 I 3;
			BSP2 I 3;
			BSP2 I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSP2 I 3;
			BSP2 I 3;
			BSP2 I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			BSP2 I 3;
			BSP2 I 3;
			BSP2 I 3;
			Goto See+1;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BSP2 J 20 A_Scream();
			BSP2 K 7 A_NoBlocking();
			BSP2 LMNO 7;
			BSP2 P -1 A_DVDSBossDeath();
			Stop;
		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			BSP2 I 5 A_GenericFreezeDeath();
			BSP2 I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BSP2 P 5;
			BSP2 ONMLKJ 5;
			Goto See+1;
	}
}

class FusionArachnotron : DSArachnotron
{
	default
	{
		//$Angled;
		//$Color 12;
		//$Category "DV-DS Monsters/Arachnotron Type";
		Tag "Fusion Arachnotron";
		OBITUARY "%o was vaporized by a fusion cannon Arachnotron";
		Health 1000;
		Radius 64;
		Height 64;
		Mass 900;
		Speed 12;
		Painchance 96;
		Painchance "Fist", 144; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 240; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 144; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;

		Painchance "Fire", 72;
		DamageFactor "Fire", 0.75;

		Painchance "Plasma", 132;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 168;
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 168;
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 168;
		DamageFactor "Lightning", 1.75;

		Damagefactor "Crush", 0.65;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance

		SEESOUND "baby/sight";
		PainSound "farachnotron/pain";
		DEATHSOUND "baby/death";
		ACTIVESOUND "baby/active";
		MONSTER;
		+FLOORCLIP;
		+MISSILEMORE;
		+MISSILEEVENMORE;
		Species "Arachnotron";
		+AVOIDMELEE;
		+DONTHARMSPECIES;

		dropitem "DoomSpellMana2", 36;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "PlasmaRifle", 2, 40;
		dropitem "PlasmaRifle", 2, 40;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}

	states
	{
		Spawn:
			FSPI A 0 NoDelay;
			FSPI AB 10 A_Look();
			goto Spawn+1;
		See:
			FSPI A 0;
			FSPI A 20;
			FSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1) { A_BabyMetal(); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 6) { user_walksound = 0; }
			}
			goto See+2;

		Missile:
			TNT1 A 0;
			FSPI A 20 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(random(randompick(0,0,0,1),5)*2); } // 0/2-10
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(random(1,6)*2); } // 2-12
				else if (levelbehavior && user_monsterlevel > 135) { A_SetTics(random(2,7)*2); } // 4-14
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(random(3,8)*2); } // 6-16
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(random(4,9)*2); } // 8-18
				else { A_SetTics(random(5,10)*2); } // 10-20
				
				A_FaceTarget();
			}
			FSPI A 4 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_shotsfired = 0;
				if (levelbehavior && user_monsterlevel > 240) { user_spread1 = -2; user_spread2 = 2; }
				else if (levelbehavior && user_monsterlevel > 160) { user_spread1 = -3; user_spread2 = 3; }
				else if (levelbehavior && user_monsterlevel > 80) { user_spread1 = -4; user_spread2 = 4; }
				else { user_spread1 = -5; user_spread2 = 5; }

				user_shotsfiredmax = 8;
				A_FaceTarget();
			}
		MissileHold:
			FSPI GH 3 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_FaceTarget();

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("FusionShot","FusionShotCrisis",24,0,5*random(user_spread1,user_spread2));
				if (levelbehavior && user_monsterlevel > 150) { A_CrisisSpawnProjectile("FusionShot","FusionShotCrisis",24,0,5*random(user_spread1,user_spread2)); }
				if (levelbehavior && user_monsterlevel > 300) { A_CrisisSpawnProjectile("FusionShot","FusionShotCrisis",24,0,5*random(user_spread1,user_spread2)); }

				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("MissileEnd"); }
				return resolvestate(null);
			}
			loop;
		MissileEnd:
			FSPI H 1 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(0); }

				if (random(1,32) == 1) { return resolvestate("Missile"); }
				return resolvestate(null);
			}
			Goto See+2;

		Pain:
			FSPI I 3;
			FSPI I 3 A_DVDSPain();
			Goto See+2;
		Pain.Fist:
			FSPI I 3;
			FSPI I 3 A_DVDSPain();
			FSPI II 3;
			Goto See+2;
		Pain.Kick:
			FSPI I 3;
			FSPI I 3 A_DVDSPain();
			FSPI IIII 3;
			Goto See+2;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			FSPI II 3;
			FSPI I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			FSPI I 2;
			FSPI I 1;
			FSPI I 2;
			Goto See+1;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			FSPI I 3;
			FSPI I 3;
			FSPI I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			FSPI I 3;
			FSPI I 3;
			FSPI I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			FSPI I 3;
			FSPI I 3;
			FSPI I 3;
			Goto See+1;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FSPI J 20 A_Scream();
			FSPI K 7 A_NoBlocking();
			FSPI LMNO 7;
			FSPI P -1 A_DVDSBossDeath();
			Stop;
		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			FSPI I 5 A_GenericFreezeDeath();
			FSPI I 1 A_FreezeDeathChunks;
			wait;
		Raise:
			FSPI P 5;
			FSPI ONMLKJ 5;
			Goto See+1;
	}
}

class DSRailArachnotron : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Arachnotron Type"
		Tag "Arachnotron";
		
		dropitem "DoomSpellMana2", 36;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 100;
		dropitem "CellPack", 2, 40;
		dropitem "CellPack", 2, 40;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;

		Damagefactor "Crush", 0.65;
		DamageFactor "Fire", 0.75;
		Painchance "Fire", 96;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance

		Painchance 128;

		Painchance "Plasma", 176;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 224;
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 224;
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 224;
		DamageFactor "Lightning", 1.75;


		Painchance "Fist", 192; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 192; // Fist attacks have a +50% chance of stunning an enemy

		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		Damage 30;
		Monster;
		+FLOORCLIP;
		SeeSound "baby/sight";
		PainSound "arachnotron/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "%o was railed by an arachnotron.";
		Decal "RedRailScorch";
		
		Species "Arachnotron";
		+DONTHARMSPECIES;
	}

	States
	{
		Spawn:
			RSPI A 0 NoDelay;
			RSPI AB 10 A_Look();
			goto Spawn+1;
		See:
			RSPI A 0;
			RSPI A 20;
			RSPI AABBCCDDEEFF 3
			{
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1) { A_BabyMetal(); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 6) { user_walksound = 0; }
			}
			goto See+2;

		Missile:
			TNT1 A 0;
			RSPI A 0 A_StartSound("baby/chargerailgun");
			RSPI AG 16
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 210) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(15); }
				A_FaceTarget();
			}
			RSPI H 4
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				A_MonsterCrisisCheck();
				A_CrisisRailgun(30, 6, "AA0000", "FF0000", 0, 1, 0, "DBTRailPuff", 0, 0, 8192, 35, 1.0, 1.0, "None", -14, 270, 0, 1.5);
			}
			RSPI G 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
			}
			Goto See+2;

		Pain:
			RSPI I 3;
			RSPI I 3 A_DVDSPain();
			Goto See+2;
		Pain.Fist:
			RSPI I 3;
			RSPI I 3 A_DVDSPain();
			RSPI II 3;
			Goto See+2;
		Pain.Kick:
			RSPI I 3;
			RSPI I 3 A_DVDSPain();
			RSPI IIII 3;
			Goto See+2;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			RSPI II 3;
			RSPI I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			RSPI I 2;
			RSPI I 1;
			RSPI I 2;
			Goto See+1;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			RSPI I 3;
			RSPI I 3;
			RSPI I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			RSPI I 3;
			RSPI I 3;
			RSPI I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			RSPI I 3;
			RSPI I 3;
			RSPI I 3;
			Goto See+1;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			RSPI J 20 A_Scream();
			RSPI K 7 A_NoBlocking();
			RSPI LMNO 7;
			RSPI P -1 A_DVDSBossDeath();
			Stop;
		Ice:
			"####" # 0 A_DVDSIceDeath(-2,0,1);
			RSPI I 5 A_GenericFreezeDeath();
			RSPI I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			RSPI P 5;
			RSPI ONMLKJ 5;
			Goto See+1;
 }
}

class DSFatso : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Mancubus Type"
		Tag "Mancubus";

		Health 600;
		Radius 48;
		Height 64;
		Mass 1000;
		Speed 8;
		Painchance 80;
		Painchance "Fist", 120; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 200; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 120; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.45; // 3.6
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 240; // Demons = +300% Pain Chance
		DamageFactor "Plasma", 1.0875;
		Painchance "Plasma", 87;
		DamageFactor "Thunder", 1.175;
		Painchance "Thunder", 94; // Demons = -17% Pain Chance
		DamageFactor "Electric", 1.175;
		Painchance "Electric", 94;
		DamageFactor "Lightning", 1.175;
		Painchance "Lightning", 94;

		Species "Mancubi";
		Monster;
		+DONTHARMSPECIES;
		+FLOORCLIP;
		+BOSSDEATH;
		SeeSound "fatso/sight";
		PainSound "fatso/pain";
		DeathSound "fatso/death";
		ActiveSound "fatso/active";
		Obituary "$OB_FATSO";

		dropitem "DoomSpellMana2", 20;
		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "MegaSphere2", 2;
		dropitem "BlueArmor", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}
	
	states
	{
		Spawn:
			FATT A 0 NoDelay; 
			FATT AB 15 A_Look();
			goto Spawn+1;
		See:
			FATT A 0;
			FATT AABBCCDDEEFF 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); } 
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(3); }
				
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;


		Missile:
			TNT1 A 0
			{
				user_attacktype = 1;
				if (random(1,256) <= 16) { user_attacktype = -1; }
				if (random(1,256) <= 16) { user_attacktype *= 2; }
			}
			FATT G 20 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 140) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }

				A_FatRaise();
			}
		MissileStart:
			FATT H 10 bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("FatShot","FatShotCrisis",32,0,0.0);
				A_CrisisSpawnProjectile("FatShot","FatShotCrisis",32,0,11.25*user_attacktype);
			}
			FATT IG 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_FaceTarget();
			}
			FATT H 10 bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("FatShot","FatShotCrisis",32,0,0.0);
				A_CrisisSpawnProjectile("FatShot","FatShotCrisis",32,0,-11.25*user_attacktype);
			}
			FATT IG 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_FaceTarget();
			}
			FATT H 10 bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("FatShot","FatShotCrisis",32,0,5.625*user_attacktype);
				A_CrisisSpawnProjectile("FatShot","FatShotCrisis",32,0,-5.625*user_attacktype);
			}
			FATT IG 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_FaceTarget();
			}
			FATT G 0
			{
				if (random(1,256) <= (8 + (user_monsterlevel/30))) { return resolvestate("MissileStart"); }
				return resolvestate(null);
			}
			goto See;

		Pain:
			FATT J 3;
			FATT J 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			FATT J 3;
			FATT J 3 A_DVDSPain();
			FATT JJ 3;
			Goto See;
		Pain.Kick:
			FATT J 3;
			FATT J 3 A_DVDSPain();
			FATT JJJJ 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FATT K 6;
			FATT L 6 A_Scream();
			FATT M 6 A_NoBlocking();
			FATT NOPQRS 6;
			FATT T -1 A_DVDSBossDeath();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FATT J 5 A_GenericFreezeDeath();
			FATT J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			FATT R 5;
			FATT QPONMLK 5;
			Goto See;
	}
}

class Hectebus : DSFatso
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Mancubus Type"
		Tag "Hectebus";

		Health 1200;
		Radius 48;
		Height 64;
		Speed 9;
		Mass 1500;
		Painchance 40;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 60; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.95;
		RadiusDamageFactor 0.95;
		DamageFactor "Explosive", 0.95;

		DamageFactor "Crush", 0.45; // 3.6
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 60; // Demons = +300% Pain Chance
		DamageFactor "Plasma", 1.0875;
		Painchance "Plasma", 43;
		DamageFactor "Thunder", 1.175;
		Painchance "Thunder", 47; // Demons = -17% Pain Chance
		DamageFactor "Electric", 1.175;
		Painchance "Electric", 47;
		DamageFactor "Lightning", 1.175;
		Painchance "Lightning", 47;
		Species "Mancubi";
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SEESOUND "hect/see";
		PAINSOUND "hect/pain";
		ACTIVESOUND "hect/active";
		DEATHSOUND "hect/die";
		Obituary "%o was cremated by a hectebus.";

		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "BFG9000", 2, 40;
		dropitem "MegaSphere2", 2;
		dropitem "MegaSphere2", 2;
		dropitem "StoneSkin", 2;
		dropitem "StoneSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}

	States
	{
		Spawn:
			HECT A 0 NoDelay;
			HECT AB 12 A_Look();
			goto Spawn+1;
		See:
			HECT A 0;
			HECT AABBCCDDEEFF 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0
			{
				user_attacktype = 1;
				if (random(1,256) <= 16) { user_attacktype = -1; }
				if (random(1,256) <= 16) { user_attacktype *= 2; }
				A_StartSound("hect/raiseguns");
			}
			HECT G 20 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(20); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(19); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 140) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }

				A_FaceTarget();
			}
		MissileStart:
			HECT H 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,0*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,5.625*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,11.25*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,16.875*user_attacktype);
			}
			HECT IG 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_FaceTarget();
			}
			HECT H 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,-0*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,-5.625*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,-11.25*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,-16.875*user_attacktype);
			}
			HECT IG 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_FaceTarget();
			}
			HECT H 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,-11.25*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,-5.625*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,0*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,5.625*user_attacktype);
				A_CrisisSpawnProjectile("HectShot","HectShotCrisis",28,0,11.25*user_attacktype);
			}
			HECT IG 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_FaceTarget();
			}
			HECT G 0
			{
				if (random(1,256) <= (12 + (user_monsterlevel/24))) { return resolvestate("MissileStart"); }
				return resolvestate(null);
			}
			goto See;

		Pain:
			HECT J 3;
			HECT J 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			HECT J 3;
			HECT J 3 A_DVDSPain();
			HECT JJ 3;
			Goto See;
		Pain.Kick:
			HECT J 3;
			HECT J 3 A_DVDSPain();
			HECT JJJJ 3;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HECT K 6;
			HECT L 6 A_Scream();
			HECT M 6 A_NoBlocking();
			HECT NOPQRS 6;
			HECT T -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HECT J 5 A_GenericFreezeDeath();
			HECT J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HECT R 5;
			HECT QPONMLK 5;
			Goto See;
	}
}

// Daedabus
class Daedabus : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Mancubus Type"
		Tag "Daedabus";

		Health 2100;
		Radius 48;
		Height 64;
		Mass 2000;
		Speed 10;
		Painchance 40;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 60; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.90;
		RadiusDamageFactor 0.90;
		DamageFactor "Explosive", 0.90;

		DamageFactor "Crush", 0.45; // 3.6
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 60; // Demons = +300% Pain Chance
		DamageFactor "Plasma", 1.0875;
		Painchance "Plasma", 43;
		DamageFactor "Thunder", 1.175;
		Painchance "Thunder", 47; // Demons = -17% Pain Chance
		DamageFactor "Electric", 1.175;
		Painchance "Electric", 47;
		DamageFactor "Lightning", 1.175;
		Painchance "Lightning", 47;

		BloodColor "73 00 00";
		Species "Mancubi";
		MONSTER;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		+FLOORCLIP;
		SeeSound "Daedabus/Sight";
		PainSound "Daedabus/Pain";
		DeathSound "Daedabus/Death";
		ActiveSound "Daedabus/Active";
		Obituary "%o was Torched by a Daedabus.";

		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "RocketLauncher", 2, 1;
		dropitem "BFG9000", 2, 40;
		dropitem "MegaSphere2", 2;
		dropitem "MegaSphere2", 2;
		dropitem "MegaSphere2", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}

	States
	{
		ResetLevel:
			DAED A 1 A_Look();
			DAED A 1;
			DAED A 1 
			{
				user_ressurrectstr += random(10,20);
			}
			DAED A 1;
			goto Spawn;
		Spawn:
			DAED AB 15 A_Look();
			loop;
		See:
			DAED A 0;
			DAED AABBCCDDEEFF 4
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; A_SetTics(3); }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); } 
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(3); }

				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Missile:
			TNT1 A 0
			{
				user_attacktype = 1;
				if (random(1,256) <= 16) { user_attacktype = -1; }
				if (random(1,256) <= 16) { user_attacktype *= 2; }
			}
			DAED G 0 A_StartSound("Daedabus/Attack");
			DAED G 18 
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 240) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 210) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(17); }
				A_FaceTarget();
			}
		MissileStart:
			DAED H 9 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(8); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,11.25*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,5.625*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,0*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,-5.625*user_attacktype);
			}
			DAED I 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			DAED G 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			DAED H 9 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(8); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,5.625*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,0*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,-5.625*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,-11.25*user_attacktype);
			}
			DAED I 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			DAED G 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			DAED H 9 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(8); }

				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,16.875*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,11.25*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,5.625*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,0*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,-5.625*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,-11.25*user_attacktype);
				A_CrisisSpawnProjectile("DaedFire","DaedFireCrisis",28,0,-16.875*user_attacktype);
			}
			DAED I 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			DAED G 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			DAED G 0
			{
				if (random(1,256) <= (16 + (user_monsterlevel/18))) { return resolvestate("MissileStart"); }
				return resolvestate(null);
			}
			Goto See;
		
		Pain:
			DAED J 3;
			DAED J 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			DAED J 3;
			DAED J 3 A_DVDSPain();
			DAED JJ 3;
			Goto See;
		Pain.Kick:
			DAED J 3;
			DAED J 3 A_DVDSPain();
			DAED JJJJ 3;
			Goto See;
		
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DAED K 6;
			DAED L 6 A_Scream();
			DAED M 6 A_NoBlocking();
			DAED NOPQRS 6;
			DAED T -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DAED J 5 A_GenericFreezeDeath();
			DAED J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DAED R 5 ;
			DAED QPONMLK 5;
			Goto See;
		XDeath:
			goto Death;
	}
}

class DSArchvile : AetheriusMonsterZSC 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Archvile Type"
		Tag "Arch Vile";

		Health 700;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 15;
		Painchance 10;
		Painchance "Stomp", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Trample", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Magic", 4; // Archviles super resistant to magic attacks [0.4x pain chance]
		Painchance "Fist", 50; // Archviles are super suspectible to Punch attacks [10x pain chance]
		Painchance "Kick", 255; // Archviles are always flinched by the kick attack [50x pain chance]
		Painchance "Gauntlets", 50; // Archviles are super suspectible to Punch attacks [10x pain chance]
		Painchance "Chainsaw", 50; // Archviles are super suspectible to Chainsaw attacks [10x pain chance]
		Painchance "Melee", 50; // Archviles are super suspectible to Melee attacks [10x pain chance]
		PainChance "Fire", 1;
		PainChance "Ice", 35;
		DamageFactor "Crush", 0.4; // 3.2
		DamageFactor "Fire", 0.1;
		DamageFactor "Ice", 1.66;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 30; // Demons = +300% Pain Chance
		DamageFactor "Magic", 0.64;
		Damagefactor "Stomp", 2.5;
		Damagefactor "Trample", 2.5;
		DamageFactor "Fist", 2.5;
		DamageFactor "Kick", 2.5;
		DamageFactor "PoisonNeedle", 2.5;
		DamageFactor "Gauntlets", 2.5;
		DamageFactor "Sceptre", 2.5;
		DamageFactor "Chainsaw", 2.5;
		DamageFactor "Melee", 2.5;
		MaxTargetRange 896;
		Monster;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		+AVOIDMELEE;
		SeeSound "vile/sight";
		PainSound "vile/pain";
		DeathSound "vile/death";
		ActiveSound "vile/active";
		MeleeSound "vile/stop";
		Obituary "$OB_VILE";

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 24;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "HasteSphere", 2;
		dropitem "SoulSphere2", 2;
		dropitem "BlurSphere2", 2;
		dropitem "MegaSphere2", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}

	states
	{
		Spawn:
			VILE A 0 NoDelay;
			VILE AB 10 A_Look();
			goto Spawn+1;
		See:
			VILE A 0;
			VILE AABBCCDDEEFF 2
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase(null,"Missile", CHF_RESURRECT);
			}
			loop;

		Missile:
			TNT1 A 0
			{
				temp1 = (16 * temp2) + ((user_monsterlevel * 0.293333333) * temp2);
				if (temp1 > 104) { temp1 = 104; }
				//A_LogInt(temp1);
				if (random(1,256) <= temp1) { return resolvestate("Missile2"); }
				temp2 = 1;
				return resolvestate(null);
			}
			VILE G 0 BRIGHT 
			{
				A_VileStart();
				A_MonsterCrisisCheck(); // VileAttack
				if (user_canusecrisisatk == 1) { A_PlayCrisisAtkSound(); }
			}
			VILE G 10 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_FaceTarget();
			}
			VILE H 8 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				if (user_canusecrisisatk == 1)
				{
					A_VileTarget("ArchvileFireCrisis");
				}
				else
				{
					A_VileTarget("ArchvileFireNew");
				}
			}
			VILE IJKLMN 8 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				A_FaceTarget();
			}
			VILE O 8 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				if (user_canusecrisisatk == 1)
				{
					A_VileAttack("vile/stop",(20 * CrisisMultiplier),(70 * CrisisMultiplier),(20 * CrisisMultiplier),8.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				else
				{
					A_VileAttack("vile/stop",20,70,20,1.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			VILE P 20 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }
			}
			Goto See;
		Missile2:
			VILE J 0 BRIGHT
			{
				A_StartSound("vile/firestrt");
			}
			VILE JKLMNO 4 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				A_FaceTarget();
			}
			VILE A 0
			{
				A_StartSound("archvile/firewall");
				A_CrisisSpawnProjectile("ArchvileFlame","ArchvileFlameCrisis",0,0,0);
			}
			VILF A 24 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 165) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 135) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 105) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(19); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(20); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(21); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(22); }
				else if (levelbehavior && user_monsterlevel > 15) { A_SetTics(23); }
			}
			Goto See;

		Heal:
			VILE [ 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
			}
			VILE \ 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_VileHealProj();
			}
			VILE ] 10 Bright
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
			}
			goto See;

		Pain:
			VILE Q 5   
			{
				if (random(1,3) <= 1) { temp2 = random(1,2); }
			}
			VILE Q 5 A_DVDSPain();
			Goto See;
		Pain.Melee:
			VILE Q 5   
			{
				if (random(1,3) <= 1) { temp2 = random(2,3); }
			}
			VILE Q 5 A_DVDSPain();
			Goto See;
		Pain.Fist:
			VILE Q 5
			{
				if (random(1,3) <= 1) { temp2 = 2; }
			}
			VILE Q 5 A_DVDSPain();
			VILE QQ 5;
			Goto See;
		Pain.Kick:
			VILE Q 5
			{
				if (random(1,5) <= 2) { temp2 = 3; }
			}
			VILE Q 5 A_DVDSPain();
			VILE QQQQ 5;
			Goto See;
		Pain.Ice:
			VILE Q 5;
			VILE Q 5 A_DVDSPain();
			VILE Q 10;
			VILE Q 0 A_Jump(128, 4);
			VILE Q 5;
			VILE Q 0 A_Jump(128, 2);
			VILE Q 5;
			VILE Q 0;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			VILE Q 7;
			VILE R 7 A_Scream();
			VILE S 7 A_NoBlocking();
			VILE TUVWXY 7;
			VILE Z -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			VILE Q 5 A_GenericFreezeDeath();
			VILE Q 1 A_FreezeDeathChunks();
			wait;
		
		Raise:
			VILE Y 7;
			VILE XWVVUTSRQ 7;
			Goto See;
	}
}

class Diabloist : DSArchvile  
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Archvile Type"
		Tag "Diabloist";

		Health 1400;
		Radius 20;
		Height 56;
		Mass 750;
		Speed 22.5;
		BloodColor "08 08 08";
		Painchance 10;
		Painchance "Stomp", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Trample", 100; // Archviles are hyper suspectible to Stomp attacks [10x pain chance]
		Painchance "Fist", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Kick", 255; // Archviles are hyper suspectible to Kick attack [50x pain chance]
		Painchance "Gauntlets", 100; // Archvile are super suspectible to Punch attacks [10x pain chance]
		Painchance "Chainsaw", 100; // Archvile are super suspectible to Chainsaw attacks [10x pain chance]
		Painchance "Melee", 100; // Archvile are super suspectible to Melee attacks [10x pain chance]
		PainChance "Fire", 0;
		PainChance "Ice", 35;

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;

		Damagefactor "Stomp", 5;
		Damagefactor "Trample", 5;
		DamageFactor "Fist", 5;
		DamageFactor "Kick", 5;
		DamageFactor "Gauntlets", 5;
		DamageFactor "PoisonNeedle", 5;
		DamageFactor "Sceptre", 5;
		DamageFactor "Chainsaw", 5;
		DamageFactor "Melee", 5;
		DamageFactor "Crush", 0.8; // 6.4
		DamageFactor "Fire", 0.02;
		DamageFactor "Ice", 1.66;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 30; // Demons = +300% Pain Chance
		DamageFactor "Magic", 0.48;
		PainChance "Magic", 4;
		Species "Diabloist";
		MONSTER;
		+QUICKTORETALIATE;
		+FLOORCLIP;
		+NOTARGET;
		+NODROPOFF;
		+NORADIUSDMG;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SeeSound "monster/diasit";
		PainSound "monster/diapai";
		DeathSound "monster/diadth";
		ActiveSound "monster/diaact";
		Obituary "%o got was set ablaze by a Diabloist.";
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 24;
		dropitem "DoomSpellMana2", 24;
		dropitem "DoomSpellMana3", 12;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "HasteSphere", 2;
		dropitem "HasteSphere", 2;
		dropitem "HasteSphere", 2;
		dropitem "HasteSphere", 2;
		dropitem "SoulSphere2", 2;
		dropitem "SoulSphere2", 2;
		dropitem "BlurSphere2", 2;
		dropitem "BlurSphere2", 2;
		dropitem "MegaSphere2", 2;
		dropitem "MegaSphere2", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}
	
	States 
	{
		Missile:
			TNT1 A 0;
			DIAB G 0 A_Jump(85, "GravityAttackCheck");
		// Archvile-Type Fire Spell
		Missile1:
			DIAB G 0 BRIGHT 
			{
				if (random(1,2) <= 1)
				{
					if (random(1,3) <= 1) { return resolvestate("Missile2"); }
					else if (random(1,2) <= 1) { return resolvestate("Missile3"); }
					else { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			DIAB G 0 BRIGHT A_FaceTarget();
			DIAB GH 3 Bright 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_FaceTarget();
			}
			DIAB I 3 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_VileTarget("DFire");
			}
			DIAB HGHIHGHIHGHIGH 3 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_FaceTarget();
			}
			DIAB I 3 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_FaceTarget();
				A_MonsterCrisisCheck(); // VileAttack
				if (user_canusecrisisatk == 1)
				{
					A_PlayCrisisAtkSound();
					A_VileAttack("vile/stop",(40 * CrisisMultiplier),(140 * CrisisMultiplier),(140 * CrisisMultiplier),12.0,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
				else
				{
					A_VileAttack("vile/stop",40,140,140,1.5,"Fire",VAF_DMGTYPEAPPLYTODIRECT);
				}
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(96,"Missile1");
			DIAB G 0 BRIGHT A_Jump(128,"Missile3");
			Goto See;

		// Rapid Fire Shots
		Missile2:
			DIAB NOPNOPNOPNOPNOP 5 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("DFlare","DFlareCrisis",40,0,random(-4,4));
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(96,"Missile2");
			DIAB P 0 BRIGHT A_Jump(64,"Missile3");
			DIAB P 0 BRIGHT A_Jump(128,"Missile4");
			Goto See;

		// Firestorm-Equse Attack
		Missile3:
			DIAB GHIJKLMN 5 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_FaceTarget();
			}
			DIAB O 5 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }

				A_StartSound("weapons/firbfi");
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("DMissile","DMissileCrisis",32,0,0);
			}
			DIAB P 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
			}
			DIAB G 0 Bright A_MonsterRefire(8,"See");
			DIAB P 0 Bright A_Jump(96,"Missile3");
			DIAB P 0 Bright A_Jump(128,"Missile4");
			Goto See;

		// Twin Flame Snakes
		Missile4:
			DIAB [\ 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				A_FaceTarget();
			}
			DIAB ] 8 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }

				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("DTracer","DTracerCrisis",0,-40,0);
				A_CrisisSpawnProjectile("DTracer","DTracerCrisis",0,40,0);
			}
			DIAB G 0 BRIGHT A_MonsterRefire(8,"See");
			DIAB P 0 BRIGHT A_Jump(96,"Missile4");
			DIAB G 0 BRIGHT A_Jump(8,"Missile1");
			Goto See;

		GravityAttackCheck:
			DIAB G 0 Bright A_DiabloistGravityCheck();
		Missile5:
			DIAG A 0 Bright A_FaceTarget();
			DIAG A 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_DiabloistSpawnGravityNodes();
				A_FaceTarget();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_DiabloistGravityPulse(3.0);
				A_FaceTarget();
			}
			DIAG BCBABCBA 3 Bright // 24/16/8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_DiabloistGravityPulse(5.25);
				A_FaceTarget();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 200) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(3); }

				A_DiabloistGravityPulse(9.75);
				A_FaceTarget();
			}
			DIAG BCBA 4 Bright // 16/12/8/4
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 200) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(3); }

				A_DiabloistGravityPulse(12.00);
				A_FaceTarget();
			}
			DIAG DEF 4 Bright // 9/6/3
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 200) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(3); }

				A_FaceTarget();
			}
			DIAG G 4 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 300) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 200) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(3); }

				A_DiabloistGravity(user_gravitytype);
			}
			DIAG FE 3 Bright // 9/6/3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }

				A_FaceTarget();
			}
			DIAG A 0 BRIGHT A_Jump(1,"Missile");
			Goto See;

		Spawn:
			DIAB A 0 NoDelay;
			DIAB AB 10 A_Look();
			goto Spawn+1;
		See:
			DIAB A 0 
			{
				if (health <= user_HPBuffRange) 
				{
					if (health <= user_HPLowBuffRange) 
					{
						A_SetInventory("SpeedBonus18Percent",1);
						A_SetInventory("SpeedBonus12Percent",0);
					}
					else
					{
						A_SetInventory("SpeedBonus12Percent",1);
						A_SetInventory("SpeedBonus18Percent",0);
					}
				}
				else
				{
					A_SetInventory("SpeedBonus18Percent",0);
					A_SetInventory("SpeedBonus12Percent",0);
				}
			}
			DIAB AABBCCDDEEFF 2 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				if (random (1,256) <= (160+(user_monsterlevel/16))) { A_DVDSChase(null,"Missile", CHF_FASTCHASE | CHF_RESURRECT,1,3,1,1); } else { A_DVDSChase(null,"Missile", CHF_RESURRECT,1,3,1,1); } 
			}
			loop;

		Heal:
			DIAB [ 10 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_DiabHealProj(-24.0,-40.0);
			}
			DIAB \ 10 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_DiabHealProj(0.0,0.0);
			}
			DIAB ] 10 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }

				A_DiabHealProj(24.0,40.0);
			}
			Goto See;

		Pain: 
			DIAB Q 5;
			DIAB Q 5 A_DVDSPain();
			DIAB G 0 A_Jump(112, "GravityAttackCheck");
			DIAB G 0 A_Jump(120, "Missile1");
			Goto See;
		Pain.Fist:
			DIAB Q 5;
			DIAB Q 5 A_DVDSPain();
			DIAB QQ 5;
			DIAB G 0 A_Jump(112, "GravityAttackCheck");
			DIAB G 0 A_Jump(120, "Missile1");
			Goto See;
		Pain.Kick:
			DIAB Q 5;
			DIAB Q 5 A_DVDSPain();
			DIAB QQQQ 5;
			DIAB G 0 A_Jump(112, "GravityAttackCheck");
			DIAB G 0 A_Jump(120, "Missile1");
			Goto See;
		Pain.Ice:
			DIAB Q 5;
			DIAB Q 5 A_DVDSPain();
			DIAB Q 10;
			DIAB Q 0 A_Jump(128, 4);
			DIAB Q 5;
			DIAB Q 0 A_Jump(128, 2);
			DIAB Q 5;
			DIAB Q 0;
			Goto See;
		Pain.DoomSpell:
			TNT1 A 0 A_Jump(224, "GravityAttackCheck");
			DIAB G 0 A_Jump(240, "Missile1");
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DIAB Q 7;
			DIAB R 7 A_Scream();
			DIAB S 7 A_NoBlocking();
			DIAB TUVW 7;
			DIAB XY 5;
			DIAB Z -1;
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DIAB Q 5 A_GenericFreezeDeath();
			DIAB Q 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DIAB Y 5;
			DIAB X 5;
			DIAB WVUTSRQ 7;
			goto See;
	}
}

// Hell Warrior
class HellWarrior : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Hell Warrior";

		Species "HellNoble";
		Health 400; 
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1000;
		PainChance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 75; // Fist attacks have a +50% chance of stunning an enemy
		Damagefactor "Crush", 0.5; // 4.0
		Meleedamage 8;
		SeeSound "hellwarrior/sight";
		PainSound "hellwarrior/pain";
		DeathSound "hellwarrior/death";
		ActiveSound "knight/active";
		MeleeSound "baron/melee";
		DamageFactor 0.67;
		RadiusDamageFactor 0.67;
		DamageFactor "Explosive", 0.67;
		DamageFactor "PoisonElemental", 1.5;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 150; // Demons = +300% Pain Chance
		ReactionTime 8;
		MONSTER;
		+BOSSDEATH;
		+FLOORCLIP;
		Missiletype "HellWarriorBall";
		Obituary "%o was tagged by the hell warrior's fireball.";
		HitObituary "%o was torn apart by a hell warrior.";
		dropitem "DoomSpellMana2", 24;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}
	
	States 
	{
		Spawn: 
			HWAR A 0 NoDelay;
			HWAR AB 10 A_Look();
			loop;
		See:
			TNT1 A 0;
			HWAR AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_HellWarShieldOff();
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;
		Missile:
			TNT1 A 0;
			HWAR E 0 A_Jump(128, "Missile2");
			HWAR EF 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			HWAR G 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				user_tempvar1 = 32;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("HellWarriorBall", "HellWarriorBallCrisis", user_tempvar1, 8, "baron/melee", "Melee", true);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HellWarriorBall","HellWarriorBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("HellWarriorBall","HellWarriorBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HellWarriorBall","HellWarriorBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("HellWarriorBall","HellWarriorBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Missile2:
			HWAR H 0 A_Jump(128, "Missile3");
			HWAR H 6
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 25;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HellWarriorBall2", "HellWarriorBall2Crisis", user_tempvar1, 0, 0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 6
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			HWAR A 0
			{
				A_HellWarShieldOff();
				A_FaceTarget();
			}
			Goto See;
		Missile3:
			HWAR H 6
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 25;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HellWarriorBall2", "HellWarriorBall2Crisis", user_tempvar1, 0, 0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 16
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 157) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 135) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 112) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 67) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 45) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 22) { A_SetTics(15); }
				A_SpidRefire();
			}
			HWAR I 4 BRIGHT
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisSpawnProjectile("HellWarriorBall2", "HellWarriorBall2Crisis", 25, 0, 0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("HellWarriorBall2","HellWarriorBall2Crisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			HWAR H 6
			{
				A_HellWarShieldOn();

				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			HWAR A 0
			{
				A_HellWarShieldOff();

				A_FaceTarget();
				if (random(1,6) == 1) { return resolvestate("Missile3"); }
				return resolvestate(null); 
			}
			Goto See;
		Melee: 
			TNT1 A 0;
			HWAR EF 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			HWAR G 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				A_CrisisComboAttack("HellWarriorBall", "HellWarriorBallCrisis", user_tempvar1, 8, "baron/melee", "Melee", true);
			}
			Goto See;
		Pain:
			HWAR J 6 A_DVDSPain();
			HWAR J 0 { if (random(1,256) > 248) { return resolvestate("See"); } return resolvestate(null); }
			Goto PainShield;
		Pain.Fist:
			HWAR J 6 A_DVDSPain();
			HWAR JJ 6;
			HWAR J 0 { if (random(1,256) > 236) { return resolvestate("See"); } return resolvestate(null); }
			Goto PainShield;
		Pain.Kick:
			HWAR J 6 A_DVDSPain();
			HWAR JJJJ 6;
			HWAR J 0 { if (random(1,256) > 224) { return resolvestate("See"); } return resolvestate(null); }
			Goto PainShield;
		PainShield:
			HWAR H 0 A_Jump(16,"Missile2");
			HWAR H 0
			{
				A_HellWarShieldOn();
			}
			HWAR HHHHHHH 6
			{
				A_HellWarShieldOn();
	
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) 
				{
					A_SetTics(9); 
					if (random(1,256) > 192) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (levelbehavior && user_monsterlevel > 120) 
				{
					A_SetTics(8); 
					if (random(1,256) > 224) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else if (levelbehavior && user_monsterlevel > 60) 
				{
					A_SetTics(7); 
					if (random(1,256) > 240) { return resolvestate("Missile2"); } return resolvestate(null);
				}
				else
				{
					if (random(1,256) > 248) { return resolvestate("Missile2"); } return resolvestate(null);
				}
			}
			HWAR H 0 
			{
				A_HellWarShieldOff();
			}
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HWAR K 5 A_SpawnProjectile("EvilWarriorShield", 25, 0, 60);
			HWAR L 5 A_Scream();
			HWAR M 5;
			HWAR N 5 A_NoBlocking();
			HWAR OPQR 5;
			HWAR S 5;
			HWAR T -1 A_DVDSBossDeath();
			Stop; 
		Raise:
			HWAR Q 5;
			HWAR PONMLK 5;
			Goto See;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HWAR J 5 A_GenericFreezeDeath();
			HWAR J 1 A_FreezeDeathChunks();
			wait;
	}
}


class DSBaronofHell : AetheriusMonsterZSC 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Baron of Hell";

		Health 1000;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		bloodcolor "green";
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "PoisonElemental", 75;
		Painchance "Wind", 1;
		DamageFactor "Crush", 0.55; // 4.4
		DamageFactor "Wind", 0.02;
		DamageFactor "PoisonElemental", 1.5;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 150; // Demons = +300% Pain Chance

		Species "HellNoble";
		Monster;
		+FLOORCLIP;
		+BOSSDEATH;
		+DONTHARMSPECIES;
		SeeSound "baron/sight";
		PainSound "baron/pain";
		DeathSound "baron/death";
		ActiveSound "baron/active";
		Obituary "$OB_BARON";
		HitObituary "$OB_BARONHIT";

		dropitem "DoomSpellMana", 24;
		dropitem "DoomSpellMana2", 20;
		dropitem "DoomSpellMana3", 16;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
	}

	states
	{
		Spawn:
			BOSS A 0 NoDelay;
			BOSS AB 10 A_Look();
			goto Spawn+1;
		See:
			BOSS A 0;
			BOSS AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1) { return resolvestate("Missile2"); }
				return resolvestate(null);
			}
			BOSS EF 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOSS G 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("BaronOfHellBall", "BaronOfHellBallCrisis", user_tempvar1, random(10,15)*random(1,8), "imp/melee");
			}
			goto See;

		Melee2:
		Missile2:
			TNT1 A 0;
			BOSS PQ 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOSS R 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("BaronOfHellBall", "BaronOfHellBallCrisis", user_tempvar1, random(20,30)*random(1,8), "imp/melee");
				A_CrisisSpawnProjectile("BaronOfHellBall","BaronOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
				A_CrisisSpawnProjectile("BaronOfHellBall","BaronOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1));
				if (user_monsterlevel >= user_hyperlvl2)
				{
					A_CrisisSpawnProjectile("BaronOfHellBall","BaronOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
					A_CrisisSpawnProjectile("BaronOfHellBall","BaronOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2));
				}
			}
			goto See;

		Pain:
			BOSS H 2;
			BOSS H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			BOSS H 2;
			BOSS H 2 A_DVDSPain();
			BOSS HH 2;
			Goto See;
		Pain.Kick:
			BOSS H 2;
			BOSS H 2 A_DVDSPain();
			BOSS HHHH 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BOSS I 8;
			BOSS J 8 A_Scream();
			BOSS K 8;
			BOSS L 8 A_NoBlocking();
			BOSS MN 8;
			BOSS O -1 A_DVDSBossDeath();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BOSS H 5 A_GenericFreezeDeath();
			BOSS H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOSS O 8;
			BOSS NMLKJI 8;
			Goto See;
	}
}

class DSHellKnight : DSBaronofHell
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Hell Knight";

		Health 500;
		Mass 1000;
		bloodcolor "green";
		Painchance 50;
		Painchance "Fist", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 125; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 75; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "PoisonElemental", 75;
		Painchance "Wind", 1;
		DamageFactor "Crush", 0.55; // 4.4
		DamageFactor "Wind", 0.02;
		DamageFactor "PoisonElemental", 1.5;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 150; // Demons = +300% Pain Chance
		Species "HellNoble";
		+DONTHARMSPECIES;
		-BOSSDEATH;
		SeeSound "knight/sight";
		ActiveSound "knight/active";
		PainSound "knight/pain";
		DeathSound "knight/death";
		HitObituary "$OB_KNIGHTHIT";
		Obituary "$OB_KNIGHT";

		dropitem "DoomSpellMana2", 24;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronHelmet", 1;
	}

	states
	{
		Spawn:
			BOS2 A 0 NoDelay;
			BOS2 AB 10 A_Look();
			goto Spawn+1;
		See:
			BOS2 A 0;
			BOS2 AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0;
			BOS2 EF 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS2 G 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();

				user_tempvar1 = 32; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("HellKnightBall", "HellKnightBallCrisis", user_tempvar1, random(5,10)*random(1,8), "imp/melee");
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HellKnightBall","HellKnightBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("HellKnightBall","HellKnightBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HellKnightBall","HellKnightBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("HellKnightBall","HellKnightBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			goto See;

		Pain:
			BOS2 H 2;
			BOS2 H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			BOS2 H 2;
			BOS2 H 2 A_DVDSPain();
			BOS2 HH 2;
			Goto See;
		Pain.Kick:
			BOS2 H 2;
			BOS2 H 2 A_DVDSPain();
			BOS2 HHHH 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BOS2 I 8;
			BOS2 J 8 A_Scream();
			BOS2 K 8;
			BOS2 L 8 A_NoBlocking();
			BOS2 MN 8;
			BOS2 O -1 A_DVDSBossDeath();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BOS2 H 5 A_GenericFreezeDeath();
			BOS2 H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOS2 O 8;
			BOS2 NMLKJI 8;
			Goto See;
	}
}

class Belphegor : DSHellKnight
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Belphegor";

		Health 1500;
		bloodcolor "green";
		Painchance 25;
		Painchance "Fist", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 63; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 38; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "PoisonElemental", 38;
		Painchance "Wind", 1;

		DamageFactor 0.975;
		RadiusDamageFactor 0.975;
		DamageFactor "Explosive", 0.975;

		DamageFactor "Crush", 0.55; // 4.4
		DamageFactor "Wind", 0.02;
		DamageFactor "PoisonElemental", 1.5;
		DamageFactor "Holy", 2; // Demons = 200% Holy Damage
		Painchance "Holy", 75; // Demons = 300% Pain Chance
		Species "HellNoble";
		+DONTHARMSPECIES;
		SeeSound "belphegor/sight";
		PainSound "belphegor/pain";
		DeathSound "belphegor/death";
		ActiveSound "baron/active";
		Obituary "%o was slain by a Belphegor.";
		HitObituary "%o was slain by a Belphegor.";

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
		dropitem "SauronHelmet", 1;
	}

	States
	{
		Spawn:
			BOS3 A 0 NoDelay;
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AB 10 A_Look();
			goto Spawn+1;
		See:
			BOS3 A 0;
			BOS3 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0;
			TNT1 A 0 A_Jump(32,2); // 12.5% chance of skipping the shotsfired check and possibly shooting an extra shot/nova
			TNT1 A 0 A_JumpIf(user_shotsfired > 2, "See");
			BOS3 EF 6
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BOS3 G 6
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 40;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("BelphegorBall", "BelphegorBallCrisis", user_tempvar1, (12.5*random(1,8)), "imp/melee");
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BelphegorBall","BelphegorBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("BelphegorBall","BelphegorBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BelphegorBall","BelphegorBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("BelphegorBall","BelphegorBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			goto Missile;

		Pain:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 H 2;
			BOS3 H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 H 2;
			BOS3 H 2 A_DVDSPain();
			BOS3 HH 2;
			Goto See;
		Pain.Kick:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			BOS3 H 2;
			BOS3 H 2 A_DVDSPain();
			BOS3 HHHH 2;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BOS3 I 8;
			BOS3 J 8 A_Scream();
			BOS3 K 8;
			BOS3 L 8 A_NoBlocking();
			BOS3 MN 8;
			BOS3 O -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BOS3 H 5 A_GenericFreezeDeath();
			BOS3 H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BOS3 O 8;
			BOS3 NMLKJI 8;
			Goto See;
	}
}

class BruiserDemon : DSBaronOfHell
{
	int user_fireswipeangle;
	int user_fireswipeframe;
	int user_fireswipeframemax;
	int user_groundwaverepeatchance;
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Bruiser Demon";

		Health 2000;
		Radius 24;
		Height 64;
		Mass 1500;
		Speed 8;
		MissileType "BruiserBall";
		MeleeDamage 15;
		Scale 1.125;
		Painchance 15;
		Painchance "Fist", 23; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 38; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 23; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "PoisonElemental", 23;
		Painchance "Wind", 8;
		PainChance "Ice", 42;
		PainChance "Fire", 7;
		DamageFactor 0.875;
		RadiusDamageFactor 0.4375;
		DamageFactor "Explosive", 0.4375;

		Damagefactor "Crush", 0.5;
		DamageFactor "Wind", 0.5;
		DamageFactor "PoisonElemental", 1.5;
		DamageFactor "Ice", 2.5;
		DamageFactor "Fire", 0.5;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 45; // Demons = +300% Pain Chance
		PainChance "Ice", 60;
		DamageFactor "Ice", 3.33;
		DamageFactor "Fire", 0.2;
		Species "HellNoble";
		Monster;
		+FLOORCLIP;
		+MISSILEEVENMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SeeSound "superbaron/scream";
		PainSound "superbaron/pain";
		DeathSound "superbaron/death";
		ActiveSound "superbaron/act";
		MeleeSound "baron/melee";
		Obituary "%o was slaughtered by a Bruiser demon.";
		HitObituary "%o was cremated by a Bruiser demon.";

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
		dropitem "SauronHelmet", 1;
	}

	States
	{
		Missile:
			TNT1 A 0;
			BRUS E 0 Bright A_Jump(24, "Missile5"); // Jump to Ground Fire Wave
			BRUS E 0 Bright A_Jump(144, "MissileCheck3"); // Jump to Swipe attack #1
			// Bruiser Main Fireball #1 - Normal
		Missile1:
			BRUS EF 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS G 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			BRUS G 0 Bright A_Jump(96, "Missile2"); // Jump to Main Fireball #2
			Goto See;

		// Bruiser Main Fireball #2 - Normal
		Missile2:
			BRUS HI 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS J 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,0,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
					}
				}
			}
			Goto See;

		// Bruiser Fire Swipe #1
		MissileCheck3:
			BRUS E 0 Bright A_Jump(96, "Missile5"); // Jump to Ground Fire Wave Attack
		Missile3:
			BRUS E 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS F 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			BRUS F 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				user_fireswipeframe = 0;
				user_fireswipeframemax = 6;
				user_fireswipeangle = -40;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS GGGGGG 1 Bright 
			{
				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				user_fireswipeframe += 1;
				user_fireswipeangle += 10;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS G 0 Bright A_Jump(96, "Missile4"); // Jump to Fire Swipe #2
			Goto See;

		// Bruiser Fire Swipe #2
		Missile4:
			BRUS H 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS I 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			BRUS I 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				A_FaceTarget();
				user_fireswipeframe = 0;
				user_fireswipeframemax = 6;
				user_fireswipeangle = 40;
				A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*1));
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle-(user_tempvar2*2));
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",user_tempvar1,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			BRUS JJJJJJ 1 Bright
			{
				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				user_fireswipeframe += 1;
				user_fireswipeangle -= 10;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",56,0,user_fireswipeangle,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",56,0,user_fireswipeangle-(user_tempvar2*1));
					A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",56,0,user_fireswipeangle+(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",56,0,user_fireswipeangle-(user_tempvar2*2));
						A_CrisisSpawnProjectile("BruiserBall2","BruiserBall2Crisis",56,0,user_fireswipeangle+(user_tempvar2*2));
					}
				}
			}
			Goto See;

		// Bruiser Ground Fire Wave
		Missile5:
			BRUS KL 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS M 2 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				user_tempvar1 = 16; // attack height
				user_tempvar2 = 15; // base angle
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Multiple Projectiles
				if (levelbehavior && user_monsterlevel > 225) { A_CrisisSpawnProjectile("BruiserFireSpawner","BruiserFireSpawnerCrisis",user_tempvar1,0,(user_tempvar2*-3),0); }
				if (levelbehavior && user_monsterlevel > 150) { A_CrisisSpawnProjectile("BruiserFireSpawner","BruiserFireSpawnerCrisis",user_tempvar1,0,(user_tempvar2*-2),0); }
				A_CrisisSpawnProjectile("BruiserFireSpawner","BruiserFireSpawnerCrisis",user_tempvar1,0,(user_tempvar2*-1),0);
				A_CrisisSpawnProjectile("BruiserFireSpawner","BruiserFireSpawnerCrisis",user_tempvar1,0,0,0);
				A_CrisisSpawnProjectile("BruiserFireSpawner","BruiserFireSpawnerCrisis",user_tempvar1,0,(user_tempvar2*1),0);
				if (levelbehavior && user_monsterlevel > 150) { A_CrisisSpawnProjectile("BruiserFireSpawner","BruiserFireSpawnerCrisis",user_tempvar1,0,(user_tempvar2*2),0); }
				if (levelbehavior && user_monsterlevel > 225) { A_CrisisSpawnProjectile("BruiserFireSpawner","BruiserFireSpawnerCrisis",user_tempvar1,0,(user_tempvar2*3),0); }
			}
			BRUS MM 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_FaceTarget();
			}
			TNT1 A 0 
			{
				if (random(1,256) <= user_groundwaverepeatchance)
				{
					user_groundwaverepeatchance *= frandompick(0.5,0.25);
					return resolvestate("Missile5");
				}
				return resolvestate(null);
			}
			Goto See;

		ResetLevel:
			BRUS A 1 A_Look();
			BRUS A 1;
			BRUS A 1
			{
				user_ressurrectstr += random(10,20);
			}		
			BRUS A 1;
		goto Spawn+1;
		Spawn:
			BRUS A 0 NoDelay;
			BRUS AB 10 BRIGHT A_Look();
			goto Spawn+1;
		See:
			BRUS A 0 
			{
				if (user_isstealth <= 0 && health <= user_HPBuffRange) { A_GiveInventory("EnemyShadow",1); } else  { A_TakeInventory("EnemyShadow",9999); } 
			}
			BRUS AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				user_groundwaverepeatchance = ((8 * random(6,10)) + (user_monsterlevel / 9));
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			TNT1 A 0;
			TNT1 A 0 A_Jump(256,"Melee1","Melee2");
		Melee1:
			BRUS EF 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS G 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("BruiserBall","BruiserBallCrisis",user_tempvar1,(15*random(1,8)),"baron/melee");
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Melee2:
			BRUS HI 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();
			}
			BRUS J 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 270) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(5); }
				A_FaceTarget();

				user_tempvar1 = 56; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("BruiserBall","BruiserBallCrisis",user_tempvar1,(15*random(1,8)),"baron/melee");
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("BruiserBall","BruiserBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			Goto See;
		Pain:
			BRUS N 5 Bright A_DVDSPain();
			Goto See;
		Pain.Fist:
			BRUS N 5 Bright A_DVDSPain();
			BRUS NN 5 Bright;
			Goto See;
		Pain.Kick:
			BRUS N 5 Bright A_DVDSPain();
			BRUS NNNN 5 Bright;
			Goto See;
		Pain.Ice:
			BRUS N 5 Bright A_DVDSPain();
			BRUS N 20 Bright;
			BRUS N 0 Bright A_Jump (128, 4);
			BRUS N 5 Bright;
			BRUS N 0 Bright A_Jump (128, 2);
			BRUS N 5 Bright;
			BRUS N 0 Bright;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BRUD A 6 Bright A_Scream();
			BRUD BCD 4 Bright;
			BRUD EFG 4 Bright;
			BRUD H 4 Bright A_Fall();
			BRUD IJKLMNOP 4 Bright;
			BRUD QRSTUV 4;
			BRUD W -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BRUS N 5 A_GenericFreezeDeath();
			BRUS N 1 A_FreezeDeathChunks();
			wait;
		Raise:
			BRUD V 4;
			BRUD UTSRQPONMLKJIHGFEDCBA 4;
			Goto See;
	}
}

// CyBruiser [Brusier/Archon tier Hell Noble]
class Cybruiser : DSBaronOfHell
{
	int painanger;
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "CyBruiser";
		
		Health 2000;
		Radius 24;
		Height 64;
		Mass 2000;
		Speed 8;
		Monster;
		MeleeDamage 15;
		PainChance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Fire", 96;

		RadiusDamageFactor 0.5;
		DamageFactor "Explosive", 0.5;
		DamageFactor "Fire", 0.75;

		Painchance "Plasma", 176;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 224;
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 224;
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 224;
		DamageFactor "Lightning", 1.75;

		Damagefactor "Crush", 0.5; // 4.0
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 255; // Demons = +300% Pain Chance
		DamageFactor "PoisonElemental", 1.5;
		Species "HellNoble";
		+FLOORCLIP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SeeSound "monster/cbrusit";
		PainSound "monster/cbrupn";
		DeathSound "monster/cbrudth";
		MeleeSound "baron/melee";
		Obituary "%o was blown away by a Cybruiser.";
		HitObituary "%o was smashed by a Cybruiser.";

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "DoomSpellMana3", 24;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
		dropitem "SauronHelmet", 1;
	}

	States 
	{
		Spawn: 
			CBRS A 0 NoDelay;
			CBRS AB 10 A_Look();
			goto Spawn+1;
		See:
			CBRS A 0
			{
				if (user_isstealth <= 0 && health <= user_HPBuffRange) { A_GiveInventory("EnemyShadow",1); } else  { A_TakeInventory("EnemyShadow",9999); } 
				user_shotsfired = 0;
				if (levelbehavior && user_monsterlevel > 120)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (levelbehavior && user_monsterlevel > 60)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
					}
			}
			CBRS AABBCCDD 3
			{
				user_shotsfired = 0;
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1) { A_StartSound("monster/cbruwlk"); }
				if (user_walksound >= 4) { user_walksound = 0; }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Missile:
			TNT1 A 0;
			CBRS E 0
			{
				if (painanger > 8) painanger = 8;
				if (levelbehavior)
				{
					if (random(1,256) <= ((32 + (user_monsterlevel / 3.75)) * painanger))
					{
						user_shotsfiredmax *= frandompick(1.5,2.0,2.5);
						return resolvestate("RageAttackStart"); 
					}
				}
				else
				{
					if (random(1,256) <= (32 * painanger)) 
					{
						user_shotsfiredmax *= frandompick(1.5,2.0,2.5);
						return resolvestate("RageAttackStart"); 
					}
				}
				return resolvestate(null);
			}
		MissileStart:
			CBRS E 0 A_JumpIfTargetInsideMeleeRange("Melee");
			CBRS E 6
			{
				if (user_shotsfired > 0) 
				{
					A_SetTics(12); 
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
					else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(7); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
					else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
					else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
					else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }
				}
				else
				{
					A_SetTics(6); 
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
					else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				}
				A_FaceTarget();
			}
		goto Missile1;
		Missile1:
			TNT1 A 0
			{
				user_tempvar1 = 38;
				user_tempvar2 = 15;
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Projectiles
				if (random(1,256) <= 16)
				{
					A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,0,0);
					if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
					{
						A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*1));
						A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*-1));
						if (user_monsterlevel >= user_hyperlvl2)
						{
							A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*2));
							A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*-2));
						}
					}
				}
				else
				{
					A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileSeek",user_tempvar1,15,0,0);
					if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
					{
						A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*1));
						A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*-1));
						if (user_monsterlevel >= user_hyperlvl2)
						{
							A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileCrisis",user_tempvar1,15,(user_tempvar2*2));
							A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileCrisis",user_tempvar1,15,(user_tempvar2*-2));
						}
					}
				}
			}
			goto Missile1End;
		Missile1End:
			CBRS F 12
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "See");
			goto MissileStart;

		RageAttackStart:
			CBRS E 6
			{
				if (user_shotsfired > 0) 
				{
					A_SetTics(6); 
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
					else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				}
				else
				{
					A_SetTics(3); 
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(1); }
					else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				}
				A_FaceTarget();
			}
		goto RageAttack;
		RageAttack:
			TNT1 A 0
			{
				user_tempvar1 = 38;
				user_tempvar2 = 15;
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Projectiles
				if (random(1,256) <= 16)
				{
					A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,0,0);
					if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
					{
						A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*1));
						A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*-1));
						if (user_monsterlevel >= user_hyperlvl2)
						{
							A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*2));
							A_CrisisSpawnProjectile("CyBruiserMissileSeek","CyBruiserMissileSeekCrisis",user_tempvar1,15,(user_tempvar2*-2));
						}
					}
				}
				else
				{
					A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileCrisis",user_tempvar1,15,0,0);
					if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
					{
						A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileCrisis",user_tempvar1,15,(user_tempvar2*1));
						A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileCrisis",user_tempvar1,15,(user_tempvar2*-1));
						if (user_monsterlevel >= user_hyperlvl2)
						{
							A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileCrisis",user_tempvar1,15,(user_tempvar2*2));
							A_CrisisSpawnProjectile("CyBruiserMissile","CyBruiserMissileCrisis",user_tempvar1,15,(user_tempvar2*-2));
						}
					}
				}
			}
			goto RageAttackEnd;
		RageAttackEnd:
			CBRS F 6
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
			}
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 
			{
				if (user_shotsfired >= (user_shotsfiredmax * 2))
				{
					painanger = 0;
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			goto RageAttackStart;

		Melee:
			TNT1 A 0;
			CBRS GH 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			CBRS I 8 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(15,"baron/melee","none","Melee",1);
			}
			Goto See;

		Pain: 
			CBRS J 2
			{
				A_DVDSPain(); 
				if (random(1,256) <= 240) 
				{
					painanger++;
					if (random(1,256) <= 60)
					{
						painanger++;
						if (random(1,256) <= 15) painanger++;
					}
				}
			}
			Goto See;
		Pain.Fist: 
			CBRS J 2;
			CBRS J 2
			{
				A_DVDSPain(); 
				if (random(1,256) <= 80) 
				{
					painanger++;
					if (random(1,256) <= 20)
					{
						painanger++;
						if (random(1,256) <= 5) painanger++;
					}
				}
			}
			CBRS JJ 2;
			Goto See;
		Pain.Kick: 
			CBRS J 2;
			CBRS J 2
			{
				A_DVDSPain(); 
				if (random(1,256) <= 120) 
				{
					painanger++;
					if (random(1,256) <= 30)
					{
						painanger++;
						if (random(1,256) <= random(7,8)) painanger++;
					}
				}
			}
			CBRS JJJJ 2;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			CBRS JJ 2;
			CBRS J 2 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CBRS JJJ 1;
			Goto See;
		Pain.Electric: 
		Pain.Lightning: 
		Pain.Thunder: 
			CBRS J 2;
			CBRS J 2;
			CBRS J 2 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CBRS J 2;
			CBRS J 2;
			CBRS J 2;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CBRS J 2;
			CBRS J 2;
			CBRS J 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CBRS K 6 Bright A_Scream();
			CBRS LMN 6 Bright;
			CBRS O 6 Bright A_NoBlocking();
			CBRS QR 6 Bright;
			CBRS S 6;
			CBRS T -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			CBRS J 5 A_GenericFreezeDeath();
			CBRS J 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CBRS S 6;
			CBRS RQONMLK 6;
			Goto See;
	}
}

class ArchonOfHell : DSBaronOfHell 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Archon of Hell";
		
		Health 2000;
		Radius 24;
		Height 64;
		Mass 1500;
		Speed 8;
		MONSTER;
		MeleeDamage 15;
		BloodColor "20 60 20";
		Scale 1.125;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "PoisonElemental", 30;
		Painchance "Wind", 8;
		PainChance "Ice", 80;
		PainChance "Fire", 8;
		Painchance "Holy", 45; // Demons = +300% Pain Chance

		DamageFactor 0.875;
		RadiusDamageFactor 0.4375;
		DamageFactor "Explosive", 0.4375;

		Damagefactor "Crush", 0.5;
		DamageFactor "Wind", 0.5;
		DamageFactor "PoisonElemental", 1.5;
		DamageFactor "Ice", 3.33;
		DamageFactor "Fire", 0.4;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Species "HellNoble";
		+FLOORCLIP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SeeSound "monster/ar2sit";
		PainSound "archon/pain";
		DeathSound "monster/ar2dth";
		MeleeSound "baron/melee";
		Obituary "%o was no match for an archon of hell.";
		HitObituary "%o was ripped apart by an archon of hell.";

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
		dropitem "SauronHelmet", 1;
	}

	States 
	{
		Missile:
			TNT1 A 0;
			BOS4 E 0 A_Jump(128, "Missile1"); // Jumps to Comet Attack
			goto Missile2;

		// Comet Attack - Normal
		Missile1:
			BOS4 O 0 Bright A_Jump(128, "Missile4"); // Jumps to Wave Throw
			BOS4 MN 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 O 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("ArchonComet","ArchonCometCrisis",user_tempvar1,0,0,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("ArchonComet","ArchonCometCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("ArchonComet","ArchonCometCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("ArchonComet","ArchonCometCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("ArchonComet","ArchonCometCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			BOS4 P 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			Goto See;

			// Right Throw - Normal
		Missile2:
			BOS4 EF 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 G 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,0,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,-4,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,4,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)-4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)+4);
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)-4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2));
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			BOS4 H 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			BOS4 H 0 Bright A_Jump(64, "Missile1"); // Jumps to Comet Attack
			Goto Missile3; // Jumps to Left Throw

		// Left Throw - Normal
		Missile3:
			BOS4 IJ 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 K 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,0,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,-4,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,4,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)-4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)+4);
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)-4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2));
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			BOS4 L 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			BOS4 L 0 Bright A_Jump(64, "Missile1"); // Jumps to Comet Attack
			Goto See;

		// Middle Attack - Normal
		Missile4:
			BOS4 MN 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 O 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,6,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,4,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,2,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,0,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,-2,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,-4,0);
				A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,-6,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)-6);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)-6);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)-4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)-2);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)-2);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)+2);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)+2);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)+4);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1)+6);
					A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1)+6);
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)-6);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)-6);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)-4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)-2);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)-2);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2));
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)+2);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)+2);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)+4);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2)+6);
						A_CrisisSpawnProjectile("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2)+6);
					}
				}
			}
			BOS4 P 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			Goto See;

		ResetLevel:
			BOS4 A 1 A_Look();
			BOS4 A 1;
			BOS4 A 1
			{
				user_ressurrectstr += random(10,20);
			}
			BOS4 A 1;
		goto Spawn+1;
		Spawn:
			BOS4 A 0 NoDelay;
			BOS4 AB 10 A_Look();
			goto Spawn+1;
		See:
			BOS4 A 0
			{
				if (user_isstealth <= 0 && health <= user_HPBuffRange) { A_GiveInventory("EnemyShadow",1); } else  { A_TakeInventory("EnemyShadow",9999); } 
			}
			BOS4 AABBCCDD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			loop;

		Melee:
			TNT1 A 0;
			BOS4 EF 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 G 4 Bright
			{
				user_tempvar1 = 32;
				user_tempvar2 = 15;
				A_FaceTarget();

				A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
				A_CrisisComboAttack("ArchonOfHellBall","ArchonOfHellBallCrisis",user_tempvar1,(15*random(1,8)),"baron/melee");
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("ArchonOfHellBallCrisis","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("ArchonOfHellBallCrisis","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("ArchonOfHellBallCrisis","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("ArchonOfHellBallCrisis","ArchonOfHellBallCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}

				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			BOS4 H 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			BOS4 H 0 A_Jump(128,1);
			Goto See;
			BOS4 IJ 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 K 4 Bright
			{
				A_FaceTarget();
				
				A_CrisisComboAttack("ArchonOfHellBall","ArchonOfHellBallCrisis",32,(15*random(1,8)),"baron/melee");
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			BOS4 L 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			BOS4 L 0 A_Jump (64,1);
			Goto See;
			BOS4 MN 8 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			BOS4 O 4 Bright
			{
				A_FaceTarget();
				
				A_MonsterCrisisCheck(); // Double Combo Attack
				A_CrisisComboAttack("ArchonOfHellBall","ArchonOfHellBallCrisis",32,(20*random(1,8)),"baron/melee");
				A_CrisisComboAttack("ArchonOfHellBall","ArchonOfHellBallCrisis",32,(20*random(1,8)),"baron/melee");
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			BOS4 P 4 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			Goto See;
		Pain: 
			BOS4 Q 2;
			BOS4 Q 2 A_DVDSPain();
			Goto See;
		Pain.Fist: 
			BOS4 Q 2;
			BOS4 Q 2 A_DVDSPain();
			BOS4 QQ 2;
			Goto See;
		Pain.Kick: 
			BOS4 Q 2;
			BOS4 Q 2 A_DVDSPain();
			BOS4 QQQQ 2;
			Goto See;
		Pain.Ice:
			BOS4 Q 2;
			BOS4 Q 2 A_DVDSPain();
			BOS4 Q 12;
			BOS4 Q 0 Bright A_Jump(128,4);
			BOS4 Q 6 Bright;
			BOS4 Q 0 Bright A_Jump(128,2);
			BOS4 Q 6 Bright;
			BOS4 Q 0 Bright;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			BOS4 R 6 Bright;
			BOS4 S 6 Bright A_Scream();
			BOS4 T 6 Bright;
			BOS4 U 6 Bright A_NoBlocking();
			BOS4 VW 6 Bright;
			BOS4 X 6 Bright A_SpawnProjectile("ArchonASoul",86,0,0,2,-90);
			BOS4 YZ 6 Bright;
			BOS4 [ 6 Bright A_Fall();
			TNT1 A 0 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			BOS4 Q 5 A_GenericFreezeDeath();
			BOS4 Q 1 A_FreezeDeathChunks();
			wait;
	}
}

class PyroDemon : DSBaronofHell
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Pyro Demon";

		Scale 1.1875;
		Health 3000;
		Radius 24;
		Height 64;
		Mass 1750;
		Speed 8;
		MeleeDamage 20;
		Bloodcolor "75 25 00";
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Wind", 8;
		Painchance "PoisonElemental", 30;
		PainChance "Ice", 160;
		PainChance "Fire", 1;
		Painchance "Holy", 60; // Demons = +300% Pain Chance

		DamageFactor 0.8334;
		RadiusDamageFactor 0.4167;
		DamageFactor "Explosive", 0.4167;
		DamageFactor "Crush", 0.4;
		DamageFactor "Wind", 0.5;
		DamageFactor "PoisonElemental", 1.5;
		DamageFactor "Ice", 8.88;
		DamageFactor "Fire", 0.05;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Species "HellNoble";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SEESOUND "pyro/see";
		PAINSOUND "pyro/pain";
		DEATHSOUND "pyro/death";
		ACTIVESOUND "pyro/idle";
		OBITUARY "%o was burnt to a crisp by a pyro demon";
		HITOBITUARY "%o was melted my a pyro demon";
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 72;
		dropitem "DoomSpellMana", 72;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana2", 60;
		dropitem "DoomSpellMana2", 60;
		dropitem "DoomSpellMana3", 24;
		dropitem "DoomSpellMana3", 48;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "DiamondSkinGA", 2;
		dropitem "StoneSkinGA", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
		dropitem "SauronHelmet", 1;
	}

	states 
	{
		Melee:
		Missile:
			TNT1 A 0;
			PYRO E 0 
			{
				if (!(CountInv("PyroDemonTeleportCooldown")))
				{
					if (random (1,256) <= 32) { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO E 0 A_Jump(32,"Missile3");
		// Fire Shots - Normal
		Missile1:
			PYRO EF 8 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO G 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,-4,0);
				A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,0,0);
				A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,4,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*1)-4);
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*1)+4);
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*2)-4);
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*2));
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			PYRO H 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			PYRO H 0 A_Jump(32,"Missile2");
		Missile1a:
			PYRO IJ 8 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO K 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,-4,0);
				A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,0,0);
				A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,4,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-1)-4);
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-1)+4);
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*1)-4);
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*1)+4);
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-2)-4);
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*-2)+4);
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*2)-4);
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*2));
						A_CrisisSpawnProjectile("FireShot","FireShotCrisis",user_tempvar1,0,(user_tempvar2*2)+4);
					}
				}
			}
			PYRO L 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			PYRO L 0 A_Jump(32,"Missile2");
			Goto See;

		// Pyro Blast - Normal
		Missile2:
			PYRO MN 8 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO O 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("PyroBlast","PyroBlastCrisis",user_tempvar1,0,0,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("PyroBlast","PyroBlastCrisis",user_tempvar1,0,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("PyroBlast","PyroBlastCrisis",user_tempvar1,0,(user_tempvar2*1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("PyroBlast","PyroBlastCrisis",user_tempvar1,0,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("PyroBlast","PyroBlastCrisis",user_tempvar1,0,(user_tempvar2*2));
					}
				}
			}
			PYRO P 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			Goto See;

		// Comet Rain Attack - Normal
		Missile3:
			PYRO MN 8 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			PYRO O 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_tempvar1 = 28; // attack height
				user_tempvar2 = 15; // base angle
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,0,0);
				A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,90,0);
				A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,180,0);
				A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,270,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl2)
				{
					A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,45,0);
					A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,135,0);
					A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,225,0);
					A_CrisisSpawnProjectile("RainCometNull","RainCometNullCrisis",user_tempvar1,0,315,0);
				}
			}
			PYRO P 4 BRIGHT
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
			}
			Goto See;

		// Teleportation w/ Pyroballs - Normal
		Missile4:
			PYRO O 1 A_FaceTarget();
			PYRO O 0
			{
				if (!(CountInv("PyroDemonTeleportCooldown")))
				{
					A_SetInvulnerable();
					A_MonsterCrisisCheck(); // Multiple Projectiles + Mushroom
					A_CrisisSpawnProjectile("EscapeExplosion","EscapeExplosionCrisis",28,10,0,0);
					A_CrisisMushroom("Pyroball","PyroballCrisis",16); //,MSF_DontHurt
					if (levelbehavior && user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisMushroom("Pyroball","PyroballCrisis",8); //,MSF_DontHurt
					}
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			PYRO O 3;
			PYRO P 3 BRIGHT;
			PYRO A 0 A_UnSetShootable();
			PYRO A 1 A_StartSound("pyro/tele");
			PYRO A 1 A_SetTranslucent(0.90);
			PYRO A 1 A_SetTranslucent(0.80);
			PYRO A 1 A_SetTranslucent(0.70);
			PYRO A 1 A_SetTranslucent(0.60);
			PYRO A 1 A_SetTranslucent(0.50);
			PYRO A 1 A_SetTranslucent(0.40);
			PYRO A 1 A_SetTranslucent(0.30);
			PYRO A 1 A_SetTranslucent(0.20);
			PYRO A 1 A_SetTranslucent(0.10);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSWander(0,1,3,1,1);
			TNT1 A 0 A_Jump(128,25);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_DVDSChase(null,null,CHF_FASTCHASE,1,3,1,1);
			PYRO A 1 A_StartSound("pyro/tele");
			PYRO A 1 A_SetTranslucent(0.10);
			PYRO A 1 A_SetTranslucent(0.20);
			PYRO A 1 A_SetTranslucent(0.30);
			PYRO A 1 A_SetTranslucent(0.40);
			PYRO A 1 A_SetTranslucent(0.50);
			PYRO A 1 A_SetTranslucent(0.60);
			PYRO A 1 A_SetTranslucent(0.70);
			PYRO A 1 A_SetTranslucent(0.80);
			PYRO A 1 A_SetTranslucent(0.90);
			PYRO A 1 A_SetTranslucent(1.0);
			PYRO A 0 
			{
				A_MonsterCrisisCheck(); // Multiple Projectiles + Mushroom
				A_CrisisSpawnProjectile("EscapeExplosion","EscapeExplosionCrisis",28,10,0,0);
				A_CrisisMushroom("Pyroball","PyroballCrisis",16); //,MSF_DontHurt
				if (levelbehavior && user_monsterlevel >= user_hyperlvl2)
				{
					A_CrisisMushroom("Pyroball","PyroballCrisis",8); //,MSF_DontHurt
				}
			}
			PYRO A 0
			{
				A_SetShootable();
				A_UnSetInvulnerable();
				A_GiveInventory("PyroDemonTeleportCooldown", 1);
			}
			Goto See;

		ResetLevel:
			PYRO A 1 A_Look();
			PYRO A 1;
			PYRO A 1
			{
				user_ressurrectstr += random(10,20);
			}
			PYRO A 1;
		goto Spawn+1;

		Spawn:
			PYRO A 0 NoDelay;
			PYRO AB 10 A_Look();
			goto Spawn+1;
		See:
			PYRO A 0 
			{
				if (user_isstealth <= 0 && health <= user_HPBuffRange) { A_GiveInventory("EnemyShadow",1); } else  { A_TakeInventory("EnemyShadow",9999); } 
				A_SetShootable();
				A_UnSetInvulnerable();
			}
			PYRO AA 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO A 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlevel == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			PYRO B 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO B 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1);
			}
			PYRO B 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlevel == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			PYRO C 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",CHF_FASTCHASE|CHF_NIGHTMAREFAST,1,3,1,1);
			}
			PYRO C 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO C 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlevel == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			PYRO DD 3
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			PYRO D 0
			{
				if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlevel == 0) { A_SpawnItemEx("WalkFire",0,0,0,1,0,0,0,128); } }
			}
			loop;

		Pain: 
			PYRO A 0
			{
				if (!(CountInv("PyroDemonTeleportCooldown")))
				{
					if (random (1,256) <= 8) { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO Q 2;
			PYRO Q 2 A_DVDSPain();
			Goto See;
		Pain.Sceptre: 
			PYRO A 0
			{
				if (!(CountInv("PyroDemonTeleportCooldown")))
				{
					if (random (1,256) <= 1) { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO Q 2;
			PYRO Q 2 A_DVDSPain();
			Goto See;
		Pain.Fist: 
			PYRO A 0
			{
				if (!(CountInv("PyroDemonTeleportCooldown")))
				{
					if (random (1,256) <= 2) { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO Q 2;
			PYRO Q 2 A_DVDSPain();
			PYRO QQ 2;
			Goto See;
		Pain.Kick: 
			PYRO A 0
			{
				if (!(CountInv("PyroDemonTeleportCooldown")))
				{
					if (random (1,256) <= 6) { return resolvestate("Missile4"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			PYRO Q 2;
			PYRO Q 2 A_DVDSPain();
			PYRO QQQQ 2;
			Goto See;
		Pain.Ice:
			PYRO Q 2;
			PYRO Q 2 A_DVDSPain();
			PYRO Q 36;
			PYRO Q 0 Bright A_Jump (128, 8);
			PYRO Q 24 Bright;
			PYRO Q 0 Bright A_Jump (128, 6);
			PYRO Q 18 Bright;
			PYRO Q 0 Bright A_Jump (128, 4);
			PYRO Q 12 Bright;
			PYRO Q 0 Bright A_Jump (128, 2);
			PYRO Q 6 Bright;
			PYRO Q 0 Bright;
			PYRO Q 0
			{
				if (random (1,256) <= 240) 
				{
					A_TakeInventory("PyroDemonTeleportCooldown",9999);
					return resolvestate("Missile4"); 
				}
				return resolvestate(null);
			}
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			PYRO R 20 BRIGHT A_Scream();
			PYRO S 20 BRIGHT;
			PYRO T 20 BRIGHT;
			PYRO U 20 BRIGHT A_NoBlocking();
			PYRO VW 6 BRIGHT;
			PYRO X 6 BRIGHT;
			PYRO Y 3 BRIGHT;
			PYRO Z -1 BRIGHT A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			PYRO Q 5 A_GenericFreezeDeath();
			PYRO Q 1 A_FreezeDeathChunks();
			wait;
		Raise:
			PYRO Y 3 BRIGHT;
			PYRO XWV 6 BRIGHT;
			PYRO UTSR 20 BRIGHT;
			Goto See;
	}
}

class DSSpiderMastermind : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Boss Type"
		Tag "Spider Mastermind";

		Health 3000;
		Radius 128;
		Height 100;
		Mass 1000;
		Speed 12;
		Painchance 40;
		Painchance "Fist", 60; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 100; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 60; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.2; // 1.6

		Painchance "Plasma", 55;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 70; // Demons = +300% Pain Chance
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 70; // Demons = +300% Pain Chance
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 70; // Demons = +300% Pain Chance
		DamageFactor "Lightning", 1.75;

		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 120; // Demons = +300% Pain Chance
		Monster;
		MinMissileChance 160;
		Species "SpiderMastermind";
		+BOSS;
		+MISSILEMORE;
		+FLOORCLIP;
		+NORADIUSDMG;
		+DONTMORPH;
		+BOSSDEATH;
		+DONTHARMSPECIES;
		+AVOIDMELEE;
		SeeSound "spider/sight";
		AttackSound "spider/attack";
		PainSound "mastermind/pain";
		DeathSound "spider/death";
		ActiveSound "spider/active";
		Obituary "$OB_SPIDER";
		
		dropitem "RandomPowerupSpawner", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "DoomSpellMana", 88;
		dropitem "DoomSpellMana2", 66;
		dropitem "DoomSpellMana3", 44;
		dropitem "ChainGun", 32, 10;
		dropitem "ChainGun", 2, 30;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
	}
	
	states
	{
		Spawn:
			SPID A 0 NoDelay;
			SPID AB 10 A_Look();
			goto Spawn+1;
		See:
			SPID A 0
			{
				user_shotsfired = 0;		
			}
			SPID AABBCCDDEEFF 3
			{
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1) { A_Metal(); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			loop;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (!(CountInv("SpidMastChaingunCooldown")))
				{
					if (levelbehavior) { user_shotsfiredmax += random((75 + (user_monsterlevel / 4)),(125 + (user_monsterlevel / 2))); }
					else { user_shotsfiredmax = random(75,125); }
				}
				else
				{
					return resolvestate("See");
				}
				return resolvestate(null);
			}
			SPID A 20 BRIGHT
			{
				A_FaceTarget();
				user_shotaccuracy = 5.625; // 22.5;
				user_shotzaccuracy = 0.0;
				if (user_charmed) { user_shotaccuracy *= 0.667; user_shotzaccuracy *= 0.667; }
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(10); user_shotaccuracy = user_shotaccuracy * 9 / 19; user_shotzaccuracy = user_shotzaccuracy * 9 / 19; }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); user_shotaccuracy = user_shotaccuracy * 10 / 19; user_shotzaccuracy = user_shotzaccuracy * 10 / 19; }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(12); user_shotaccuracy = user_shotaccuracy * 11 / 19; user_shotzaccuracy = user_shotzaccuracy * 11 / 19; }
				else if (levelbehavior && user_monsterlevel > 140) { A_SetTics(13); user_shotaccuracy = user_shotaccuracy * 12 / 19; user_shotzaccuracy = user_shotzaccuracy * 12 / 19; }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); user_shotaccuracy = user_shotaccuracy * 13 / 19; user_shotzaccuracy = user_shotzaccuracy * 13 / 19; }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); user_shotaccuracy = user_shotaccuracy * 14 / 19; user_shotzaccuracy = user_shotzaccuracy * 14 / 19; }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); user_shotaccuracy = user_shotaccuracy * 15 / 19; user_shotzaccuracy = user_shotzaccuracy * 15 / 19; }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); user_shotaccuracy = user_shotaccuracy * 16 / 19; user_shotzaccuracy = user_shotzaccuracy * 16 / 19; }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); user_shotaccuracy = user_shotaccuracy * 17 / 19; user_shotzaccuracy = user_shotzaccuracy * 17 / 19; }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); user_shotaccuracy = user_shotaccuracy * 18 / 19; user_shotzaccuracy = user_shotzaccuracy * 18 / 19; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			SPID A 0 A_MonsterRefire(10,"See");
		MissileLoop:
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID G 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				A_FaceTarget();
				A_StartSound("shotguy/attack");
				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID G 0 A_MonsterRefire(10,"See");
			SPID G 0 Bright
			{
				A_CheckIfTargetDead("See");
			}
			SPID H 4 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				A_FaceTarget();
				A_StartSound("shotguy/attack");
				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 3, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 3; user_pelletsfired++)
					{
						A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 48, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			SPID H 1 A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain:
			SPID I 3;
			SPID I 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			SPID I 3;
			SPID I 3 A_DVDSPain();
			SPID II 3;
			Goto See;
		Pain.Kick:
			SPID I 3;
			SPID I 3 A_DVDSPain();
			SPID IIII 3;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			SPID II 3;
			SPID I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			SPID I 1;
			SPID I 2;
			SPID I 1;
			Goto See;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			SPID I 3;
			SPID I 3;
			SPID I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			SPID I 3;
			SPID I 3;
			SPID I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			SPID I 3;
			SPID I 3;
			SPID I 3;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			SPID J 20 A_Scream();
			SPID K 10 A_NoBlocking();
			SPID LMNOPQR 10;
			SPID S 30;
			SPID S -1 A_DVDSBossDeath();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			SPID I 5 A_GenericFreezeDeath();
			SPID I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			SPID S 30;
			SPID QRPONMLK 10;
			SPID J 20;
			goto See;
	}
}

class Demolisher : DSSpiderMastermind
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Boss Type"
		Tag "Spider-Demolisher";

		Health 6000;
		Radius 128;
		Height 100;
		Mass 1500;
		Speed 16;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Crush", 0.2;

		Painchance "Plasma", 27;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 35; // Demons = +300% Pain Chance
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 35; // Demons = +300% Pain Chance
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 35; // Demons = +300% Pain Chance
		DamageFactor "Lightning", 1.75;

		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 60; // Demons = +300% Pain Chance
		Species "SpiderMastermind";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+BOSS;
		+MISSILEEVENMORE;
		+NORADIUSDMG; 
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		SeeSound "monster/demsit";
		AttackSound "spider2/attack";
		PainSound "demolisher/pain";
		DeathSound "monster/demdth";
		ActiveSound "spider/active";
		Obituary "%o felt the power of the Spider-Demolisher.";
		
		dropitem "RandomPowerupSpawner", 2;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "DoomSpellMana", 88;
		dropitem "DoomSpellMana2", 66;
		dropitem "DoomSpellMana3", 44;
		dropitem "ChainGun", 32, 10;
		dropitem "ChainGun", 2, 30;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "ClipBox", 4, 50;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
	}
	
	States 
	{
		Spawn:
			DEMO A 0 NoDelay;
			DEMO AB 10 A_Look();
			goto Spawn+1;
		See:
			DEMO A 0
			{
				user_shotsfired = 0;
			}
			DEMO AABBCCDDEEFF 3
			{
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1) { A_Metal(); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 4) { user_walksound = 0; }
			}
			loop;

		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0
			{
				if (random(1,256) <= 48)
				{
					if (!(CountInv("SpidMastChaingunCooldown")))
					{
						if (levelbehavior) { user_shotsfiredmax += random((75 + (user_monsterlevel / 4)),(125 + (user_monsterlevel / 2))); }
						else { user_shotsfiredmax = random(75,125); }
						return resolvestate("Missile2");
					}
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			goto Missile1;
		Missile1:
			DEMO A 20 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(12); }
				else if (levelbehavior && user_monsterlevel > 140) { A_SetTics(13); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); }
				A_FaceTarget();
			}
			DEMO A 0 A_MonsterRefire(10,"See");
		Missile1Loop:
			DEMO T 0
			{
				A_CheckIfTargetDead("See");
			}
			DEMO T 1 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(0); }
				A_StartSound("weapons/bfgf");
			}
			DEMO TT 4 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			DEMO TTTT 5 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMO U 10 BRIGHT
			{
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(9); }
				
				user_tempvar1 = 32;
				user_tempvar2 = 11.25;
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*2));
				A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,0);
				A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*3));
						A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*-3));
					}
				}
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0
			{
				A_CheckIfTargetDead("See");
			}
			DEMO T 0 BRIGHT A_Jump (88, "Missile2");
			DEMO T 1 BRIGHT A_StartSound("weapons/bfgf");
			DEMO TT 4 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
			}
			DEMO TTTT 5 BRIGHT 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			DEMO U 10 BRIGHT
			{
				user_tempvar1 = 32;
				user_tempvar2 = 5.625;
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*2));
				A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,0);
				A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*3));
						A_CrisisSpawnProjectile("BFGBallMonster","BFGBallCrisis",user_tempvar1,0,(user_tempvar2*-3));
					}
				}
			}
			DEMO T 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO T 0
			{
				A_CheckIfTargetDead("See");
			}
			DEMO T 0 BRIGHT A_Jump (8, "MissileLoop");
			DEMO T 0 BRIGHT A_Jump (192, "Missile2");
			Goto See;

		Attack2:
			DEMO A 20 BRIGHT
			{
				A_FaceTarget();
				user_shotaccuracy = 33.75;
				user_shotzaccuracy = 6.4;
				if (user_charmed) { user_shotaccuracy *= 0.667; user_shotzaccuracy *= 0.667; }
				if (levelbehavior && user_monsterlevel > 200) { A_SetTics(10); user_shotaccuracy = user_shotaccuracy * 9 / 19; user_shotzaccuracy = user_shotzaccuracy * 9 / 19; }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(11); user_shotaccuracy = user_shotaccuracy * 10 / 19; user_shotzaccuracy = user_shotzaccuracy * 10 / 19; }
				else if (levelbehavior && user_monsterlevel > 160) { A_SetTics(12); user_shotaccuracy = user_shotaccuracy * 11 / 19; user_shotzaccuracy = user_shotzaccuracy * 11 / 19; }
				else if (levelbehavior && user_monsterlevel > 140) { A_SetTics(13); user_shotaccuracy = user_shotaccuracy * 12 / 19; user_shotzaccuracy = user_shotzaccuracy * 12 / 19; }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(14); user_shotaccuracy = user_shotaccuracy * 13 / 19; user_shotzaccuracy = user_shotzaccuracy * 13 / 19; }
				else if (levelbehavior && user_monsterlevel > 100) { A_SetTics(15); user_shotaccuracy = user_shotaccuracy * 14 / 19; user_shotzaccuracy = user_shotzaccuracy * 14 / 19; }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(16); user_shotaccuracy = user_shotaccuracy * 15 / 19; user_shotzaccuracy = user_shotzaccuracy * 15 / 19; }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(17); user_shotaccuracy = user_shotaccuracy * 16 / 19; user_shotzaccuracy = user_shotzaccuracy * 16 / 19; }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(18); user_shotaccuracy = user_shotaccuracy * 17 / 19; user_shotzaccuracy = user_shotzaccuracy * 17 / 19; }
				else if (levelbehavior && user_monsterlevel > 20) { A_SetTics(19); user_shotaccuracy = user_shotaccuracy * 18 / 19; user_shotzaccuracy = user_shotzaccuracy * 18 / 19; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			DEMO A 0 A_MonsterRefire(10,"See");
		Missile2Loop:
			DEMO G 0
			{
				A_CheckIfTargetDead("See");
			}
			DEMO G 4
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_StartSound("spider2/attack",CHAN_7);
				A_StartSound("spider2/attack",8);
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 12, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 12; user_pelletsfired++)
					{
						A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 24, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
				
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			DEMO G 0 BRIGHT A_MonsterRefire(10,"See");
			DEMO H 0
			{
				A_CheckIfTargetDead("See");
			}
			DEMO H 4
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_StartSound("spider2/attack");
				A_FaceTarget();
				A_MonsterCrisisCheck(); // Multiple Tracers
				if (bullet_tracer_mode == 0)
				{
					A_CustomBulletAttack(user_shotaccuracy, user_shotzaccuracy, 12, random(1,5) * 3, "BulletPuff", 0, 1);
				}
				else
				{
					for (user_pelletsfired = 0; user_pelletsfired < 12; user_pelletsfired++)
					{
						A_CrisisSpawnProjectile("ZombieBulletTracer", "ZombieBulletTracerCrisis", 24, 0, frandom(user_shotaccuracy1,user_shotaccuracy2), CMF_OFFSETPITCH|CMF_BADPITCH, frandom(user_shotzaccuracy1,user_shotzaccuracy2));
					}
				}
	
				user_shotsfired += 1;
				if (user_shotsfired > user_shotsfiredmax) 
				{ 
					A_GiveInventory("SpidMastChaingunCooldown", 1);
					return resolvestate("MissileEnd"); 
				}
				return resolvestate(null);
			}
			DEMO H 1 BRIGHT A_MonsterRefire(10,"MissileEnd");
			loop;

		MissileEnd:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			SPID H 0 A_FaceTarget();
			Goto See;

		Pain: 
			DEMO I 3;
			DEMO I 3 A_DVDSPain();
			Goto See;
		Pain.Fist:
			DEMO I 3;
			DEMO I 3 A_DVDSPain();
			DEMO II 3;
			Goto See;
		Pain.Kick:
			DEMO I 3;
			DEMO I 3 A_DVDSPain();
			DEMO IIII 3;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			DEMO II 3;
			DEMO I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			DEMO I 1;
			DEMO I 2;
			DEMO I 1;
			Goto See;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			DEMO I 3;
			DEMO I 3;
			DEMO I 3 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			DEMO I 3;
			DEMO I 3;
			DEMO I 3;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			DEMO I 3;
			DEMO I 3;
			DEMO I 3;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DEMO J 20 A_Scream();
			DEMO K 10 Bright A_NoBlocking();
			DEMO LMNOPQR 10 Bright;
			DEMO S 30;
			DEMO S -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DEMO I 5 A_GenericFreezeDeath();
			DEMO I 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DEMO S 30;
			DEMO QRPONMLK 10;
			DEMO J 20;
			goto See;
	}
}

class DSCyberdemon : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Boss Type"
		Tag "Cyber Demon";
		
		Health 4000;
		Radius 40;
		Height 110;
		Mass 1000;
		Speed 16;
		MeleeRange 180;
		Painchance 20;
		Painchance "Fist", 30; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 50; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 30; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 0.15; // 1.2

		Painchance "Plasma", 27;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 35; // Demons = +300% Pain Chance
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 35; // Demons = +300% Pain Chance
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 35; // Demons = +300% Pain Chance
		DamageFactor "Lightning", 1.75;

		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 60; // Demons = +300% Pain Chance
		Species "Cyberdemon";
		Monster;
		MinMissileChance 160;
		+BOSS;
		+MISSILEMORE;
		+FLOORCLIP;
		+NORADIUSDMG;
		+DONTMORPH;
		+BOSSDEATH;
		+AVOIDMELEE;
		+DONTHARMSPECIES;

		SeeSound "cyber/sight";
		PainSound "cyberdemon/pain";
		DeathSound "cyber/death";
		ActiveSound "cyber/active";
		Obituary "$OB_CYBORG";

		dropitem "RandomPowerupSpawner", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "DoomSpellMana", 112;
		dropitem "DoomSpellMana2", 84;
		dropitem "DoomSpellMana3", 56;
		dropitem "RocketLauncher", 32, 5;
		dropitem "RocketLauncher", 2, 15;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
	}
	
	states
	{
		Spawn:
			CYBR A 0 NoDelay;
			CYBR AB 10 A_Look();
			goto Spawn+1;
		See:
			CYBR A 0
			{
				user_shotsfired = 0;
				if (levelbehavior && user_monsterlevel > 120)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (levelbehavior && user_monsterlevel > 60)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			CYBR AABBCCDD 3 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				user_walksound++;
				if (user_walksound == 1) { A_Hoof(); }
				else if (user_walksound == 7) { A_Metal(); }
				else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				if (user_walksound >= 8) { user_walksound = 0; }
				A_JumpIfCloser(120, "Stomp");
			}
			loop;

		Stomp:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			CYBR Z 5
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
	
				A_FaceTarget();
			}
			CYMA A 7
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
			}
			CYMA B 7
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
				
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("CyberStomp","CyberStompCrisis",10,0,0,0);
				if (user_canusecrisisatk == 1) { A_Quake(5,21,0,512,"nosound/silent"); }
				else { A_Quake(2,21,0,512,"nosound/silent"); }
			}
			CYMA B 7
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
			}
			CYMA B 0 A_Jump(64,2);
			CYMA B 0 A_JumpIfCloser(180, "Stomp");
			CYMA B 0;
			Goto See;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_JumpIfCloser(180, "Stomp");
			CYBR E 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
		MissileB:
			CYBR F 0
			{
				A_CheckIfTargetDead("See");
			}
			CYBR E 0 A_JumpIfCloser(180, "Stomp");
			CYBR F 12
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }

				user_tempvar1 = 32;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("RocketMonster","RocketCrisis",user_tempvar1);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("RocketMonster","RocketCrisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("RocketMonster","RocketCrisis",user_tempvar1,0,(user_tempvar2*-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("RocketMonster","RocketCrisis",user_tempvar1,0,(user_tempvar2*2));
						A_CrisisSpawnProjectile("RocketMonster","RocketCrisis",user_tempvar1,0,(user_tempvar2*-2));
					}
				}
			}
			CYBR E 0
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { if (random(1,4) > 1) { return resolvestate("See"); } return resolvestate(null); }
				return resolvestate(null);
			}
			CYBR E 0 A_JumpIfCloser(180, "Stomp");
			CYBR E 12
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }
				A_FaceTarget();
			}
			loop;

		Pain:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 5;
			CYBR G 5 A_DVDSPain();
			Goto See;
		Pain.Fist:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 5;
			CYBR G 5 A_DVDSPain();
			CYBR GG 5;
			Goto See;
		Pain.Kick:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 5;
			CYBR G 5 A_DVDSPain();
			CYBR GGGG 5;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR GG 5;
			CYBR G 5 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CYBR G 2;
			CYBR G 3;
			CYBR G 2;
			Goto See;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			CYBR G 5;
			CYBR G 5;
			CYBR G 5 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CYBR G 5;
			CYBR G 5;
			CYBR G 5;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			CYBR G 5;
			CYBR G 5;
			CYBR G 5;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			CYBR H 10;
			CYBR I 10 A_Scream();
			CYBR JKL 10;
			CYBR M 10 A_NoBlocking();
			CYBR NO 10;
			CYBR P 30;
			CYBR P -1 A_DVDSBossDeath();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			CYBR G 5 A_GenericFreezeDeath();
			CYBR G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			CYBR O 10;
			CYBR NMLKJHI 10;
			goto See;
	}
}

class Annihilator : DSCyberdemon 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Boss Type"
		Tag "Cyber-Annhilator";

		Health 8000;
		Radius 40;
		Height 110;
		Mass 1500;
		Speed 16;
		MeleeRange 180;
		Painchance 10;
		Painchance "Fist", 15; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 25; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 15; // Fist attacks have a +50% chance of stunning an enemy

		DamageFactor 0.875;
		RadiusDamageFactor 0.875;
		DamageFactor "Explosive", 0.875;
		DamageFactor "Crush", 0.15; // 1.2

		Painchance "Plasma", 14;
		DamageFactor "Plasma", 1.375;
		Painchance "Thunder", 17; // Demons = +300% Pain Chance
		DamageFactor "Thunder", 1.75;
		Painchance "Electric", 17; // Demons = +300% Pain Chance
		DamageFactor "Electric", 1.75;
		Painchance "Lightning", 17; // Demons = +300% Pain Chance
		DamageFactor "Lightning", 1.75;

		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Painchance "Holy", 30; // Demons = +300% Pain Chance
		Species "Cyberdemon";
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+NORADIUSDMG;
		+BOSS;
		+MISSILEEVENMORE;
		+AVOIDMELEE;
		+DONTHARMSPECIES;
		SeeSound "monster/annsit";
		DeathSound "monster/anndth";
		ActiveSound "cyber/active";
		PainSound "annihilator/pain";
		Obituary "The Cyber Annihilator blew %o away with its rockets.";

		dropitem "RandomPowerupSpawner", 2;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "DoomSpellMana", 112;
		dropitem "DoomSpellMana", 112;
		dropitem "DoomSpellMana2", 84;
		dropitem "DoomSpellMana2", 84;
		dropitem "DoomSpellMana2", 84;
		dropitem "DoomSpellMana3", 56;
		dropitem "DoomSpellMana3", 56;
		dropitem "RocketLauncher", 32, 5;
		dropitem "RocketLauncher", 32, 5;
		dropitem "RocketLauncher", 2, 15;
		dropitem "RocketLauncher", 2, 15;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "RocketBox", 4, 5;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
	}
	
	States 
	{
		Stomp:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			ANNI B 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			ANMA A 7
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
			}
			ANMA B 7
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
				
				A_MonsterCrisisCheck(); // Single Projectile
				A_CrisisSpawnProjectile("AnnhiliatorStomp","AnnhiliatorStompCrisis",10,0,0,0);
				if (user_canusecrisisatk == 1) { A_Quake(9,32,0,768,"nosound/silent"); }
				else { A_Quake(3,32,0,768,"nosound/silent"); }
			}
			ANMA B 7
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
			}
			ANMA B 0 A_Jump(64,2);
			ANMA B 0 A_JumpIfCloser(180, "Stomp");
			Goto See;

		AttackPhaseChange:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI E 0 A_Jump (128, "Missile2");
			goto See;

		Melee:
		Missile:
			TNT1 A 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_JumpIfCloser(180, "Stomp");
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI E 0 A_Jump (128, "Missile2");

		Missile1:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
			}
			TNT1 A 0 A_JumpIfCloser(180, "Stomp");
			ANNI E 6 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI F 12 Bright 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }
				A_FaceTarget();

				user_tempvar1 = 40;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,27,0);
				A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,-27,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,27,(user_tempvar2*1));
					A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,27,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,-27,(user_tempvar2*1));
					A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,-27,(user_tempvar2*-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,27,(user_tempvar2*2));
						A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,27,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,-27,(user_tempvar2*2));
						A_CrisisSpawnProjectile("Rocket2","Rocket2Crisis",user_tempvar1,-27,(user_tempvar2*-2));
					}
				}
			}
			ANNI E 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIfCloser(180, "Stomp");
			TNT1 A 0 
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "AttackPhaseChange");
			Goto Missile1;

		Missile2:
			ANNI E 0
			{
				A_CheckIfTargetDead("See");
			}
			ANNI E 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			ANNI F 12 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(7); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(8); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(9); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(10); }
				else if (levelbehavior && user_monsterlevel > 30) { A_SetTics(11); }
				A_FaceTarget();

				user_tempvar1 = 40;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,27,0);
				A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,-27,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,27,(user_tempvar2*1));
					A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,27,(user_tempvar2*-1));
					A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,-27,(user_tempvar2*1));
					A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,-27,(user_tempvar2*-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,27,(user_tempvar2*2));
						A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,27,(user_tempvar2*-2));
						A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,-27,(user_tempvar2*2));
						A_CrisisSpawnProjectile("HomRocket1","HomRocket1Crisis",user_tempvar1,-27,(user_tempvar2*-2));
					}
				}
			}
			ANNI E 6
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(5); }
				A_FaceTarget();
			}
			TNT1 A 0 A_JumpIfCloser(180, "Stomp");
			TNT1 A 0
			{
				user_shotsfired += 1;
			}
			TNT1 A 0 A_JumpIf(user_shotsfired >= user_shotsfiredmax, "See");
			Goto Missile2;

		Spawn: 
			ANNI A 0 NoDelay;
			ANNI AB 10 A_Look();
			goto Spawn+1;
		See:
			ANNI A 0 
			{
				if (user_isstealth <= 0 && health <= user_HPBuffRange) { A_GiveInventory("EnemyShadowLight",1); } else  { A_TakeInventory("EnemyShadowLight",9999); } 
			}
			ANNI A 0
			{
				user_shotsfired = 0;
				if (levelbehavior && user_monsterlevel > 120)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 6; } else { user_shotsfiredmax = 5; }
				}
				else
				if (levelbehavior && user_monsterlevel > 60)
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 5; } else { user_shotsfiredmax = 4; }
				}
				else
				{
					if (random(1,8) == 1) { user_shotsfiredmax = 4; } else { user_shotsfiredmax = 3; }
				}
			}
			ANNI AABBCCDD 3 
			{
				user_walksound++;
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 90) { A_SetTics(2); }
				if (user_walksound == 1 || user_walksound == 7) { A_StartSound("monster/anhoof"); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
				if (user_walksound >= 8) { user_walksound = 0; }
				A_JumpIfCloser(120, "Stomp");
			}
			loop;

		Pain: 
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI G 5;
			ANNI G 5 A_DVDSPain();
			Goto See;
		Pain.Fist: 
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI G 5;
			ANNI G 5 A_DVDSPain();
			ANNI GG 5;
			Goto See;
		Pain.Kick: 
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI G 5;
			ANNI G 5 A_DVDSPain();
			ANNI GGGG 5;
			Goto See;

		Pain.Plasma:
			TNT1 A 0 A_Jump(192,"Pain");
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI GG 5;
			ANNI G 5 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			ANNI G 2;
			ANNI G 3;
			ANNI G 2;
			Goto See;
		Pain.Electric:
		Pain.Lightning:
		Pain.Thunder:
			TNT1 A 0  
			{
				user_shotsfired = 0;
			}
			ANNI G 5;
			ANNI G 5;
			ANNI G 5 A_DVDSPain();
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			ANNI G 5;
			ANNI G 5;
			ANNI G 5;
			TNT1 A 0 A_StartSound("elecstun");
			TNT1 A 0 A_SpawnItemEx ("ElectricDischarge", random(-15, -15), random(-15, -15), random(-15, -15), 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			ANNI G 5;
			ANNI G 5;
			ANNI G 5;
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			ANNI H 10 Bright;
			ANNI I 10 Bright A_Scream();
			ANNI JKL 10 Bright;
			ANNI M 10 Bright A_NoBlocking();
			ANNI NO 10 Bright;
			ANNI P 30;
			ANNI P -1 A_DVDSBossDeath();
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			ANNI G 5 A_GenericFreezeDeath();
			ANNI G 1 A_FreezeDeathChunks();
			wait;
		Raise:
			ANNI O 10 Bright;
			ANNI NMLKJIH 10 Bright;
			goto See;
	}
}

class HellCleric : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Others"
		Tag "Hell Cleric";

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
		dropitem "SauronHelmet", 1;

		Health 175;
		Radius 20;
		Height 56;
		Mass 150;
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Painchance 24;
		Painchance "Trample", 3; // Hell Clerics are more resistant to pain from Cyberdemon Stomps
		Painchance "Stomp", 3; // Hell Clerics are more resistant to pain from Cyberdemon Stomps
		Painchance "Melee", 3; // Hell Clerics are more resistant to pain from melee
		Painchance "Fist", 3; // Hell Clerics are more resistant to pain from punches
		Painchance "Kick", 16; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 3; // Hell Clerics are more resistant to pain from punches
		Painchance "Chainsaw", 3; // Hell Clerics are more resistant to pain from punches
		Painchance "Holy", 72; // Demons = +300% Pain Chance
		Painchance "Magic", 120;
		Damagefactor "Magic", 1.65;
		DamageFactor "Crush", 0.4; // 3.2
		DamageFactor "Holy", 2.5; // Demons = +250% Holy Damage
		DamageFactor "Fire", 0.75; // Demons = -25% Fire Damage
		DamageFactor "Ice", 1.33; // Demons = +33% Ice Damage
		Damagefactor "Stomp", 0.4; // Hell Clerics are pretty resistant to Stomps from Cyberdemon types
		Damagefactor "Trample", 0.4; // Hell Clerics are pretty resistant to Stomps from Cyberdemon types
		DamageFactor "Melee", 0.4; // Hell Clerics are pretty resistant to melee damage
		DamageFactor "Fist", 0.4; // Hell Clerics are pretty resistant to melee damage
		DamageFactor "Kick", 0.4; // Hell Clerics are pretty resistant to melee damage
		DamageFactor "Gauntlets", 0.4; // Hell Clerics are pretty resistant to melee damage
		DamageFactor "Sceptre", 0.4; // Hell Clerics are pretty resistant to melee damage
		DamageFactor "Chainsaw", 0.4; // Hell Clerics are pretty resistant to melee damage
		Monster;
		+SOLID;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		SeeSound "hellcleric/sight";
		PainSound "hellcleric/pain";
		DeathSound "hellcleric/death";
		ActiveSound "hellcleric/active";
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
	}

	states
	{
		Spawn:
			HELC A 0 NoDelay;
			HELC A 4 A_Look();
			HELC A 4 A_Look();
			goto Spawn+1;

		See:
			HELC A 0;
			HELC AABBCCDD 2
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				user_fastchasetimer++;
				if (user_fastchasetimer >= 1 && user_fastchasetimer <= 2) { user_fastchasetimermax = 16; }
				if (user_fastchasetimer >= 3 && user_fastchasetimer <= 4) { user_fastchasetimermax = 4; }
				if (user_fastchasetimer >= 5 && user_fastchasetimer <= 6) { user_fastchasetimermax = 8; }
				if (user_fastchasetimer >= 7 && user_fastchasetimer <= 8) { user_fastchasetimermax = 2; }
				if (user_fastchasetimer >= 8) { user_fastchasetimer = 0; }
				if (levelbehavior && user_monsterlevel > 240) { user_fastchasetimermax /= 2; }
				if (random(1,user_fastchasetimermax) == 1) 
				{
					A_DVDSChase("Melee","Missile", CHF_FASTCHASE | CHF_NIGHTMAREFAST);
				}
				else
				{
					A_DVDSChase("Melee","Missile",0,1,3,1,1); 
				}
			}
			loop;

		Melee:
		Missile:
			TNT1 A 0;
			HELC E 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }

				user_attacktype = random(1,2);
				user_attacks = 0;
				user_attackmax = 3;
				A_FaceTarget();
			}
		MissileLoop:
			HELC G 4 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 24;
				user_tempvar2 = 15;
				if (user_attacktype == 1)
				{
					A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
					A_CrisisComboAttack("HellClericDarkBall", "HellClericDarkBallCrisis", user_tempvar1, (7+(12*(random(6,12)))/2), "imp/melee", "Melee", true);
					if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
					{
						A_CrisisSpawnProjectile("HellClericDarkBall", "HellClericDarkBallCrisis",user_tempvar1,0,(user_tempvar2*1));
						A_CrisisSpawnProjectile("HellClericDarkBall", "HellClericDarkBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
						if (user_monsterlevel >= user_hyperlvl2)
						{
							A_CrisisSpawnProjectile("HellClericDarkBall", "HellClericDarkBallCrisis",user_tempvar1,0,(user_tempvar2*2));
							A_CrisisSpawnProjectile("HellClericDarkBall", "HellClericDarkBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						}
					}
				}
				else
				{
					A_MonsterCrisisCheck(); // Multiple Projectiles + Combo Attack
					A_CrisisComboAttack("HellClericBall", "HellClericBallCrisis", user_tempvar1, (3+(11*(random(6,13)))/2), "imp/melee", "Melee", true);
					if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
					{
						A_CrisisSpawnProjectile("HellClericBall", "HellClericBallCrisis",user_tempvar1,0,(user_tempvar2*1));
						A_CrisisSpawnProjectile("HellClericBall", "HellClericBallCrisis",user_tempvar1,0,(user_tempvar2*-1));
						if (user_monsterlevel >= user_hyperlvl2)
						{
							A_CrisisSpawnProjectile("HellClericBall", "HellClericBallCrisis",user_tempvar1,0,(user_tempvar2*2));
							A_CrisisSpawnProjectile("HellClericBall", "HellClericBallCrisis",user_tempvar1,0,(user_tempvar2*-2));
						}
					}
				}
				user_attacks += 1;
			}
			HELC F 0
			{
				if (random(1,8) > 1) { if (user_attacks >= user_attackmax) { return resolvestate("See"); } return resolvestate(null); }    
				return resolvestate(null);
			}
			HELC F 3 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
			}
			loop;

		Pain:
			HELC H 2 A_DVDSPain(1,random(18,22),8,0,0,25);
			goto See;
		Pain.Magic:
			HELC H 2 A_DVDSPain(1,random(18,22),8,0,0,10);
			HELC H 4;
			goto See;
		Pain.Fist:
			HELC H 2 A_DVDSPain(1,random(18,22),8,0,0,50);
			HELC H 1;
			goto See;
		Pain.Kick:
			HELC H 2 A_DVDSPain(1,random(18,22),8,0,0,75);
			HELC H 2;
			goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HELC I 5;
			HELC J 5 A_StartSound("hellcleric/death");
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;
			stop;

		XDeath:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;
			stop;

		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HELC H 5 A_GenericFreezeDeath();
			HELC H 1 A_FreezeDeathChunks();
			wait;

		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}

class FlyingBalrog : AetheriusMonsterZSC
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Flying Balrog";
		
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "Berserk", 2;
		dropitem "DiamondSkin", 2;
		dropitem "DiamondSkin", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "SauronGauntlets", 1;
		dropitem "SauronHelmet", 1;

		Health 1500;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1600;
		Meleedamage 10;
		ReactionTime 5;
		PainChance 30;

		RadiusDamageFactor 0.5;
		DamageFactor "Explosive", 0.5;

		Painchance "Fist", 45; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 75; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 45; // Fist attacks have a +50% chance of stunning an enemy
		PainChance "Ice", 200;
		PainChance "Fire", 2;
		Painchance "Holy", 90; // Demons = +300% Pain Chance
		Damagefactor "Crush", 0.5;
		Damagefactor "Fire", 0.125;
		Damagefactor "Ice", 1.875;
		DamageFactor "Holy", 2; // Demons = +200% Holy Damage
		Damagefactor "Stomp", 0.0; // Immune to Stomps from Cyberdemon types
		Damagefactor "Trample", 0.0; // Immune to Stomps from Cyberdemon types
		Species "HellNoble";
		Monster;
		+NOGRAVITY;
		+NOBLOOD;
		+FLOAT;
		+DONTHARMSPECIES;
		+BOSSDEATH;
		SeeSound "flyingbalrog/sight";
		PainSound "flyingbalrog/pain";
		DeathSound "flyingbalrog/death";
		ActiveSound "flyingbalrog/idle";
		MeleeSound "Baron/Melee";
		Obituary "%o was flash-fried by a Flying Balrog.";
		HitObituary "%o found the Flying Balrog too hot to handle.";
	}

	States
	{
		Spawn:
			FRIT A 0 NoDelay;
			FRIT AABB 4 Bright A_FloatLook(12);
			Goto Spawn+1;
		Idle:
			FRIT A 0;
			FRIT ABCD 4 Bright A_Look();
			Loop;
		See:
			FRIT A 0;
			FRIT AABBCCDD 2 Bright
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance)
				{
					A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1);
					A_FloatSetFChaseT(randompick(0,3,6)); 
				}
				else 
				{
					A_DVDSChase("Melee","Missile",0,1,3,1,1); 
				}
				user_painfastchase = 0;
			}
			Loop;

		Melee:
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			FRIT EF 6 Bright 
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			// Five Shot1s (spreading pattern)
			FRIT G 4 Bright 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = 4; // Angle
				user_tempvar3 = 5; // Offset
				A_MonsterCrisisCheck(); // Multiple Projectiles
				if (levelbehavior && user_monsterlevel > 300) { A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*4), (user_tempvar3*4)); } // Far Off Left
				A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*3), (user_tempvar3*3)); // Off Left
				A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*2), (user_tempvar3*2)); // Partially Left
				if (levelbehavior && user_monsterlevel > 150) { A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*1), (user_tempvar3*1)); }
				A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, 0, 0); // Center
				if (levelbehavior && user_monsterlevel > 150) { A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*-1), (user_tempvar3*-1)); }
				A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*-2), (user_tempvar3*-2)); // Partially Right
				A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*-3), (user_tempvar3*-3)); // Off Right
				if (levelbehavior && user_monsterlevel > 300) { A_CrisisSpawnProjectile("FlyingBalrogShot1", "FlyingBalrogShot1Crisis", user_tempvar1, (user_tempvar2*-4), (user_tempvar3*-4)); } // Far Off Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright 
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();

				user_tempvar1 = 44; // Height
				user_tempvar2 = 6; // Angle
				user_tempvar3 = 9; // Offset
				A_MonsterCrisisCheck(); // Multiple Projectiles
				if (levelbehavior && user_monsterlevel > 300) { A_CrisisSpawnProjectile("FlyingBalrogShot2", "FlyingBalrogShot2Crisis", user_tempvar1, (user_tempvar2*3), (user_tempvar3*3)); }
				if (levelbehavior && user_monsterlevel > 150) { A_CrisisSpawnProjectile("FlyingBalrogShot2", "FlyingBalrogShot2Crisis", user_tempvar1, (user_tempvar2*2), (user_tempvar3*2)); }
				A_CrisisSpawnProjectile("FlyingBalrogShot2", "FlyingBalrogShot2Crisis", user_tempvar1, (user_tempvar2*1), (user_tempvar3*1));
				A_CrisisSpawnProjectile("FlyingBalrogShot2", "FlyingBalrogShot2Crisis", user_tempvar1, 0, 0);
				A_CrisisSpawnProjectile("FlyingBalrogShot2", "FlyingBalrogShot2Crisis", user_tempvar1, (user_tempvar2*-1), (user_tempvar3*-1));
				if (levelbehavior && user_monsterlevel > 150) { A_CrisisSpawnProjectile("FlyingBalrogShot2", "FlyingBalrogShot2Crisis", user_tempvar1, (user_tempvar2*-2), (user_tempvar3*-2)); }
				if (levelbehavior && user_monsterlevel > 300) { A_CrisisSpawnProjectile("FlyingBalrogShot2", "FlyingBalrogShot2Crisis", user_tempvar1, (user_tempvar2*-3), (user_tempvar3*-3)); }
			}
			FRIT G 6 Bright
			{
				if (levelbehavior && user_monsterlevel > 225) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 150) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(5); }
				A_FaceTarget();
			}
			Goto See;

		Pain:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,25);
				user_painfastchase = 4 * random(1,8);
			}
			Goto See;
		Pain.Fist:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,20);
				user_painfastchase = 5 * random(1,8);
			}
			FRIT HH 4 Bright;
			Goto See;
		Pain.Kick:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,15);
				user_painfastchase = 7 * random(1,8);
			}
			FRIT HHHH 4 Bright;
			Goto See;
		Pain.Sceptre:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,10);
				user_painfastchase = 5 * random(1,8);
			}
			FRIT HH 4 Bright;
			Goto See;
		Pain.Holy:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,5);
				user_painfastchase = 7 * random(1,8);
			}
			FRIT HHHH 4 Bright;
			Goto See;
		Pain.Ice:
			FRIT H 4 Bright;
			FRIT H 4 Bright
			{
				A_FloatPain(0,6,64,1,random(18,22),8,0,0,1);
				user_painfastchase = 14 * random(1,8);
			}
			FRIT HHHHHHHH 4 Bright;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FRIT I 0 Bright A_NoGravity();
			FRIT I 6 Bright A_Scream();
			FRIT I 0 Bright A_StartSound("flyingbalrog/death2",3);
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			TNT1 A 0 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FRIT H 5 A_GenericFreezeDeath();
			FRIT H 1 A_FreezeDeathChunks();
			wait;
	}
}

class WeakenedFlyingBalrog : FlyingBalrog
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Flying Balrog";

		Health 375; // 75% weaker
		PainChance 120; // 4x more likely to flinch
		Mass 400; // 75% lighter
		Meleedamage 3; // 75% weaker
		Alpha 0.75;

		dropitem "DoomSpellMana", 36;
		dropitem "DoomSpellMana2", 30;
		dropitem "DoomSpellMana3", 24;
		dropitem "Berserk", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States
	{
		See:
			FRIT A 0;
			FRIT AABBCCDD 2 Bright A_DVDSChase("Melee","Missile",0,1,3,1,1);
			Loop;

		Melee:
		Missile:
			TNT1 A 0;
			FRIT E 6 Bright A_FaceTarget();
			FRIT F 6 Bright A_FaceTarget();
			// Five Shot1s (spreading pattern)
			FRIT G 1 Bright 
			{
				A_FaceTarget();
				A_SpawnProjectile("WeakenedBalrogShot1", 44, 12, 15); // Off Left
				A_SpawnProjectile("WeakenedBalrogShot1", 44, 0, 0); // Center
				A_SpawnProjectile("WeakenedBalrogShot1", 44, -12, -15); // Off Right
			}
			FRIT G 3 Bright 
			{
				A_FaceTarget();
				A_SpawnProjectile("WeakenedBalrogShot1", 44, 8, 10); // Partially Left
				A_SpawnProjectile("WeakenedBalrogShot1", 44, -8, -10); // Partially Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright 
			{
				A_FaceTarget();
				A_SpawnProjectile("WeakenedBalrogShot2", 44, 6, 9);
				A_SpawnProjectile("WeakenedBalrogShot2", 44, 0, 0);
				A_SpawnProjectile("WeakenedBalrogShot2", 44, -6, -9);
			}
			FRIT G 6 Bright A_FaceTarget();
			Goto See;

		Pain:
			FRIT H 4 Bright;
			FRIT H 4 Bright A_DVDSPain();
			Goto See;
		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			FRIT I 0 Bright A_NoGravity();
			FRIT I 6 Bright A_Scream();
			FRIT I 0 Bright A_StartSound("flyingbalrog/death2",3);
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			TNT1 A 0 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			FRIT H 5 A_GenericFreezeDeath();
			FRIT H 1 A_FreezeDeathChunks();
			wait;
	}
}

// Hierophant
class Hierophant : AetheriusMonsterZSC 
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "DV-DS Monsters/Hell Nobles"
		Tag "Hierophant";

		Health 2700;
		Radius 24;
		Height 60;
		Mass 2500;
		Speed 15;
		PainChance 24;
		Painchance "Fist", 36; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 60; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 36; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Fire", 3;
		Painchance "Ice", 192;

		RadiusDamageFactor 0.25;
		DamageFactor "Explosive", 0.25;

		DamageFactor "Fire", 0.25;
		DamageFactor "Ice", 2.5;
		DamageFactor "Holy", 1.75;
		DamageFactor "Crush", 0.4; // 3.2
		MeleeDamage 15;
		Monster;
		Species "HellNoble";
		+NOTARGET;
		+FLOORCLIP;
		+MISSILEMORE;
		+FLOAT;
		+NOGRAVITY;
		+DONTHARMSPECIES;
		SeeSound "monster/Hiesit";
		PainSound "monster/Hiepai";
		DeathSound "monster/Hiedth";
		MeleeSound "baron/melee";
		ActiveSound "monster/Hieact";
		Obituary "%o was hexed by a Hierophant.";
		HitObituary "%o got shredded by a Hierophant.";

		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "Backpack", 2;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "RandomPowerupSpawner", 2;
		dropitem "DoomSpellMana", 32;
		dropitem "DoomSpellMana", 8;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "HealthBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "ArmorBonus", 2;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
		dropitem "MaxHealthBonus", 1;
	}

	States
	{
		Spawn: 
			HIER A 0 NoDelay;
			HIER AC 5 A_FloatLook(12);
			goto Spawn+1;
		See:
			HIER A 0;
			HIER AABBAACCDDCC 2
			{
				A_FloatChaseCheck(3,6,9,12,0.4,0.4);
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_FastChaseCalc(16,4);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); A_FloatSetFChaseT(randompick(0,3,6)); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HIER A 0 A_Jump(64, "Blur");
			Loop;
		Blur:
			HIER A 1 A_StartSound("monster/blur");
			HIER AAAAAAAAAAAAAAAAAAAAAA 1 
			{
				A_SpawnItemEx("HieroFX",0,0,0,0,0,0,0,128,0);
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Goto See;
		Missile:
			TNT1 A 0
			{
				user_painfastchase = 0;
			}
			HIER A 0 A_FaceTarget();
			HIER A 0 A_Jump(256, "Missile1", "Missile2", "Missile3");
		Missile1:
			HIER EF 7 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
			}
			HIER G 7 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();

				user_tempvar1 = 26;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,random(-6,-1),0);
				A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,random(1,6),0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*1)+random(1,6));
					A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*-1)+random(-6,-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*2)+random(1,6));
						A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*-2)+random(-6,-1));
					}
				}
			}
			HIER A 3 Bright
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
			}
			HIER HI 7 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
			}
			HIER J 7 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();

				user_tempvar1 = 26;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",26,0,random(-6,-1),0);
				A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",26,0,random(1,6),0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*1)+random(1,6));
					A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*-1)+random(-6,-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*2)+random(1,6));
						A_CrisisSpawnProjectile("HieroBall1","HieroBall1Crisis",user_tempvar1,0,(user_tempvar2*-2)+random(-6,-1));
					}
				}
			}
			HIER A 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SpidRefire();
			}
			HIER A 0 A_Jump(64, "Missile1");
			Goto See;
		Missile2: // Curse Shot
			HIER HI 7 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();
			}
			HIER J 7 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
				A_FaceTarget();

				A_SpawnProjectile("CurseBall",26,0,0,0);
			}
			HIER A 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_SpidRefire();
			}
			HIER EF 7 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) 
				{
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
					else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
					A_FaceTarget();
				}
				else
				{
					A_SetTics(0);
				}
			}
			HIER G 7 Bright 
			{
				if (levelbehavior && user_monsterlevel > 120) 
				{
					if (levelbehavior && user_monsterlevel > 180) { A_SetTics(4); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
					else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(6); }
					A_FaceTarget();
	
					user_tempvar1 = 26;
					user_tempvar2 = 15;
					A_MonsterCrisisCheck(); // Not Actually Necessary...?
					A_SpawnProjectile("CurseBall",user_tempvar1,0,0);
					if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
					{
						A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*1));
						A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*-1));
						if (user_monsterlevel >= user_hyperlvl2)
						{
							A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*2));
							A_SpawnProjectile("CurseBall",user_tempvar1,0,(user_tempvar2*-2));
						}
					}
				}
				else
				{
					A_SetTics(0);
				}
			}
			HIER A 3 
			{
				if (levelbehavior && user_monsterlevel > 120) 
				{
					if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
					else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
					A_SpidRefire();
				}
				else
				{
					A_SetTics(0);
				}
			}
			HIER A 0 A_Jump(128,"Missile1","Missile3");
			Goto See;

		Missile3:
			HIER KLM 5 Bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				
				user_shotsfired = 0;
				user_shotsfiredmax = 8 + ((user_monsterlevel/15)*2) + random(0,2);
				A_FaceTarget();
			}
		Missile3Loop:
			HIER N 1 Bright
			{
				user_tempvar1 = 32;
				user_tempvar2 = 15;
				A_MonsterCrisisCheck(); // Multiple Projectiles
				A_CrisisSpawnProjectile("HieroBall2","HieroBall2Crisis",user_tempvar1,0,0);
				if (levelbehavior && user_monsterlevel >= user_hyperlvl1)
				{
					A_CrisisSpawnProjectile("HieroBall2","HieroBall2Crisis",user_tempvar1,0,(user_tempvar2*1));
					A_CrisisSpawnProjectile("HieroBall2","HieroBall2Crisis",user_tempvar1,0,(user_tempvar2*-1));
					if (user_monsterlevel >= user_hyperlvl2)
					{
						A_CrisisSpawnProjectile("HieroBall2","HieroBall2Crisis",user_tempvar1,0,(user_tempvar2*2));
						A_CrisisSpawnProjectile("HieroBall2","HieroBall2Crisis",user_tempvar1,0,(user_tempvar2*-2));
					}
				}
			}
			HIER O 1 Bright A_FaceTarget();
			HIER O 0 Bright 
			{
				user_shotsfired += 1;
				if (user_shotsfired >= user_shotsfiredmax) { return resolvestate("Missile3End"); }
				return resolvestate(null);
			}
			loop;
		Missile3End:
			HIER L 5 
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(4); }
				A_FaceTarget();
			}
			Goto See;

		Melee:
			TNT1 A 0;
			HIER EF 8  
			{
				if (levelbehavior && user_monsterlevel > 160) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(7); }
				A_FaceTarget();
			}
			HIER G 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(15,"baron/melee","none","Melee",1); // A_MeleeAttack;
			}
			HIER A 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
			}
			HIER A 0 A_Jump(128, 1);
			Goto See;
			HIER HI 8
			{
				if (levelbehavior && user_monsterlevel > 160) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(7); }
				A_FaceTarget();
			}
			HIER J 3
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack(15,"baron/melee","none","Melee",1); // A_MeleeAttack;
			}
			HIER A 3 
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(1); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(2); }
			}
			Goto See;

		Pain: 
			HIER P 2;
			HIER P 2
			{
				A_FloatPain(0,6,64);
				user_painfastchase = 3 * random(1,8);
			}
			Goto See;
		Pain.Fist: 
			HIER P 2;
			HIER P 2
			{
				A_FloatPain(0,6,64);
				user_painfastchase = 4 * random(1,8);
			}
			HIER PP 2;
			Goto See;
		Pain.Kick: 
			HIER P 2;
			HIER P 2
			{
				A_FloatPain(0,6,64);
				user_painfastchase = 6 * random(1,8);
			}
			HIER PPPP 2;
			Goto See;
		Pain.Ice:
			HIER P 2;
			HIER P 2
			{
				A_FloatPain(0,6,64);
				user_painfastchase = 12 * random(1,8);
			}
			HIER PPPPPPPP 2;
			Goto See;
		Pain.Holy:
			HIER P 2;
			HIER P 2
			{
				A_FloatPain(0,6,64);
				user_painfastchase = 6 * random(1,8);
			}
			HIER PPPP 2;
			Goto See;

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			HIER Q 6;
			HIER R 6 A_Scream();
			HIER S 6 A_NoBlocking();
			HIER TUV 6;
			HIER W 6;
			HIER X 0 A_SetFloorClip();
			HIER X -1 A_DVDSBossDeath();
			Stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			HIER P 5 A_GenericFreezeDeath();
			HIER P 1 A_FreezeDeathChunks();
			wait;
		Raise:
			HIER W 6;
			HIER VUTSRQ 6;
			goto See;
	}
}

class DSHelperDog : AetheriusMonsterZSC replaces MBFHelperDog
{
	default
	{
		Tag "Attack Dog";
		Health 375; // 500
		Speed 15; // 10
		Radius 12;
		Height 28;
		Mass 100; // 100
		PainChance 120; // 180
		Painchance "Fist", 180; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 255; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Gauntlets", 180; // Fist attacks have a +50% chance of stunning an enemy
		DamageFactor "Crush", 1.25; // 10.0
		Monster;
		+JUMPDOWN;
		ActiveSound "dog/active";
		AttackSound "dog/attack";
		DeathSound "dog/death";
		PainSound "dog/pain";
		SeeSound "dog/sight";
		Obituary "$OB_DOG"; // "%o was mauled by a dog."
	}

	States
	{
		Spawn:
			DOGS A 0 NoDelay;
			DOGS AABB 5 A_Look();
			goto Spawn+1;
		See:
			DOGS A 0;
			DOGS AABBCCDD 2
			{
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(1); }
				A_DVDSChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;
		Melee:
			DOGS A 0;
			DOGS EF 8
			{
				if (levelbehavior && user_monsterlevel > 160) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(7); }
				A_FaceTarget();
			}
			DOGS G 8
			{
				if (levelbehavior && user_monsterlevel > 160) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 80) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 40) { A_SetTics(7); }
				A_FaceTarget();
				
				A_CrisisMeleeAttack((random(1,10)*randompick(4,4,4,4,6,6,8)),"none","none","Melee",true); // A_SargAttack
			}
			Goto See;

		Pain:
			DOGS H 2;
			DOGS H 2 A_DVDSPain();
			Goto See;
		Pain.Fist:
			DOGS H 2;
			DOGS H 2 A_DVDSPain();
			DOGS HH 2;
			Goto See;
		Pain.Kick: 
			DOGS H 2;
			DOGS H 2 A_DVDSPain();
			DOGS HHHH 2; 
			Goto See; 

		Death:
			TNT1 A 0 A_DVDSNormalDeath(-2,0,1);
			DOGS I 8;
			DOGS J 8 A_Scream();
			DOGS K 4;
			DOGS L 4 A_Fall();
			DOGS M 4;
			DOGS N -1;
			stop;
		Ice:
			#### # 0 A_DVDSIceDeath(-2,0,1);
			DOGS H 5 A_GenericFreezeDeath();
			DOGS H 1 A_FreezeDeathChunks();
			wait;
		Raise:
			DOGS N 5;
			DOGS MLKJI 5;
			Goto See;
	}
}

// Boss Brain
class DSBossBrain : AetheriusBossZSC replaces BossBrain
{
	default
	{
		Tag "Icon of Sin"; // Tag "John Romero"
		Health 250;
		Mass 10000000;
		PainChance 255;
		Height 80;
		Radius 20;
		MONSTER;
		+SHOOTABLE;
		-COUNTKILL;
		+SOLID;
		-CANPUSHWALLS;
		-CANUSEWALLS;
		-ACTIVATEMCROSS;
		-CANPASS;
		+ISMONSTER;
		+NOICEDEATH;
		+OLDRADIUSDMG;
		PainSound "brain/pain";
		DeathSound "brain/death";
	}
	
	States
	{
		BrainExplode:
			MISL BC 10 Bright;
			MISL D 10 
			{
				if (ActorLevelCalcs) 
				{
					A_DVDSNormalDeath(-2,0,1); 
				}
				A_BrainExplode();
			}
			Stop;
		Spawn:
			BBRN A -1;
			Stop;
		Pain:
			BBRN B 36 
			{
				if (dvds_improvediconofsin) { A_StartSound("brain/pain2", CHAN_VOICE, CHANF_DEFAULT, 1.0, ATTN_NONE); }
				else { A_StartSound("brain/pain", CHAN_VOICE, CHANF_DEFAULT, 1.0, ATTN_NONE); }
			}
			Goto Spawn;
		Death:
			BBRN B 100
			{
				if (ActorLevelCalcs) 
				{
					A_DVDSNormalDeath(-2,0,1); 
					A_BrainScream("brain/death2");
				}
				else
				{
					A_BrainScream("brain/death");
				}
			}
			BBRN BB 10;
			BBRN B -1 A_BrainDie();
			Stop;
	}
}

class DSBossEye : AetheriusBossZSC replaces BossEye
{
	int user_bosseyetype;
	default
	{
		Height 32;
		+NOBLOCKMAP;
		+NOSECTOR;
		+BOSS;

		DropItem "Zombieman", 255, 16;
		DropItem "ShotgunGuy", 255, 16;
		DropItem "ChaingunGuy", 255, 16;
		DropItem "DoomImp", 255, 24;
		DropItem "Demon", 255, 24;
		DropItem "PainElemental", 255, 12;
		DropItem "Cacodemon", 255, 24;
		DropItem "Revenant", 255, 12;
		DropItem "Arachnotron", 255, 24;
		DropItem "Fatso", 255, 24;
		DropItem "HellKnight", 255, 24;
		DropItem "BaronOfHell", 255, 12;
		DropItem "HellCleric", 255, 12;
		DropItem "Archvile", 255, 4;
		DropItem "FlyingBalrog", 255, 4;
		DropItem "Cyberdemon", 255, 4;
		DropItem "HadesOverlord", 255, 4;
	}
	
	States
	{
		Spawn:
			SSWV A 10 A_Look();
			Loop;
		See:
			SSWV A 181 
			{
				if (dvds_improvediconofsin) 
				{
					A_StartSound("brain/sight2", CHAN_VOICE, CHANF_DEFAULT, 1.0, ATTN_NONE);
					user_bosseyetype = 1;
				}
				else
				{
					A_StartSound("brain/sight", CHAN_VOICE, CHANF_DEFAULT, 1.0, ATTN_NONE);
				}
			}
			SSWV A 150 
			{
				if (user_bosseyetype > 0) 
				{
					A_SetTics(random(90,110));
					A_BrainSpit("SpawnShot");
					A_StartSound("brain/spit", CHAN_WEAPON, CHANF_DEFAULT, 1.0, ATTN_NONE);
				}
				else
				{
					A_SetTics(random(135,165));
					A_BrainSpit("SpawnShot");
					A_StartSound("brain/spit", CHAN_WEAPON, CHANF_DEFAULT, 1.0, ATTN_NONE);
				}
			}
			Wait;
	}
}

// Friendly Monsters
class FZombieman : DSZombieman
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FPlasmaGuy : PlasmaGuy
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FRocketLauncherGuy : RocketLauncherGuy
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FRepeaterZombie : RepeaterZombie
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FKarasawaGuy : KarasawaGuy
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FShotgunGuy : DSShotgunGuy
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FSuperShotgunGuy : SuperShotgunGuy
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FFemaleRailZombie : FemaleRailZombie
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FChaingunGuy : DSChaingunGuy
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FBFGGuy : BFGGuy
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FWolfensteinSS : DSWolfensteinSS
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FDoomImp : DSDoomImp
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FDarkImp : DarkImp
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FSTDarkImp : STDarkImp
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FVoidDarkImp : VoidDarkImp
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FNetherDarkImp : NetherDarkImp
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FDemon : DSDemon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FBloodDemon : BloodDemon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FChaingunDemon : ChaingunDemon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FSpectre : DSSpectre
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FBloodSpectre : BloodSpectre
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FChaingunSpectre : ChaingunSpectre
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FRevenant : DSRevenant
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FDeathIncarnate : DeathIncarnate
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	States
	{
		XDeath: 
			INCX A 10 Bright A_StartSound("monster/incexp");
			INCX BC 5 Bright;
			INCX D 5 Bright A_NoBlocking();
			TNT1 A 0;
			INCX D 0 Bright A_SpawnItemEx("FHadesSphere",0,32,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			INCX EFGHIJ 5 Bright;
			INCX K -1;
			stop;
	}
}

class FLostSoul : DSLostSoul
{
	default
	{
		+FRIENDLY;
		+ISMONSTER;
		+RANDOMIZE;
	}
	
	states
	{
			UpgradeClass2:
				TNT1 A 0 A_SpawnItemEx("FForgottenOne",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
				stop;

			UpgradeClass:
				TNT1 A 0 A_JumpIf( random(1,384) <= A_GetEvolveChance() , "UpgradeClass2");
				TNT1 A 0 A_SpawnItemEx("FLostSoul2",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
				stop;

		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_JumpIf( random(1,256) <= A_GetEvolveChance() , "UpgradeClass");
			TNT1 A 0 A_SpawnItemEx("FLostSoul1",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,0,tid);
			stop;
	}
}

class FLostSoul1 : DSLostSoul
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FLostSoul2 : DSLostSoul2
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FForgottenOne : ForgottenOne
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FHadesSphere : HadesSphere
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_StartSound("monster/hadtel");
			HADE EFGH 4 Bright;
		Idle:
			HADE A 0 Bright A_SetShootable();
			HADE A 0 Bright A_SetSolid();
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
	
				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0
			{
				A_HadesSphereTeleport("PhaseOut",128,1024);
			}
			loop;
		See:
			goto Chase;
	}
}

class FHSOverlord : HSOverlord
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_StartSound("monster/hadtel");
			HADE EFGH 4 Bright;
		Idle:
			HADE A 0 Bright A_UnSetInvulnerable();
			HADE A 0 Bright A_StartSound("monster/hadwlk");
			HADE AABBCCDD 2 Bright
			{
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }

				A_FastChaseCalc(2,32);
				if (random(1,256) <= user_fastchasechance) { A_DVDSChase("Melee","Missile",CHF_FASTCHASE,1,3,1,1); } else { A_DVDSChase("Melee","Missile",0,1,3,1,1); }
				user_painfastchase = 0;
			}
			HADE D 0 Bright
			{
				A_HadesSphereTeleport("Teleport",128,1024);
			}
			loop;
		See:
			goto Chasing;
	}
}

class FCacodemon : DSCacodemon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FCacolantern : Cacolantern
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FAbaddon : Abaddon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FPainElemental : DSPainElemental
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	states
	{
		Missile:
			PAIN D 0 A_JumpIfHealthLower(user_HPCritRange, "StartShock");
			PAIN D 0 A_JumpIfHealthLower(user_HPLowRange, "StartShockCheck");
		Missile2:
			PAIN DE 5 A_FaceTarget();
			PAIN F 5 bright A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			goto See;
		StartShockCheck:
			PAIN D 0 A_Jump(192, "Missile2");
		StartShock:
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			PAIN DE 5 A_FaceTarget();
			PAIN F 0 bright A_PainAttack("FLostSoul");    // See LostSoul
			PAIN F 0 bright A_DualPainAttack("FLostSoul");    // See LostSoul
			PAIN F 5;
			PAIN E 3;
			Goto See;
	}
}

class FHadesElemental : HadesElemental
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	states
	{
		Missile3:
			HELE BC 5 Bright
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }
			}
			HELE D 5 Bright 
			{
				A_FaceTarget();
				if (levelbehavior && user_monsterlevel > 150) { A_SetTics(3); }
				else if (levelbehavior && user_monsterlevel > 75) { A_SetTics(4); }

				A_DualPainAttack("FHadesSphere");
			}
			goto See+1;
		Death:
			HELE I 5 Bright A_Scream();
			HELE JKL 5 Bright;
			HELE M 5 Bright A_NoBlocking();
			HELE M 0 Bright A_SpawnItemEx("FHadesSphere",36,36);
			HELE M 0 Bright A_SpawnItemEx("FHadesSphere",-36,36);
			HELE M 0 Bright A_SpawnItemEx("FHadesSphere",-36,-36);
			HELE M 0 Bright A_SpawnItemEx("FHadesSphere",36,-36);
			HELE NOP 5 Bright;
			HELE QRSTU 5;
			HELE V -1 A_SetFloorClip();
			stop;
	}
}

class FHadesOverLord : HadesOverLord
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	states
	{
		Missile1:
			OVER DE 8
			{
				if (levelbehavior && user_monsterlevel > 240) { A_SetTics(4); }
				else if (levelbehavior && user_monsterlevel > 180) { A_SetTics(5); }
				else if (levelbehavior && user_monsterlevel > 120) { A_SetTics(6); }
				else if (levelbehavior && user_monsterlevel > 60) { A_SetTics(7); }
				A_FaceTarget();
			}
			OVER FFFFF 4 bright
			{
				if (levelbehavior && user_monsterlevel > 180) { A_SetTics(2); }
				else if (levelbehavior && user_monsterlevel > 90) { A_SetTics(3); }
				A_FaceTarget();
				A_PainAttack("FHSOverlord",0,PAF_AIMFACING);
			}
			goto See;
	}
}

class FArachnotron : DSArachnotron
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FRailArachnotron : DSRailArachnotron
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FArachnotronMK2 : ArachnotronMK2
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FFusionArachnotron : FusionArachnotron
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FHellKnight : DSHellKnight
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FHellWarrior : HellWarrior
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FFatso : DSFatso
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FHectebus : Hectebus
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FDaedabus : Daedabus
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FArchvile : DSArchvile
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	states
	{
		// Will allow this monster to wander around in search of enemies instead of standing like a derp. :P
		Spawn:
			TNT1 A 0 NoDelay;
			VILE AABBCCDDEEFF 2
			{
				A_DVDSWander(0,1,3,1,1);
				A_Look();
			}
			goto Spawn+1;
		See:
			VILE AABBCCDDEEFF 2
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				A_DVDSChase(null,"Missile",CHF_FASTCHASE);
			}
			loop;
	}
}

class FDiabloist : Diabloist
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
	
	states
	{
		// Will allow this monster to wander around in search of enemies instead of standing like a derp. :P
		Spawn:
			TNT1 A 0 NoDelay;
			DIAB AABBCCDDEEFF 2
			{
				A_DVDSWander(0,1,3,1,1);
				A_Look();
			}
			goto Spawn+1;
		See:
			DIAB A 0 
			{
				if (health <= user_HPBuffRange) 
				{
					if (health <= user_HPLowBuffRange) 
					{
						A_SetInventory("SpeedBonus18Percent",1);
						A_SetInventory("SpeedBonus12Percent",0);
					}
					else
					{
						A_SetInventory("SpeedBonus12Percent",1);
						A_SetInventory("SpeedBonus18Percent",0);
					}
				}
				else
				{
					A_SetInventory("SpeedBonus18Percent",0);
					A_SetInventory("SpeedBonus12Percent",0);
				}
			}
			DIAB AABBCCDDEEFF 2 
			{
				if (levelbehavior && user_monsterlevel > 60) { bAVOIDMELEE = true; }
				if (levelbehavior && user_monsterlevel > 120) { A_SetTics(1); }
				if (random (1,256) <= (160+(user_monsterlevel/16))) { A_DVDSChase(null,"Missile", CHF_FASTCHASE | CHF_RESURRECT); } else { A_DVDSChase(null,"Missile", CHF_RESURRECT); } // A_VileChase 
			}
			loop;
	}
}

class FBaronOfHell : DSBaronOfHell
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FBelphegor : Belphegor
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FBruiserDemon : BruiserDemon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FCyBruiser : CyBruiser
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FArchonOfHell : ArchonOfHell
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FPyroDemon : PyroDemon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FSpiderMastermind : DSSpiderMastermind
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FDemolisher : Demolisher
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FCyberdemon : DSCyberdemon
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FAnnihilator : Annihilator
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FHellCleric : HellCleric
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FFlyingBalrog : FlyingBalrog
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

class FHierophant : Hierophant
{
	default
	{
		-COUNTKILL;
		+FRIENDLY;
		+THRUSPECIES;
		+DONTHARMSPECIES;
		Species "FriendlyMonsters";
		DropItem "NoItemSpawn", 1;
	}
}

// Cast versions of monsters

class CastZombieman : Zombieman { }
class CastPlasmaGuy : AetheriusBaseZSC
{
	default
	{
		Health 50;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 100;
		MONSTER;
		+FLOORCLIP;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o got burned by a plasma zombie.";
		MissileType "PlasmaBallMonster";
	}
	
	States
	{
		Spawn:
			ZMAY AB 10 A_Look();
			Loop;
		See:
			ZMAY AABBCCDD 4;
			Loop;
		Missile:
			ZMAY E 6 A_FaceTarget();
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			ZMAY F 3 Bright A_SpawnProjectile("PlasmaBallMonster");
			Goto See;
		Pain:
			ZMAY G 3;
			ZMAY G 3 A_Pain();
			Goto See;
		Death:
			ZMAY H 5;
			ZMAY I 5 A_Scream();
			ZMAY J 5 A_Fall();
			ZMAY K 5;
			ZMAY L -1;
			Stop;
		XDeath:
			ZMAY O 5;
			ZMAY P 5 A_XScream();
			ZMAY Q 5 A_Fall();
			ZMAY RSTU 5;
			ZMAY V -1;
			Stop;
		Raise:
			ZMAY KJIH 5;
			Goto See;
	}
}
class CastRepeaterZombie : AetheriusBaseZSC
{
	default
	{
		Health 100;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 96;
		Monster;
		+FloorClip;
		SeeSound "Grunt/Sight";
		PainSound "Grunt/Pain";
		DeathSound "Grunt/Death";
		ActiveSound "Grunt/Active";
		Obituary "%o was vapourized by a Repeater Zombie";
		Decal "MummyScorch";
	}
	
	States
	{
		Spawn:
			RPZM AAAAAAAAAABBBBBBBBBB 1 A_Look();
			Loop;
		See:
			RPZM AABBCCDD 4;
			Loop;

		Missile:
			RPZM E 4 A_StartSound("Weapons/RepeaterSpinUp",CHAN_7);
			RPZM FEF 4 A_FaceTarget();
			RPZM G 2 A_StartSound("Weapons/RepeaterFire");
			RPZM F 2 A_FaceTarget();
			RPZM H 2 A_StartSound("Weapons/RepeaterFire");
			RPZM E 2 A_FaceTarget();
			RPZM G 2 A_StartSound("Weapons/RepeaterFire");
			RPZM F 2 A_FaceTarget();
			RPZM H 2 A_StartSound("Weapons/RepeaterFire");
			RPZM E 2 A_FaceTarget();
			RPZM G 2 A_StartSound("Weapons/RepeaterFire");
			RPZM F 2 A_FaceTarget();
			RPZM H 2 A_StartSound("Weapons/RepeaterFire");
			RPZM E 2 A_FaceTarget();
			RPZM G 2 A_StartSound("Weapons/RepeaterFire");
			RPZM F 2 A_FaceTarget();
			RPZM H 2 A_StartSound("Weapons/RepeaterFire");
			RPZM E 2 A_FaceTarget();
			RPZM G 2 A_StartSound("Weapons/RepeaterFire");
			RPZM F 2 A_FaceTarget();
			RPZM H 2 A_StartSound("Weapons/RepeaterFire");
			RPZM E 2 A_FaceTarget();
			RPZM G 2 A_StartSound("Weapons/RepeaterFire");
			RPZM F 2 A_FaceTarget();
			RPZM H 2 A_StartSound("Weapons/RepeaterFire");
			RPZM E 2 A_FaceTarget();
			goto WindDown;
		WindDown:
			RPZM E 4 A_StartSound("Weapons/RepeaterSpinDown",CHAN_7);
			RPZM FEFEEFF 4;
			Goto See;
		Pain:
			RPZM I 0 A_StopSound(CHAN_7);
			RPZM I 0 A_JumpIfInventory("RepeaterZombieFiring", 1, "PainSpinDown");
			RPZM I 0 A_TakeInventory("RepeaterZombieFiring", 1);
			RPZM I 0 A_TakeInventory("RepeaterZombieHeat", 100);
			RPZM I 3;
			RPZM I 3 A_Pain();
			Goto See;
		Death:
			RPZM I 4 A_StopSound(CHAN_7);
			RPZM J 5;
			RPZM K 5 A_Scream();
			RPZM L 5 A_Fall();
			RPZM M 5;
			RPZM N -1;
			Stop;
		XDeath:
			RPZM O 5 A_StopSound(CHAN_7);
			RPZM P 5 A_XScream();
			RPZM Q 5;
			RPZM R 5 A_Fall();
			RPZM STUV 5;
			RPZM W -1;
			Stop;
		Raise:
			RPZM NMLKJI 5;
			Goto See;
	}
}
class CastKarasawaGuy : AetheriusBaseZSC
{
	default
	{
		Health 150;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 70;
		MONSTER;
		+FLOORCLIP;
		SeeSound "grunt/sight";
		AttackSound "Weapons/KarasawaFire";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o got ripped apart by a Karasawa zombie.";
	}
	
	States
	{
		Spawn:
			KSWZ AB 10 A_Look();
			Loop;
		See:
			KSWZ AABBCCDD 4;
			Loop;

		Missile:
			KSWZ E 0 A_FaceTarget();
			KSWZ E 10;
			KSWZ F 1 Bright A_StartSound("Weapons/KarasawaFire",CHAN_WEAPON);
			KSWZ F 9 Bright A_SpawnProjectile("KsawBolt", 32, 1, 0, 0);
			KSWZ E 2;
			KSWZ E 1 A_StartSound("Weapons/KarasawaCharge");
			KSWZ E 10;
			KSWZ AABBCCDD 4;
			Goto See;

		Pain:
			KSWZ G 3;
			KSWZ G 3 A_Pain();
			Goto See;
		Death:
			KSWZ H 5;
			KSWZ I 5 A_Scream();
			KSWZ J 5 A_Fall();
			KSWZ K 5;
			KSWZ L 5;
			KSWZ M 5;
			KSWZ N -1;
			Stop;
		XDeath:
			KSWZ O 5;
			KSWZ P 5 A_XScream();
			KSWZ Q 5 A_Fall();
			KSWZ RSTUV 5;
			KSWZ W -1;
			Stop;
		Raise:
			KSWZ NMLKJIH 5;
			Goto See;
	}
}
class CastRocketLauncherGuy : AetheriusBaseZSC
{
	default
	{
		health 80;
		obituary "%o was 'sploded by a rocket-launcher guy.";
		radius 20;
		height 56;
		mass 100;
		speed 8;
		painchance 170;
		seesound "shotguy/sight";
		attacksound "shotguy/attack";
		painsound "shotguy/pain";
		deathsound "shotguy/death";
		activesound "shotguy/active";
		MONSTER;
		+FLOORCLIP;
	}
	
	States
	{
		Spawn:
			MPO2 AB 10 A_Look();
			Loop;
		See:
			MPO2 AABBCCDD 3;
			Loop;
		Missile:
			MPO2 E 10 A_FaceTarget();
			MPO2 F 10 bright A_CyberAttack();
			MPO2 E 10;
			Goto See;
		Pain:
			MPO2 G 2;
			MPO2 G 2 A_Pain();
			Goto See;
		Death:
			MPO2 H 5;
			MPO2 I 5 A_Scream();
			MPO2 J 5;
			MPO2 K 5 A_Fall();
			MPO2 L -1;
			Stop;
		XDeath:
			MPO2 M 5;
			MPO2 N 5 A_XScream();
			MPO2 O 5;
			MPO2 P 5 A_Fall();
			MPO2 QRST 5;
			MPO2 U -1;
			Stop;
		Raise:
			MPO2 MJKJI 5;
			Goto See;
	}
}

class CastShotgunGuy : ShotgunGuy { }
class CastSuperShotgunGuy : AetheriusBaseZSC
{
	default
	{
		Health 120;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 170;
		Translation "112:127=16:47";
		SeeSound "chainguy/sight";
		PainSound "chainguy/pain";
		DeathSound "chainguy/death";
		ActiveSound "chainguy/active";
		AttackSound "weapons/sshotf"; // "ssgguy/attack";
		MONSTER;
		+FLOORCLIP;
		Obituary "%o was jacked by a super shotgun guy.";
	}
	States
	{
		Spawn:
			GPOS AB 10 A_Look();
			Loop;
		See:
			GPOS AABBCCDD 4;
			Loop;
		Missile:
			GPOS E 10 A_FaceTarget();
			GPOS F 8;
			GPOS E 8;
			Goto See;
		Pain:
			GPOS G 3;
			GPOS G 3 A_Pain();
			Goto See;
		Death:
			GPOS H 5;
			GPOS I 5 A_Scream();
			GPOS J 5 A_NoBlocking();
			GPOS KLM 5;
			GPOS N -1;
			Stop;
		XDeath:
			GPOS O 5;
			GPOS P 5 A_XScream();
			GPOS Q 5 A_NoBlocking();
			GPOS RS 5;
			GPOS T -1;
			Stop;
		Raise:
			GPOS LKJIH 5;
			Goto See;
	}
}
class CastFemaleRailZombie : AetheriusBaseZSC
{
	default
	{
		Health 160;
		Radius 20;
		Height 56;
		Speed 10;
		Damage 100;
		PainChance 200;
		MONSTER;
		+FLOORCLIP;
		seesound "fem/sight";
		painsound "fem/pain";
		deathsound "fem/death";
		activesound "fem/active";
		Decal "RedRailScorch";
		DropItem "Cell";
	}
	
	States
	{
		Spawn:
			RZOW AB 10 A_Look();
			Loop;
		See:
			RZOW AABBCCDD 4;
			Loop;
		Missile:
			RZOW E 0;
			RZOW EE 10 A_FaceTarget();
			RZOW F 5 A_CustomRailgun (30, 0, "ac1819", "FF6C00");
			RZOW E 4 A_FaceTarget();
			RZOW E 10 A_FaceTarget();
			Goto See;
		Pain:
			RZOW G 5;
			RZOW G 3 A_Pain();
			Goto See;
		Death:
			RZOW H 5;
			RZOW I 5 A_Scream();
			RZOW J 5 A_Fall();
			RZOW K 5;
			RZOW L 5;
			RZOW M 5;
			RZOW N -1;
			Stop;
		XDeath:
			RZOW O 5;
			RZOW P 5 A_XScream();
			RZOW Q 5 A_Fall();
			RZOW RSTUV 5;
			RZOW W -1;
			Stop;
		Raise:
			RZOW MLKJIH 5;
			Goto See;
	}
}

class CastChaingunGuy : ChaingunGuy { }
class CastMinigunner : AetheriusBaseZSC
{
	default
	{
		SeeSound "grunt/sight";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		AttackSound "weapons/minigunfire";

		Obituary "%o was shredded by a minigun zombie.";
		Health 105; // 70
		Speed 8;

		Painchance 170;
		Mass 100;
		Radius 20;
		Height 56;
		Monster;

		+FLOORCLIP;
		+DOHARMSPECIES;
	}

	States
	{
		Spawn:
			MINZ AB 10 A_Look();
			loop;
		See:
			MINZ AABBCCDD 3;
			loop;
		Missile:
			MINZ E 10 A_FaceTarget();
			MINZ FEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE 2;
			loop;
		Pain:
			MINZ G 3;
			MINZ G 3 A_Pain;
			Goto See;
		Death:
			MINZ H 6;
			MINZ I 6 A_Scream();
			MINZ J 6 A_Fall();
			MINZ KLM 6;
			MINZ N -1;
			Stop;
		XDeath:
			MINZ O 4;
			MINZ P 4 A_XScream();
			MINZ Q 4 A_Fall();
			MINZ RSTUV 4;
			MINZ W -1;
			Stop;
		Raise:
			MINZ N 5;
			MINZ MLKJIH 5;
			Goto See;
	}
}
class CastBFGGuy : AetheriusBaseZSC
{
	default
	{
		obituary "%o was vapourized by a zombie's BFG9000.";
		health 200;
		radius 20;
		height 56;
		mass 100;
		speed 8;
		painchance 170;
		seesound "chainguy/sight";
		painsound "chainguy/pain";
		deathsound "chainguy/death";
		activesound "chainguy/active";
		missiletype "BFGBallMonster";
		MONSTER;
		+FLOORCLIP;
	}
	states
	{
		Spawn:
			BFGZ AB 10 A_Look();
			loop;
		See:
			BFGZ AABBCCDD 3;
			loop;
		Missile:
			BFGZ E 0 A_FaceTarget();
			BFGZ E 20 A_StartSound("weapons/bfgf");
			BFGZ F 10 Bright;
			BFGZ F 10 Bright A_SpawnProjectile("BFGBallMonster");
			BFGZ E 20;
			goto See;
		Pain:
			BFGZ G 3;
			BFGZ G 3 A_Pain();
			goto See;
		Death:
			BFGZ H 5;
			BFGZ I 5 A_Scream();
			BFGZ J 5 A_NoBlocking();
			BFGZ KLM 5;
			BFGZ N -1;
			stop;
		XDeath:
			BFGZ O 5;
			BFGZ P 5 A_XScream();
			BFGZ Q 5 A_NoBlocking();
			BFGZ RS 5;
			BFGZ T -1;
			stop;
		Raise:
			BFGZ NMLKJIH 5;
			goto See;
	}
}

class CastDoomImp : DoomImp { }
class CastDarkImp : DoomImp
{
	default
	{
		Obituary "%o was burned by a dark imp.";
		HitObituary "%o was slashed by a dark imp.";
		Health 120;
		MissileType "DarkSeeker";
	}
	
	States
	{
		Spawn:
			DRKI AB 10 A_Look();
			Loop;
		See:
			DRKI AABBCCDD 3;
			Loop;
		Melee:
		Missile:
			DRKI EF 8 A_FaceTarget();
			DRKI G 6 A_BasicAttack(3, "imp/melee", "DarkSeeker", 32);
			Goto See;
		Pain:
			DRKI H 2;
			DRKI H 2 A_Pain();
			Goto See;
		Death:
			DRKI I 8;
			DRKI J 8 A_Scream();
			DRKI K 6;
			DRKI L 6 A_NoBlocking();
			DRKI M -1;
			Stop;
		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_NoBlocking();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKI ML 8;
			DRKI KJI 6;
			Goto See;
	}
}

class CastDarkImpST : AetheriusBaseZSC
{
	default
	{
		Health 110;
		Radius 20;
		Height 56;
		Speed 9;
		PainChance 200;
		MONSTER;
		+FLOORCLIP;
		SeeSound "imp/sight";
		PainSound "imp/pain";
		DeathSound "imp/death";
		ActiveSound "imp/active";
		MeleeSound "imp/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
		MissileType "DarkFast";
		MeleeDamage 3;
	}
	
	States
	{
		Spawn:
			DRKS AB 10 A_Look();
			Loop;
		See:
			DRKS AABBCCDD 3;
			Loop;
		Melee:
		Missile:
			DRKS EF 8 A_FaceTarget();
			DRKS G 6 A_BasicAttack(3, "imp/melee", "DarkFast", 32);
			Goto See;
		Pain:
			DRKS H 2;
			DRKS H 2 A_Pain();
			Goto See;
		Death:
			DRKS I 8;
			DRKS J 8 A_Scream();
			DRKS K 6;
			DRKS L 6 A_Fall();
			DRKS M -1;
			Stop;
		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKS ML 8;
			DRKS KJI 6;
			Goto See;
	}
}

class CastDarkImpVoid : AetheriusBaseZSC
{
	default
	{
		Health 130;
		Radius 20;
		Height 56;
		Speed 7;
		PainChance 200;
		MONSTER;
		+FLOORCLIP;
		SeeSound "imp/sight";
		PainSound "imp/pain";
		DeathSound "imp/death";
		ActiveSound "imp/active";
		MeleeSound "imp/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
		MissileType "DarkNormal";
		MeleeDamage 3;
	}
	
	States
	{
		Spawn:
			DRKV AB 10 A_Look();
			Loop;
		See:
			DRKV AABBCCDD 3;
			Loop;
		Melee:
			DRKV EF 8 A_FaceTarget();
			DRKV G 6 A_BasicAttack(3, "imp/melee", "DarkNormal", 32);
			Goto See;
		Missile:
			DRKV E 0 A_Jump(64,"Missile2");
			DRKV EF 8 A_FaceTarget();
			DRKV G 6 A_SpawnProjectile("DarkNormal", 32, 0, 0);
			Goto Missile3;
		Missile2:
			DRKV IJ 8 Bright A_FaceTarget();
			DRKV K 6 Bright A_SpawnProjectile("DarkStrong", 32, 0, 0);
		Missile3:
			DRKV E 0 A_Jump(64,"Missile4");
			DRKV EF 8 A_FaceTarget();
			DRKV G 6 A_SpawnProjectile("DarkNormal", 32, 0, 0);
			Goto See;
		Missile4:
			DRKV IJ 8 Bright A_FaceTarget();
			DRKV K 6 Bright A_SpawnProjectile("DarkStrong", 32, 0, 0);
			Goto See;
		Pain:
			DRKV H 2;
			DRKV H 2 A_Pain();
			Goto See;
		Death:
			DRKV L 8;
			DRKV M 8 A_Scream();
			DRKV N 5;
			DRKV O 5 A_Fall();
			DRKV P -1;
			Stop;
		XDeath:
			DRKI N 5;
			DRKI O 5 A_XScream();
			DRKI P 5;
			DRKI Q 5 A_Fall();
			DRKI RST 5;
			DRKI U -1;
			Stop;
		Raise:
			DRKV PO 8;
			DRKV NML 6;
			Goto See;
	}
}

class CastNetherDarkImp : AetheriusBaseZSC
{
	default
	{
		Health 300;
		Radius 22;
		Height 60;
		Speed 9;
		PainChance 100;
		Mass 500;
		Scale 1.2;
		MONSTER;
		+FLOORCLIP;
		SeeSound "imp/sight";
		PainSound "imp/pain";
		DeathSound "imp/death";
		ActiveSound "imp/active";
		MeleeSound "imp/melee";
		Obituary "%o was cursed by a dark imp.";
		HitObituary "%o was touched by a dark imp.";
		MeleeDamage 6;
		MissileType "InfernoBall";
		Missileheight 32;
	}
	
	States
	{
		Spawn:
			DRKF AB 10 A_Look();
			Loop;
		See:
			DRKF AABBCCDD 3;
			Loop;
		Melee:
			DRKF IJ 8 A_FaceTarget();
			DRKF K 6 A_BasicAttack(6, "imp/melee", "InfernoBall", 32);
			Goto See;
		Missile:
			DRKF E 1 A_Jump (255, "Missile1", "Missile2");
			Goto See;
		Missile1:
			DRKF EF 8 A_FaceTarget();
			DRKF G 6 A_SpawnProjectile ("NetherLightning", 32, 0, 0);
			Goto See;
		Missile2:
			DRKF IJ 8 A_FaceTarget();
			DRKF K 6 A_SpawnProjectile ("InfernoBall", 32, 0, 0);
			Goto See;
		Pain:
			DRKF H 2;
			DRKF H 2 A_Pain();
			Goto See;
		Death:
			DRKF L 8;
			DRKF M 8 A_Scream();
			DRKF N 5;
			DRKF O 5 A_Fall();
			DRKF P -1;
			Stop;
		XDeath:
			DRKF Q 5;
			DRKF R 5 A_XScream();
			DRKF S 5;
			DRKF T 5 A_Fall();
			DRKF UVW 5;
			DRKF X -1;
			Stop;
		Raise:
			DRKF PO 8;
			DRKF NML 6;
			Goto See;
	}
}

class CastDemon : Demon { }
class CastBloodDemon : Demon
{
	default
	{
		Health 300;
		Speed 15;
		Height 56;
		Radius 30;
		Mass 400;
		PainChance 180;
		Meleedamage 10;
		REACTIONTIME 8;
		MONSTER;
		+FLOORCLIP;
		SeeSound "blooddemon/sight";
		PainSound "blooddemon/pain";
		DeathSound "blooddemon/death";
		ActiveSound "blooddemon/active";
		MeleeSound "blooddemon/melee";
		Obituary "%o Was chewed up and spat out by a Blood demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
	}
	
	States
	{
		Spawn:
			SRG2 AB 10 A_Look();
			Loop;
		See:
			SRG2 A 0 A_StartSound("blooddemon/walk");
			SRG2 AABB 2;
			SRG2 C 0 A_StartSound("blooddemon/walk");
			SRG2 CCDD 2;
			SRG2 A 0 A_StartSound("blooddemon/walk");
			SRG2 AABB 2;
			SRG2 C 0 A_StartSound("blooddemon/walk");
			SRG2 CCDD 2;
			SRG2 A 0 A_StartSound("blooddemon/walk");
			SRG2 AABB 2;
			SRG2 C 0 A_StartSound("blooddemon/walk");
			SRG2 CCDD 2;
			SRG2 A 0 A_StartSound("blooddemon/walk");
			SRG2 AABB 2;
			SRG2 C 0 A_StartSound("blooddemon/walk");
			SRG2 CCDD 2;
			Loop;
		Melee:
			SRG2 EF 8 A_FaceTarget();
			SRG2 G 8 A_CustomMeleeAttack(random(1,10)*4,"none","none","Melee",true); // A_SargAttack
			Goto See;
		Pain:
			SRG2 H 2;
			SRG2 H 2 A_Pain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 I 0 A_FaceTarget();
			SRG2 J 0 A_SpawnItemEx("BloodDemonArm", 10, 0, 32, 0, 8, 0, 0, SXF_SETTARGET|SXF_CLIENTSIDE);
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Raise:
			SRG2 NMLKJI 5;
			Goto See;
	}
}

class CastChaingunDemon : AetheriusBaseZSC
{
	default
	{
		Health 200;
		Speed 10;
		Height 56;
		Radius 30;
		Mass 400;
		PainChance 160;
		MinMissileChance 64;
		REACTIONTIME 8;
		MONSTER;
		+FLOORCLIP;
		+NEVERRESPAWN;
		-COUNTKILL;
		SeeSound "blooddemon/sight";
		PainSound "blooddemon/pain";
		DeathSound "blooddemon/death";
		ActiveSound "blooddemon/active";
		AttackSound "chainguy/attack";
		Dropitem "Chaingun";
		Obituary "%o was mowed down by a chaingun-wielding Blood Demon.";
		HitObituary "%o Was chewed up and spat out by a Blood demon.";
	}
	
	States
	{
		Spawn:
			CRG2 AB 10 A_Look();
			Loop;
		See:
			CRG2 A 0 A_StartSound("blooddemon/walk");
			CRG2 AABB 2;
			CRG2 C 0 A_StartSound("blooddemon/walk");
			CRG2 CCDD 2;
			Loop;
		Missile:
			CRG2 H 9 A_FaceTarget();
			CRG2 EFEFEFEFEF 3 A_CPosAttack();
			CRG2 H 9;
			Goto See;
		Pain:
			CRG2 H 2;
			CRG2 H 2 A_Pain();
			Goto See;
		Death:
			SRG2 I 8;
			SRG2 J 8 A_Scream();
			SRG2 K 4;
			SRG2 L 4 A_NoBlocking();
			SRG2 M 4;
			SRG2 N -1;
			Stop;
		Raise:
			Stop;
	}
}

class CastLostSoul : LostSoul { }

class CastCacodemon : Cacodemon { }
class CastCacolantern : Cacodemon
{
	default
	{
		Health 800;
		Obituary "%o was smitten by a cacolantern.";
		HitObituary "%o got too close to a cacolantern.";
		bloodcolor "blue";
	}
	
	States
	{
		Spawn:
			HED2 A 10 A_Look();
			Loop;
		See:
			HED2 A 3;
			Loop;
		Pain:
			HED2 E 3;
			HED2 E 3 A_Pain();
			HED2 F 6;
			Goto See;
		Melee:
		Missile:
			HED2 BC 5 A_FaceTarget();
			HED2 D 5 Bright A_BasicAttack (8, "None", "CacolanternBall", 32);
			Goto See;
		Death:
			HED2 G 8 A_NoBlocking();
			HED2 H 8 A_Scream();
			HED2 IJK 8;
			HED2 L -1 A_SetFloorClip();
			Stop;
		Raise:
			HED2 L 8 A_UnsetFloorClip();
			HED2 KJIHG 8;
			Goto See;
	}
}
class CastAbaddon : Cacolantern
{
	default
	{
		Health 1200;
		Speed 12;
		PainChance 40;
		Obituary "%o was smitten by an abaddon.";
		HitObituary "%o became food for an abaddon.";
		bloodcolor "red";
	}
	
	States
	{
		Spawn:
			HED3 A 10 A_Look();
			Loop;
		See:
			HED3 A 3;
			Loop;
		Pain:
			HED3 E 3;
			HED3 E 3 A_Pain();
			HED3 F 6;
			Goto See;
		Melee:
		Missile:
			HED3 BC 5 A_FaceTarget();
			HED3 D 5 Bright A_BasicAttack(8, "None", "AbaddonBall", 32);
			HED3 BC 5 A_FaceTarget();
			HED3 D 5 Bright A_BasicAttack(8, "None", "AbaddonBall", 32);
			Goto See;
		Death:
			HED3 G 8 A_NoBlocking();
			HED3 H 8 A_Scream();
			HED3 IJK 8;
			HED3 L -1 A_SetFloorClip();
			Stop;
		Raise:
			HED3 L 8 A_UnSetFloorClip();
			HED3 KJIHG 8;
			Goto See;
	}
}
class CastHellKnight : HellKnight { }
class CastHellWarrior : AetheriusBaseZSC
{
	default
	{
		Health 400;
		Speed 8;
		Radius 24;
		Height 64;
		PainChance 50;
		Mass 1000;
		Meleedamage 8;
		SeeSound "hellwarrior/sight";
		PainSound "hellwarrior/pain";
		DeathSound "hellwarrior/death";
		ActiveSound "knight/active";
		MeleeSound "baron/melee";
		REACTIONTIME 8;
		MONSTER;
		+FLOORCLIP;
		Missiletype "HellWarriorBall";
		Obituary "%o was tagged by the hell warrior's fireball.";
		HitObituary "%o was torn apart by a hell warrior.";
	}
	
	States
	{
		Spawn:
			HWAR AB 10 A_Look();
			Loop;
		See:
			HWAR AABBCCDD 3;
			Loop;
		Missile:
			HWAR E 0 A_Jump(128, "Missile2");
			HWAR EF 8 A_FaceTarget();
			HWAR G 8 A_BasicAttack(8, "baron/melee", "HellWarriorBall", 32);
			Goto See;
		Missile2:
			HWAR H 0 A_Jump(128, "Missile3");
			HWAR H 0 A_SetInvulnerable();
			HWAR H 6 A_FaceTarget();
			HWAR I 4 BRIGHT A_SpawnProjectile("HellWarriorBall2", 25, 0, 0);
			HWAR H 6 A_FaceTarget();
			HWAR H 0 A_UnSetInvulnerable();
			Goto See;
		Missile3:
			HWAR H 0 A_SetInvulnerable();
			HWAR H 6 A_FaceTarget();
			HWAR I 4 BRIGHT A_SpawnProjectile("HellWarriorBall2", 25, 0, 0);
			HWAR H 16 A_SpidRefire();
			HWAR I 4 BRIGHT A_SpawnProjectile("HellWarriorBall2", 25, 0, 0);
			HWAR H 6 A_FaceTarget();
			HWAR H 0 A_UnSetInvulnerable();
			Goto See;
		Melee:
			HWAR EF 8 A_FaceTarget();
			HWAR G 8 A_BasicAttack(20, "baron/melee", "BruiserBall", 32);
			Goto See;
		Pain:
			HWAR J 6 A_Pain();
			HWAR H 0 A_SetInvulnerable();
			HWAR HHHHHHH 6 A_FaceTarget();
			HWAR H 0 A_UnSetInvulnerable();
			Goto See;
		Death:
			HWAE K 0 A_FaceTarget();
			HWAR K 5 A_SpawnItemEx("HellWarriorShield", 0, 0, 25, 6, 0, 0, 60, 128);
			HWAR L 5 A_Scream();
			HWAR M 5;
			HWAR N 5 A_NoBlocking();
			HWAR OPQRS 5;
			HWAR T -1;
			Stop;
		Raise:
			HWAR QPONMLK 5;
			Goto See;
	}
}
class CastBaronOfHell : BaronOfHell { }
class CastBelphegor : HellKnight
{
	default
	{
		Health 1500;
		PainChance 25;
		SeeSound "baron/sight";
		PainSound "baron/pain";
		DeathSound "baron/death";
		ActiveSound "baron/active";
		Obituary "%o was slain by a Belphegor.";
		HitObituary "%o was slain by a Belphegor.";
	}
	
	States
	{
		Melee:
		Missile:
			BOS3 EF 6 A_FaceTarget();
			BOS3 G 6 A_BasicAttack(10, "baron/melee", "BelphegorBall", 32);
			BOS3 EF 6 A_FaceTarget();
			BOS3 G 6 A_BasicAttack(10, "baron/melee", "BelphegorBall", 32);
			BOS3 EF 6 A_FaceTarget();
			BOS3 G 6 A_BasicAttack(10, "baron/melee", "BelphegorBall", 32);
			goto See;
		Spawn:
			BOS3 AB 10 A_Look();
			Loop;
		See:
			BOS3 AABBCCDD 3;
			Loop;
		Pain:
			BOS3 H 2;
			BOS3 H 2 A_Pain();
			Goto See;
		Death:
			BOS3 I 8;
			BOS3 J 8 A_Scream();
			BOS3 K 8;
			BOS3 L 8 A_NoBlocking();
			BOS3 MN 8;
			BOS3 O -1;
			Stop;
		Raise:
			BOS3 ONMLKJI 8;
			Goto See;
	}
}
class CastBruiserDemon : BaronOfHell
{
	default
	{
		Health 2000;
		Radius 24;
		Height 64;
		Mass 1750;
		Speed 8;
		PainChance 15;
		Monster;
		+FLOORCLIP;
		+MISSILEEVENMORE;
		+DONTHARMSPECIES;
		MissileType "BruiserBall";
		SeeSound "superbaron/scream";
		PainSound "superbaron/pain";
		DeathSound "superbaron/death";
		ActiveSound "superbaron/act";
		MeleeSound "baron/melee";
		Obituary "%o was slaughtered by a Bruiser demon.";
		HitObituary "%o was cremated by a Bruiser demon.";
		MeleeDamage 20;
		Scale 1.125;
	}
	
	States
	{
		Spawn:
			BRUS A 0 Bright;
			BRUS AB 10 Bright A_Look();
			Loop;
		See:
			BRUS AABBCCDD 3 Bright;
			Loop;
		Melee:
			BRUS EF 6 Bright A_FaceTarget();
			BRUS G 6 Bright A_BasicAttack(20, "baron/melee", "BruiserBall", 32);
			BRUS HI 6 Bright A_FaceTarget();
			BRUS J 6 Bright A_BasicAttack(20, "baron/melee", "BruiserBall", 32);
			BRUS KL 6 Bright A_FaceTarget();
			BRUS M 6 Bright A_BasicAttack(20, "baron/melee", "BruiserBall", 32);
			Goto See;
		Missile:
			BRUS EF 6 Bright A_FaceTarget();
			BRUS G 6 Bright A_SpawnProjectile("BruiserBall");
			BRUS HI 6 Bright A_FaceTarget();
			BRUS J 6 Bright A_SpawnProjectile("BruiserBall");
			BRUS KL 6 Bright A_FaceTarget();
			BRUS M 6 Bright A_SpawnProjectile("BruiserBall");
			Goto See;
		Pain:
			BRUS N 5 Bright A_Pain();
			Goto See;
		Death:
			BRUD A 6 Bright A_Scream();
			BRUD BCD 4 Bright;
			BRUD EFG 4 Bright;
			BRUD H 4 Bright A_Fall();
			BRUD IJKLMNOP 4 Bright;
			BRUD QRSTUV 4;
			BRUD W -1;
			Stop;
		Raise:
			BRUD VUTSRQ 4;
			BRUD PONMLKJI 4 Bright;
			BRUD H 4 Bright;
			BRUD GFE 4 Bright;
			BRUD DCB 4 Bright;
			BRUD A 6 Bright;
			Goto See;
	}
}
class CastCybruiser : BaronOfHell
{
	default
	{
		Health 2000;
		Radius 24;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 20;
		MONSTER;
		MeleeDamage 10;
		Obituary "%o was blown away by a Cybruiser.";
		HitObituary "%o was smashed by a Cybruiser.";
		+FLOORCLIP;
		+MISSILEMORE;
		+BOSS;
		+DONTHARMSPECIES;
		SeeSound "monster/cbrusit";
		PainSound "monster/cbrupn";
		DeathSound "monster/cbrudth";
		MeleeSound "baron/melee";
	}
	
	States
	{
		Spawn:
			CBRS AB 10 A_Look();
			Loop;
		See:
			CBRS A 0 A_StartSound("monster/bruwlk");
			CBRS AABB 3;
			CBRS C 0 A_StartSound("monster/bruwlk");
			CBRS CCDD 3;
			Loop;
		Missile:
			CBRS E 8 A_FaceTarget();
			CBRS F 12 Bright A_SpawnProjectile("CyBruiserMissile",38,15,0,0);
			CBRS E 12 A_FaceTarget();
			CBRS F 12 Bright A_SpawnProjectile("CyBruiserMissile",38,15,0,0);
			CBRS E 12 A_FaceTarget();
			CBRS F 12 Bright A_SpawnProjectile("CyBruiserMissile",38,15,0,0);
			Goto See;
		Melee:
			CBRS GH 8 A_FaceTarget();
			CBRS I 8 A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			Goto See;
		Pain:
			CBRS J 2;
			CBRS J 2 A_Pain();
			Goto See;
		Death:
			CBRS K 6 Bright A_Scream();
			CBRS LMN 6 Bright;
			CBRS O 6 Bright A_NoBlocking();
			CBRS QRS 6 Bright;
			CBRS T -1;
			Stop;
	}
}
class CastArchonOfHell : BaronOfHell
{
	default
	{
		Health 2000;
		Radius 24;
		Height 64;
		Mass 1750;
		Speed 8;
		PainChance 20;
		MONSTER;
		MeleeDamage 10;
		Obituary "%o was no match for an archon of hell.";
		HitObituary "%o was ripped apart by an archon of hell.";
		BloodColor "20 60 20";
		+FLOORCLIP;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		SeeSound "monster/ar2sit";
		PainSound "baron/pain";
		DeathSound "monster/ar2dth";
		MeleeSound "baron/melee";
		Scale 1.125;
	}
	
	States
	{
		Spawn:
			BOS4 AB 10 A_Look();
			Loop;
		See:
			BOS4 AABBCCDD 3;
			Loop;

		Missile:
			BOS4 EF 8 Bright A_FaceTarget();
			BOS4 G 3 Bright A_SpawnProjectile("BaronBall",28,0,4,0);
			BOS4 H 3 Bright;

			BOS4 IJ 8 Bright A_FaceTarget();
			BOS4 K 3 Bright A_SpawnProjectile("BaronBall",28,0,4,0);
			BOS4 L 3 Bright;

			BOS4 MN 8 Bright A_FaceTarget();
			BOS4 O 4 Bright A_SpawnProjectile("ArchonComet",28,0,0,0);
			BOS4 P 4 Bright;

			BOS4 MN 8 Bright A_FaceTarget();
			BOS4 O 3 Bright A_SpawnProjectile ("BaronBall",28,0,6,0);
			BOS4 P 3 Bright;
			Goto See;

		Melee:
			BOS4 EF 8 Bright A_FaceTarget();
			BOS4 G 3 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			BOS4 H 3 Bright;
			BOS4 IJ 8 Bright A_FaceTarget();
			BOS4 K 3 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			BOS4 L 3 Bright;
			BOS4 MN 8 Bright A_FaceTarget();
			BOS4 O 0 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			BOS4 O 3 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			BOS4 P 3 Bright;
			Goto See;

		Pain:
			BOS4 Q 2;
			BOS4 Q 2 A_Pain();
			Goto See;
		Death:
			BOS4 R 6 Bright;
			BOS4 S 6 Bright A_Scream();
			BOS4 T 6 Bright;
			BOS4 U 6 Bright A_NoBlocking();
			BOS4 VW 6 Bright;
			BOS4 X 6 Bright A_SpawnProjectile("ArchonSoul",86,0,0,2,-90);
			BOS4 YZ 6 Bright;
			BOS4 [ 6 Bright A_Fall();
			TNT1 A 17;
			Stop;
	}
}
class CastPyroDemon : BaronofHell
{
	default
	{
		PainChance "Ice", 160;
		Scale 1.1875;
		Health 3000;
		Radius 24;
		Height 64;
		Mass 2250;
		Speed 8;
		PainChance 20;
		MONSTER;
		MeleeDamage 10;
		OBITUARY "%o was burnt to a crisp by a pyro demon";
		HITOBITUARY "%o was melted my a pyro demon";
		Bloodcolor "75 25 00";
		+NoTarget;
		+FloorClip;
		+MissileMore;
		+DONTHARMSPECIES;
		SEESOUND "pyro/see";
		PAINSOUND "pyro/pain";
		DEATHSOUND "pyro/death";
		ACTIVESOUND "pyro/idle";
	}
	
	states
	{
		Missile:
			PYRO EF 8 BRIGHT A_FaceTarget();
			PYRO G 3 BRIGHT A_SpawnProjectile("FireShot",28,0,4,0);
			PYRO H 3 BRIGHT;
			PYRO IJ 8 BRIGHT A_FaceTarget();
			PYRO K 3 BRIGHT A_SpawnProjectile("FireShot",28,0,4,0);
			PYRO L 3 BRIGHT;
			PYRO MN 8 BRIGHT A_FaceTarget();
			PYRO O 4 BRIGHT A_SpawnProjectile("PyroBlast",28,0,0,0);
			PYRO P 4 BRIGHT;
			Goto See;

		Melee:
			PYRO EF 8 Bright A_FaceTarget();
			PYRO G 3 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			PYRO H 3 Bright;
			PYRO IJ 8 Bright A_FaceTarget();
			PYRO K 3 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			PYRO L 3 Bright;
			PYRO MN 8 Bright A_FaceTarget();
			PYRO O 0 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			PYRO O 3 Bright A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			PYRO P 3 Bright;
			Goto See;

		Spawn:
			PYRO AB 10 A_Look();
			Loop;
		See:
			PYRO AABBCCDD 3;
			Loop;
		Pain:
			PYRO Q 2;
			PYRO Q 2 A_Pain();
			Goto See;
		Death:
			PYRO R 20 BRIGHT A_Scream();
			PYRO S 20 BRIGHT;
			PYRO T 20 BRIGHT;
			PYRO U 20 BRIGHT A_NoBlocking();
			PYRO VW 6 BRIGHT;
			PYRO X 6 BRIGHT;
			PYRO Y 3 BRIGHT;
			PYRO Z 20 BRIGHT;
			PYRO Z -1 BRIGHT;
			Stop;
		Raise:
			PYRO Y 3 BRIGHT;
			PYRO XWV 6 BRIGHT;
			PYRO UTSR 20 BRIGHT;
			Goto See;
	}
}
class CastFlyingBalrog : AetheriusBaseZSC
{
	default
	{
		Health 1500;
		Speed 8;
		Radius 24;
		Height 64;
		Mass 1600;
		PainChance 120;
		SeeSound "flyingbalrog/sight";
		PainSound "flyingbalrog/pain";
		DeathSound "flyingbalrog/death2";
		ActiveSound "flyingbalrog/idle";
		MeleeSound "Baron/Melee";
		Meleedamage 3;
		ReactionTime 5;
		Monster;
		+NoGravity;
		+NoBlood;
		+Float;
		Species "HellNoble";
		+DONTHARMSPECIES;
		Obituary "%o was flash-fried by a Flying Balrog.";
		HitObituary "%o found the Flying Balrog too hot to handle.";
	}
	
	States
	{
		See:
			FRIT AABBCCDD 2 Bright;
			Loop;

		Melee:
		Missile:
			FRIT EF 6 Bright A_FaceTarget();
			//Five Shot1s (spreading pattern)
			FRIT G 1 Bright
			{
				A_FaceTarget();
				A_SpawnProjectile("WeakenedBalrogShot1", 44, 12, 15); // Off Left
				A_SpawnProjectile("WeakenedBalrogShot1", 44, 0, 0); // Center
				A_SpawnProjectile("WeakenedBalrogShot1", 44, -12, -15); // Off Right
			}
			FRIT G 3 Bright
			{
				A_FaceTarget();
				A_SpawnProjectile("WeakenedBalrogShot1", 44, 8, 10); // Partially Left
				A_SpawnProjectile("WeakenedBalrogShot1", 44, -8, -10); // Partially Right
			}
			// Three Shot2s (straight shots)
			FRIT G 4 Bright
			{
				A_FaceTarget();
				A_SpawnProjectile("WeakenedBalrogShot2", 44, 6, 9);
				A_SpawnProjectile("WeakenedBalrogShot2", 44, 0, 0);
				A_SpawnProjectile("WeakenedBalrogShot2", 44, -6, -9);
			}
			FRIT G 6 Bright A_FaceTarget();
			Goto See;

		Pain:
			FRIT H 4 Bright;
			FRIT H 4 Bright A_Pain();
			Goto See;
		Death:
			FRIT I 0 Bright A_NoGravity();
			FRIT I 6 Bright
			{
				A_StartSound("flyingbalrog/death2",3);
			}
			FRIT J 5 Bright A_NoBlocking();
			FRIT KLMNOPQR 4 Bright;
			Stop;
	}
}
class CastHierophant : AetheriusBaseZSC
{
	default
	{
		Health 1800;
		Radius 24;
		Height 60;
		Mass 1000;
		Speed 10;
		PainChance 24;
		Monster;
		MeleeDamage 10;
		DamageType "Normal";
		Obituary "%o was hexed by a Hierophant.";
		HitObituary "%o got shredded by a Hierophant.";
		+NoTarget;
		+FloorClip;
		+MissileMore;
		+NoRadiusDmg;
		+Boss;
		+Float;
		+NoGravity;
		+DONTHARMSPECIES;
		SeeSound "monster/Hiesit";
		PainSound "monster/Hiepai";
		DeathSound "monster/Hiedth";
		MeleeSound "baron/melee";
		ActiveSound "monster/Hieact";
	}
	
	States
	{
		Spawn:
			HIER AC 10 A_Look();
			Loop;
		See:
			HIER AABBAACCDDCC 4;
			Loop;
		Missile:
			HIER A 0 A_FaceTarget();
			HIER A 0 A_Jump(256, "Missile1", "Missile2", "Missile3");
		Missile1:
			HIER EF 7 Bright A_FaceTarget();
			HIER G 7 Bright
			{
				A_SpawnProjectile("HieroBall1",26,0,random(-6,-1),0);
				A_SpawnProjectile("HieroBall1",26,0,random(1,6),0);
			}
			HIER A 3 Bright;
			HIER HI 7 Bright A_FaceTarget();
			HIER J 7 Bright
			{
				A_SpawnProjectile("HieroBall1",26,0,random(-6,-1),0);
				A_SpawnProjectile("HieroBall1",26,0,random(1,6),0);
			}
			HIER A 3 A_SpidRefire();
			Goto See;
		Missile2:
			HIER EF 7 Bright A_FaceTarget();
			HIER G 7 Bright A_SpawnProjectile("CurseBall",26,0,0,0);
			HIER A 3 A_SpidRefire();
			Goto See;
		Missile3:
			HIER KLM 5 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();

			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();

			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();

			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER N 1 Bright A_SpawnProjectile("HieroBall2",32,0,0,0,0);
			HIER O 1 Bright A_FaceTarget();
			HIER L 5;
			Goto See;
		Melee:
			HIER EF 8 A_FaceTarget();
			HIER G 3 A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			HIER A 3;
			HIER A 0 A_Jump(128, "Melee2");
			Goto See;
		Melee2:
			HIER HI 8 A_FaceTarget();
			HIER J 3 A_CustomMeleeAttack(random(1,10)*10,"baron/melee","none","Melee",true);
			HIER A 3;
			Goto See;
		Pain:
			HIER P 2;
			HIER P 2 A_Pain();
			Goto See;
		Death:
			HIER Q 6;
			HIER R 6 A_Scream();
			HIER S 6 A_NoBlocking();
			HIER TUVW 6;
			HIER X -1 A_SetFloorClip();
			Stop;
	}
}
class CastArachnotron : Arachnotron { }
class CastRailArachnotron : Arachnotron
{
	default
	{
		Health 500;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		PainChance 192;
		Damage 30;
		Monster;
		+FLOORCLIP;
		SeeSound "baby/sight";
		PainSound "baby/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
		Obituary "%o was railed by an arachnotron.";
		Decal "RedRailScorch";
	}
	
	States
	{
		Spawn:
			RSPI AB 10 A_Look();
			Loop;
		See:
			RSPI A 20;
			RSPI A 3 A_BabyMetal();
			RSPI ABBCC 3;
			RSPI D 3 A_BabyMetal();
			RSPI DEEFF 3;
			Goto See+1;
		Missile:
			RSPI A 0 A_StartSound("baby/chargerailgun");
			RSPI A 16 A_FaceTarget();
			RSPI G 16 A_FaceTarget();
			RSPI H 4 A_CustomRailgun(30, 0, "AA0000", "FF0000", 0, 1);
			RSPI G 8;
			Goto See+1;
		Pain:
			RSPI I 3;
			RSPI I 3 A_Pain();
			Goto See+1;
		Death:
			RSPI J 20 A_Scream();
			RSPI K 7 A_Fall();
			RSPI LMNO 7;
			RSPI P -1;
			Stop;
		Raise:
			RSPI P 5;
			RSPI ONMLKJ 5;
			Goto See+1;
	}
}
class CastFusionArachnotron : Arachnotron
{
	default
	{
		OBITUARY "%o was vaporized by a fusion cannon Arachnotron";
		Health 1000;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 12;
		PainChance 30;
		SEESOUND "baby/sight";
		PAINSOUND "baby/pain";
		DEATHSOUND "baby/death";
		ACTIVESOUND "baby/active";
		MONSTER;
		+FloorClip;
		+MissileMore;
		+MissileEvenMore;
	}
	states
	{
		Spawn:
			FSPI AB 10 A_Look();
			Loop;
		See:
			FSPI A 20;
			FSPI A 3 A_BabyMetal();
			FSPI ABBCC 3;
			FSPI D 3 A_BabyMetal();
			FSPI DEEFF 3;
			Goto See+1;

		Missile:
			FSPI A 4 BRIGHT A_FaceTarget();
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,0);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,15);
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,-15);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,10);
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,-30);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,30);
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,-10);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,25);
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,5);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,-5);
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,0);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,-45);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,40);
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,-20);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,10);
			FSPI G 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,-35);
			FSPI H 3 BRIGHT A_SpawnProjectile("FusionShot",24,0,50);
			FSPI H 1 BRIGHT;
			Goto See+1;

		Pain:
			FSPI I 3;
			FSPI I 3 A_Pain();
			Goto See+1;
		Death:
			FSPI J 20 A_Scream();
			FSPI K 7 A_NoBlocking();
			FSPI LMNO 7;
			FSPI P -1;
			Stop;
		Raise:
			FSPI PONMLKJ 5;
			Goto See+1;
	}
}
class CastArachnotronMK2 : Arachnotron
{
	default
	{
		Obituary "%o was toasted by an augmented arachnotron.";
		Health 1000;
		Radius 64;
		Height 64;
		Mass 600;
		Speed 14;
		Scale 1.2;
		PainChance 128;
		BloodColor "bf af 20";
		SeeSound "baby/sight";
		PainSound "baby/pain";
		DeathSound "baby/death";
		ActiveSound "baby/active";
	}
	
	States
	{
		Spawn:
			BSP2 AB 10 A_Look();
			Loop;
		See:
			BSP2 A 20;
			BSP2 A 3 A_BabyMetal();
			BSP2 ABBCC 3;
			BSP2 D 3 A_BabyMetal();
			BSP2 DEEFF 3;
			Goto See+1;
		Missile:
			BSP2 A 20 Bright A_FaceTarget();
			BSP2 G 2 Bright A_SpawnProjectile("ArachnotronPlasma",19,-12);
			BSP2 R 2 Bright;
			BSP2 H 2 Bright A_SpawnProjectile("ArachnotronPlasma",19,12);
			BSP2 Q 2 Bright A_SpidRefire();
			Goto Missile+1;
		Pain:
			BSP2 I 3;
			BSP2 I 3 A_Pain();
			Goto See+1;
		Death:
			BSP2 J 20 A_Scream();
			BSP2 K 7 A_NoBlocking();
			BSP2 LMNO 7;
			BSP2 P -1;
			Stop;
		Raise:
			BSP2 PONMLKJ 5;
			Goto See+1;
	}
}
class CastPainElemental : PainElemental { }
class CastHadesElemental : AetheriusBaseZSC
{
	default
	{
		obituary "%o was electricuted by a Hades-Elemental.";
		hitobituary "%o got chomped by a Hades-Elemental.";
		health 1600;
		radius 34;
		height 64;
		mass 800;
		speed 10;
		painchance 32;
		MeleeDamage 10;
		DamageType "Normal";
		seesound "monster/helsit";
		painsound "monster/helpai";
		deathsound "monster/heldth";
		activesound "monster/helact";
		meleesound "caco/melee";
		MONSTER;
		+FLOAT;
		+NOGRAVITY;
		+BOSS;
		+MISSILEMORE;
		+NOTARGET;
		+DONTHARMSPECIES;
		+NORADIUSDMG;
	}
	
	states
	{
		Spawn:
			HELE A 10 A_Look();
			loop;
		See:
			HELE AAAAAAAAAAAA 3;
			loop;
		Missile:
			HELE EF 5 Bright A_FaceTarget();
			HELE G 5 Bright
			{
				A_SpawnProjectile("HadesElementalBall",24,0,-10,0,0);
				A_SpawnProjectile("HadesElementalBall",24,0,-5,0,0);
				A_SpawnProjectile("HadesElementalBall",24,0,0,0,0);
				A_SpawnProjectile("HadesElementalBall",24,0,5,0,0);
				A_SpawnProjectile("HadesElementalBall",24,0,10,0,0);
			}
			goto See+1;
		Missile2:
			HELE EF 5 Bright A_FaceTarget();
			HELE G 5 Bright
			{
				A_SpawnProjectile("HadesBolt",32,0,-16,0,0);
				A_SpawnProjectile("HadesBolt",32,0,0,0,0);
				A_SpawnProjectile("HadesBolt",32,0,16,0,0);
			}
			goto See+1;
		Melee:
			HELE ABD 5 Bright A_FaceTarget();
			HELE C 5 Bright A_CustomMeleeAttack(random(1,10)*10,"caco/melee","none","Melee",true);
			goto See+1;
		Pain:
			HELE H 3;
			HELE H 3 A_Pain();
			HELE H 6;
			goto See;
		Death:
			HELE I 5 Bright A_Scream();
			HELE JKL 5 Bright;
			HELE M 5 Bright A_NoBlocking();
			HELE NOP 5 Bright;
			HELE QRSTU 5;
			HELE V -1 A_SetFloorClip();
			stop;
	}
}
class CastHadesOverLord : AetheriusBaseZSC
{
	default
	{
		Health 4000;
		Radius 43;
		Height 90;
		Mass 1000;
		Speed 13;
		PainChance 20;
		DamageType "Normal";
		MONSTER;
		Obituary "%o was smitten by the Hades Overlord.";
		HitObituary "The Hades Overlord ate %o for lunch.";
		+FLOORCLIP;
		+NORADIUSDMG;
		+BOSS;
		+NOTARGET;
		+MISSILEEVENMORE;
		+FLOAT;
		+NOGRAVITY;
		+DONTFALL;
		MeleeDamage 20;
		MeleeRange 68;
		SeeSound "monster/ovlsit";
		PainSound "monster/ovlpai";
		DeathSound "monster/ovldth";
		ActiveSound "monster/ovlact";
		MeleeSound "caco/melee";
	}
	
	states
	{
		Spawn:
			OVER A 10 A_Look();
			loop;
		See:
			OVER AABBAACC 3;
			goto See+1;
		Missile:
			OVER GH 8 Bright A_FaceTarget();
			OVER H 1 Bright A_StartSound("weapons/shock");
			OVER H 7 Bright A_SpawnProjectile("StormShot1",43,0,0,0,0);
			goto See;
		Melee:
			OVER ADF 5 A_FaceTarget();
			OVER E 5 A_CustomMeleeAttack(random(1,10)*20,"caco/melee","none","Melee",true);
			goto See;
		Pain:
			OVER L 6;
			OVER L 6 A_Pain();
			goto See;
		Death:
			OVER M 0 bright A_FaceTarget();
			OVER M 8 bright A_Scream();
			OVER NO 8 bright;
			OVER PQRSTUV 8 bright;
			stop;
	}
}
class CastRevenant : Revenant { }
class CastDeathIncarnate : Revenant
{
	default
	{
		Health 600;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 12;
		MeleeDamage 7;
		PainChance 64;
		MONSTER;
		+FLOORCLIP;
		+SHORTMISSILERANGE;
		+DONTHARMSPECIES;
		Obituary "%o was killed by a Death Incarnate's glare.";
		HitObituary "%o was beaten to death by a Death Incarnate.";
		SeeSound "monster/incsit";
		PainSound "skeleton/pain";
		DeathSound "monster/incexp";
		ActiveSound "monster/incact";
		AttackSound "monster/incatk";
		MeleeSound "monster/inchit";
	}
	
	States
	{
		Spawn:
			INCA AB 10 A_Look();
			Loop;
		See:
			INCA AABBCCDDEEFF 2;
			Loop;
		Melee:
			INCA G 0 A_FaceTarget();
			INCA G 6 A_SkelWhoosh();
			INCA H 6 A_FaceTarget();
			INCA I 6 A_CustomMeleeAttack(random(1,10)*7,"monster/inchit","none","Melee",true);
			
			INCA R 0 A_FaceTarget();
			INCA R 5 A_SkelWhoosh();
			INCA S 5 A_FaceTarget();
			INCA T 5 A_CustomMeleeAttack(random(1,10)*7,"monster/inchit","none","Melee",true);
			INCA G 0 A_FaceTarget();
			INCA G 5 A_SkelWhoosh();
			INCA H 5 A_FaceTarget();
			INCA I 5 A_CustomMeleeAttack(random(1,10)*7,"monster/inchit","none","Melee",true);
			Goto See;
		Missile:
			INCA J 5 A_FaceTarget();
			INCA J 5;
			INCA U 10;
			INCA K 10;
			Goto See;
		Pain:
			INCA L 5;
			INCA L 5 A_Pain();
			Goto See;
		Death:
			INCX A 10 Bright A_StartSound("monster/incexp");
			INCX BC 5 Bright;
			INCX D 5 Bright A_NoBlocking();
			INCX EFGHIJ 5 Bright;
			INCX K -1;
		Raise:
			INCA Q 0 A_KillChildren();
			INCA QPONML 5;
			Goto See;
	}
}
class CastHadesSphere : AetheriusBaseZSC
{
	default
	{
		Health 35;
		Radius 16;
		Height 32;
		Mass 3000;
		Speed 10;
		ExplosionDamage 128;
		ExplosionRadius 112;
		RenderStyle "Normal";
		Obituary "%o was blown away by a Hades Sphere.";
		PainChance 0;
		MONSTER;
		+LOOKALLAROUND;
		+DONTGIB;
		+NOTARGET;
		+NOGRAVITY;
		+FLOAT;
		+DONTFALL;
		+DONTHARMSPECIES;
		+LONGMELEERANGE;
		SeeSound "monster/hadsit";
	}
	States
	{
		Spawn:
			TNT1 A 1 Bright A_Look();
			Loop;
		See:
			HADE EFGH 4 Bright;
			HADE A 2 Bright A_StartSound("monster/hadwlk");
			HADE ABBCCDD 2 Bright;
			HADE D 0 Bright A_Jump(32,1);
			Goto See+4;
			HADE H 0 Bright A_UnsetSolid();
			HADE H 0 Bright A_UnSetShootable();
			HADE H 5 Bright A_StartSound("monster/hadtel");
			HADE GFEIJKL 4 Bright;
			TNT1 AAAAAAAA 2 Bright;
			TNT1 A 0 Bright A_Jump(96,1);
			Goto See+24;
			HADE L 3 Bright A_StartSound("monster/hadtel");
			HADE KJIEFG 4 Bright;
			HADE H 0 Bright A_SetShootable();
			HADE H 0 Bright A_SetSolid();
			Goto See+4;
		Melee:
		Death:
			HADE M 0 Bright A_StartSound("monster/hadexp");
			HADE M 4 Bright;
			HADE NOPQ 5 Bright;
			Stop;
	}
}

class CastFatso : Fatso { }
class CastHectebus : Fatso
{
	default
	{
		SEESOUND "hect/see";
		PAINSOUND "hect/pain";
		ACTIVESOUND "hect/active";
		DEATHSOUND "hect/die";
		Health 1200;
		PainChance 20;
		Obituary "%o was cremated by a hectebus.";
	}
	
	States
	{
		Spawn:
			HECT AB 15 A_Look();
			Loop;
		See:
			HECT AABBCCDDEEFF 4;
			Loop;
		Pain:
			HECT J 3;
			HECT J 3 A_Pain();
			Goto See;

		Missile:
			//These Next 2 states replace A_FatRaise and A_HectRaise
			HECT G 0 A_StartSound("hect/raiseguns");
			HECT G 20 A_FaceTarget();
			HECT H 10 Bright;
			HECT IG 5 A_FaceTarget();
			HECT H 10 Bright;
			HECT IG 5 A_FaceTarget();
			HECT H 10 Bright;
			HECT IG 5 A_FaceTarget();
			Goto See;
		Death:
			HECT K 6;
			HECT L 6 A_Scream();
			HECT M 6 A_NoBlocking();
			HECT NOPQRS 6;
			HECT T -1;
			Stop;
		Raise:
			HECT RQPONMLK 5;
			Goto See;
	}
}
class CastDaedabus : Fatso
{
	default
	{
		Health 1000;
		Radius 48;
		Height 64;
		Mass 1000;
		Speed 8;
		PainChance 80;
		BloodColor "73 00 00";
		SeeSound "Daedabus/Sight";
		PainSound "Daedabus/Pain";
		DeathSound "Daedabus/Death";
		ActiveSound "Daedabus/Active";
		MONSTER;
		+FLOORCLIP;
		+DONTHARMSPECIES;
		Obituary "%o was Torched by a Daedabus.";
	}
	
	States
	{
		Spawn:
			DAED AB 15 A_Look();
			Loop;
		See:
			DAED AABBCCDDEEFF 4;
			Loop;
		Pain:
			DAED J 3;
			DAED J 3 A_Pain();
			Goto See;
		Missile:
			DAED G 20
			{
				A_StartSound("Daedabus/Attack");
				A_FaceTarget();
			}
			DAED H 10 BRIGHT
			{
				A_SpawnProjectile("DaedFire",28,0,5.625);
				A_SpawnProjectile("DaedFire",28,0,0);
				A_SpawnProjectile("DaedFire",28,0,-5.625);
			}
			DAED IG 5 A_FaceTarget();
			DAED H 10 BRIGHT
			{
				A_SpawnProjectile("DaedFire",28,0,5.625);
				A_SpawnProjectile("DaedFire",28,0,0);
				A_SpawnProjectile("DaedFire",28,0,-5.625);
			}
			DAED IG 5 A_FaceTarget();
			DAED H 10 BRIGHT
			{
				A_SpawnProjectile("DaedFire",28,0,11.25);
				A_SpawnProjectile("DaedFire",28,0,5.625);
				A_SpawnProjectile("DaedFire",28,0,0);
				A_SpawnProjectile("DaedFire",28,0,-5.625);
				A_SpawnProjectile("DaedFire",28,0,-11.25);
			}
			DAED IG 5 A_FaceTarget();
			Goto See;
		Death:
			DAED K 6;
			DAED L 6 A_Scream();
			DAED M 6 A_NoBlocking();
			DAED NOPQRS 6;
			DAED T -1;
			Stop;
		Raise:
			DAED RQPONMLK 5;
			Goto See;
	}
}
class CastArchvile : Archvile { }
class CastDiabloist : Archvile
{
	default
	{
		Obituary "%o got set ablaze by a Diabloist.";
		Health 1400;
		Radius 20;
		Height 56;
		Mass 1000;
		Speed 22.5;
		PainChance 10;
		PainChance "Magic", 128;
		BloodColor "08 08 08";
		MONSTER;
		+NODROPOFF;
		+FIRERESIST;
		+FLOORCLIP;
		+NOTARGET;
		+NORADIUSDMG;
		+MISSILEMORE;
		+DONTHARMSPECIES;
		+NOTARGETSWITCH;
		SeeSound "monster/diasit";
		PainSound "monster/diapai";
		DeathSound "monster/diadth";
		ActiveSound "monster/diaact";
	}
	
	States
	{
		Spawn:
			DIAB AB 10 A_Look();
			Loop;
		See:
			DIAB AABBCCDDEEFF 2;
			Loop;

		Missile:
			DIAB G 3 Bright A_FaceTarget();
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB I 3 BRIGHT A_VileTarget("DFire"); // A_SpawnProjectile ("DFire",32,0,0);
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB G 3 Bright A_FaceTarget();
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB I 3 BRIGHT A_FaceTarget();
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB G 3 Bright A_FaceTarget();
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB I 3 BRIGHT A_FaceTarget();
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB G 3 Bright A_FaceTarget();
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB I 3 BRIGHT A_FaceTarget();
			DIAB G 3 Bright A_FaceTarget();
			DIAB H 3 BRIGHT A_FaceTarget();
			DIAB I 3 BRIGHT A_FaceTarget();
			DIAB N 5 BRIGHT A_FaceTarget();
			DIAB O 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB P 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB N 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB O 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB P 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB N 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB O 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB P 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB N 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB O 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB P 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB N 5 BRIGHT A_SpawnProjectile ("DFlare",40,0,random(-4,4));
			DIAB P 5 BRIGHT;
			DIAB G 5 BRIGHT A_FaceTarget();
			DIAB H 5 BRIGHT A_FaceTarget();
			DIAB I 5 BRIGHT A_FaceTarget();
			DIAB J 5 BRIGHT A_FaceTarget();
			DIAB K 5 BRIGHT A_FaceTarget();
			DIAB L 5 BRIGHT A_FaceTarget();
			DIAB M 5 BRIGHT A_FaceTarget();
			DIAB N 5 BRIGHT A_FaceTarget();
			DIAB O 5 BRIGHT A_SpawnProjectile ("DMissile",32,0,0);
			DIAB P 5 BRIGHT;
			DIAB [ 8 BRIGHT A_FaceTarget();
			DIAB \ 8 BRIGHT A_FaceTarget();
			DIAB ] 8 BRIGHT A_SpawnProjectile ("DTracer",0,40,0);
			Goto See;

		Heal:
			DIAB [\] 10 BRIGHT;
			Goto See;
		Pain:
			DIAB Q 5;
			DIAB Q 5 A_Pain();
			Goto See;
		Death:
			DIAB Q 7;
			DIAB R 7 A_Scream();
			DIAB S 7 A_NoBlocking();
			DIAB TUVW 7;
			DIAB XY 5;
			DIAB Z -1;
			Stop;
		Raise:
			DIAB YX 5;
			DIAB WVUT 7;
			DIAB SRQ 7;
			goto See;
	}
}
class CastSpiderMastermind : SpiderMastermind { }
class CastDemolisher : SpiderMastermind
{
	default
	{
		Obituary "%o felt the power of the Spider-Demolisher.";
		Health 6000;
		Radius 96;
		Height 100;
		Mass 1000;
		Speed 16;
		PainChance 20;
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+BOSS;
		+MISSILEEVENMORE;
		+NORADIUSDMG;
		SeeSound "monster/demsit";
		AttackSound "spider/attack";
		PainSound "spider/pain";
		DeathSound "monster/demdth";
		ActiveSound "spider/active";
	}
	
	States
	{
		Spawn:
			DEMO AB 10 A_Look();
			Loop;
		See:
			DEMO A 3 A_Metal();
			DEMO ABB 3;
			DEMO C 3 A_Metal();
			DEMO CDD 3;
			DEMO E 3 A_Metal();
			DEMO EFF 3;
			Loop;

		Missile:
			DEMO A 20 BRIGHT A_FaceTarget();
			DEMO T 1 BRIGHT A_StartSound("weapons/bfgf");
			DEMO T 4 BRIGHT A_FaceTarget();
			DEMO T 4 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO U 10 BRIGHT A_SpawnProjectile ("BFGBallMonster",32,0,0);
			DEMO T 1 BRIGHT A_StartSound("weapons/bfgf");
			DEMO T 4 BRIGHT A_FaceTarget();
			DEMO T 4 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO T 5 BRIGHT A_FaceTarget();
			DEMO U 10 BRIGHT A_SpawnProjectile ("BFGBallMonster",32,0,0);
			DEMO A 20 BRIGHT A_FaceTarget();
			DEMO G 4 BRIGHT A_SPosAttack();
			DEMO H 4 BRIGHT A_SPosAttack();
			DEMO G 4 BRIGHT A_SPosAttack();
			DEMO H 4 BRIGHT A_SPosAttack();
			DEMO H 1 BRIGHT A_SpidRefire();
			Goto See;

		Pain:
			DEMO I 3;
			DEMO I 3 A_Pain();
			Goto See;
		Death:
			DEMO J 20 Bright A_Scream();
			DEMO K 10 Bright A_NoBlocking();
			DEMO LMNOPQR 10 Bright;
			DEMO S 30;
			DEMO S -1;
			Stop;
	}
}

class CastCyberdemon : Cyberdemon
{
	States
	{
		Melee:
			CYBR Z 5;
			CYMA ABB 7;
			Goto See;
	}
}
class CastAnnihilator : Cyberdemon
{
	default
	{
		Obituary "The Cyber Annihilator blew %o away with its rockets.";
		Health 8000;
		Radius 40;
		Height 110;
		Mass 1000;
		Speed 16;
		PainChance 10;
		MONSTER;
		+NOTARGET;
		+FLOORCLIP;
		+NORADIUSDMG;
		+BOSS;
		+MISSILEEVENMORE;
		SeeSound "monster/annsit";
		PainSound "cyber/pain";
		DeathSound "monster/anndth";
		ActiveSound "cyber/active";
	}
	
	States
	{
		Spawn:
			ANNI AB 10 A_Look();
			Loop;
		See:
			ANNI A 3 A_StartSound("monster/anhoof");
			ANNI ABBCC 3;
			ANNI D 3 A_StartSound("monster/anhoof");
			ANNI D 3;
			Loop;
		Melee:
			ANNI B 5;
			ANMA ABB 7;
			Goto See;
		Missile:
			ANNI E 6 A_FaceTarget();
			ANNI F 12 Bright A_SpawnProjectile ("Rocket2",40,-27,0);
			ANNI E 12 A_FaceTarget();
			ANNI F 12 Bright A_SpawnProjectile ("Rocket2",40,-27,0);
			ANNI E 12 A_FaceTarget();
			ANNI F 12 Bright A_SpawnProjectile ("Rocket2",40,-27,0);

			ANNI E 6 A_FaceTarget();
			ANNI F 12 Bright A_SpawnProjectile ("HomRocket1",40,-27,0);
			ANNI E 12 A_FaceTarget();
			ANNI F 12 Bright A_SpawnProjectile ("HomRocket1",40,-27,0);
			ANNI E 12 A_FaceTarget();
			ANNI F 12 Bright A_SpawnProjectile ("HomRocket1",40,-27,0);
			Goto See;
		Pain:
			ANNI G 10 A_Pain();
			Goto See;
		Death:
			ANNI H 10 Bright;
			ANNI I 10 Bright A_Scream();
			ANNI JKL 10 Bright;
			ANNI M 10 Bright A_NoBlocking();
			ANNI NO 10 Bright;
			ANNI P 30;
			ANNI P -1;
			stop;
		Raise:
			ANNI P 30;
			ANNI ONMLKJIH 10 Bright;
			goto See;
	}
}
class CastSauravatar : Cyberdemon
{
	default
	{
		mass 50000000;
		species "Sauron";
		+DROPOFF;
		+FLOORHUGGER;
		+NOBLOCKMONST;
		//-MISSILEMORE;
		+MISSILEEVENMORE;
		+NOTARGETSWITCH;
		+NOINFIGHTING;
		+NOTARGET;
		+NOTELEFRAG;
		+NOTIMEFREEZE;
		+SHADOW;
		+LOOKALLAROUND;
		Scale 0.75;
		radius 29;
		height 77;
		translation "64:79=88:103", "48:63=103:88", "144:151=88:103", "32:47=224:231", "168:191=224:231", "224:231=[255, 255, 255]:[128, 255, 128]", "208:223=112:127";
		health 162000; // His BASE health, but not his actual maximum.
		obituary "%o was obliterated by an avatar of the Almighty Sauron.";
		mass 76000;
		speed 32;
		painchance 5;
		painchance "Gauntlets", 255;
		seesound "SauronSight";
		painsound "null";
		deathsound "SauronDeath";
		activesound "null";
	}
	
	States
	{
		Spawn:
			CYBS A 0;
			CYBS A 0 Thing_ChangeTID(0,1124);
			CYBS A 0 Thing_SetTranslation(1124,16);
			CYBS A 0 Thing_ChangeTID(1124,1124);
			CYBS A 0;
			goto Idle;
		Idle:
			CYBR A 3 A_Look();
			CYBR B 3 A_Look();
			loop;
		See:
			CYBR A 3;
			CYBR A 3;
			CYBR B 3;
			CYBR B 3;
			CYBR C 3;
			CYBR C 3;
			CYBR D 3;
			CYBR D 3;
			loop;
		Missile:
			CYBR E 6 A_FaceTarget();
			CYBR F 0 A_StartSound("weapons/bfgf");
			CYBR F 12 A_SpawnProjectile("SauronBFGBall",45,0,0);
			CYBR E 12 A_FaceTarget();
			CYBR F 0 A_StartSound("weapons/bfgf");
			CYBR F 12 A_SpawnProjectile("SauronBFGBall",45,0,0);
			CYBR E 12 A_FaceTarget();
			CYBR F 0 A_StartSound("weapons/bfgf");
			CYBR F 12 A_SpawnProjectile("SauronBFGBall",45,0,0);
			goto See;
		Pain:
			CYBR A 0 A_Jump (256, "PainS1", "PainS2", "PainS3", "PainS4");
			CYBR G 10;
			goto See;
		Death:
			CYBR H 5;
			CYBR H 5;
			CYBR I 0 A_StartSound("SauronDeath",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NONE,1.0);
			CYBR I 5;
			CYBR I 5;
			CYBR J 5;
			CYBR J 5;
			CYBR K 5;
			CYBR K 5;
			CYBR L 5;
			CYBR L 5;
			CYBR M 0 A_NoBlocking();
			CYBR M 5;
			CYBR M 5;
			CYBR N 5;
			CYBR N 5;
			CYBR O 5;
			CYBR O 5;
			CYBR P 5;
			CYBR P 15;
			CYBR P -1 A_BrainDie();
	}
}

class CastDeggaris : AetheriusBaseZSC
{
	default
	{
		Speed 1;
		Health 103; // 100
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		DeathSound "deggaris/death";
	}

	States
	{
		Spawn:
			SENA A 4;
			SENA A 4;
			Loop;
		See:
			SENA ABCD 4;
			Loop;
		Missile:
			SENA E 12;
			Goto See;
		Melee:
			SENA F 6;
			Goto Missile;
		Pain:
			SENA G 4;
			SENA G 0 A_Pain();
			SENA G 4;
			Goto See;
		Death:
			SENA H 10;
			SENA I 10 A_PlayerScream();
			SENA J 10 A_NoBlocking();
			SENA KLM 10;
			SENA N -1;
			Stop;
	}
}

class CastIllucia : AetheriusBaseZSC
{
	default
	{
		Speed 1;
		Health 81; // 100
		Radius 14;
		Height 52;
		Mass 92;
		PainChance 255;
		DeathSound "illucia/death";
	}

	States
	{
		Spawn:
			ILLP A 4;
			ILLP A 4;
			Loop;
		See:
			ILLP ABCD 4;
			Loop;
		Missile:
			ILLP E 12;
			Goto See;
		Melee:
			ILLP F 6;
			Goto Missile;
		Pain:
			ILLP G 4;
			ILLP G 0 A_Pain();
			ILLP G 4;
			Goto See;
		Death:
			ILLP H 10;
			ILLP I 10 A_PlayerScream();
			ILLP J 10 A_NoBlocking;
			ILLP KLM 10;
			ILLP N -1;
			Stop;
	}
}

class CastHellCleric : AetheriusBaseZSC
{
	default
	{
		Health 175;
		Height 56;
		Radius 20;
		Mass 175;
		Speed 8;
		FastSpeed 16;
		ReactionTime 8;
		seesound "hellcleric/sight";
		painsound "hellcleric/pain";
		deathsound "hellcleric/death";
		activesound "hellcleric/active";
		Monster;
		+Solid;
		+FloorClip;
		+DONTHARMSPECIES;
		DamageFunction ((3+(11*(random(6,13))))/2); // 69-146 per whack
		Obituary "%o was burned and flamed by a Hell Cleric.";
		HitObituary "%o had %p head bashed in by a Hell Cleric.";
		Painchance 24;
	}
	
	states
	{
		Spawn:
			HELC AA 4 A_Look();
			goto Spawn+1;
		See:
			HELC AABBCCDD 2;
			loop;

		Melee:
			HELC E 4;
			HELC G 4;
			HELC F 3 A_FaceTarget();
			HELC G 4;
			HELC F 3 A_FaceTarget();
			HELC G 4;
			HELC F 3 A_FaceTarget();
			goto See;
		Missile:
			HELC E 4;
			HELC G 4;
			HELC F 3 A_FaceTarget();
			HELC G 4;
			HELC F 3 A_FaceTarget();
			HELC G 4;
			HELC F 3 A_FaceTarget();
			goto See;

		Pain:
			HELC H 2 A_StartSound("hellcleric/pain");
			goto See;
		Death:
			HELC I 5;
			HELC J 5 A_StartSound("hellcleric/death");
			HELC K 5;
			HELC L 5 A_NoBlocking();
			HELC M -1;
			stop;

		XDeath:
			HELC N 5;
			HELC O 5 A_XScream();
			HELC P 5;
			HELC Q 5 A_NoBlocking();
			HELC RSTU 5;
			HELC V -1;
			stop;

		Raise:
			HELC L 5;
			HELC KJI 5;
			goto See;
	}
}
