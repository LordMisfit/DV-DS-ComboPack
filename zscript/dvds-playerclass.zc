class AetheriusPlayerPawn : PlayerPawn
{
	bool isvoodoodoll;
	int user_randomaccuracy1; 
	int user_randomaccuracy2; 
	int user_randomaccuracy1a; 
	int user_randomaccuracy2a;
	int user_uppercutphase; 
	int user_temp1; 
	int user_temp2;
	int user_randomizer1;
	int user_FlameCount;
	int buttons;
	int poisonedinterval;
	
	mixin Tension;
	mixin DamageMessages;
	mixin MapCheck;

	int truehealthmax;
	int DivineAvatarTimer;
	int DQOomphTimer;
	int DQBuffTimer;
	int DQAcceleratleTimer;
	int DQBluntTimer;
	int DQSapTimer;
	int DQDeceleratleTimer;
	int SleepTimer;
	int GoETimer;
	
	int TensionLevel;
	int InvisiblityLevel;
	int DashTimer;
	int SceptreShieldLevel;
	
	int LifeUpPerkLvl;
	int LifeUpExPerkLvl;
	int MagiUpPerkLvl;
	int MagiUpExPerkLvl;
	int StamUpPerkLevel;
	int StamUpEXPerkLevel;
	int JumpMorePerkLvl;
	int JumpMoreEXPerkLvl;

	int BulletAccuracyPerkLevel;
	int BulletAccuracyEXPerkLevel;
	int PelletAccuracyPerkLevel;
	int PelletAccuracyEXPerkLevel;
	int PlasmaAccuracyPerkLevel;
	int PlasmaAccuracyEXPerkLevel;
	int DemolitionsExpertPerkLevel;
	int DemolitionsExpertEXPerkLevel;

	int BFGAttunementPerkLevel;
	int BFGAttunementEXPerkLevel;
	int SoulMasteryPerkLevel;
	int SoulMasteryEXPerkLevel;
	int MartialArtsMastery;
	int MartialArtsMasteryEx;
	int BerserkerFit;
	int BerserkerFitEX;

	int WandMastPerkLvl;
	int WandMastEXPerkLvl;
	int ClearedOfMindPerkLevel;
	int ClearedOfMindEXPerkLevel;

	int MortalHitTensionPerkLvl;
	int MortalHitTensionExPerkLvl;
	int MortalHitManaRecPerkLvl;
	int MortalHitManaRecExPerkLvl;
	int MortalHitBlastPerkLvl;
	int MortalHitBlastEXPerkLvl;
	int DeathRagePerkLvl;
	int DeathRageEXPerkLvl;
	int VillainKillerPerkLvl;
	int VillainKillerEXPerkLvl;

	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;
	
	// Other Consts
	const maxmovevel = 30.0;

	int user_PlayerDVDSSpecial[256];

	int jiggle_jump, jiggle_crouch, jiggle_left, jiggle_right, jiggle_up, jiggle_down;	int actortimer;
	int firsttic;
	int pbuddha1, pbuddha2, pgod1, pgod2, pnoclip1, pnoclip2;
	int breathdirection; // 0 = down [size decreases], 1 = up [size increases]
	int mobjdmg;
	int playoutputdmg;
	int playtookdamage;
	double basexscale, baseyscale;
	double scalexmulti, scaleymulti;
	double lastvelx;
	double lastvely;
	double lastvelz;
	double truespeed;
	int breathframe;
	int user_hittaken;
	
	int saveddamage;
	int InvisNeedleBonus;
	
	double DeathRageMaxTimer;
	double DeathRageTimer;
	double DeathRageTimerCooldown;
	
	double PlayerDefenseIgnoreFactor, PlayerArmorIgnoreFactor, PlayerArmorIgnoreFactorGeneral;
	int neverbleeds;

	int originalheight;
	int originalradius;
	int originalmass;

	private class<Inventory> APPackToken, APPackCheck, MiscCheck;
	
	default
	{
		+CASTSPRITESHADOW;
		-NOSPRITESHADOW;
	}
	
	double TotalAirControl;
	override void MovePlayer()
	{
		if (!isvoodoodoll)
		{
			String nm;
			int CharacterClass = CallACS("CheckCharacterClass");
			int PlayerLevel = CallACS("StatCheck",0);
			int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
	
			double AirControlBase = 0.2375;
			if (CharacterClass == 0) AirControlBase = 0.2375;
			if (CharacterClass == 1) AirControlBase = 0.2500;
			if (CharacterClass == 2) AirControlBase = 0.2625;
			if (CharacterClass == 8) AirControlBase = 0.2375;
			if (CharacterClass == 9) AirControlBase = 0.275;
			
			// Level Based AirControl
			double LVLAirControl = 1.00 + (PlayerLevel * 0.00125);
	
			// AGLSeed-based multiplier
			double AGLAirControl = 1.00 + (PlayerAGL * 0.000415);
			if (CharacterClass == 0) AGLAirControl = 1.00 + (PlayerAGL * 0.000380);
			if (CharacterClass == 1) AGLAirControl = 1.00 + (PlayerAGL * 0.000430);
			if (CharacterClass == 2) AGLAirControl = 1.00 + (PlayerAGL * 0.000415);
			if (CharacterClass == 8) AGLAirControl = 1.00 + (PlayerAGL * 0.000375);
			if (CharacterClass == 9) AGLAirControl = 1.00 + (PlayerAGL * 0.000400);
	
			// Armor items
			double ArmorAirControl = 1.00;
			if (CharacterClass == 2)
			{
				if (CountInv("SafeTeaShoes")) 				ArmorAirControl += 0.20;
				if (CountInv("PearlyCorset")) 				ArmorAirControl += 0.0125;
				if (CountInv("WaterFlyingDress"))			ArmorAirControl += 0.0125;
				if (CountInv("EvenstarNecklace"))			ArmorAirControl += 0.0375;
				if (CountInv("CloakofEvasion"))				ArmorAirControl += 0.20;
				if (CountInv("AnubisCufflinks"))			ArmorAirControl += 0.025;
				if (CountInv("KissaBra"))							ArmorAirControl += 0.0375;
				if (CountInv("DivineShield"))					ArmorAirControl += 0.05;
				if (CountInv("BalrogRing"))						ArmorAirControl += 0.0125;
				if (CountInv("DoveRibbon"))						ArmorAirControl += 0.0375;
				if (CountInv("FalconKnifeEarrings"))	ArmorAirControl += 0.05;
			}
			else
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				if (CountInv("DSGreenArmorClass"))		ArmorAirControl += 0.0667;
				if (CountInv("DSBlueArmorClass"))			ArmorAirControl += 0.10;
				if (CountInv("DSStoneArmorClass1"))		ArmorAirControl += 0.1334;
				if (CountInv("DSDiamondArmorClass1"))	ArmorAirControl += 0.18;
				if (CountInv("DSStoneArmorClass2"))		ArmorAirControl += 0.1667;
				if (CountInv("DSDiamondArmorClass2"))	ArmorAirControl += 0.19;
			}
		
			// Sauron Armor items
			double SauronArmorAirControl = 1.00;
			if (CountInv("SauronHelmet"))						SauronArmorAirControl -= 0.10;
			if (CountInv("SauronGauntlets"))				SauronArmorAirControl -= 0.05;
			if (CountInv("SauronGauntletsIllucia"))	SauronArmorAirControl -= 0.05;
			if (CountInv("SauronGauntletsFlora"))		SauronArmorAirControl -= 0.05;
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (CountInv(APPackCheck))							SauronArmorAirControl -= 0.05;
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (CountInv(APPackCheck))							SauronArmorAirControl -= 0.05;
			if (CountInv("TheOneRing"))							SauronArmorAirControl += 0.25;
	
			// Buffs
			double BuffAirControl = 1.00;
			if (DQAcceleratleTimer > 0) BuffAirControl += 0.25;
			if (DQDeceleratleTimer > 0) BuffAirControl -= 0.25;
	
			// Sceptre for AirControl.
			double SceptreAirControl = 1.00;
			if (SceptreShieldLevel == 1) SceptreAirControl -= 0.20;
			if (SceptreShieldLevel == 2) SceptreAirControl -= 0.10;
			if (SceptreShieldLevel == 3) SceptreAirControl -= 0.05;
	
			double PerkFactorAirControl = 1.0;
			PerkFactorAirControl += ((JumpMorePerkLvl * 0.05) + (JumpMoreEXPerkLvl * 0.125));
	
			double DashingAirControl = 1.0;
			if (DashTimer > 0) DashingAirControl = 1.5 + frandom(-0.25,0.25); // (0.015625 * 5);
	
			double DivineAvatarAirControl = 1.00;
			if (DivineAvatarTimer > 0) DivineAvatarAirControl *= 2.00;
			
			
			level.aircontrol = AirControlBase
											* LVLAirControl
											* AGLAirControl
											* ArmorAirControl
											* SauronArmorAirControl
											* BuffAirControl
											* SceptreAirControl
											* PerkFactorAirControl
											* DashingAirControl
											* DivineAvatarAirControl;
			level.airfriction = level.aircontrol * -0.0941 + 1.0004;
			
			if (dvdsdebug_showmoveinformation)
			{
				Console.Printf("    \czSV_AirControl:\c- \cz%.8f\c-  \cwTotalAirControl:\c- \cw%.8f\c-, \cyAirControlBase:\c- \cy%.8f\c-, LVLAirControl: %.8f, AGLAirControl: %.8f, ArmorAirControl: %.8f, SauronArmorAirControl: %.8f, BuffAirControl: %.8f, SceptreAirControl: %.8f, PerkFactorAirControl: %.8f, DashingAirControl: %.8f, DivineAvatarAirControl: %.8f", 
														sv_aircontrol, level.aircontrol, AirControlBase,
														LVLAirControl, AGLAirControl,
														ArmorAirControl, SauronArmorAirControl,
														BuffAirControl, SceptreAirControl,
														PerkFactorAirControl, DashingAirControl,
														DivineAvatarAirControl);
				Console.Printf("    \cwTotalFriction:\c- \cw%.8f\c-, \cyLevelAirFriction:\c- \cy%.8f\c-", friction, level.airfriction);
				
			}
			
			//********************************************************************************
			//*Allows the player to "jiggle" out of sleep faster by pressing movement keys :V*
			//********************************************************************************
			buttons = GetPlayerInput(INPUT_BUTTONS);
			int jiggledecrease = random(4,6);
			if (CountInv("EvenstarNecklace")) jiggledecrease += random(2,3);
			if (CountInv("BalrogRing")) jiggledecrease += random(0,1);
			if (GoETimer > 0) jiggledecrease *= 10;
			int jigglecooldown = random(2,3);
			int jigglewarmup = 5;
			if (jiggle_jump > 0) jiggle_jump -= 1;
			if (jiggle_crouch > 0) jiggle_crouch -= 1;
			if (jiggle_left > 0) jiggle_left -= 1;
			if (jiggle_right > 0) jiggle_right -= 1;
			if (jiggle_up > 0) jiggle_up -= 1;
			if (jiggle_down > 0) jiggle_down -= 1;
			if (jiggle_jump < 0) jiggle_jump = 0;
			if (jiggle_crouch < 0) jiggle_crouch = 0;
			if (jiggle_left < 0) jiggle_left = 0;
			if (jiggle_right < 0) jiggle_right = 0;
			if (jiggle_up < 0) jiggle_up = 0;
			if (jiggle_down < 0) jiggle_down = 0;
			if (SleepTimer > 0) // ... put to sleep.
			{
				if (((buttons & BT_JUMP) && sv_allowjump) | buttons & BT_MOVEUP) // "Crouch"
				{
					if (jiggle_jump < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						SleepTimer = CallACS("GetBuffTimer",20);
	
						jiggle_jump += jigglewarmup;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (((buttons & BT_CROUCH) && sv_allowcrouch) | buttons & BT_MOVEDOWN) // "Crouch"
				{
					if (jiggle_crouch < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						SleepTimer = CallACS("GetBuffTimer",20);
	
						jiggle_jump -= jigglecooldown;
						jiggle_crouch += jigglewarmup;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_LEFT | buttons & BT_MOVELEFT) // Move "Left"
				{
					if (jiggle_left < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						SleepTimer = CallACS("GetBuffTimer",20);
	
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left += jigglewarmup;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_RIGHT | buttons & BT_MOVERIGHT) // Move "Right"
				{
					if (jiggle_right < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						SleepTimer = CallACS("GetBuffTimer",20);
	
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right += jigglewarmup;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_FORWARD | buttons & BT_LOOKUP) // Move "Forward/Up"
				{
					if (jiggle_up < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						SleepTimer = CallACS("GetBuffTimer",20);
	
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up += jigglewarmup;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_BACK | buttons & BT_LOOKDOWN) // Move "Backwards/Down"
				{
					if (jiggle_down < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						SleepTimer = CallACS("GetBuffTimer",20);
	
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down += jigglewarmup;
					}
				}
				if (SleepTimer < 0)
				{
					CallACS("GetBuffTimer",20,1,0); // Set
					SleepTimer = CallACS("GetBuffTimer",20);
				}
				if (dvdsdebug_showmoveinformation) Console.Printf("Jiggle - Sleep Time: %d, Jump: %d, Crouch: %d, Left: %d, Right: %d, Up: %d, Down: %d", SleepTimer, jiggle_jump, jiggle_crouch, jiggle_left, jiggle_right, jiggle_up, jiggle_down);
			}
			if (buttons & BT_ZOOM) A_SetInventory("HoldingZoom",1);
			else A_SetInventory("HoldingZoom",0);
		}
		
		super.MovePlayer();
	}

	override void CheckAirSupply()
	{
		if (!isvoodoodoll)
		{
			int DrownDmg = 2 + ((level.maptime - player.air_finished) / TICRATE);
			DrownDmg = clamp(DrownDmg, 0, DrownDmg);
			// Handle air supply	
			//if (level.airsupply > 0)
			{
				let player = self.player;
				if (waterlevel < 3 || (bInvulnerable) || 
						CountInv("InvulnerabilitySpell") || CountInv("IsInvulnerable") || 
					(player.cheats & (CF_GODMODE | CF_NOCLIP2)) || (player.cheats & CF_GODMODE2))
				{
					ResetAirSupply();
				}
				else if (player.air_finished <= level.maptime && !(level.maptime & 31))
				{
					DamageMobj(NULL, NULL, DrownDmg, 'Drowning');
				}
			}
			int AirTime = max(player.air_finished - level.maptime, 0);
			if (dvdsdebug_showairmeter) Console.Printf("    WaterLevel: %d, Level.Time: %d, Level.MapTime: %d, Player.AirFinished: %d, \cxAirTime: %d / %d\c- (%d), DrownDmg: %d", waterlevel, level.time, level.maptime, player.air_finished, AirTime, level.airsupply, AirCapacity, DrownDmg);
		}
		else
		{
			super.CheckAirSupply();
		}
	}

	override void BeginPlay()
	{
		basexscale = scale.x;
		baseyscale = scale.y;
		scalexmulti = 1.00;
		scaleymulti = 1.00;

		// Player is always considered a Voodoo Doll during BeginPlay, so height/radius have to be saved before the initial change and then reverted back to it for PostBeginPlay/etc when proper doll detection actually works >____>;
		// Also 'isvoodoodoll' CAN'T be set right now, has to be done in PostBeginPlay/Tick as well <____<;
		originalheight = height;
		originalradius = radius;
		originalmass = mass;

		A_SetSize(16,56,false);
		scale.x = 1.0;
		scale.y = 1.0;
		Mass = 100;
		vel.x = vel.y = vel.z = 0;
		if (dvdsdebug_showvoodoodoll) Console.Printf("VoodooDoll [BeginPlay] - \c[gold]H: %d, R: %d, M: %d, \c[sapphire]Sx: %4f, Sy: %4f, \c[fire]PosX: %d, PosY: %d, PosZ: %d", height, radius, mass, scale.x, scale.y, pos.x, pos.y, pos.z);

		Super.BeginPlay(); 
	}

	override void PostBeginPlay()
	{
		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) 
		{
			A_SetSize(16,56,false);
			scale.x = 1.0;
			scale.y = 1.0;
			Mass = 100;
			isvoodoodoll = true;
			if (dvdsdebug_showvoodoodoll) Console.Printf("H: %d, R: %d, M: %d, Sx: %4f, Sy: %4f", height, radius, mass, scale.x, scale.y);
			Super.PostBeginPlay(); 
			return;
		}
		else
		{
			A_SetSize(originalradius,originalheight,false);
			Mass = originalmass;
			scale.x = basexscale;
			scale.y = baseyscale;
			if (dvdsdebug_showvoodoodoll) Console.Printf("Player [PostBeginPlay] - \c[gold]H: %d, R: %d, M: %d, \c[sapphire]Sx: %4f, Sy: %4f, \c[fire]PosX: %d, PosY: %d, PosZ: %d", height, radius, mass, scale.x, scale.y, pos.x, pos.y, pos.z);
		}
	
		if (bNOBLOOD == 1) 
		{
			if (bNOBLOODDECALS == 0) bNOBLOODDECALS == 1;
			neverbleeds = 1;
		}
		if (bNOBLOODDECALS == 1) 
		{
			if (bNOBLOOD == 0) bNOBLOOD == 1;
			neverbleeds = 1;
		}
		
		Super.PostBeginPlay(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO PostBeginPlay() BREAK :V
	}
	
	override void Tick()
	{
		String nm, nn, no, np;

		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) 
		{ 
			if (dvdsdebug_showvoodoodoll) Console.Printf("VoodooDoll [Tick] - \c[gold]H: %d, R: %d, M: %d, \c[sapphire]Sx: %4f, Sy: %4f, \c[fire]PosX: %d, PosY: %d, PosZ: %d", height, radius, mass, scale.x, scale.y, pos.x, pos.y, pos.z);
			isvoodoodoll = true;
			Super.Tick();
			return;
		}
		else
		{
			if (dvdsdebug_showvoodoodoll) Console.Printf("Player [Tick] - \c[gold]H: %d, R: %d, M: %d, \c[sapphire]Sx: %4f, Sy: %4f, \c[fire]PosX: %d, PosY: %d, PosZ: %d", height, radius, mass, scale.x, scale.y, pos.x, pos.y, pos.z);
		}

		if (dvdsdebug_mapinfo)
		{
			Console.Printf("Player Age [tics]: %d, levelnum: \cx%d\c-, cluster: \cx%d\c-, clusterflags: \cx%d\c-, NextMap: \cy%s\c-, NextSecretMap: \cy%s\c-,\ntime: \cx%d\c-, maptime: \cx%d\c-, totaltime: \cx%d\c-, starttime: \cx%d\c-, partime: \cx%d\c-, sucktime: \cx%d\c-,\nlevelname: \cy%s\c-, mapname: \cy%s\c-, \ngravity: \cx%.8f\c-, aircontrol: \cx%.8f\c-, airfriction: \cx%.8f\c-, \cxTranslation #: %d, \cyMapCheckSum:\cx %s, \cx# of Maps Visited: %d\c-", 
											GetAge(),
											level.levelnum, level.cluster, level.clusterflags, level.NextMap, level.NextSecretMap,
											level.time, level.maptime, level.totaltime, level.starttime, level.partime, level.sucktime,
											level.levelname, level.mapname,
											level.gravity, level.aircontrol, level.airfriction,
											translation, level.GetChecksum(),
											CallACS("MiscVarCheckDECORATE",1000));
		}

		DivineAvatarTimer = CallACS("GetBuffTimer",7);
		DQOomphTimer = CallACS("GetBuffTimer",10);
		DQBuffTimer = CallACS("GetBuffTimer",11);
		DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		DQBluntTimer = CallACS("GetBuffTimer",13);
		DQSapTimer = CallACS("GetBuffTimer",14);
		DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		SleepTimer = CallACS("GetBuffTimer",20);
		GoETimer = CallACS("GetBuffTimer",129);
		
		InvisiblityLevel = CallACS("MiscVarCheckDECORATE",15);
		DashTimer = CallACS("MiscVarCheckDECORATE",166);
		TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		SceptreShieldLevel = CallACS("MiscVarCheckDECORATE",397);
		
		LifeUpPerkLvl = CallACS("MiscVarCheckDECORATE",10001);
		LifeUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10002);
		MagiUpPerkLvl = CallACS("MiscVarCheckDECORATE",10003);
		MagiUpExPerkLvl = CallACS("MiscVarCheckDECORATE",10004);
		StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		JumpMorePerkLvl = CallACS("MiscVarCheckDECORATE",10009);
		JumpMoreEXPerkLvl = CallACS("MiscVarCheckDECORATE",10010);

		BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		PelletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10021);
		PelletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10022);
		PlasmaAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10023);
		PlasmaAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10024);
		DemolitionsExpertPerkLevel = CallACS("MiscVarCheckDECORATE",10025);
		DemolitionsExpertEXPerkLevel = CallACS("MiscVarCheckDECORATE",10026);

		BFGAttunementPerkLevel = CallACS("MiscVarCheckDECORATE",10029);
		BFGAttunementEXPerkLevel = CallACS("MiscVarCheckDECORATE",10030);

		SoulMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10033);
		SoulMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10034);
		MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
		MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);

		MortalHitTensionPerkLvl = CallACS("MiscVarCheckDECORATE",10037);
		MortalHitTensionExPerkLvl = CallACS("MiscVarCheckDECORATE",10038);
		MortalHitManaRecPerkLvl = CallACS("MiscVarCheckDECORATE",10039);
		MortalHitManaRecExPerkLvl = CallACS("MiscVarCheckDECORATE",10040);
		MortalHitBlastPerkLvl = CallACS("MiscVarCheckDECORATE",10041);
		MortalHitBlastEXPerkLvl = CallACS("MiscVarCheckDECORATE",10042);
		DeathRagePerkLvl = CallACS("MiscVarCheckDECORATE",10043);
		DeathRageEXPerkLvl = CallACS("MiscVarCheckDECORATE",10044);
		
		BerserkerFit = CallACS("MiscVarCheckDECORATE",10051);
		BerserkerFitEX = CallACS("MiscVarCheckDECORATE",10052);
		WandMastPerkLvl = CallACS("MiscVarCheckDECORATE",10053);
		WandMastEXPerkLvl = CallACS("MiscVarCheckDECORATE",10054);
		ClearedOfMindPerkLevel = CallACS("MiscVarCheckDECORATE",10055);
		ClearedOfMindEXPerkLevel = CallACS("MiscVarCheckDECORATE",10056);
		VillainKillerPerkLvl = CallACS("MiscVarCheckDECORATE",10057);
		VillainKillerEXPerkLvl = CallACS("MiscVarCheckDECORATE",10058);
		
		if (dvdsdebug_tcotda_sirentimers && CountInv("PlayingTCOTDA") && CountInv("SirenTimerMaximum") > 0)
		{
			A_PrintBold(String.Format("\cxSirenTimer %d / %d", CountInv("SirenTimerCurrent"), CountInv("SirenTimerMaximum")));
		}
		
		int Player1TID = 1001;
		if (!CountInv("PlayerStatItem")) CallACS("MiscVarSetDECORATE",25001,health);
		if (CountInv("PlayerStatItem") && level.maptime == 10 && tid != Player1TID)
		{
			A_PrintBold(String.Format("\cgWARNING: Player's TID is NOT %d! Please address this issue as soon as possible!! :V :V :V", Player1TID));
		}
		
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassCheck = CallACS("OtherVarCheckDECORATE",4);
		int basespeedvelsx;
		int basespeedvelsy;
		double basespeedvelsxd = 16.66666667;
		double basespeedvelsyd = 16.66666667;

		basespeedvelsxd *= ForwardMove2;
		basespeedvelsyd *= SideMove2;
		basespeedvelsx = (basespeedvelsxd * 65536);
		basespeedvelsy = (basespeedvelsyd * 65536);
		
		if (CountInv("SauronHelmet") && !dvds_sauronhelmetdrops) A_SetInventory("SauronHelmet", 0);
		if (!dvds_saurongauntletsdrops)
		{
			if (CountInv("SauronGauntlets")) A_SetInventory("SauronGauntlets", 0);
			if (CountInv("SauronGauntletsIllucia")) A_SetInventory("SauronGauntletsIllucia", 0);
			if (CountInv("SauronGauntletsFlora")) A_SetInventory("SauronGauntletsFlora", 0);
			nm = "SauronGauntletsAilish"; APPackCheck = nm; if (CountInv(APPackCheck)) A_SetInventory(APPackCheck, 0);
			nm = "SauronGauntletsPetra"; APPackCheck = nm; if (CountInv(APPackCheck)) A_SetInventory(APPackCheck, 0);
		}
		if (CountInv("TheOneRing") && !dvds_theoneringdrops) A_SetInventory("TheOneRing", 0);
		
		// Melee Ghost Range Reticles
		if (dvdsdebug_meleerangeghost)
		{
			let weapon = player.ReadyWeapon;
			let kickingweapon = QuickMeleeWeaponZSC(player.ReadyWeapon);
			string reticleactorname;
			int SceptreLevel = CallACS("OtherVarCheckDECORATE",11);
			int PlayerLevel = CallACS("StatCheck",0);

			int wRange = A_GetSceptreRange(0);
			int wRange2 = A_GetSceptreRange(2);
			int range1 = wRange * 0.75;
			int range2 = wRange * 0.5;
			int range3 = wRange * 0.25;
			int wHeight = (player.mo.AttackZOffset + (self.Height/2));
			int wSpeed = 0;
			int SpawnX1 = cos(-pitch) * range1;
			int SpawnX2 = cos(-pitch) * range2;
			int SpawnX3 = cos(-pitch) * range3;
			int SpawnX4 = cos(-pitch) * wRange;
			int SpawnXA = cos(-pitch) * wRange2;
			int SpawnY = 0;
			int SpawnZ1 = wheight + (sin(-pitch) * range1);
			int SpawnZ2 = wheight + (sin(-pitch) * range2);
			int SpawnZ3 = wheight + (sin(-pitch) * range3);
			int SpawnZ4 = wheight + (sin(-pitch) * wRange);
			int SpawnZA = wheight + (sin(-pitch) * wRange2);
			int SXVel = cos(-pitch) * wSpeed;
			int SYVel = 0;
			int SZVel = sin(-pitch) * wSpeed;

			if (kickingweapon)
			{
				reticleactorname = "KickPuff-Silent";
				int kRange = A_GetMeleeRange(4);
				int SpawnKickX = cos(-pitch) * kRange;
				int SpawnKickZ = wheight + (sin(-pitch) * kRange);
				//Console.Printf("Kicking Weapon: %d", kRange);

				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora")
			{
				reticleactorname = "PunchPuff-Silent";

				int pRange = A_GetMeleeRange(0);
				int puRange = A_GetMeleeRange(1);

				//Console.Printf("Punching Weapon: %d", pRange);
				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
				
				//Console.Printf("Punching Weapon [Alt]: %d", puRange);
				reticleactorname = "AltPunchPuff-Silent";

				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora")
			{
				reticleactorname = "PunchPuff-Silent";
				int pRange = A_GetMeleeRange(2);
				int puRange = A_GetMeleeRange(3);

				//Console.Printf("Punching Weapon: %d", pRange);
				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
				
				reticleactorname = "AltPunchPuff-Silent";
				//Console.Printf("Punching Weapon [Alt]: %d", puRange);
				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "PoisonNeedle")
			{
				reticleactorname = "PoisonNeedlePuff-Silent";
				int cRange = A_GetMeleeRange(7);
				//Console.Printf("Chainsaw Weapon: %d", cRange);
				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
			{
				reticleactorname = "ChainsawPuff-Silent";
				int cRange = A_GetMeleeRange(5);
				if (weapon is "DoubleBladedChainsaw") { cRange = A_GetMeleeRange(6); reticleactorname = "ChainsawPuff2-Silent"; }
				//Console.Printf("Chainsaw Weapon: %d", cRange);
				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "SceptreOfEmpyrea")
			{
				reticleactorname = "SceptrePuffReticle2";

				//Console.Printf("Sceptre: %d", wRange);
				if (CountInv("SpreaderAura2"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1"))
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);

					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SetAngle(angle-90);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (CallACS("OtherVarCheckDECORATE",11) >= 13)
					{
						A_SetAngle(angle+22.5); 
						A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
						if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuffReticle",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					}
					if (CallACS("OtherVarCheckDECORATE",11) >= 13) A_SetAngle(angle-22.5);
					A_SetAngle(angle-67.5);
				}
			}
		}
		
		if (dvds_dashdoesdmg)
		{
			double DashDmg;
			double DashRad;
			double DashFullRad;
			int PlayerLevel = CallACS("StatCheck",0);
			int PlayerAGL = CallACS("MiscVarCheckDECORATE",31);
			int PlayerSTR = CallACS("MiscVarCheckDECORATE",35);
			int CharacterClass = CallACS("CheckCharacterClass");
			int timermod = randompick(3,3,3,3,3,4,4,4);
			if (CountInv("HWShieldBlockHold")) timermod = randompick(1,1,1,2,2,2,2,2);
			int HellWarriorShieldLevel = CallACS("MiscVarCheckDECORATE",300);

			int timer = level.time % timermod;
			if (CountInv("PlayerDashing"))
			{
				if (timer == 0)
				{
					if (!bFORCERADIUSDMG) bFORCERADIUSDMG = 1;
					if (!bFORCEZERORADIUSDMG) bFORCEZERORADIUSDMG = 1;
					
					DashDmg = (random(2,5) + (PlayerAGL * 0.25) + (PlayerSTR * 0.0625) + (PlayerLevel * 0.125));
					DashDmg *= (1.0 + (StamUpPerkLevel * 0.1) + (StamUpEXPerkLevel * 0.25));
					DashDmg *= (1.0 + (MartialArtsMastery * 0.2) + (MartialArtsMasteryEX * 0.5));
					
					DashRad = (radius * 1.5) + frandom(-2.25,2.25);
					DashRad *= (1.0 + (StamUpPerkLevel * 0.1) + (StamUpEXPerkLevel * 0.25));
					DashRad *= (1.0 + (MartialArtsMastery * 0.2) + (MartialArtsMasteryEX * 0.5));
					
					if (CharacterClass == 2 && CountInv("SafeTeaShoes"))
					{
						DashDmg *= 2.5;
						DashRad *= 1.25;
					}
					if (CountInv("AetheriusPowerStrength")) 
					{
						DashDmg *= 2.25;
						DashRad *= 1.125; 
					}
					if (CountInv("HWShieldBlockHold")) 
					{
						DashDmg *= (2.5 + (MartialArtsMastery * 0.375) + (MartialArtsMasteryEX * 0.9375)) * (1.0 + (HellWarriorShieldLevel * 0.10));
						DashRad *= (1.25 + (MartialArtsMastery * 0.01875) + (MartialArtsMasteryEX * 0.09375) * (1.0 + (HellWarriorShieldLevel * 0.02)));
					}
					if (CountInv("FistPlayerBlockHold")) 
					{
						DashDmg *= (1.5 + (MartialArtsMastery * 0.08) + (MartialArtsMasteryEX * 0.2));
						DashRad *= (1.1 + (MartialArtsMastery * 0.016) + (MartialArtsMasteryEX * 0.04)); 
					}
					
					DashFullRad = (DashRad * frandompick(0.625,0.75,0.875));
					if (CallACS("MenuVarCheckDECORATE",0) == 0) A_Explode(DashDmg,DashRad,XF_NOTMISSILE,0,DashFullRad,0,0,"","Dashing");
				}
				else
				{
					if (bFORCERADIUSDMG) bFORCERADIUSDMG = 0;
					if (bFORCEZERORADIUSDMG) bFORCEZERORADIUSDMG = 0;
				}
				if (dvdsdebug_showdashinformation) Console.Printf("\cxDashDmg: %4f, DashRad: %4f [DashFullRad: %4f] (time: %d / %d)\c-", DashDmg, DashRad, DashFullRad, timer, timermod);
			}
			else
			{
				if (bFORCERADIUSDMG) bFORCERADIUSDMG = 0;
				if (bFORCEZERORADIUSDMG) bFORCEZERORADIUSDMG = 0;
			}
		}
		else
		{
			if (bFORCERADIUSDMG) bFORCERADIUSDMG = 0;
			if (bFORCEZERORADIUSDMG) bFORCEZERORADIUSDMG = 0;
		}
		
		//*******************************************************
		//*Inventory Items / Weapons / Armor Check [death-exits]*
		//*******************************************************
		int WeaponBits = 0;
		int WeaponBits2 = 0;
		int WeaponBits3 = 0;
		int ArmorBits = 0;
		int ArmorBits2 = 0;
		int ArmorBits3 = 0;
		if (CallACS("MiscVarCheckDECORATE",149) != 1)
		{
			// Inventory Items
			if (dvds_pistolrestart_allkeepbackpacks) CallACS("MiscVarSetDECORATE",213,CallACS("MiscVarCheckDECORATE",80)); // Backpacks
			if (dvds_pistolrestart_allkeepinventoryitems)
			{
				CallACS("MiscVarSetDECORATE",214,CountInv("MedicinalHerb"));
				CallACS("MiscVarSetDECORATE",215,CountInv("StrongMedicine"));
				CallACS("MiscVarSetDECORATE",216,CountInv("SpecialMedicine"));
				CallACS("MiscVarSetDECORATE",287,CountInv("MagicWater"));
				CallACS("MiscVarSetDECORATE",288,CountInv("SageElixir"));
				CallACS("MiscVarSetDECORATE",289,CountInv("ElfinElixir"));
				CallACS("MiscVarSetDECORATE",217,CountInv("YggdrasilDew"));
				CallACS("MiscVarSetDECORATE",258,CountInv("MiraclePotion"));
				CallACS("MiscVarSetDECORATE",401,CountInv("RockBombShard"));
				CallACS("MiscVarSetDECORATE",218,CountInv("PaxaPunch"));
				CallACS("MiscVarSetDECORATE",221,CountInv("MercuryBandana"));
				CallACS("MiscVarSetDECORATE",290,CountInv("MonsterMunchies"));
				CallACS("MiscVarSetDECORATE",219,CountInv("LesserVimstone"));
				CallACS("MiscVarSetDECORATE",220,CountInv("GreaterVimstone"));
			}


			// Weapons
			if (CharacterClass == 2) // Flora
			{
				// Slot 1
				if (CountInv("FistFlora")) WeaponBits += 1;
				if (CountInv("PoisonNeedle")) WeaponBits += 262144;
				if (dvds_pistolrestart_florakeeppoisonneedle > 1 && CountInv("PoisonNeedleAmmo") > 0) CallACS("MiscVarSetDECORATE",11,CountInv("PoisonNeedleAmmo"));
				if (CountInv("SceptreOfEmpyrea")) WeaponBits += 2;
				// Slot 3
				if (CountInv("DiarisLongBow")) WeaponBits += 4;
				CallACS("MiscVarSetDECORATE",156,CountInv("DiarisArrow"));
				// Slot 4
				if (CountInv("ImpSoul")) WeaponBits += 8;
				if (CountInv("DarkImpSoul")) WeaponBits += 16;
				if (CountInv("CacodemonSoul")) WeaponBits += 32;
				if (CountInv("CacolanternSoul")) WeaponBits += 64;
				if (CountInv("AbaddonSoul")) WeaponBits += 128;
				// Slot 5
				if (CountInv("KnightSoul")) WeaponBits += 256;
				if (CountInv("BaronSoul")) WeaponBits += 512;
				if (CountInv("BelphegorSoul")) WeaponBits += 1024;
				if (CountInv("BruiserSoul")) WeaponBits += 2048;
				if (CountInv("ArchonSoul")) WeaponBits += 4096;
				if (CountInv("PyroDemonSoul")) WeaponBits += 8192;
				// Slot 6
				if (CountInv("IncarnateSoul")) WeaponBits += 16384;
				if (CountInv("ArchvileSoul")) WeaponBits += 32768;
				if (CountInv("DiabloistSoul")) WeaponBits += 65536;
				if (CountInv("BalrogSoul")) WeaponBits += 131072;
				// Slot 7
				if (CountInv("HElementalSoul")) WeaponBits += 262144;
				if (CountInv("HOverlordSoul")) WeaponBits += 524288;

				// Heretic Slot 2
				nm = "GoldWandNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 1;
				nm = "DualGoldWandNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 2;

				// Heretic Slot 3
				nm = "CrossbowNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 4;
				nm = "DualCrossbowNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 8;
				nm = "SuperCrossbowNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 16;
				nm = "DualSuperCrossbowNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 32;

				// Heretic Slot 4
				nm = "DragonClawNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 64;
				nm = "DualDragonClawNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 128;

				// Heretic Slot 5
				nm = "HellStaffNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 256;
				nm = "DualHellStaffNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 512;

				// Heretic Slot 6
				nm = "PhoenixRodNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 1024;
				nm = "DualPhoenixRodNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 2048;

				// Heretic Slot 7
				nm = "FiremaceNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 4096;
				nm = "DualFiremaceNew"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 8192;

				// Heretic Slot 8
				nm = "DSparilStaff"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 16384;
				nm = "DualDSparilStaff"; APPackCheck = nm; if (CountInv(APPackCheck)) WeaponBits2 += 32768;

				// Ammo
				CallACS("MiscVarSetDECORATE",252,CountInv("GoldWandAmmo"));
				CallACS("MiscVarSetDECORATE",253,CountInv("CrossbowAmmo"));
				CallACS("MiscVarSetDECORATE",254,CountInv("BlasterAmmo"));
				CallACS("MiscVarSetDECORATE",255,CountInv("SkullRodAmmo"));
				CallACS("MiscVarSetDECORATE",256,CountInv("PhoenixRodAmmo"));
				CallACS("MiscVarSetDECORATE",257,CountInv("MaceAmmo"));
			}
			else
			if (CharacterClass == 8) // Ailish
			{
			}
			else
			if (CharacterClass == 9) // Ailish
			{
			}
			else // Marines
			{
				// Slot 1
				if (CharacterClass == 0 && CountInv("FistDeggaris")) WeaponBits += 1;
				if (CharacterClass == 1 && CountInv("FistIllucia")) WeaponBits += 1;
				if (CountInv("Chainsaw2")) WeaponBits += 2;
				if (CountInv("DoubleBladedChainsaw")) WeaponBits += 4;
				// Slot 2
				if (CountInv("Pistol2")) WeaponBits += 8;
				if (CountInv("DualPistols")) WeaponBits += 16;
				// Slot 3
				if (CountInv("Shotgun2")) WeaponBits += 32;
				if (CountInv("SuperShotgun2")) WeaponBits += 64;
				// Slot 4
				if (CountInv("Chaingun2")) WeaponBits += 128;
				if (CountInv("Minigun")) WeaponBits += 256;
				// Slot 5
				if (CountInv("RocketLauncher2")) WeaponBits += 512;
				// Slot 6
				if (CountInv("PlasmaRifle2")) WeaponBits += 1024;
				if (CountInv("Railgun2")) WeaponBits += 2048;
				if (CountInv("Repeater2")) WeaponBits += 4096;
				if (CountInv("KaraSawa2")) WeaponBits += 8192;
				// Slot 7
				if (CountInv("BFG90002")) WeaponBits += 16384;
				
				// Ammo
				CallACS("MiscVarSetDECORATE",152,CountInv("Clip"));
				CallACS("MiscVarSetDECORATE",153,CountInv("Shell"));
				CallACS("MiscVarSetDECORATE",154,CountInv("RocketAmmo"));
				CallACS("MiscVarSetDECORATE",155,CountInv("Cell"));
			}
			CallACS("MiscVarSetDECORATE",151,WeaponBits);
			CallACS("MiscVarSetDECORATE",264,WeaponBits2);
			CallACS("MiscVarSetDECORATE",266,WeaponBits3);


			// Armor
			if (CharacterClass == 2) // Flora
			{
				if (CountInv("SafeTeaShoes")) ArmorBits += 1; // Item 1
				if (CountInv("PearlyCorset")) ArmorBits += 2; // Item 2
				if (CountInv("WaterFlyingDress")) ArmorBits += 4; // Item 3
				if (CountInv("EvenstarNecklace")) ArmorBits += 8; // Item 4
				if (CountInv("CloakofEvasion")) ArmorBits += 16; // Item 5
				if (CountInv("AnubisCufflinks")) ArmorBits += 32; // Item 6
				if (CountInv("KissaBra")) ArmorBits += 64; // Item 7
				if (CountInv("DivineShield")) ArmorBits += 128; // Item 8
				if (CountInv("BalrogRing")) ArmorBits += 256; // Item 9
				if (CountInv("DoveRibbon")) ArmorBits += 512; // Item 10
				if (CountInv("FalconKnifeEarrings")) ArmorBits += 1024; // Item 11
				if (CountInv("RuinousShield")) ArmorBits += 2048;
			}
			else
			if (CharacterClass == 8) // Ailish
			{
			}
			else
			if (CharacterClass == 9) // Petra
			{
			}
			else // Marines
			{
			}
			if (CountInv("SauronHelmet")) ArmorBits += 4096;
			if (CountInv("SauronGauntlets")) ArmorBits += 8192;
			if (CountInv("SauronGauntletsIllucia")) ArmorBits += 16384;
			if (CountInv("SauronGauntletsFlora")) ArmorBits += 32768;
			nm = "SauronGauntletsAilish"; APPackCheck = nm; if (CountInv(APPackCheck)) ArmorBits += 65536;
			nm = "SauronGauntletsPetra"; APPackCheck = nm; if (CountInv(APPackCheck)) ArmorBits += 131072;
			if (CountInv("TheOneRing")) ArmorBits += 262144;

			CallACS("MiscVarSetDECORATE",150,ArmorBits);
			CallACS("MiscVarSetDECORATE",263,ArmorBits2);
			CallACS("MiscVarSetDECORATE",265,ArmorBits3);
		}
					//****************************************************
		else  //
					//****************************************************
		{
			// Inventory Items
			if (dvds_pistolrestart_allkeepinventoryitems)
			{
				A_SetInventory("GreaterVimstone",1); A_SetInventory("GreaterVimstone",0); A_SetInventory("GreaterVimstone",CallACS("MiscVarCheckDECORATE",220));
				A_SetInventory("LesserVimstone",1); A_SetInventory("LesserVimstone",0); A_SetInventory("LesserVimstone",CallACS("MiscVarCheckDECORATE",219));
				A_SetInventory("MonsterMunchies",1); A_SetInventory("MonsterMunchies",0); A_SetInventory("MonsterMunchies",CallACS("MiscVarCheckDECORATE",290));
				A_SetInventory("MercuryBandana",1); A_SetInventory("MercuryBandana",0); A_SetInventory("MercuryBandana",CallACS("MiscVarCheckDECORATE",221));
				A_SetInventory("PaxaPunch",1); A_SetInventory("PaxaPunch",0); A_SetInventory("PaxaPunch",CallACS("MiscVarCheckDECORATE",218));
				A_SetInventory("RockBombShard",1); A_SetInventory("RockBombShard",0); A_SetInventory("RockBombShard",CallACS("MiscVarCheckDECORATE",401));
				A_SetInventory("MiraclePotion",1); A_SetInventory("MiraclePotion",0); A_SetInventory("MiraclePotion",CallACS("MiscVarCheckDECORATE",258));
				A_SetInventory("YggdrasilDew",1); A_SetInventory("YggdrasilDew",0); A_SetInventory("YggdrasilDew",CallACS("MiscVarCheckDECORATE",217));
				A_SetInventory("ElfinElixir",1); A_SetInventory("ElfinElixir",0); A_SetInventory("ElfinElixir",CallACS("MiscVarCheckDECORATE",289));
				A_SetInventory("SageElixir",1); A_SetInventory("SageElixir",0); A_SetInventory("SageElixir",CallACS("MiscVarCheckDECORATE",288));
				A_SetInventory("MagicWater",1); A_SetInventory("MagicWater",0); A_SetInventory("MagicWater",CallACS("MiscVarCheckDECORATE",287));
				A_SetInventory("SpecialMedicine",1); A_SetInventory("SpecialMedicine",0); A_SetInventory("SpecialMedicine",CallACS("MiscVarCheckDECORATE",216));
				A_SetInventory("StrongMedicine",1); A_SetInventory("StrongMedicine",0); A_SetInventory("StrongMedicine",CallACS("MiscVarCheckDECORATE",215));
				A_SetInventory("MedicinalHerb",1); A_SetInventory("MedicinalHerb",0); A_SetInventory("MedicinalHerb",CallACS("MiscVarCheckDECORATE",214));
			}
			if (dvds_pistolrestart_allkeepbackpacks) CallACS("MiscVarSetDECORATE",80,CallACS("MiscVarCheckDECORATE",213)); // Backpacks
			
			
			// Weapons
			WeaponBits = CallACS("MiscVarCheckDECORATE",151);
			WeaponBits2 = CallACS("MiscVarCheckDECORATE",264);
			WeaponBits3 = CallACS("MiscVarCheckDECORATE",266);
			//Console.Printf("WeaponBits: %d", WeaponBits);
			//Console.Printf("WeaponBits2: %d", WeaponBits2);
			//Console.Printf("WeaponBits3: %d", WeaponBits3);
			if (ClassCheck >= 6)
			{
				if (CharacterClass == 2) // Flora
				{
					if (WeaponBits & 1) A_GiveInventory("FistFlora",1);
					if (dvds_pistolrestart_florakeepsceptre && WeaponBits & 2) A_GiveInventory("SceptreOfEmpyrea",1);
					if (dvds_pistolrestart_florakeeppoisonneedle)
					{
						if (WeaponBits & 262144) A_GiveInventory("PoisonNeedle",1);
						if (dvds_pistolrestart_florakeeppoisonneedle > 1) A_GiveInventory("PoisonNeedleAmmo",CallACS("MiscVarCheckDECORATE",11));
					}
					if (dvds_pistolrestart_florakeepdiarisbow)
					{
						// Slot 3
						if (WeaponBits & 4) A_GiveInventory("DiarisLongBow",1);
						A_SetInventory("DiarisArrow",CallACS("MiscVarCheckDECORATE",156));
					}
					if (dvds_pistolrestart_florakeephellcore)
					{
						// Slot 4
						if (WeaponBits & 8) A_GiveInventory("ImpSoul",1);
						if (WeaponBits & 16) A_GiveInventory("DarkImpSoul",1);
						if (WeaponBits & 32) A_GiveInventory("CacodemonSoul",1);
						if (WeaponBits & 64) A_GiveInventory("CacolanternSoul",1);
						if (WeaponBits & 128) A_GiveInventory("AbaddonSoul",1);
						// Slot 5
						if (WeaponBits & 256) A_GiveInventory("KnightSoul",1);
						if (WeaponBits & 512) A_GiveInventory("BaronSoul",1);
						if (WeaponBits & 1024) A_GiveInventory("BelphegorSoul",1);
						if (WeaponBits & 2048) A_GiveInventory("BruiserSoul",1);
						if (WeaponBits & 4096) A_GiveInventory("ArchonSoul",1);
						if (WeaponBits & 8192) A_GiveInventory("PyroDemonSoul",1);
						// Slot 6
						if (WeaponBits & 16384) A_GiveInventory("IncarnateSoul",1);
						if (WeaponBits & 32768) A_GiveInventory("ArchvileSoul",1);
						if (WeaponBits & 65536) A_GiveInventory("DiabloistSoul",1);
						if (WeaponBits & 131072) A_GiveInventory("BalrogSoul",1);
						if (WeaponBits & 262144) A_GiveInventory("HElementalSoul",1);
						if (WeaponBits & 524288) A_GiveInventory("HOverlordSoul",1);
					}
					if (dvds_pistolrestart_floraheretickeepweapons)
					{
						// Heretic Slot 2
						nm = "GoldWandNew"; APPackCheck = nm; if (WeaponBits2 & 1) A_GiveInventory(APPackCheck,1);
						nm = "DualGoldWandNew"; APPackCheck = nm; if (WeaponBits2 & 2) A_GiveInventory(APPackCheck,1);
		
						// Heretic Slot 3
						nm = "CrossbowNew"; APPackCheck = nm; if (WeaponBits2 & 4) A_GiveInventory(APPackCheck,1);
						nm = "DualCrossbowNew"; APPackCheck = nm; if (WeaponBits2 & 8) A_GiveInventory(APPackCheck,1);
						nm = "SuperCrossbowNew"; APPackCheck = nm; if (WeaponBits2 & 16) A_GiveInventory(APPackCheck,1);
						nm = "DualSuperCrossbowNew"; APPackCheck = nm; if (WeaponBits2 & 32) A_GiveInventory(APPackCheck,1);
		
						// Heretic Slot 4
						nm = "DragonClawNew"; APPackCheck = nm; if (WeaponBits2 & 64) A_GiveInventory(APPackCheck,1);
						nm = "DualDragonClawNew"; APPackCheck = nm; if (WeaponBits2 & 128) A_GiveInventory(APPackCheck,1);
		
						// Heretic Slot 5
						nm = "HellStaffNew"; APPackCheck = nm; if (WeaponBits2 & 256) A_GiveInventory(APPackCheck,1);
						nm = "DualHellStaffNew"; APPackCheck = nm; if (WeaponBits2 & 512) A_GiveInventory(APPackCheck,1);
		
						// Heretic Slot 6
						nm = "PhoenixRodNew"; APPackCheck = nm; if (WeaponBits2 & 1024) A_GiveInventory(APPackCheck,1);
						nm = "DualPhoenixRodNew"; APPackCheck = nm; if (WeaponBits2 & 2048) A_GiveInventory(APPackCheck,1);
		
						// Heretic Slot 7
						nm = "FiremaceNew"; APPackCheck = nm; if (WeaponBits2 & 4096) A_GiveInventory(APPackCheck,1);
						nm = "DualFiremaceNew"; APPackCheck = nm; if (WeaponBits2 & 8192) A_GiveInventory(APPackCheck,1);
		
						// Heretic Slot 8
						nm = "DSparilStaff"; APPackCheck = nm; if (WeaponBits2 & 16384) A_GiveInventory(APPackCheck,1);
						nm = "DualDSparilStaff"; APPackCheck = nm; if (WeaponBits2 & 32768) A_GiveInventory(APPackCheck,1);
					}

					// Ammo
					if (dvds_pistolrestart_floraheretickeepammo)
					{
						A_SetInventory("GoldWandAmmo",CallACS("MiscVarCheckDECORATE",252));
						A_SetInventory("CrossbowAmmo",CallACS("MiscVarCheckDECORATE",253));
						A_SetInventory("BlasterAmmo",CallACS("MiscVarCheckDECORATE",254));
						A_SetInventory("SkullRodAmmo",CallACS("MiscVarCheckDECORATE",255));
						A_SetInventory("PhoenixRodAmmo",CallACS("MiscVarCheckDECORATE",256));
						A_SetInventory("MaceAmmo",CallACS("MiscVarCheckDECORATE",257));
					}
				}
				else
				if (CharacterClass == 8) // Ailish
				{
				}
				else
				if (CharacterClass == 9) // Petra
				{
				}
				else // Marines
				{
					if (WeaponBits & 1 && CharacterClass == 0) A_GiveInventory("FistDeggaris",1);
					if (WeaponBits & 1 && CharacterClass == 1) A_GiveInventory("FistIllucia",1);
					if (dvds_pistolrestart_marineskeepweapons)
					{
						// Slot 1
						if (WeaponBits & 2) A_GiveInventory("Chainsaw2",1);
						if (WeaponBits & 4) A_GiveInventory("DoubleBladedChainsaw",1);
						// Slot 2
						if (WeaponBits & 8) A_GiveInventory("Pistol2",1);
						if (WeaponBits & 16) A_GiveInventory("DualPistols",1);
						// Slot 3
						if (WeaponBits & 32) A_GiveInventory("Shotgun2",1);
						if (WeaponBits & 64) A_GiveInventory("SuperShotgun2",1);
						// Slot 4
						if (WeaponBits & 128) A_GiveInventory("Chaingun2",1);
						if (WeaponBits & 256) A_GiveInventory("Minigun",1);
						// Slot 5
						if (WeaponBits & 512) A_GiveInventory("RocketLauncher2",1);
						// Slot 6
						if (WeaponBits & 1024) A_GiveInventory("PlasmaRifle2",1);
						if (WeaponBits & 2048) A_GiveInventory("Railgun2",1);
						if (WeaponBits & 4096) A_GiveInventory("Repeater2",1);
						if (WeaponBits & 8192) A_GiveInventory("KaraSawa2",1);
						// Slot 7
						if (WeaponBits & 16384) A_GiveInventory("BFG90002",1);
						
						// Ammo
						if (dvds_pistolrestart_marineskeepammo)
						{
							A_SetInventory("Clip",CallACS("MiscVarCheckDECORATE",152));
							A_SetInventory("Shell",CallACS("MiscVarCheckDECORATE",153));
							A_SetInventory("RocketAmmo",CallACS("MiscVarCheckDECORATE",154));
							A_SetInventory("Cell",CallACS("MiscVarCheckDECORATE",155));
						}
					}
				}
			}
			
			ArmorBits = CallACS("MiscVarCheckDECORATE",150);
			ArmorBits2 = CallACS("MiscVarCheckDECORATE",263);
			ArmorBits3 = CallACS("MiscVarCheckDECORATE",265);
			//Console.Printf("ArmorBits: %d", ArmorBits);
			//Console.Printf("ArmorBits2: %d", ArmorBits2);
			//Console.Printf("ArmorBits3: %d", ArmorBits3);
			// Armor
			if (CharacterClass == 2) // Flora
			{
				if (dvds_pistolrestart_florakeeparmor)
				{
					if (ArmorBits & 1) { A_GiveInventory("SafeTeaShoes",1); }
					if (ArmorBits & 2) { A_GiveInventory("PearlyCorset",1); }
					if (ArmorBits & 4) { A_GiveInventory("WaterFlyingDress",1); }
					if (ArmorBits & 8) { A_GiveInventory("EvenstarNecklace",1); }
					if (ArmorBits & 16) { A_GiveInventory("CloakofEvasion",1); }
					if (ArmorBits & 32) { A_GiveInventory("AnubisCufflinks",1); }
					if (ArmorBits & 64) { A_GiveInventory("KissaBra",1); }
					if (ArmorBits & 128) { A_GiveInventory("DivineShield",1); }
					if (ArmorBits & 256) { A_GiveInventory("BalrogRing",1); }
					if (ArmorBits & 512) { A_GiveInventory("DoveRibbon",1); }
					if (ArmorBits & 1024) { A_GiveInventory("FalconKnifeEarrings",1); }
					if (ArmorBits & 2048) { A_GiveInventory("RuinousShield",1); }
				}
			}
			else
			if (CharacterClass == 8) // Ailish
			{
			}
			else
			if (CharacterClass == 9) // Petra
			{
			}
			else // Marines
			{
			}
			if (dvds_pistolrestart_allkeepsauronequip)
			{
				if (ArmorBits & 4096) { A_GiveInventory("SauronHelmet",1); }
				if (ArmorBits & 8192) { A_GiveInventory("SauronGauntlets",1); }
				if (ArmorBits & 16384) { A_GiveInventory("SauronGauntletsIllucia",1); }
				if (ArmorBits & 32768) { A_GiveInventory("SauronGauntletsFlora",1); }
				nm = "SauronGauntletsAilish"; APPackCheck = nm; if (ArmorBits & 65536) { A_GiveInventory(APPackCheck,1); }
				nm = "SauronGauntletsPetra"; APPackCheck = nm; if (ArmorBits & 131072) { A_GiveInventory(APPackCheck,1); }
				if (ArmorBits & 262144) { A_GiveInventory("TheOneRing",1); }
			}
			
		}
		
		//**************************************************************************************************************
		//*Flicker the Player when they survive a mortal hit (mercy invincibility) and perform actions related to perks*
		//**************************************************************************************************************
		// [194] Mercy Invincibility "Flag"
		// [195] Mercy Invincibility Timer
		// [196] Mercy Invincibility 'Modulus/Remainder'
		// Death Rage Countdown Checks
		DeathRageMaxTimer;
		DeathRageTimer;
		double DRTimerRatio = 1.0;
		int DeathRageDebug = dvdsdebug_showplayerhealthsync;
		if (DeathRageTimer > 0)
		{
			DRTimerRatio = (DeathRageTimer / (DeathRageMaxTimer * 0.2));
			DRTimerRatio = clamp(DRTimerRatio, DRTimerRatio, 1.0);
			if (DeathRageDebug) Console.Printf("DRTimerRatio: %.8f (%d / %d)", DRTimerRatio, DeathRageTimer, DeathRageMaxTimer);
			A_SetBlend("d0 00 20", (0.525*DRTimerRatio), random(17,18));
			DeathRageTimer -= 1; // Death Rage Timer
		}
		if (DeathRageTimerCooldown > 0) 
		{
			DeathRageTimerCooldown -= 1; // Death Rage "Cooldown" Timer
			if (DeathRageDebug) Console.Printf("DeathRageTimerCooldown: %d tics", DeathRageTimerCooldown);
		}

		if (dvdsdebug_showplayerhealthsync) Console.Printf("\cxplayer.mo.health\c-: %d -- (\cyplayer.health\c-: %d) -- (\cyMiscVar25001\c-: %d) -- (\cwplayer.mo.Stamina\c-: %d)", player.mo.health, player.health, CallACS("MiscVarCheckDECORATE",25001), player.mo.stamina);
		int TempStartValue, TempEndValue, PerkFactor;
		int MaxHealthTrue = CallACS("StatCheck",1);
		truehealthmax = CallACS("StatCheck",1);
		int CurrentMana = CallACS("StatCheck",14);
		int MaxMana = CallACS("StatCheck",2);
		if (self.health == 1 && (player.cheats & CF_BUDDHA || player.cheats & CF_BUDDHA2) && CallACS("MiscVarCheckDECORATE",241) > 1)
		{
			CallACS("MiscVarSetDECORATE",194,1); // Turns on Mercy Invincibility Flag

			int mortalsurvivetimer = 1210; // 1.5 seconds [51.5 tics * 20]
			double mortalsurvivemulti = 1.0 + ((LifeUpPerkLvl * 0.01) + (LifeUpExPerkLvl * 0.025)) + ((StamUpPerkLevel * 0.01) + (StamUpEXPerkLevel * 0.025)) + ((ClearedOfMindPerkLevel * 0.02) + (ClearedOfMindEXPerkLevel * 0.05));
			double mortalsurvivemulti2 = 1.0 - ((LifeUpPerkLvl * 0.01) - (LifeUpExPerkLvl * 0.025)) - ((StamUpPerkLevel * 0.01) - (StamUpEXPerkLevel * 0.025)) - ((ClearedOfMindPerkLevel * 0.02) - (ClearedOfMindEXPerkLevel * 0.05));
			mortalsurvivetimer *= mortalsurvivemulti;
			CallACS("MiscVarSetDECORATE",195,mortalsurvivetimer);

			player.health = player.mo.health = 1;

			//*************************************************
			//*Check "Mortal Hit Survivability Psyche Up" Perk*
			//*************************************************
			if (MortalHitTensionPerkLvl > 0)
			{
				if (CharacterClass == 2) PerkFactor = 7500; else PerkFactor = 4000;
				if (random(1,10000) <= PerkFactor)
				{
					if (MortalHitTensionPerkLvl == 1 && TensionLevel <= 1) A_SetTensionLevel(1);
					if (MortalHitTensionPerkLvl == 2 && TensionLevel <= 2) A_SetTensionLevel(2);
					if (MortalHitTensionPerkLvl == 3 && TensionLevel <= 3) A_SetTensionLevel(3);
					if (MortalHitTensionPerkLvl == 4 && TensionLevel <= 4) A_SetTensionLevel(4);
					if (MortalHitTensionPerkLvl == 5 && TensionLevel <= 5) A_SetTensionLevel(5);
					if (MortalHitTensionPerkLvl == 6 && TensionLevel <= 6) A_SetTensionLevel(6);
					if (MortalHitTensionPerkLvl == 7 && TensionLevel <= 7) A_SetTensionLevel(7);
				}
			}
			
			//**********************************************************
			//*Check "Mortal Hit Survivability Mana Recovery [EX]" Perk*
			//**********************************************************
			if (MortalHitManaRecPerkLvl > 0)
			{
				PerkFactor = 0;
				if (MortalHitManaRecPerkLvl > 0) PerkFactor += 6666;
				if (MortalHitManaRecExPerkLvl > 0) PerkFactor += 3334;
				if (random(1,10000) <= PerkFactor)
				{
					PerkFactor = 0;
					if (MortalHitManaRecPerkLvl > 0) PerkFactor += 25;
					if (MortalHitManaRecExPerkLvl > 0) PerkFactor += 50;
					TempStartValue = MaxMana * PerkFactor / 100;
					TempEndValue = MaxMana * (100 + PerkFactor) / 100;
					if (CurrentMana < TempEndValue) 
					{
						CurrentMana += TempStartValue;
						CurrentMana = clamp(CurrentMana, CurrentMana, TempEndValue);
						A_SetBlend("c0 00 c0", 0.75, random(17,18));
						CallACS("OtherVarSetDECORATE",2,CurrentMana);
					}
				}
			}
			
			//*******************************************************
			//*Check "Mortal Hit Survivability Blast Wave [EX]" Perk*
			//*******************************************************
			if (MortalHitBlastPerkLvl > 0)
			{
				PerkFactor = 0;
				if (MortalHitBlastPerkLvl > 0) PerkFactor += 5000;
				if (MortalHitBlastEXPerkLvl > 0) PerkFactor += 2500;
				if (random(1,10000) <= PerkFactor)
				{
					A_StartSound("MortalHit/BlastWave");
					A_SetBlend("ff c0 01", 0.75, random(17,18));
					int project_RealZ = (pos.z + 8) + (viewheight * 0.78);
					A_SpawnItemEx("PlayerMortalBlastRadius",0,0,project_RealZ,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION|SXF_SETTRACER);
				}
			}
			
			//****************************************************
			//*Check "Mortal Hit Survivability 'Death Rage'" Perk*
			//****************************************************
			if (DeathRagePerkLvl > 0 && DeathRageTimerCooldown <= 0)
			{
				if (DeathRagePerkLvl == 1) PerkFactor = 1250;
				if (DeathRagePerkLvl == 2) PerkFactor = 2000;
				if (DeathRagePerkLvl == 3) PerkFactor = 2500;
				if (random(1,10000) <= PerkFactor)
				{
					A_StartSound("MortalHit/DeathRage");
					PerkFactor = random(17,18);
					if (DeathRagePerkLvl == 1)
					{
						DeathRageTimer = (15 * 35); // Death Rage Timer
						DeathRageMaxTimer = (15 * 35); // Death Rage Max Timer
						DeathRageTimerCooldown = ((195 * 35) * mortalsurvivemulti2); // Death Rage Cooldown Timer
					}
					if (DeathRagePerkLvl == 2)
					{
						DeathRageTimer = ((22 * 35) + PerkFactor); // Death Rage Timer
						DeathRageMaxTimer = ((22 * 35) + PerkFactor); // Death Rage Max Timer
						DeathRageTimerCooldown = (((172 * 35) + PerkFactor) * mortalsurvivemulti2); // Death Rage Cooldown Timer
					}
					if (DeathRagePerkLvl == 3)
					{
						DeathRageTimer = (30 * 35); // Death Rage Timer
						DeathRageMaxTimer = (30 * 35); // Death Rage Max Timer
						DeathRageTimerCooldown = ((150 * 35) * mortalsurvivemulti2); // Death Rage Cooldown Timer
					}
				}
			}
			
		}
		
		//******************
		//*Check Dash Timer*
		//******************
		int dashtrailinterval = level.time % random(1,4);
		int dashveltimer;
		int dashveltimer2;
		double dashtimermulti = 1.0;
		if (CountInv("SafeTeaShoes")) dashtimermulti += 0.125;
		if (CountInv("CloakofEvasion")) dashtimermulti += 0.0625;
		if (CountInv("DoveRibbon")) dashtimermulti += 0.0625;

		double trueanglecos = abs(cos(angle));
		double trueanglesin = abs(sin(angle));
		if (dvdsdebug_showdashinformation) Console.Printf("[angle] cos: %.8f, sin: %.8f", trueanglecos, trueanglesin);

		int MaxDashTimer = 18;
		if (dvds_allowdashing > 0)
		{
			MaxDashTimer = 18 + (CallACS("MiscVarCheckDECORATE",31) / 32);
			if (dvds_dashdoesdmg)
			{
				if (CountInv("HWShieldBlockHold"))
				{
					MaxDashTimer *= frandompick(1.5,1.5,1.5,1.5,1.5,1.625,1.625,1.75);
				}
			}
			if (dvds_allowdashing > 2) MaxDashTimer *= 0.5;
		}
		MaxDashTimer *= dashtimermulti;
		CallACS("MiscVarSetDECORATE",91,MaxDashTimer);
		dashveltimer = DashTimer % 2;
		dashveltimer2 = DashTimer % 1;

		if (DashTimer > 0) 
		{
			if (DashTimer == CallACS("MiscVarCheckDECORATE",91))
			{
				if (dvds_dashdoesdmg)
				{
					if (CountInv("HWShieldBlockHold"))
					{
						A_StartSound("shielddash1", randompick(180,181), CHANF_OVERLAP, frandom(0.65,0.95), ATTN_NORM, frandom(0.667,1.333));
					}
				}
				if (pos.z - GetZAt() > 0) firsttic = 1; else firsttic = 0;
			}
			if (dashtrailinterval == 0) A_SetInventory("PlayerDashing",1); else A_SetInventory("PlayerDashing",0); 
			bSHOOTABLE = 0;
			bVISIBILITYPULSE = 1;
			bTHRUACTORS = 1;
			if (CallACS("MenuVarCheckDECORATE",0) == 0)
			{
				CallACS("MiscVarSetDECORATE",166,-1,1);
				if (!(pos.z - GetZAt() > 0)) 
				{
					A_SpawnItemEx("DashPuff",0,0,8,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION);
				}

				if (firsttic == 0) // On the Ground when Dashing began
				{
					if (dashveltimer == 0) { vel.x *= 1.0125; vel.y *= 1.0125; }
				}
				else // In the Air when Dashing began
				{
					if ((dvds_allowdashing == 2 || dvds_allowdashing == 4) && dashveltimer2 == 0) { vel.z = 0.0; }
				}
			}
		}
		else
		{
			firsttic = -1;
			A_SetInventory("PlayerDashing",0); 
			bSHOOTABLE = 1;
			bVISIBILITYPULSE = 0;
			bTHRUACTORS = 0;
		}
		
		double newspeedvelsxd = basespeedvelsxd * truespeed;
		double newspeedvelsyd = basespeedvelsyd * truespeed;
		int newspeedvelsx = newspeedvelsxd * 65536;
		int newspeedvelsy = newspeedvelsyd * 65536;
		if (dvdsdebug_showdashinformation) 
		{
			Console.Printf("\cxfirsttic: %d (waterlevel: %d)\c-, \czPosX: %d, PosY: %d, PosZ: %d\c-, \cnGetZAt: %d\c-, VelX: %.8f/\cx%.8f\c- (%d/\cx%d\c-), VelY: %.8f/\cx%.8f\c- (%d/\cx%d\c-), VelZ: %.8f (%d)\c-", firsttic, waterlevel, pos.x, pos.y, pos.z, GetZAt(), vel.x, newspeedvelsxd, (vel.x * 65536), newspeedvelsx, vel.y, newspeedvelsyd, (vel.y * 65536), newspeedvelsy, vel.z, (vel.z * 65536));
			Console.Printf("DashTimer: %d / %d (%d), DashVelTimer: %d / 2, DashVelTimer2: %d / 1", DashTimer, CallACS("MiscVarCheckDECORATE",91), CallACS("MiscVarCheckDECORATE",85), dashveltimer, dashveltimer2);
		}
		else
		{
			if (dvdsdebug_showmoveinformation) Console.Printf("\cz WaterLevel: %d\c-, \cz Angle: %.8f, Pitch: %.8f\c-, \czPosX: %d, PosY: %d, PosZ: %d\c-, VelX: %.8f/\cx%.8f\c- (%d/\cx%d\c-), VelY: %.8f/\cx%.8f\c- (%d/\cx%d\c-), VelZ: %.8f (%d)\c-", waterlevel, (angle % 360), pitch, pos.x, pos.y, pos.z, vel.x, newspeedvelsxd, (vel.x * 65536), newspeedvelsx, vel.y, newspeedvelsyd, (vel.y * 65536), newspeedvelsy, vel.z, (vel.z * 65536));
		}
		
		if (dvdsdebug_shieldactorghosts) Console.Printf("(player) Angle: %.8f, Pitch: %.8f", (angle % 360), pitch);
		
		//if (AimTarget()) Console.Printf("Target Name: %s", AimTarget().GetClassName());
		// Recall
		if (dvdsdebug_recalldisplays && AimTarget()) Console.Printf("Name: %s", AimTarget().GetClassName());
		if (CallACS("MiscVarCheckDECORATE",25029) > 0)
		{
			if (dvdsdebug_recalldisplays) Console.Printf("Recall Attempt");
			AetheriusMonsterZSC recallee;
			recallee = AetheriusMonsterZSC(AimTarget());
			if (recallee)
			{
				if (dvdsdebug_recalldisplays) Console.Printf("Name: %s (TID: %d, FRIENDLY: %d, Charmed: %d)", recallee.GetClassName(), recallee.tid, recallee.bFRIENDLY, recallee.user_charmed);
				int WhistleStamUse = 200;
				if (CountInv("FalconKnifeEarrings") > 0) WhistleStamUse *= 0.75;

				if (((recallee.bFRIENDLY && recallee.tid == 1000) || recallee.user_charmed))
				{
					if (CallACS("MiscVarCheckDECORATE",21) >= WhistleStamUse)
					{
						Vector3 savedpos = (pos.x, pos.y, (pos.z + random(6.0,12.0)));
						recallee.SetOrigin(savedpos,false); //Teleport(savedpos,angle,0); //SetXYZ(savedpos);
						
						A_StartSound("monstersummon", 161, CHANF_DEFAULT);
						A_SpawnItemEx("PlayerWhistle",0.0,0.0,32.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
						Vector3 savedpos2 = (pos.x, pos.y, pos.z+(height*0.25));
						Actor fog = Spawn("TeleportFog", savedpos2, ALLOW_REPLACE); 
						if (fog != null)
						{
							fog.scale.x *= frandom(0.375, 0.625);
							fog.scale.y *= frandom(0.375, 0.625);
							fog.A_SetRenderStyle(frandom(0.375, 0.625),STYLE_Add);
						}
						
						A_PrintBold(String.Format("\cfRecall Successful!"), frandom(0.685,0.8));
						CallACS("MiscVarSetDECORATE",21,WhistleStamUse,2);
						CallACS("MiscVarSetDECORATE",168,24); // Set's cooldown for whistling
					}
					else
					{
						A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
						A_PrintBold(String.Format("\cgRecall Failed: Stamina Needed to Recall Creature!", WhistleStamUse), frandom(0.685,0.8));
					}
				}
				else
				{
					A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgRecall Failed: Not an allied creature!"), frandom(0.685,0.8));
				}
			}
			else
			{
				A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_PrintBold(String.Format("\cgRecall Failed: No creature in line of sight!"), frandom(0.685,0.8));
			}

			CallACS("MiscVarSetDECORATE",25029,0);
		}
		// Recall All
		if (CallACS("MiscVarCheckDECORATE",25030) > 0)
		{
			if (dvdsdebug_recalldisplays) Console.Printf("Recall All Attempt");

			AetheriusMonsterZSC recalleetarg;
			recalleetarg = AetheriusMonsterZSC(AimTarget());

			int WhistleStamUse = 500;
			if (CountInv("FalconKnifeEarrings") > 0) WhistleStamUse *= 0.75;
			if (CallACS("MiscVarCheckDECORATE",21) >= WhistleStamUse)
			{
				int numberrecalled = 0;
				ActorIterator it = Level.CreateActorIterator(1000);
				Actor recallee;
				while (recallee = it.Next())
				{
					if (recallee.bFRIENDLY)
					{
						if (dvdsdebug_recalldisplays) Console.Printf("\cx(Recall All)\c- Name: %s (TID: %d)", recallee.GetClassName(), recallee.tid);
						Vector3 savedpos = (pos.x, pos.y, (pos.z + random(6.0,12.0)));
						recallee.SetOrigin(savedpos,false);
						recallee.angle += frandom(0.0,360.0);
						recallee.vel.x += frandom(-4.0,4.0);
						recallee.vel.y += frandom(-4.0,4.0);
						recallee.vel.z += frandom(4.0,8.0);
						numberrecalled++;
						if (recalleetarg && !recalleetarg.bFRIENDLY) recallee.target = recalleetarg;
						
						AetheriusMonsterZSC recallee2;
						recallee2 = AetheriusMonsterZSC(recallee);
						if (recallee2 && (recallee2.bNOGRAVITY && recallee2.bFLOAT))
						{
							recallee2.user_fastchasetimer = 0;
							recallee2.user_painreacttimer = 0;
						}

					}
				}
				
				if (numberrecalled > 0)
				{
					A_StartSound("monstersummon", 161, CHANF_DEFAULT);
					A_SpawnItemEx("PlayerWhistle",0.0,0.0,32.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					Vector3 savedpos2 = (pos.x, pos.y, pos.z+(height*0.25));
					Actor fog = Spawn("TeleportFog", savedpos2, ALLOW_REPLACE); 
					if (fog != null)
					{
						fog.scale.x *= frandom(0.375, 0.625);
						fog.scale.y *= frandom(0.375, 0.625);
						fog.A_SetRenderStyle(frandom(0.375, 0.625),STYLE_Add);
					}
					
					if (recalleetarg && !recalleetarg.bFRIENDLY) A_PrintBold(String.Format("\cfRecalled all allies to your location and gave them a new target!"), frandom(0.685,0.8));
					else A_PrintBold(String.Format("\cfRecalled all allies to your location!"), frandom(0.685,0.8));
					
					CallACS("MiscVarSetDECORATE",21,WhistleStamUse,2);
					CallACS("MiscVarSetDECORATE",168,24); // Set's cooldown for whistling

				}
				else
				{
					A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
					A_PrintBold(String.Format("\cgRecall Failed: No creatures available to recall!"), frandom(0.685,0.8));
				}
			}
			else
			{
				A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_PrintBold(String.Format("\cgRecall Failed: Stamina Needed to Recall All Creatures!", WhistleStamUse), frandom(0.685,0.8));
			}

			CallACS("MiscVarSetDECORATE",25030,0);
		}
		
		// Summon
		while (CountInv("Summon") > 0)
		{
			DoomSpellSummonMonster summon;
			Vector3 savedpos2 = (pos.x+random(-8.0,8.0), pos.y+random(-8.0,8.0), pos.z+random(0.0,4.0));
			summon = DoomSpellSummonMonster(Spawn("SummonWeakMonster", savedpos2, ALLOW_REPLACE)); 
			if (summon != null && summon.randchoice > 0)
			{
				A_StartSound("monstersummon", 161, CHANF_DEFAULT);
				summon.angle = angle;
				summon.ChangeTID(1000);
				A_PrintBold(String.Format("\cfSummon Successful."), frandom(0.685,0.8));
			}
			else
			{
				A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_PrintBold(String.Format("\cgSummon Failed: No Room to Summon Creature."), frandom(0.685,0.8));
			}
			A_TakeInventory("Summon",1);
		}
		while (CountInv("Summon2") > 0)
		{
			DoomSpellSummonMonster summon;
			Vector3 savedpos2 = (pos.x+random(-8.0,8.0), pos.y+random(-8.0,8.0), pos.z+random(0.0,4.0));
			summon = DoomSpellSummonMonster(Spawn("SummonMonster", savedpos2, ALLOW_REPLACE)); 
			if (summon != null && summon.randchoice > 0)
			{
				A_StartSound("monstersummon", 161, CHANF_DEFAULT);
				summon.angle = angle;
				summon.ChangeTID(1000);
				A_PrintBold(String.Format("\cfSummon Successful."), frandom(0.685,0.8));
			}
			else
			{
				A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_PrintBold(String.Format("\cgSummon Failed: No Room to Summon Creature."), frandom(0.685,0.8));
			}
			A_TakeInventory("Summon2",1);
		}
		while (CountInv("Summon3") > 0)
		{
			DoomSpellSummonMonster summon;
			Vector3 savedpos2 = (pos.x+random(-8.0,8.0), pos.y+random(-8.0,8.0), pos.z+random(0.0,4.0));
			summon = DoomSpellSummonMonster(Spawn("SummonStrongMonster", savedpos2, ALLOW_REPLACE)); 
			if (summon != null && summon.randchoice > 0)
			{
				A_StartSound("monstersummon", 161, CHANF_DEFAULT);
				summon.angle = angle;
				summon.ChangeTID(1000);
				A_PrintBold(String.Format("\cfSummon Successful."), frandom(0.685,0.8));
			}
			else
			{
				A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_PrintBold(String.Format("\cgSummon Failed: No Room to Summon Creature."), frandom(0.685,0.8));
			}
			A_TakeInventory("Summon3",1);
		}
		while (CountInv("Summon4") > 0)
		{
			DoomSpellSummonMonster summon;
			Vector3 savedpos2 = (pos.x+random(-8.0,8.0), pos.y+random(-8.0,8.0), pos.z+random(0.0,4.0));
			summon = DoomSpellSummonMonster(Spawn("SummonArchvile", savedpos2, ALLOW_REPLACE)); 
			if (summon != null && summon.randchoice > 0)
			{
				A_StartSound("monstersummon", 161, CHANF_DEFAULT);
				summon.angle = angle;
				summon.ChangeTID(1000);
				A_PrintBold(String.Format("\cfSummon Successful."), frandom(0.685,0.8));
			}
			else
			{
				A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_PrintBold(String.Format("\cgSummon Failed: No Room to Summon Creature."), frandom(0.685,0.8));
			}
			A_TakeInventory("Summon4",1);
		}
		while (CountInv("Summon5") > 0)
		{
			DoomSpellSummonMonster summon;
			Vector3 savedpos2 = (pos.x+random(-8.0,8.0), pos.y+random(-8.0,8.0), pos.z+random(0.0,4.0));
			summon = DoomSpellSummonMonster(Spawn("SummonCyberdemon", savedpos2, ALLOW_REPLACE)); 
			if (summon != null && summon.randchoice > 0)
			{
				A_StartSound("monstersummon", 161, CHANF_DEFAULT);
				summon.angle = angle;
				summon.ChangeTID(1000);
				A_PrintBold(String.Format("\cfSummon Successful."), frandom(0.685,0.8));
			}
			else
			{
				A_StartSound("inv_fail",84,CHANF_DEFAULT,1.0,ATTN_NORM);
				A_PrintBold(String.Format("\cgSummon Failed: No Room to Summon Creature."), frandom(0.685,0.8));
			}
			A_TakeInventory("Summon5",1);
		}
		
		// Magnetize
		if (CallACS("MiscVarCheckDECORATE",25031) > 0)
		{
/*
			int numberrecalled = 0;
			Actor mo;
			ThinkerIterator Magnetize = ThinkerIterator.Create("HealthBonus2");
			while (mo = Actor(Magnetize.Next())) 
			{ 
				if (mo.bDROPPED)
				{
					Vector3 savedpos = (pos.x, pos.y, (pos.z + random(6.0,12.0)));
					mo.SetOrigin(savedpos,false);
					mo.vel.x += frandom(-2.0,2.0);
					mo.vel.y += frandom(-2.0,2.0);
					mo.vel.z += frandom(2.0,4.0);
				}
				numberrecalled++;
				if (dvdsdebug_recalldisplays) Console.Printf("\cx(Magnetize)\c- (%d) Name: %s (Dropped: %d)", numberrecalled, mo.GetClassName(), mo.bDROPPED);
			}
*/
			CallACS("MiscVarSetDECORATE",25031,0);
		}
		
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		vector3 MenuHoldPos;
		if (UsingInGameMenu != 0)
		{
			MenuHoldPos = (CallACS("MiscVarCheckDECORATE",81), CallACS("MiscVarCheckDECORATE",82), CallACS("MiscVarCheckDECORATE",83));
			SetOrigin(MenuHoldPos,false);
			vel.x = 0;
			vel.y = 0;
			vel.z = 0;
		}
		else
		{
			CallACS("MiscVarSetDECORATE",81,pos.x);
			CallACS("MiscVarSetDECORATE",82,pos.y);
			CallACS("MiscVarSetDECORATE",83,pos.z);
		}
		
		lastvelx = vel.x;
		lastvely = vel.y;
		lastvelz = vel.z;
		super.Tick(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		if (!isvoodoodoll)
		{
			// Non-passive means the one moving into the other is performing the checks.
			if (!passive)
			{
				// Pass through different species of select types.
				if (other.bFRIENDLY == 1)
					return false;
			}
		}
		// We don't really care about others making the check.
		return true;
	}
	
	void A_CheckNeverBleed(int type, int damage, int flags)
	{
		if (type == 0)
		{
			if (neverbleeds == 0)
			{
				if (bNOBLOOD) bNOBLOOD = 0;
				if (bNOBLOODDECALS) bNOBLOODDECALS = 1;
			}
		}
		else
		{
			//Console.Printf("(A_CheckNeverBleed [player], damage: %d)", damage);
			if (flags & !DMG_EXPLOSION)
			{
				if (neverbleeds == 0)
				{
					bNOBLOOD = 1;
					bNOBLOODDECALS = 1;
				}
			}
		}
	}
	
	int A_DamageMobjCheckHellCore(Actor inflictor)
	{
		string infl;
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();

		int type;
		if (
				infl == "UnmakerLaser" ||
				infl == "UnmakerLaserCrisis"
			 ) type = -2;
		if (
				infl == "EvilWarriorShieldBall" ||
				infl == "EvilWarriorShieldBallCrisis"
			 ) type = -1;
		if (
				infl == "DoomImpBall-Soul" ||
				infl == "DoomImpBallCrisis-Soul"
			 ) type = 1;
		if (
				infl == "DarkSeeker-Soul" ||
				infl == "DarkSeekerCrisis-Soul"
			 ) type = 2;
		if (
				infl == "CacodemonBall-Soul" ||
				infl == "CacodemonBallCrisis-Soul"
			 ) type = 3;
		if (
				infl == "CacolanternBall-Soul" ||
				infl == "CacolanternBallCrisis-Soul"
			 ) type = 4;
		if (
				infl == "AbaddonBall-Soul" ||
				infl == "AbaddonBallCrisis-Soul"
			 ) type = 5;
		if (
				infl == "HellKnightBall-Soul" ||
				infl == "HellKnightBallCrisis-Soul"
			 ) type = 6;
		if (
				infl == "BaronOfHellBall-Soul" ||
				infl == "BaronOfHellBallCrisis-Soul"
			 ) type = 7;
		if (
				infl == "BelphegorBall-Soul" ||
				infl == "BelphegorBallCrisis-Soul"
			 ) type = 8;
		if (
				infl == "BruiserBall-Soul" ||
				infl == "BruiserBallCrisis-Soul" ||
				infl == "BruiserBall2-Soul" ||
				infl == "BruiserBall2Crisis-Soul" ||
				infl == "BruiserFireSpawner-Soul" ||
				infl == "BruiserFireSpawnerCrisis-Soul"
			 ) type = 9;
		if (
				infl == "ArchonOfHellBall-Soul" ||
				infl == "ArchonOfHellBallCrisis-Soul" ||
				infl == "ArchonComet-Soul" ||
				infl == "ArchonCometCrisis-Soul"
			 ) type = 10;
		if (
				infl == "FireShot-Soul" ||
				infl == "FireShotCrisis-Soul" ||
				infl == "PyroBall-Soul" ||
				infl == "PyroBallCrisis-Soul" ||
				infl == "PyroBlast-Soul" ||
				infl == "PyroBlastCrisis-Soul" ||
				infl == "RainCometNull-Soul" ||
				infl == "RainCometNullCrisis-Soul" ||
				infl == "EscapeExplosion-Soul" ||
				infl == "EscapeExplosionCrisis-Soul"
			 ) type = 11;
		if (
				infl == "DIPuff-Soul"
			 ) type = 12;
		if (
				infl == "ArchvileFireFast" ||
				infl == "ArchvileFireFastCrisis" ||
				infl == "ArchvileFlame-Soul" ||
				infl == "ArchvileFlameCrisis-Soul"
			 ) type = 13;
		if (
				infl == "DFlare-Soul" ||
				infl == "DFlareCrisis-Soul" ||
				infl == "DTracer-Soul" ||
				infl == "DTracerCrisis-Soul" ||
				infl == "DTracerPuff-Soul" ||
				infl == "DTracerPuffCrisis-Soul" ||
				infl == "DMissile-Soul" ||
				infl == "DMissileCrisis-Soul" ||
				infl == "DMissileCircle-Soul" ||
				infl == "DMissileCircleCrisis-Soul" ||
				infl == "DFire-Soul" ||
				infl == "DFireCrisis-Soul"
			 ) type = 14;
		if (
				infl == "FlyingBalrogShot1-Soul" ||
				infl == "FlyingBalrogShot1Crisis-Soul" ||
				infl == "FlyingBalrogShot2-Soul" ||
				infl == "FlyingBalrogShot2Crisis-Soul"
			 ) type = 15;
		if (
				infl == "HadesElementalBall-Soul" ||
				infl == "HadesElementalBallCrisis-Soul" ||
				infl == "HadesBolt-Soul" ||
				infl == "HadesBoltCrisis-Soul"
			 ) type = 16;
		if (
				infl == "StormStrike1-Soul" ||
				infl == "StormStrike1Crisis-Soul" ||
				infl == "StormShot1-Soul" ||
				infl == "StormShot1Crisis-Soul" ||
				infl == "StormShot2-Soul" ||
				infl == "StormShot2Crisis-Soul" ||
				infl == "StormBolt-Soul" ||
				infl == "StormBoltCrisis-Soul" ||
				infl == "StormBolt2-Soul" ||
				infl == "StormBolt2Crisis-Soul" ||
				infl == "StormLite1-Soul" ||
				infl == "StormLite1Crisis-Soul" ||
				infl == "StormLite2-Soul" ||
				infl == "StormLite2Crisis-Soul" ||
				infl == "HadesOverlordBall-Soul" ||
				infl == "HadesOverlordBallCrisis-Soul" ||
				infl == "OverBall-Soul" ||
				infl == "OverBallCrisis-Soul"
			 ) type = 17;
		return type;
	}

	int A_CheckHellcoreVsAtk(Actor inflictor, Actor source, int damage)
	{
		let weapon = player.ReadyWeapon;
		string infl = inflictor.GetClassName();
		bool reducedmg = false;
		int checkval;

		if ((infl == "DoomImpBall" || infl == "DoomImpBallNew" || 
				 infl == "KDIZDImpBall" || infl == "DoomImpBallCrisis") && weapon is "ImpSoul") { reducedmg = true; checkval = 96; }
		if ((infl == "DarkSeeker" || infl == "DarkSeekerCrisis" || 
				 infl == "DarkFast" || infl == "DarkFastCrisis" || 
				 infl == "DarkNormal" || infl == "DarkNormalCrisis" || 
				 infl == "DarkStrong" || infl == "DarkStrongCrisis" || 
				 infl == "InfernoBall" || infl == "InfernoBallCrisis" || 
				 infl == "NetherLightning" || infl == "NetherLightningCrisis") && weapon is "DarkImpSoul") { reducedmg = true; checkval = 97; }
		if ((infl == "CacodemonBall" || infl == "CacodemonBallNew" || infl == "CacodemonBallCrisis") && weapon is "CacodemonSoul") { reducedmg = true; checkval = 98; }
		if ((infl == "CacolanternBall" || infl == "CacolanternBallCrisis") && weapon is "CacolanternSoul") { reducedmg = true; checkval = 99; }
		if ((infl == "AbaddonBall" || infl == "AbaddonBallCrisis") && weapon is "AbaddonSoul") { reducedmg = true; checkval = 100; }
		if ((infl == "HellKnightBall" || infl == "HellKnightBallCrisis" || infl == "BaronBall" || infl == "BaronBallNew") && weapon is "KnightSoul") { reducedmg = true; checkval = 101; }
		if ((infl == "BaronOfHellBall" || infl == "BaronOfHellBallCrisis" || infl == "BaronBall" || infl == "BaronBallNew") && weapon is "BaronSoul") { reducedmg = true; checkval = 102; }
		if ((infl == "BelphegorBall" || infl == "BelphegorBallCrisis" || infl == "BaronBall" || infl == "BaronBallNew") && weapon is "BelphegorSoul") { reducedmg = true; checkval = 103; }
		if ((infl == "BruiserBall1" || infl == "BruiserBall1Crisis" ||
				 infl == "BruiserBall2" || infl == "BruiserBall2Crisis" ||
				 infl == "BruiserFireSpawner" || infl == "BruiserFireSpawnerCrisis" ||
				 infl == "BruiserFire" || infl == "BruiserFireCrisis") && weapon is "BruiserSoul") { reducedmg = true; checkval = 104; }
		if ((infl == "ArchonOfHellBall" || infl == "ArchonOfHellBallCrisis" ||
				 infl == "ArchonComet" || infl == "ArchonCometCrisis" || infl == "BaronBall" || infl == "BaronBallNew") && weapon is "ArchonSoul") { reducedmg = true; checkval = 105; }
		if ((infl == "PyroBall" || infl == "PyroBallCrisis" ||
				 infl == "FirebombExplosion1" || infl == "FirebombExplosion1Crisis" ||
				 infl == "FirebombExplosion2" || infl == "FirebombExplosion2Crisis" ||
				 infl == "FirebombExplosion3" || infl == "FirebombExplosion3Crisis" ||
				 infl == "PyroBlast" || infl == "PyroBlastCrisis" ||
				 infl == "RainCometNull" || infl == "RainCometNullCrisis" ||
				 infl == "FallingComet" || infl == "FallingCometCrisis" ||
				 infl == "CometDeath") && weapon is "PyroDemonSoul") { reducedmg = true; checkval = 106; }
		if ((infl == "ArchvileFlame" || infl == "ArchvileFlameCrisis" || 
				 infl == "ArchvileFire" || infl == "ArchvileFireCrisis" || 
				 infl == "ArchvileFireNew" || infl == "ArchvileFireFast" || infl == "ArchvileFireFastCrisis") && weapon is "ArchvileSoul") { reducedmg = true; checkval = 108; }
		if ((infl == "DIPuff") && weapon is "IncarnateSoul") { reducedmg = true; checkval = 107; }
		if ((infl == "DFire" || infl == "DFireCrisis" ||
				 infl == "DFlare" || infl == "DFlareCrisis" ||
				 infl == "DMissile" || infl == "DMissileCrisis" ||
				 infl == "DTracer" || infl == "DTracerCrisis" ||
				 infl == "DTracerPuff" || infl == "DTracerPuffCrisis" ||
				 infl == "DMissileCircle" || infl == "DMissileCircleCrisis" ||
				 infl == "DiabloistGravityHPTargeter" || infl == "DiabloistGravityHPTargeter2" || infl == "DiabloistGravityHPTargeter3" ||
				 infl == "DiabloistGravityManaTargeter" || infl == "DiabloistGravityManaTargeter2" || infl == "DiabloistGravityManaTargeter3") && weapon is "DiabloistSoul") { reducedmg = true; checkval = 109; }
		if ((infl == "FlyingBalrogShot1" || infl == "FlyingBalrogShot1Crisis" ||
				 infl == "FlyingBalrogShot2" || infl == "FlyingBalrogShot2Crisis" ||
				 infl == "WeakenedBalrogShot1" || infl == "WeakenedBalrogShot1") && weapon is "BalrogSoul") { reducedmg = true; checkval = 110; }
		if ((infl == "HadesElementalBall" || infl == "HadesElementalBallCrisis" ||
				 infl == "HadesBolt" || infl == "HadesBoltCrisis") && weapon is "HElementalSoul") { reducedmg = true; checkval = 111; }
		if ((infl == "OverBall" || infl == "OverBallCrisis" ||
				 infl == "HadesOverlordBall" || infl == "HadesOverlordBallCrisis" ||
				 infl == "StormShot1Ball" || infl == "StormShot1BallCrisis" ||
				 infl == "StormShot2Ball" || infl == "StormShot2BallCrisis" ||
				 infl == "StormStrike1Ball" || infl == "StormStrike1Crisis" ||
				 infl == "StormBolt" || infl == "StormBoltCrisis" ||
				 infl == "StormBolt2" || infl == "StormBolt2Crisis" ||
				 infl == "StormLite1" || infl == "StormLite1Crisis" ||
				 infl == "StormLite2" || infl == "StormLite2Crisis") && weapon is "HOverlordSoul") { reducedmg = true; checkval = 112; }

		//Console.Printf("reducedmg: %d", reducedmg);
		if (reducedmg) 
		{
			damage = ceil(damage * (1.0 - (CallACS("MiscVarCheckDECORATE",checkval) * frandom(0.075,0.1))));
		}
		return damage;
	}
	
	int A_CheckZeroDmgHit(Actor inflictor, Actor source, int damage, Name mod)
	{
		// Determines the chances of a 0-damage hit REMAINING 0, or being turned into a 1-damage hit
		let weapon = player.ReadyWeapon;
		int zerodmgchance = 16; // out of 512
		int zerodmgchance2 = ((LifeUpPerkLvl * 8) + (LifeUpExPerkLvl * 20));
		double zerodmgrand = 1.0;
		int CharacterClass = CallACS("CheckCharacterClass");
		int HellWarriorShieldLevel = CallACS("MiscVarCheckDECORATE",300);
		
		if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 1] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		// Defensive States
		If (weapon is "EvilWarriorShield")
		{
			zerodmgchance = floor(zerodmgchance * (1.125 + (HellWarriorShieldLevel * 0.05625)));
			zerodmgchance2 = floor(zerodmgchance2 * (1.125 + (HellWarriorShieldLevel * 0.05625)));
			if (CountInv("EWShieldDefendMode"))
			{
				zerodmgchance = floor(zerodmgchance * (1.5 + (HellWarriorShieldLevel * 0.15)));
				zerodmgchance2 = floor(zerodmgchance2 * (1.5 + (HellWarriorShieldLevel * 0.15)));
			}
			if (CountInv("EWShieldDefendModeExtra"))
			{
				zerodmgchance = floor(zerodmgchance * (3.75 + (HellWarriorShieldLevel * 0.0375)));
				zerodmgchance2 = floor(zerodmgchance2 * (3.75 + (HellWarriorShieldLevel * 0.0375)));
			}
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2a - Evil Warrior Shield] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		if (CountInv("UppercutDEFBonus") == 1)
		{
			zerodmgchance = floor(zerodmgchance * 1.0125);
			zerodmgchance2 = floor(zerodmgchance2 * 1.0125);
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2ba - UpperCut Def Bonus 1] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		if (CountInv("UppercutDEFBonus") == 2)
		{
			zerodmgchance = floor(zerodmgchance * 1.0375);
			zerodmgchance2 = floor(zerodmgchance2 * 1.0375);
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2bb - UpperCut Def Bonus 2] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		if (CountInv("FistPlayerBlock"))
		{
			zerodmgchance = floor(zerodmgchance * 1.6667);
			zerodmgchance2 = floor(zerodmgchance2 * 1.6667);
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2ca - Fist Blocking Def Bonus 1] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		if (CountInv("FistPlayerBlock2"))
		{
			zerodmgchance = floor(zerodmgchance * 2);
			zerodmgchance2 = floor(zerodmgchance2 * 2);
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2cb - Fist Blocking Def Bonus 2] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		if (CountInv("FistPlayerBlock3"))
		{
			zerodmgchance = floor(zerodmgchance * 2.5);
			zerodmgchance2 = floor(zerodmgchance2 * 2.5);
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2cc - Fist Blocking Def Bonus 3] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		if (CountInv("FistPlayerBlockExtra"))
		{
			zerodmgchance = floor(zerodmgchance * 5.5);
			zerodmgchance2 = floor(zerodmgchance2 * 5.5);
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2cd - Fist Blocking Def Bonus Extra] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		If (weapon is "SceptreOfEmpyrea")
		{
			if (CountInv("PrimingSceptre"))
			{
				zerodmgchance = floor(zerodmgchance * 1.005);
				zerodmgchance2 = floor(zerodmgchance2 * 1.005);
			}
			if (CountInv("SwingDefense0"))
			{
				zerodmgchance = floor(zerodmgchance * 1.0375);
				zerodmgchance2 = floor(zerodmgchance2 * 1.0375);
			}
			if (CountInv("SwingDefense1"))
			{
				zerodmgchance = floor(zerodmgchance * 1.0625);
				zerodmgchance2 = floor(zerodmgchance2 * 1.0625);
			}
			if (CountInv("SwingDefense2"))
			{
				zerodmgchance = floor(zerodmgchance * 1.1125);
				zerodmgchance2 = floor(zerodmgchance2 * 1.1125);
			}
			if (CountInv("SwingDefense3"))
			{
				zerodmgchance = floor(zerodmgchance * 1.25);
				zerodmgchance2 = floor(zerodmgchance2 * 1.25);
			}
			if (CountInv("ShieldDefense"))
			{
				zerodmgchance = floor(zerodmgchance * 1.25);
				zerodmgchance2 = floor(zerodmgchance2 * 1.25);
			}
			if (CountInv("ShieldDefense2"))
			{
				zerodmgchance = floor(zerodmgchance * 1.5);
				zerodmgchance2 = floor(zerodmgchance2 * 1.5);
			}
			if (CountInv("ShieldDefense3"))
			{
				zerodmgchance = floor(zerodmgchance * 2);
				zerodmgchance2 = floor(zerodmgchance2 * 2);
			}
			if (CountInv("SceptreSpinDefense1"))
			{
				zerodmgchance = floor(zerodmgchance * 1.25);
				zerodmgchance2 = floor(zerodmgchance2 * 1.25);
			}
			if (CountInv("SceptreSpinDefense2"))
			{
				zerodmgchance = floor(zerodmgchance * 1.375);
				zerodmgchance2 = floor(zerodmgchance2 * 1.375);
			}
			if (CountInv("SceptreSpinDefense3"))
			{
				zerodmgchance = floor(zerodmgchance * 1.625);
				zerodmgchance2 = floor(zerodmgchance2 * 1.625);
			}
			if (CountInv("SceptreSpinDefense4"))
			{
				zerodmgchance = floor(zerodmgchance * 2);
				zerodmgchance2 = floor(zerodmgchance2 * 2);
			}
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2d - Sceptre Bonuses] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		// Marine Armors
		if (CharacterClass == 0 || CharacterClass == 1)
		{
			if (CountInv("DSGreenArmorClass"))
			{
				zerodmgchance = floor(zerodmgchance * 1.05);
				zerodmgchance2 = floor(zerodmgchance2 * 1.05);
			}
			if (CountInv("DSBlueArmorClass"))
			{
				zerodmgchance = floor(zerodmgchance * 1.10);
				zerodmgchance2 = floor(zerodmgchance2 * 1.10);
			}
			if (CountInv("DSStoneArmorClass1"))
			{
				zerodmgchance = floor(zerodmgchance * 1.15);
				zerodmgchance2 = floor(zerodmgchance2 * 1.15);
			}
			if (CountInv("DSDiamondArmorClass1"))
			{
				zerodmgchance = floor(zerodmgchance * 1.20);
				zerodmgchance2 = floor(zerodmgchance2 * 1.20);
			}
			if (CountInv("DSStoneArmorClass2"))
			{
				zerodmgchance = floor(zerodmgchance * 1.25);
				zerodmgchance2 = floor(zerodmgchance2 * 1.25);
			}
			if (CountInv("DSDiamondArmorClass2"))
			{
				zerodmgchance = floor(zerodmgchance * 1.30);
				zerodmgchance2 = floor(zerodmgchance2 * 1.30);
			}
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2e - Marine Armor Bonuses] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		// Flora Specific Armor
		if (CharacterClass == 2)
		{
			if (CountInv("PearlyCorset") && mod == 'Bullet')
			{
				zerodmgchance = floor(zerodmgchance * 3.5);
				zerodmgchance2 = floor(zerodmgchance2 * 3.5);
			}
			if (CountInv("AnubisCufflinks") && (mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw' || mod == 'Gauntlets' || mod == 'Sceptre'))
			{
				zerodmgchance = floor(zerodmgchance * 3.5);
				zerodmgchance2 = floor(zerodmgchance2 * 3.5);
			}
			if (CountInv("WaterFlyingDress"))
			{
				zerodmgchance = floor(zerodmgchance * 1.4);
				zerodmgchance2 = floor(zerodmgchance2 * 1.4);
			}
			if (CountInv("BalrogRing"))
			{
				zerodmgchance = floor(zerodmgchance * 1.5);
				zerodmgchance2 = floor(zerodmgchance2 * 1.5);
			}
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2f - Flora Armor Bonuses] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		}
		// Raw Damagetypes
		if (mod == 'Sigil' || mod == 'SpectralLow')
		{
			zerodmgchance = floor(zerodmgchance * 0.75);
			zerodmgchance2 = floor(zerodmgchance2 * 0.75);
		}
		if (mod == 'Eldritch' || mod == 'Deadlight')
		{
			zerodmgchance = floor(zerodmgchance * 0.25);
			zerodmgchance2 = floor(zerodmgchance2 * 0.25);
		}
		if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2g - dmgtype = %s] Chance1: %.8f, Chances: %.8f", mod, zerodmgchance, zerodmgchance2);
		// [De]Buffs
		if (DQBuffTimer > 0) // Buff
		{
			zerodmgchance = floor(zerodmgchance * 3);
			zerodmgchance2 = floor(zerodmgchance2 * 3);
		}
		if (DQSapTimer > 0) // Sap
		{
			zerodmgchance = floor(zerodmgchance * 0.334);
			zerodmgchance2 = floor(zerodmgchance2 * 0.334);
		}
		if (SleepTimer > 0) // Sleep
		{
			if (random(1,16) == 1) 
			{
				zerodmgchance = floor(zerodmgchance * 0.2);
				zerodmgchance2 = floor(zerodmgchance2 * 0.2);
			}
			else 
			{
				zerodmgchance = floor(zerodmgchance * 0.8);
				zerodmgchance2 = floor(zerodmgchance2 * 0.8);
			}
		}
		If (InvisiblityLevel > 0) // Invisiblity
		{
			double InvisFactor = 1.0;
			double InvisBaseAmt = 1.0625; // 1.25;
			If (InvisiblityLevel >= 1) InvisFactor *= InvisBaseAmt;
			If (InvisiblityLevel >= 2) InvisFactor *= InvisBaseAmt;
			If (InvisiblityLevel >= 3) InvisFactor *= InvisBaseAmt;
			If (InvisiblityLevel >= 4) InvisFactor *= InvisBaseAmt;

			zerodmgchance = floor(zerodmgchance * InvisFactor);
			zerodmgchance2 = floor(zerodmgchance2 * InvisFactor);
		}
		if (CountInv("AetheriusPowerStrength") > 0)
		{
			double BerserkFactor = frandompick(1.2,1.3334,1.5);
			zerodmgchance = floor(zerodmgchance * BerserkFactor);
			zerodmgchance2 = floor(zerodmgchance2 * BerserkFactor);
		}
		if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[ZeroDamageCheck: STEP 2h - Buffs] Chance1: %.8f, Chances: %.8f", zerodmgchance, zerodmgchance2);
		
		// Final 1/0 Damage Check
		if (damage < 1)
		{
			int dmgroll = random(1,512);
			if (dmgroll < (512 - zerodmgchance - zerodmgchance2)) damage = 1; else damage = 0;
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP ?] player-damagemobj input\c-: \czzerodamagechanceroll: %d / %d\c- (chance1: %d, chance2: %d)", dmgroll, (512 - zerodmgchance - zerodmgchance2), zerodmgchance, zerodmgchance2);
		}
		return damage;
	}
	
	int, int A_CalcCritChance(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		AetheriusPlayerPawn playpawn;
		AetheriusMonsterZSC DVDSActor;
		AetheriusMonsterZSC DVDSVictim;
		AetheriusProjectileZSC UniqueProjectile;
		AetheriusFastProjectileZSC UniqueProjectileFast;
		AetheriusEffectProjectile ailmentproj;
		AetheriusEffectFastProjectile ailmentprojfast;
		SingleDamageRipper singleripproj;
		SingleDamageFastRipper singlefastripproj;

		int CritChance = 0;
		int meleeattack = 0;
		string infl, sour, vict;

		if (mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw' || mod == 'Gauntlets' || mod == 'Sceptre') meleeattack = 1;
		string ActorClass;
		string AilmentProjClass;
		string ailmentprojfastClass;
		if (ailmentproj) AilmentProjClass = ailmentproj.GetClassName();
		if (ailmentprojfast) ailmentprojfastClass = ailmentprojfast.GetClassName();
		//*****************************************************
		//**Allows Monsters to deal crits [4/256 base chance]**
		//*****************************************************
		if (DVDSActor)
		{
			ActorClass = DVDSActor.GetClassName();
			// Base Chances
			CritChance = 8 + (DVDSActor.user_monsterlevel / 11.25); // 8 (+ 8 every 90 levels)
			if (DVDSActor && DVDSActor.bBOSS) CritChance = (CritChance * 3) / 2; // Boss Flag Check
			if (DVDSActor && DVDSActor.bJUSTHIT) CritChance *= 2; // JustHit Flag Check
			if (DVDSActor && DVDSActor.user_charmed) CritChance = (CritChance * 3) / 2; // Charm Flag Check
			if (DVDSActor && DVDSActor.user_legendaryevolved) CritChance *= 4; // Legendaries have quadruple crit rate
			if (DVDSActor && DVDSActor.health <= DVDSActor.user_HPBuffRange) CritChance *= 1.5;

			// Actor Only Checks
			if (ActorClass == "DSHelperDog") CritChance *= 3; // Helper Dogs get triple crit rate
			if (ActorClass == "DSPainElemental" || ActorClass == "FPainElemental" || ActorClass == "DSPainElemental64" || ActorClass == "DSLostSoul" || ActorClass == "DSLostSoul2" || ActorClass == "ForgottenOne" || ActorClass == "DSLostSoul64" || ActorClass == "DSLostSoul642" ||
					ActorClass == "FLostSoul1" || ActorClass == "FLostSoul2") CritChance *= 4; // Pain-Elementals/Lost Souls are Crit-happy nuisances
			if (ActorClass == "DSRevenant" || ActorClass == "FRevenant" || ActorClass == "DeathIncarnate" || ActorClass == "FDeathIncarnate") CritChance *= 1.5; // Revenants/Death Incarnates have 50% more crit
			if (ActorClass == "ChainsawZombieNew") CritChance *= 2.5; // Chainsaw Zombies have 150% more crit
			if (ActorClass == "NightmareNew" || ActorClass == "SirenNightmareNew") CritChance *= 4; // Nightmares are good at crits too
			if (ActorClass == "EvilDeadHandNew" || ActorClass == "BabyClownNew" || 
					ActorClass == "BabyClown2New" || ActorClass == "BouncingClownNew" ||
					ActorClass == "StarSpawn" || ActorClass == "SpiderGod" || ActorClass == "SpiderGodling") CritChance *= 4;
			// Ally Specific
			if (ActorClass == "RebelNew" || ActorClass == "Rebel1New" || ActorClass == "Rebel2New" || ActorClass == "Rebel3New" || 
					ActorClass == "Rebel4New" || ActorClass == "Rebel5New" || ActorClass == "Rebel6New") 
					CritChance *= frandom(1.75,2.25); // Strife Rebels have +75-125% more crit

			// Boss Only Checks
			if (ActorClass == "DragonNew" || ActorClass == "FDragon" || ActorClass == "HeresiarchNew" || ActorClass == "FHeresiarch" || 
					ActorClass == "DSparilMountedNew" || ActorClass == "ClericBossNew" || ActorClass == "FighterBossNew" || ActorClass == "MageBossNew" ||
					ActorClass == "ProgrammerNew" || ActorClass == "StrifeBishopNew" || ActorClass == "LoremasterNew" || ActorClass == "Macil1New" || ActorClass == "StrifMacil2NeweBishopNew" ||
					ActorClass == "NyarlathotepLesser") CritChance *= 4;
			if (ActorClass == "AlienSpectre1New" || ActorClass == "AlienSpectre2New" || ActorClass == "AlienSpectre3New" || ActorClass == "AlienSpectre4New" || ActorClass == "AlienSpectre5New" ||
					ActorClass == "AvatarNew" || ActorClass == "Benellus1DS" || ActorClass == "Benellus2DS" || ActorClass == "Benellus3DS" ||
					ActorClass == "TNTSpider" || ActorClass == "SourceGuardian" || ActorClass == "AdolfHitlerDS") CritChance *= 6;
			if (ActorClass == "DSparilUnmountedNew" || ActorClass == "KoraxNew" || ActorClass == "PennywiseBoss" ||
					ActorClass == "EntityBossNew" || ActorClass == "EntitySecondNew" || ActorClass == "EntityAscended" || ActorClass == "ThamuzNew" || ActorClass == "TchernobogNew" ||
					ActorClass == "Magmantis" || ActorClass == "Zakachi") CritChance *= 8;
			if (ActorClass == "Nyarlathotep") CritChance *= 12;

			// Unique Checks
			if (meleeattack && (ActorClass == "WraithNew" || ActorClass == "WraithBuriedNew" || ActorClass == "FWraith")) 
					CritChance *= 4;

			if (meleeattack && (ActorClass == "Dragon" || ActorClass == "FDragon")) 
					CritChance *= 8;

			if (meleeattack && (ActorClass == "EttinNew" || ActorClass == "EttinCommander" || ActorClass == "Bormereth" ||
					ActorClass == "FEttinNew" || ActorClass == "FEttinCommander" || ActorClass == "FBormereth")) 
					CritChance *= 2.25; // Ettins have 125% more crit for Melee

			if (meleeattack && (ActorClass == "StalkerNew" || ActorClass == "StalkerLeaderNew" || ActorClass == "IceStalker" || ActorClass == "IceStalkerLeader" || 
					ActorClass == "FStalker" || ActorClass == "FStalkerLeader")) 
					CritChance *= 2; // Hexen Stalkers have 2x more crit for Melee

			if (meleeattack && (ActorClass == "CentaurNew" || ActorClass == "SlaughtaurNew" || 
					ActorClass == "FCentaur" || ActorClass == "FSlaughtaur")) 
					CritChance *= 2; // Centaurs have 2x more crit for Melee

			if (meleeattack && (ActorClass == "DSRevenant" || ActorClass == "FRevenant" || ActorClass == "DeathIncarnate" || ActorClass == "FDeathIncarnate")) 
					CritChance *= 1.5; // Revenants/Death Incarnates have another +50% more crit when using melee

			if (meleeattack && (ActorClass == "KnightNew" || ActorClass == "FKnight" || ActorClass == "KnightGhostNew" || ActorClass == "FKnightGhost")) 
					CritChance *= 1.5; // Undead Warriors [Heretic] have another +50% more crit when using melee

			if (meleeattack && (ActorClass == "ReaverNew")) 
					CritChance *= 3; // Reavers have 3x more crit for melee

			if (meleeattack && (ActorClass == "OStalkerNew")) 
					CritChance *= 1.5; // Strife Stalkers have 50% more crit for melee

			if (meleeattack && 
					(ActorClass == "DSCacodemon" || ActorClass == "DSCacodemon64" || ActorClass == "FCacodemon" ||
					ActorClass == "Cacolantern" || ActorClass == "FCacolantern" ||
					ActorClass == "Abaddon" || ActorClass == "FAbaddon")) 
					CritChance *= 2; // Cacos have 2x Crit for Melee

			if (meleeattack && 
					(ActorClass == "HadesElemental" || ActorClass == "FHadesElemental" ||
					ActorClass == "HadesOverlord" || ActorClass == "FHadesOverlord")) 
					CritChance *= 3; // Hades Scions have 3x Crit for Melee

			if (meleeattack && (ActorClass == "SatyrNew")) 
					CritChance *= 8; // Satyrs are very likely to crit too
					
			if (meleeattack && 
					(ActorClass == "DSDemon" || ActorClass == "DSDemon64" || 
					ActorClass == "DSSpectre" || ActorClass == "DSSpectre64" || 
					ActorClass == "BloodDemon" || ActorClass == "BloodSpectre" ||
					ActorClass == "BloodFiendNew" || ActorClass == "LurkerNew" ||
					ActorClass == "FDemon" || ActorClass == "FSpectre" || 
					ActorClass == "FBloodDemon" || ActorClass == "FBloodSpectre")) 
					CritChance *= 1.5; // Pinkies have 50% more crit with Melee

			if (meleeattack && (ActorClass == "ClinkNew" || ActorClass == "FClink" || ActorClass == "DarkClink" || ActorClass == "FDarkClink")) 
					CritChance *= 1.5; // SabreClaws have 50% more crit with Melee

			if (meleeattack && 
					(ActorClass == "DSCyberdemon" || ActorClass == "DSCyberdemon64" || ActorClass == "Annihilator" || 
					ActorClass == "FCyberdemon" || ActorClass == "FAnnihilator")) 
					CritChance *= 8; // Cyberdemon Stomps/Melee have 8x chance to crit.
					
			if (meleeattack && 
					(ActorClass == "DSHellKnight" || ActorClass == "DSHellKnight64" || ActorClass == "FHellKnight" || 
					ActorClass == "HellWarrior" || ActorClass == "FHellWarrior" || 
					ActorClass == "DSBaronofHell" || ActorClass == "DSBaronofHell64" || ActorClass == "FBaronofHell" || 
					ActorClass == "Belphegor" || ActorClass == "FBelphegor" || 
					ActorClass == "BruiserDemon" || ActorClass == "FBruiserDemon" || 
					ActorClass == "CyBruiser" || ActorClass == "FCyBruiser" || 
					ActorClass == "ArchonofHell" || ActorClass == "FArchonofHell" ||
					ActorClass == "PyroDemon" || ActorClass == "FPyroDemon" ||
					ActorClass == "WeakenedFlyingBalrog" || ActorClass == "FlyingBalrog" || ActorClass == "FFlyingBalrog")) 
					CritChance *= 4; // Hell Nobles have 4x chance to Crit w/ melee attacks

			// Misc
			if (mod == 'BFG' || mod == 'BFGSpray' || mod == 'BFGSplash') // BFG related attacks have signficantly LESS chance to crit, but still always have at least a 1/512 chance :P
			{ 
				CritChance *= 0.25;
				if (CritChance < 1) CritChance = 1;
			}
			if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
					infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
					infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
					infl == "FireBreath" || infl == "FireBreathCrisis" ||
					infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
					infl == "Demon5Jet" || infl == "Demon5JetCrisis")
			{
				CritChance *= 4;
			}
			if (infl == "SuicideBomber" || infl == "SuicideBomb" || infl == "SuicideBombStrong" || infl == "SuicideBombUltra" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord") CritChance = 0; // Kamikaze Monsters Cannot Crit
		}

		return CritChance, meleeattack;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (mod == 'Heal1' || mod == 'Heal2' || mod == 'Heal3' || mod == 'Heal4') return 0;
		if (CallACS("MenuVarCheckDECORATE",0) > 0)
		{
			if (mod == 'Crush') return 0;
		}

		if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\czplayer-damagemobj input\c-: \cygametic = %d\c-)", gametic);
		int predamage = damage;
		int firstdamage = damage;
		int CharacterClass = CallACS("CheckCharacterClass");
		int criticalhit;
		int CritChance, CritRoll;
		int IsHellCoreAttack = A_DamageMobjCheckHellCore(inflictor);
		AetheriusMonsterZSC DVDSActor;
		AetheriusProjectileZSC UniqueProjectile;
		AetheriusFastProjectileZSC UniqueProjectileFast;
		AetheriusEffectProjectile ailmentproj;
		AetheriusEffectFastProjectile ailmentprojfast;
		SingleDamageRipper singleripproj;
		SingleDamageFastRipper singlefastripproj;
		
		if (dvdsdebug_playerdmgdisplays)
		{
			if (flags & DMG_NO_ARMOR) Console.Printf("    (\cyIgnoresArmor?: yes)");
			if (flags & DMG_INFLICTOR_IS_PUFF) Console.Printf("    (\cyInflictorIsPuff?: yes)");
			if (flags & DMG_THRUSTLESS) Console.Printf("    (\cyThrustless?: yes)");
			if (flags & DMG_FORCED) Console.Printf("    (\cyForcedDamage?: yes)");
			if (flags & DMG_NO_FACTOR) Console.Printf("    (\cyNoDmgFactor?: yes)");
			if (flags & DMG_PLAYERATTACK) Console.Printf("    (\cyPlayerAttack?: yes)");
			if (flags & DMG_FOILINVUL) Console.Printf("    (\cyFoilInvuln?: yes)");
			if (flags & DMG_FOILBUDDHA) Console.Printf("    (\cyFoilBuddha?: yes)");
			if (flags & DMG_NO_PROTECT) Console.Printf("    (\cyBypassPowerProtection?: yes)");
			if (flags & DMG_NO_ENHANCE) Console.Printf("    (\cyBypassPowerDamage?: yes)");
			if (flags & DMG_USEANGLE) Console.Printf("    (\cyUsesAngle?: yes)");
			if (flags & DMG_EXPLOSION) Console.Printf("    (\cyIsAoEBurst?: yes)");
			if (flags & DMG_NO_PAIN) Console.Printf("    (\cyPainless?: yes)");
		}

		if (source) DVDSActor = AetheriusMonsterZSC(source);
		if (inflictor) 
		{
			UniqueProjectile = AetheriusProjectileZSC(inflictor);
			UniqueProjectileFast = AetheriusFastProjectileZSC(inflictor);
			ailmentproj = AetheriusEffectProjectile(inflictor);
			ailmentprojfast = AetheriusEffectFastProjectile(inflictor);
			singleripproj = SingleDamageRipper(inflictor);
			singlefastripproj = SingleDamageFastRipper(inflictor);
		}
		A_CheckNeverBleed(0, damage, flags);
		string infl, sour, vict;
		vict = GetClassName();
		if (inflictor == null) infl = "NONE"; else infl = inflictor.GetClassName();
		if (source == null) sour = "NONE"; else sour = source.GetClassName();
		
		// Crush Damage
		if (mod == 'Crush')
		{
			predamage = damage;
			damage *= 8.0;
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP -?] player-damagemobj input [\cyCrush Check\c-]\c-: %d, [prev: %d] {multi: %.8f)", damage, predamage);
		}
		
		// Is spawned via a Mapspot [i.e. Hexen shooters]
		if (sour == "FS_MapSpot" || sour == "MapSpot" || sour == "MapspotGravity")
		{
			predamage = damage;
			double msdmgmulti = (1.0 + (A_MapCheckDamageMobj() * 0.025));
			damage *= msdmgmulti;
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP -1] player-damagemobj input [\cyMapSpot Check\c-]\c-: %d, [prev: %d] {multi: %.8f)", damage, predamage, msdmgmulti);
		}
		
		int bosstype = 0;
		if (source)
		{
			if (sour == "NetherDarkImp" || sour == "Abaddon" || sour == "Daedabus" || sour == "Diabloist" ||
					sour == "DSHellKnight" || sour == "DSHellKnight64" || sour == "DSBaronofHell" || sour == "DSBaronofHell64" || 
					sour == "HellWarrior" || sour == "Belphegor" || sour == "BruiserDemon" || sour == "ArchonofHell" || 
					sour == "Cybruiser" || sour == "PyroDemon" || sour == "FlyingBalrog" || sour == "Hierophant" || 
					sour == "HadesElemental" || sour == "HadesOverlord" || 
					sour == "DSCyberdemon" || sour == "DSCyberdemon64" || sour == "Annihilator" || sour == "DSSpiderMastermind" || sour == "Demolisher" ||
					sour == "DeathKnight" || sour == "ShadowBeast" || sour == "MaulotaurNew" || sour == "HellGuard" || 
					sour == "IronlichNew" || sour == "IceLich" || sour == "GoldLich" || sour == "BloodLich" ||
					sour == "Bormereth" || sour == "FireDemonQueen" || sour == "VampireDVDS" || sour == "DarkPatriarch" || sour == "EtherealChaosSerpentNew" ||
					sour == "InquisitorNew" || sour == "DarkInquisitor" ||
					sour == "TNTSpider")
			{
				bosstype = 1; // Miniboss Level
			}
			else
			if (sour == "AvatarNew" || sour == "DSparilMountedNew" || 
					sour == "ClericBossNew" || sour == "MageBossNew" || sour == "FighterBossNew" || 
					sour == "ProgrammerNew" || sour == "StrifeBishopNew" || sour == "OracleNew" || 
					sour == "Macil1New" || sour == "Macil2New" || sour == "LoremasterNew" ||
					sour == "SourceGuardian" || sour == "DSMotherDemon64" ||
					sour == "AlienSpectre1New" || sour == "AlienSpectre2New" || sour == "AlienSpectre3New" || 
					sour == "AlienSpectre4New" || sour == "AlienSpectre5New" || 
					sour == "StarSpawn" || sour == "SpiderGod" || sour == "SpiderGodling" || sour == "NyarlathotepLesser")
			{
				bosstype = 2; // Moderate Boss Level
			}
			else
			if (sour == "DSparilUnmountedNew" || sour == "KoraxNew" || sour == "Zakachi" || 
					sour == "Benellus1DS" || sour == "Benellus2DS" || sour == "Benellus3DS" ||
					sour == "ThamuzNew" || sour == "TchernobogNew" ||
					sour == "SauronEyeWeak" || sour == "SauronEyeStrong1" || sour == "SauronEyeStrong2")
			{
				bosstype = 3; // Major/Named Threat [Lv 1]
			}
			else
			if (sour == "EntityBossNew" || sour == "EntitySecondNew" || sour == "EntityAscended" || 
					sour == "PennywiseBoss" || sour == "TheSource" || sour == "Magmantis" || 
					sour == "AdolfHitlerDS" || sour == "SauronEyeMain" ||
					sour == "Nyarlathotep")
			{
				bosstype = 4; // Extreme/Named Threat [Lv 2]
			}
			else
			if (sour == "Sauravatar")
			{
				bosstype = 5; // Elite/Named Threat [Lv 3]
			}
			else
			if (source.bBOSS)
			{
				bosstype = 1; // Miniboss Level
			}

			if (UniqueProjectile && UniqueProjectile.IsACrisisAttack)
			{
				predamage = damage;
				damage = floor(damage * dvds_monstercrisismulti);
				if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP -4] player-damagemobj input [\cyCrisis Projectile Check: %s\c-]\c-: %d, [prev: %d], [dmgmulti: %f])", sour, damage, predamage, dvds_monstercrisismulti);
				UniqueProjectile.IsACrisisAttack = false;
			}
			
			if (UniqueProjectile && UniqueProjectile.projtouchedshieldactor)
			{
				predamage = damage;
				damage = ceil(damage * 0.05);
				if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP -3] player-damagemobj input [\cyProjectile Hit Shield Check: %s\c-]\c-: %d, [prev: %d])", sour, damage, predamage);
			}
			
			if (infl != "NONE")
			{
				predamage = damage;
				damage = A_CheckHellcoreVsAtk(inflictor,source,damage);
				if (dvdsdebug_playerdmgdisplays) Console.Printf("    %d (%d)", damage, predamage);
			}

			predamage = damage;
			double buffdamagemulti = 1.0;
			// Monster Buffs
			if (DVDSActor && DVDSActor.health <= DVDSActor.user_HPBuffRange)
			{
						 if (sour == "Magmantis") buffdamagemulti = 1.75;
				else if (sour == "AlienSpectre1New" || sour == "AlienSpectre2New" || sour == "AlienSpectre3New" || 
								 sour == "AlienSpectre4New" || sour == "AlienSpectre5New" ||
								 sour == "DSCyberdemon" || sour == "FCyberdemon" || sour == "Annihilator" || sour == "FAnnihilator" ||
								 sour == "DSSpiderMastermind" || sour == "FSpiderMastermind" || sour == "Demolisher" || sour == "FDemolisher") buffdamagemulti = 1.5;
				else if (sour == "PyroDemon" || sour == "FPyroDemon" || 
								 sour == "FlyingBalrog" || sour == "Hierophant") buffdamagemulti = 1.4;
				else if (sour == "ArchonOfHell" || sour == "FArchonOfHell" ||
								 sour == "Cybruiser" || sour == "FCybruiser" ||
								 sour == "BruiserDemon" || sour == "FBruiserDemon") buffdamagemulti = 1.3;
				else if (sour == "Belphegor" || sour == "FBelphegor" ||
								 sour == "HadesElemental" || sour == "HadesOverlord") buffdamagemulti = 1.2;
				else if (sour == "Diabloist" || sour == "FDiabloist" ||
								 sour == "Abaddon" || sour == "FAbaddon") buffdamagemulti = 1.1;
				else if (sour == "DSArchvile" || sour == "FArchvile" ||
								 sour == "DSBaronOfHell" || sour == "FBaronOfHell" ||
								 sour == "DSHellKnight" || sour == "FHellKnight" ||
								 sour == "HellWarrior" || sour == "FHellWarrior")  buffdamagemulti = 1.05;
				else buffdamagemulti = 1.025;

				if (DVDSActor.health <= DVDSActor.user_HPLowBuffRange) buffdamagemulti *= 1.25;
				if (DVDSActor.user_legendaryevolved) buffdamagemulti *= frandom(1.05,1.15);
				damage = floor(damage * buffdamagemulti);
				if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP -2] player-damagemobj input [\cyMonster Buffs: %s\c-]\c-: %d, [prev: %d], [dmgmulti: %f])", sour, damage, predamage, buffdamagemulti);
			}
		}

		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) 
		{ 
			//*********************************************************************
			return super.DamageMobj(inflictor, source, damage, mod, flags, angle); 
			//*********************************************************************
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP -1] player-damagemobj input\c-: \cyVOODOO DOLL\c-)", damage);
		}

		if ((CountInv("AetheriusTimeFreezer") || CountInv("AetheriusTimeFreezerMenu",AAPTR_PLAYER1)))
		{
			if (mod == 'Slime' || mod == 'Magma')
			{
				if (dvdsdebug_playerdmgdisplays) Console.Printf("PDamage [TimeFreeze on Slime abort]");
				return 0;
			}
		}

		// Makes the HUD show "Missed!" and play a sound if you evade an attack. V:
		int EvadedTheAttack = 0;
		int GhostDashing = 0;
		int IsAlive = 1;
		if (self.health <= 0) IsAlive = 0;

		if (self.health <= 0 || bINVULNERABLE || player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE || CountInv("InvulnerabilitySpell") > 0 || CountInv("IsInvulnerable") > 0 || CountInv("MenuInvulnerability") > 0 || (CountInv("IronFeetNoPoison") > 0 && (mod == "PoisonElemental" || mod == "Poison")) )
		{
			predamage = damage;
			damage = 0;
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP 0] player-damagemobj input [PLAYER IS INVULNERABLE (\cyDMG: %d, PREV: %d)\cz]\c-)", damage, predamage);
		}
		else
		{
			if (mod == "Falling" || mod == "Drowning" || mod == "HellcoreDrain" || mod == "SigilUse")
			{
			}
			else
			{
				if (CountInv("EvadeAnAttack") > 0)
				{
					A_StartSound("DraQue/miss");
					A_StartSound("DraQue/miss");
					CallACS("MiscVarSetDECORATE",25302,1);
					damage = 0;
					EvadedTheAttack = 1;
				}
				if (CountInv("PlayerDashing") > 0)
				{
					damage = 0;
					GhostDashing = 1;
				}
			}
		}
		if (dvdsdebug_playerdmgdisplays) 
		{
				if (EvadedTheAttack) Console.Printf("    (\cz[STEP 1] player-damagemobj input\c-: \cyATTACKED WAS EVADED/AVOIDED\c-)", damage);
			else if (GhostDashing) Console.Printf("    (\cz[STEP 1] player-damagemobj input\c-: \cyDASHED TO AVOID DAMAGE\c-)", damage);
												else Console.Printf("    (\cz[STEP 1] player-damagemobj input [Base Dmg]\c-: \cydmg = %d\c-)", damage);
		}

		double RailRandom = frandompick(0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,
																		0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,
																		0.50,0.50,0.50,0.50,0.50,
																		0.75,0.75,0.75,
																		0.90,0.90,
																		0.9875);

		double MonsterLevelIgnoreFactor;
		if (DVDSActor) MonsterLevelIgnoreFactor = (DVDSActor.user_monsterlevel * 0.00022223);
		int LegendaryIgnoreDefenseFactor = 0.5 - (VillainKillerPerkLvl * 0.05) - (VillainKillerEXPerkLvl * 0.125);
		LegendaryIgnoreDefenseFactor = clamp(LegendaryIgnoreDefenseFactor, 0.000, LegendaryIgnoreDefenseFactor);

		//*************************************
		//**Player Taking Crits from Monsters**
		//*************************************
		int meleeattack = 0;
		string ActorClass;
		if (DVDSActor && dvds_monstercrits != 0) 
		{
			[CritChance, meleeattack] = A_CalcCritChance(inflictor,source,damage,mod,flags,angle);

			// Chance to RESIST a crit.
			double CritResistChance = 1.25;
			int CritResistDivisor;
			// Check Armor
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				CritResistDivisor = 8;
				if (CountInv("DSGreenArmorClass") > 0) 		CritResistChance += (35.00 / CritResistDivisor);
				if (CountInv("DSBlueArmorClass") > 0) 		CritResistChance += (52.50 / CritResistDivisor);
				if (CountInv("DSStoneArmorClass1") > 0)		CritResistChance += (70.80 / CritResistDivisor);
				if (CountInv("DSDiamondArmorClass1") > 0)	CritResistChance += (93.75 / CritResistDivisor);
				if (CountInv("DSStoneArmorClass2") > 0)		CritResistChance += (87.50 / CritResistDivisor);
				if (CountInv("DSDiamondArmorClass2") > 0)	CritResistChance += (98.75 / CritResistDivisor);
			}
			if (CharacterClass == 2)
			{
				CritResistDivisor = 8;
				if (CountInv("SafeTeaShoes") > 0) 				CritResistChance += (3.00 / CritResistDivisor);
				if (CountInv("PearlyCorset") > 0) 				CritResistChance += (7.00 / CritResistDivisor);
				if (CountInv("WaterFlyingDress") > 0)			CritResistChance += (8.00 / CritResistDivisor);
				if (CountInv("EvenstarNecklace") > 0)			CritResistChance += (2.00 / CritResistDivisor);
				if (CountInv("CloakofEvasion") > 0)				CritResistChance += (4.00 / CritResistDivisor);
				if (CountInv("AnubisCufflinks") > 0)			CritResistChance += (5.00 / CritResistDivisor);
				if (CountInv("KissaBra") > 0)							CritResistChance += (6.00 / CritResistDivisor);
				if (CountInv("DivineShield") > 0)					CritResistChance += (16.00 / CritResistDivisor);
				if (CountInv("BalrogRing") > 0)						CritResistChance += (2.00 / CritResistDivisor);
				if (CountInv("DoveRibbon") > 0)						CritResistChance += (9.00 / CritResistDivisor);
				if (CountInv("FalconKnifeEarrings") > 0)	CritResistChance += (5.00 / CritResistDivisor);
			}
			// Check Stats
			double temp1 = 0.0;
			temp1 += (CallACS("StatCheck",0) * 0.03125); // LVL
			temp1 += (CallACS("MiscVarCheckDECORATE",31) * 0.01875); // AGL
			temp1 += (CallACS("MiscVarCheckDECORATE",32) * 0.009375); // DEF
			temp1 += (CallACS("MiscVarCheckDECORATE",33) * 0.175); // DFT
			temp1 += (CallACS("MiscVarCheckDECORATE",34) * 0.003125); // SOR
			temp1 += (CallACS("MiscVarCheckDECORATE",35) * 0.0125); // STR
			temp1 += (CallACS("MiscVarCheckDECORATE",36) * 0.003125); // THE
			temp1 /= 4;
			CritResistChance += temp1;
			if (CallACS("GetBuffTimer",1) > 0) CritResistChance += 2.5; // Invisiblity
			if (DivineAvatarTimer > 0) CritResistChance += 12.5; // Divine Avatar
			if (DQBuffTimer > 0) CritResistChance += 5.0; // Buff
			if (DQAcceleratleTimer > 0) CritResistChance += 1.25; // Acceleratle
			if (DQSapTimer > 0) CritResistChance -= 2.5; // Sap
			if (DQDeceleratleTimer > 0) CritResistChance -= 0.625; // Deceleratle
			if (GoETimer > 0) CritResistChance += 25.0; // GoE
			if (SleepTimer > 0) CritResistChance = 0.0; // Sleep

			// Player Has "Item"
			if (CountInv("HWShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
			if (CountInv("ImpWarlordShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
			if (CountInv("ImpWarlordShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.45);
			if (CountInv("DKnightShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
			if (CountInv("DKnightShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.475);
			if (CountInv("AcolyteShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.125);
			if (CountInv("AcolyteShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.35);
			if (CountInv("CentaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.333);
			if (CountInv("CentaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.48666);
			if (CountInv("SlaughtaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.41667);
			if (CountInv("SlaughtaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.49333);
			if (CountInv("MaulotaurChargeDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
			if (CountInv("HeresiarchShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.4375);
			if (CountInv("NightmarePhaseOutDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.46875);
			String nm = "ThamuzApocalypseDefendMode"; MiscCheck = nm; if (CountInv(MiscCheck)) CritResistChance += ((100.0 - CritResistChance) * 0.4);

			// Type Detection
			// Sigil
			if (mod == 'Sigil' || mod == 'SpectralLow') CritResistChance *= 0.75;
			if (mod == 'Eldritch' || mod == 'Deadlight') CritResistChance *= 0.25;
			// Ripper Detection
			if (infl == "RagingSpirit") 
			{
				if (random(1,24) != 1) CritResistChance = 200.0;
				if (UniqueProjectile && random(1,6) == 1) UniqueProjectile.user_fuse -= randompick(1,1,1,1,1,1,1,1,1,1,1,2);
			}
			if (infl == "RagingSpirit2")
			{
				if (random(1,6) != 1) CritResistChance = 200.0;
				if (UniqueProjectile && random(1,24) == 1) UniqueProjectile.user_fuse -= randompick(1,1,1,1,1,1,1,1,1,1,1,2);
			}
			if (inflictor && inflictor.bRIPPER) { if (!singleripproj && !singlefastripproj && random(1,6) != 1) CritResistChance = 200.0; }

			double CritResistRoll = frandom(0.1,100.0);
			if (criticalhit && CritResistRoll <= CritResistChance) 
			{
				criticalhit = 0;
				if (dvdsdebug_playerdmgdisplays && dvds_monstercrits != 0) Console.Printf("    (\cz[STEP 1a] Monster Crit Rate\c-: \cxRESISTED\c-, \cbCritResist: (%.8f) / %.8f\c-)", CritResistRoll, CritResistChance);
			}
				
			// Final Crit Roll
			CritRoll = random(1,512);
			if (CritRoll <= CritChance && DVDSActor.health > 0 && !isFrozen() && dvds_monstercrits != 0) criticalhit = 1;
			if (criticalhit > 0 && (inflictor == null && source == null)) criticalhit = 0;
			if (dvdsdebug_playerdmgdisplays && dvds_monstercrits != 0) Console.Printf("    (\czPlayer Defensive Input [Monster Crit Rate]\c-: %d / 512 (%d) \c-, \cyActorClass: = %s\c-)", CritRoll, CritChance, ActorClass);

			// Alter EffectProjectile Chances
			if (ailmentproj && criticalhit)
			{
				ailmentproj.user_ailmentmaxchance /= 2; // Most EffectProjectiles get their affliction chances doubled when critting
			}
			if (ailmentprojfast && criticalhit)
			{
				ailmentprojfast.user_ailmentmaxchance /= 2; // Most EffectProjectiles get their affliction chances doubled when critting
			}
			if (dvdsdebug_playerdmgdisplays && dvds_monstercrits != 0) Console.Printf("    (\cz[STEP 1a] Monster Crit Rate\c-: %d / 512 (%d) \c-, \cbCritResist: (%.8f) / %.8f\c-, \cyActorClass: = %s\c-)", CritRoll, CritChance, CritResistRoll, CritResistChance, ActorClass);
		}
		double dmgmulti = 2.0 + (0.01 * random(-10,10));

		double dfperkfactor = 0.00;
		double dfperkfactormulti = 1.0;
		// Tries to determine a factor of much of the total defense calculations to ignore in their "PlayerStatItem"
		if (damage > 0)
		{
			PlayerDefenseIgnoreFactor = 0.00;
			if (inflictor == null && source == null)
			{
				if (mod == 'Melee') PlayerDefenseIgnoreFactor += (frandom(0.45,0.55) * (1.00 - PlayerDefenseIgnoreFactor));
				if (mod == 'Drowning') PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
				if (mod == 'HellcoreDrain') PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
				if (mod == 'SigilUse') PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
				if (mod == 'Slime' || mod == 'Crush')
				{
					if (DQBuffTimer > 0) 
					{
						PlayerDefenseIgnoreFactor += (0.30 * (1.00 - PlayerDefenseIgnoreFactor));
					}
					else 
					if (DQSapTimer > 0) 
					{
						PlayerDefenseIgnoreFactor += (0.97 * (1.00 - PlayerDefenseIgnoreFactor));
					}
					else
					{
						PlayerDefenseIgnoreFactor += (0.90 * (1.00 - PlayerDefenseIgnoreFactor));
					}
				}
				if (gameinfo.gametype & GAME_Raven)
				{
					if (mod == 'Fire' || mod == 'Magma') 
					{
						if (DQBuffTimer > 0) 
						{
							PlayerDefenseIgnoreFactor += (0.30 * (1.00 - PlayerDefenseIgnoreFactor));
						}
						else 
						if (DQSapTimer > 0) 
						{
							PlayerDefenseIgnoreFactor += (0.97 * (1.00 - PlayerDefenseIgnoreFactor));
						}
						else
						{
							PlayerDefenseIgnoreFactor += (0.90 * (1.00 - PlayerDefenseIgnoreFactor));
						}
					}
				}
				if (CountInv("PlayingStrangeAeons") && mod == 'ScrollFloor')
				{
					PlayerDefenseIgnoreFactor += (frandom(0.90,1.00) * (1.00 - PlayerDefenseIgnoreFactor));
				}
			}
			else
			{
				// Hellcore
				if (IsHellCoreAttack != 0) PlayerDefenseIgnoreFactor += ((frandom(0.225,0.275) + (SoulMasteryPerkLevel * frandom(0.0225,0.0275)) +  (SoulMasteryEXPerkLevel * frandom(0.05625,0.06875))) * (1.00 - PlayerDefenseIgnoreFactor));

				// Sigil
				if (mod == 'Sigil' || mod == 'SpectralLow') 
				{
					PlayerDefenseIgnoreFactor += (frandompick(0.125,0.25,0.375) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				// Eldritch
				if (mod == 'Eldritch' || mod == 'Deadlight') 
				{
					dfperkfactor += ((MagiUpPerkLvl * 0.05) + (MagiUpExPerkLvl * 0.125));
					dfperkfactor += ((WandMastPerkLvl * 0.02) + (PlasmaAccuracyEXPerkLevel * 0.05));
					PlayerDefenseIgnoreFactor += ((0.75 - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				// Melee
				if (mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw' || mod == 'Gauntlets' || mod == 'Sceptre')
				{
					if (mod == 'Chainsaw')
					{
						dfperkfactor += ((BerserkerFit * 0.10) + (BerserkerFitEX * 0.25));
						dfperkfactor += ((MartialArtsMastery * 0.10) + (MartialArtsMasteryEX * 0.25));
						dfperkfactor *= dfperkfactormulti;
						PlayerDefenseIgnoreFactor += (((random(10,25) * 0.01) - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
					}
					else
					{
						dfperkfactor += ((BerserkerFit * 0.04) + (BerserkerFitEX * 0.10));
						dfperkfactor += ((MartialArtsMastery * 0.04) + (MartialArtsMasteryEX * 0.10));
						dfperkfactor *= dfperkfactormulti;
						PlayerDefenseIgnoreFactor += (((random(0,10) * 0.01) - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
					}
				}
				// Plasma Ignores 1/4th of "normal" damagefactor
				if (mod == 'BFG' || mod == 'BFGSpray' || mod == 'BFGSplash') 
				{ 
					dfperkfactor += ((PlasmaAccuracyPerkLevel * 0.04) + (PlasmaAccuracyEXPerkLevel * 0.10));
					dfperkfactor += ((BFGAttunementPerkLevel * 0.10) + (BFGAttunementEXPerkLevel * 0.25));
					dfperkfactor *= dfperkfactormulti;
					PlayerDefenseIgnoreFactor += ((frandom(0.45,0.55) - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (mod == 'Plasma') 
				{ 
					dfperkfactor += ((PlasmaAccuracyPerkLevel * 0.04) + (PlasmaAccuracyEXPerkLevel * 0.10));
					dfperkfactor *= dfperkfactormulti;
					PlayerDefenseIgnoreFactor += ((frandom(0.225,0.275) - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (infl == "DBTRailPuff") 
				{
					dfperkfactor += ((PlasmaAccuracyPerkLevel * 0.04) + (PlasmaAccuracyEXPerkLevel * 0.10));
					dfperkfactor *= dfperkfactormulti;
					PlayerDefenseIgnoreFactor += ((RailRandom - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (mod == 'Drowning') 
				{
					PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
				}
				// Poison Clouds
				if ((mod == "PoisonElemental" || mod == "Poison") && 
						(infl == "MinorPoisonCloud" || infl == "NormalPoisonCloud" || infl == "MajorPoisonCloud" ||
						infl == "HexenPoisonCloud1" || infl == "HexenPoisonCloud2Source" || infl == "HexenPoisonCloud2Outer" || infl == "HexenPoisonCloud3Source" || infl == "HexenPoisonCloud3Outer"))
				{
					dfperkfactor += ((MagiUpPerkLvl * 0.04) + (MagiUpExPerkLvl * 0.10));
					dfperkfactor += ((WandMastPerkLvl * 0.08) + (WandMastEXPerkLvl * 0.20));
					dfperkfactor *= dfperkfactormulti;
					PlayerDefenseIgnoreFactor += ((frandompick(0.20,0.225,0.25,0.275,0.30) + dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				// Bullet/Pellet
				if (mod == 'Bullet') 
				{ 
					dfperkfactor += ((BulletAccuracyPerkLevel * 0.04) + (PelletAccuracyPerkLevel * 0.08) + (BulletAccuracyEXPerkLevel * 0.10) + (PelletAccuracyEXPerkLevel * 0.20));
					dfperkfactor *= dfperkfactormulti;
					PlayerDefenseIgnoreFactor += ((frandom(0.1125,0.1375) - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (infl == "RockBombShardProj" || infl == "RockBombShardProjT" || infl == "SuicideBomber" || infl == "SuicideBomb" || infl == "SuicideBombStrong" || infl == "SuicideBombUltra" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord" || mod == 'Explosive' || flags & DMG_EXPLOSION) 
				{
					dfperkfactor += ((DemolitionsExpertPerkLevel * 0.04) + (DemolitionsExpertEXPerkLevel * 0.10));
					dfperkfactor *= dfperkfactormulti;
					if (infl == "RockBombShardProj" || infl == "RockBombShardProjT") PlayerDefenseIgnoreFactor += ((frandompick(0.3125,0.3334,0.375) - (dfperkfactor * 0.5)) * (1.00 - PlayerDefenseIgnoreFactor));
																																			else PlayerDefenseIgnoreFactor += ((frandompick(0.625,0.6667,0.75) - (dfperkfactor * 1.0)) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				// Chill Touch
				if (infl == "ChillTouch") 
				{
					dfperkfactor += ((MagiUpPerkLvl * 0.10) + (MagiUpExPerkLvl * 0.25));
					dfperkfactor += ((WandMastPerkLvl * 0.05) + (PlasmaAccuracyEXPerkLevel * 0.125));
					dfperkfactor *= dfperkfactormulti;
					PlayerDefenseIgnoreFactor += ((0.5 - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				// Fire Breath
				if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
						infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
						infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
						infl == "FireBreath" || infl == "FireBreathCrisis" ||
						infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
						infl == "Demon5Jet" || infl == "Demon5JetCrisis")
				{
					PlayerDefenseIgnoreFactor += (0.75 * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (infl == "SonicNail")
				{
					PlayerDefenseIgnoreFactor += (frandompick(0.25,0.3125,0.375,0.4325,0.50) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (infl == "UnmakerLaser" || infl == "UnmakerLaserCrisis")
				{
					dfperkfactor += ((MagiUpPerkLvl * 0.08) + (MagiUpExPerkLvl * 0.20));
					dfperkfactor += ((WandMastPerkLvl * 0.08) + (WandMastEXPerkLvl * 0.20));
					if (CallACS("CheckCharacterClass") != 2 && CountInv("UnmakerAmmoType") == 1) dfperkfactor += ((PlasmaAccuracyPerkLevel * 0.02) + (PlasmaAccuracyEXPerkLevel * 0.05));
					if (CallACS("CheckCharacterClass") == 2 && CountInv("UnmakerAmmoType") == 1) dfperkfactor += ((SoulMasteryPerkLevel * 0.02) + (SoulMasteryEXPerkLevel * 0.05));
					dfperkfactor *= dfperkfactormulti;
					PlayerDefenseIgnoreFactor += ((frandompick(0.25,0.3125,0.375) - dfperkfactor) * (1.00 - PlayerDefenseIgnoreFactor));
				}

				//**************************
				//**Special Boss detection**
				//**************************
				if (bosstype == 1) PlayerDefenseIgnoreFactor += (frandompick(0.125,0.25) * (1.00 - PlayerDefenseIgnoreFactor)); // Miniboss Level
				if (bosstype == 2) PlayerDefenseIgnoreFactor += (frandompick(0.25,0.375,0.50) * (1.00 - PlayerDefenseIgnoreFactor)); // Moderate Boss Level
				if (bosstype == 3) PlayerDefenseIgnoreFactor += (frandompick(0.50,0.625,0.75) * (1.00 - PlayerDefenseIgnoreFactor)); // Major/Named Threat [Lv 1]
				if (bosstype == 4) PlayerDefenseIgnoreFactor += (frandompick(0.75,0.875,1.00) * (1.00 - PlayerDefenseIgnoreFactor)); // Extreme/Named Threat [Lv 2]
				if (bosstype == 5) PlayerDefenseIgnoreFactor += (frandompick(0.875,1.00) * (1.00 - PlayerDefenseIgnoreFactor)); // Elite/Named Threat [Lv 3]
			}
			// Level Check
			if (DVDSActor) 
			{
				PlayerDefenseIgnoreFactor += ((DVDSActor.user_monsterlevel * 0.00022223) * (1.00 - PlayerDefenseIgnoreFactor));
			}

			LegendaryIgnoreDefenseFactor = 0.50 - (VillainKillerPerkLvl * 0.05) - (VillainKillerEXPerkLvl * 0.125);
			LegendaryIgnoreDefenseFactor = clamp(LegendaryIgnoreDefenseFactor, 0.000, LegendaryIgnoreDefenseFactor);
			if (DVDSActor && DVDSActor.user_legendaryevolved) 
			{
				PlayerDefenseIgnoreFactor += (LegendaryIgnoreDefenseFactor * (1.00 - PlayerDefenseIgnoreFactor));
			}
			// Critical Hits?
			if (criticalhit) 
			{
				PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
			}
			if (PlayerDefenseIgnoreFactor <= 0.0) PlayerDefenseIgnoreFactor = 0.0;
			if (PlayerDefenseIgnoreFactor >= 1.0) PlayerDefenseIgnoreFactor = 1.0;

			// Intended to ignore aspects of Flora's special armor or Marines' armor items [if any attacks will in the future]
			PlayerArmorIgnoreFactor = 0.00;
			if (criticalhit) PlayerArmorIgnoreFactor += (0.50 * (1.00 - PlayerArmorIgnoreFactor));
			if (PlayerArmorIgnoreFactor <= 0.0) PlayerArmorIgnoreFactor = 0.0;
			if (PlayerArmorIgnoreFactor > 1.0) PlayerArmorIgnoreFactor = 1.0;

			// Allows certain types of "bosses" to possess an automatic degree of armor-defense ignoring for "Normal" damagetype
			PlayerArmorIgnoreFactorGeneral = 0.00;
			if (bosstype == 1) PlayerArmorIgnoreFactorGeneral += (frandompick(0.015625,0.03125,0.0625) * (1.00 - PlayerArmorIgnoreFactorGeneral)); //  // Miniboss Level
			if (bosstype == 2 || bosstype == 3) PlayerArmorIgnoreFactorGeneral += (frandompick(0.0625,0.125,0.1875) * (1.00 - PlayerArmorIgnoreFactorGeneral)); // Moderate Boss Level & Major/Named Threat [Lv 1]
			if (bosstype == 4 || bosstype == 5) PlayerArmorIgnoreFactorGeneral += (frandompick(0.1875,0.25,0.3125) * (1.00 - PlayerArmorIgnoreFactorGeneral)); // Extreme/Named Threat [Lv 2] & Elite/Named Threat [Lv 3]
			if (criticalhit) PlayerArmorIgnoreFactorGeneral += (0.50 * (1.00 - PlayerArmorIgnoreFactorGeneral));
			if (PlayerArmorIgnoreFactorGeneral <= 0.0) PlayerArmorIgnoreFactorGeneral = 0.0;
			if (PlayerArmorIgnoreFactorGeneral > 1.0) PlayerArmorIgnoreFactorGeneral = 1.0;

			// Final Printouts for Defense/Armor Ignoring Stuff
			if (dvdsdebug_playerdmgdisplays)
			{
				if (PlayerDefenseIgnoreFactor <= 0.00 && PlayerArmorIgnoreFactor <= 0.00 && PlayerArmorIgnoreFactorGeneral <= 0.00)
				{
					Console.Printf("    (\cz[STEP 2] player-damagemobj input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", damage);
				}
				else
				{
					if (PlayerDefenseIgnoreFactor > 0.00) Console.Printf("    (\cz[STEP 2a] player-damagemobj input\c-: \caDamageIgnoreFactor = %.8f\c-, \cydmg = %d\c- (Player Actor))", PlayerDefenseIgnoreFactor, damage);
					if (PlayerArmorIgnoreFactor > 0.00) Console.Printf("    (\cz[STEP 2b] player-damagemobj input\c-: \caArmorIgnoreFactor = %.8f\c-, \cydmg = %d\c- (Player Actor))", PlayerArmorIgnoreFactor, damage);
					if (PlayerArmorIgnoreFactorGeneral > 0.00) Console.Printf("    (\cz[STEP 2c] player-damagemobj input\c-: \caArmorIgnoreFactorGeneral = %.8f\c-, \cydmg = %d\c- (Player Actor))", PlayerArmorIgnoreFactorGeneral, damage);
				}
			}

			int predirdmg = damage;
			// Direct Damage Changes
			if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
					infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
					infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
					infl == "FireBreath" || infl == "FireBreathCrisis" ||
					infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
					infl == "Demon5Jet" || infl == "Demon5JetCrisis")
			{
				damage = floor(damage * 1.125);
			}
			if (dvdsdebug_playerdmgdisplays && damage > 0) 
			{
				if (predirdmg != damage) Console.Printf("    (\cz[STEP 3] Direct Dmg Changes\c-: \cypredmg = %d\c-, \cydmg = %d\c-)", predirdmg, damage);
														else Console.Printf("    (\cz[STEP 3] Direct Dmg Changes\c-: \caSKIPPED\c-, \cydmg = %d\c-)", predirdmg);
			}
		}

		int prefriendlydmg = damage;
		if (damage > 0)
		{
			if (DVDSActor)
			{
				if (DVDSActor.bFRIENDLY)
				{
					/*
					damage = ceil(damage * 0.25);
					if (DVDSActor.user_charmed) damage = ceil(damage * 0.25);
					if (DVDSActor.user_summoned) damage = ceil(damage * 0.25);
					if (damage < 1) damage = 1;
					if (dvdsdebug_playerdmgdisplays && damage > 0) Console.Printf("    (\cz[STEP 4] player-damagemobj input [Hit By Friendly]\c-: \cypredmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-)", prefriendlydmg, damage);
					*/
					
					damage = 0;
					if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\czActor Defensive Input [STEP Z]\c-: END DAMAGE ATTEMPT (FRIENDLY)");
					return 0;
				}
				else
				{
					if (DVDSActor.bFRIGHTENED) // Attacker is frightened, AND the Player is the one that is doing the frightening
					{
						if (player.cheats & CF_FRIGHTENING || bFRIGHTENING) damage = ceil(damage * frandompick(0.625,0.6875,0.75)); else damage = ceil(damage * frandompick(0.9375,0.95,0.9625));
					}
					if (dvdsdebug_playerdmgdisplays && damage > 0) Console.Printf("    (\cz[STEP 4] player-damagemobj input [Hit By Defined Enemy]\c-: \caSKIPPED\c-, \cydmg = %d\c-)", damage);
				}
			}
			else
			{
				if (dvdsdebug_playerdmgdisplays && damage > 0) Console.Printf("    (\cz[STEP 4] player-damagemobj input [Hit By Undefined Enemy]\c-: \caSKIPPED\c-, \cydmg = %d\c-)", damage);
			}
			if (damage < 1) damage = A_CheckZeroDmgHit(inflictor, source, damage, mod);
		}

		int defense = 0;
		// Defense Calculation
		if (damage > 0)
		{
			int olddmg = damage;
			int basedef = CallACS("MiscVarCheckDECORATE",32);
			basedef *= (1.0 + (LifeUpPerkLvl * 0.1) + ((LifeUpExPerkLvl * 0.25))); 
			basedef *= (1.0 - PlayerDefenseIgnoreFactor); 
			if (basedef < 0) basedef = 0;
			if (basedef > 0) defense = basedef;

			int armordef = 0;
			if (CountInv("DSGreenArmorClass") > 0) armordef = 1;
			if (CountInv("DSBlueArmorClass") > 0) armordef = 2;
			if (CountInv("DSStoneArmorClass1") > 0) armordef = 2;
			if (CountInv("DSDiamondArmorClass1") > 0) armordef = 3;
			if (CountInv("DSStoneArmorClass2") > 0) armordef = 3;
			if (CountInv("DSDiamondArmorClass2") > 0) armordef = 4;
			armordef *= frandompick(1.25,1.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2.0);
			armordef *= (1.0 + ((LifeUpPerkLvl * 0.04) + (LifeUpExPerkLvl * 0.1)));
			armordef *= (1.0 - PlayerArmorIgnoreFactor); 
			armordef *= (1.0 - PlayerArmorIgnoreFactorGeneral); 
			if (armordef < 0) armordef = 0;
			else if (armordef > 0) defense += armordef;

			// Defense-Stat (Partial) Ignoring Checks
			if (inflictor == null && source == null)
			{
				if (mod == 'Melee')
				{
					if (DQBuffTimer > 0) 
					{
						defense *= 0.5; // Total Defense is only 50% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
					}
					else 
					if (DQSapTimer > 0) 
					{
						defense *= 0.02; // Total Defense is only 2% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
					}
					else 
					{
						defense *= 0.1; // Total Defense is only 10% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
					}
				}
				if (mod == 'Slime' || mod == 'Crush')
				{
					if (DQBuffTimer > 0) 
					{
						defense *= 0.5; // Total Defense is only 50% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
					}
					else 
					if (DQSapTimer > 0) 
					{
						defense *= 0.02; // Total Defense is only 2% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
					}
					else 
					{
						defense *= 0.1; // Total Defense is only 10% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
					}
				}
				if (gameinfo.gametype & GAME_Raven)
				{
					if (mod == 'Fire' || mod == 'Magma') 
					{
						if (DQBuffTimer > 0) 
						{
							defense *= 0.5; // Total Defense is only 50% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
							damage = ceil(damage * frandom(0.9,1.5));
						}
						else 
						if (DQSapTimer > 0) 
						{
							defense *= 0.02; // Total Defense is only 2% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
							damage = ceil(damage * frandom(2.4,4.0));
						}
						else 
						{
							defense *= 0.1; // Total Defense is only 10% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
							damage = ceil(damage * frandom(1.5,2.5));
						}
					}
				}
			}
			if (infl == "DBTRailPuff") 
			{
				defense *= (1.0 - RailRandom);
			}
			if (mod == 'Drowning') 
			{
				defense = 0;
			}
			if (CountInv("PlayingStrangeAeons") && mod == 'ScrollFloor') 
			{
				defense *= (random(1,5) * 0.02);
			}
			if (infl == "SuicideBomb" || infl == "SuicideBombStrong" || infl == "SuicideBombUltra" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord" || mod == 'Explosive' || mod == 'HSExplode') 
			{
				defense *= 0.334;
			}
			if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
					infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
					infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
					infl == "FireBreath" || infl == "FireBreathCrisis" ||
					infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
					infl == "Demon5Jet" || infl == "Demon5JetCrisis")
			{
				defense *= 0.25;
			}
			if (DVDSActor && DVDSActor.user_legendaryevolved) 
			{
				defense *= 0.5;
			}
			//**************************
			//**Special Boss detection**
			//**************************
			if (bosstype == 1) defense *= (1.0 - frandompick(0.125,0.25)); // Miniboss Level
			if (bosstype == 2) defense *= (1.0 - frandompick(0.25,0.375,0.50)); // Moderate Boss Level
			if (bosstype == 3) defense *= (1.0 - frandompick(0.50,0.625,0.75)); // Major/Named Threat [Lv 1]
			if (bosstype == 4) defense *= (1.0 - frandompick(0.75,0.875,1.00)); // Extreme/Named Threat [Lv 2]
			if (bosstype == 5) defense *= (1.0 - frandompick(0.875,1.00)); // Elite/Named Threat [Lv 3]

			// Level Check
			if (DVDSActor) defense *= (1.0 - MonsterLevelIgnoreFactor);

			// Critical Hits?
			if (criticalhit) 
			{
				damage = floor(damage * dmgmulti);
				defense = 0;
			}

			if (dvdsdebug_playerdmgdisplays) 
			{
				if (criticalhit) Console.Printf("    (\cz[STEP 5] player-damagemobj input\c-: \cxCRIT! (multi: %.8f)\c-, \cyolddmg = %d\c-, \cdbasedef = %d, \cdarmdef = %d\c-, \cddef = %d\c-, \cynewdmg = %d\c-, \cwdmgtype = %s\c-, \cdinflictor = %s\c-, \cnsource = %s\c-, \cvbosstype = %d\c-)", dmgmulti, olddmg, basedef, armordef, defense, damage, mod, infl, sour, bosstype);
										else Console.Printf("    (\cz[STEP 5] player-damagemobj input\c-: \cyolddmg = %d\c-, \cdbasedef = %d, \cdarmdef = %d\c-, \cddef = %d\c-, \cynewdmg = %d\c-, \cwdmgtype = %s\c-, \cdinflictor = %s\c-, \cnsource = %s\c-, \cvbosstype = %d\c-)", olddmg, basedef, armordef, defense, damage, mod, infl, sour, bosstype);
			}
		}

		int predirdmg = damage;
		double cheatplayerdmgtaken;
		cheatplayerdmgtaken = dvds_cheatplayerdmgtaken * 0.01;
		cheatplayerdmgtaken = clamp(cheatplayerdmgtaken, 0.01, cheatplayerdmgtaken);
		bool isadmgfloor = false;
		bool isacrusher = false;
		if (inflictor == null && source == null)
		{
			if (mod == 'Crush') isacrusher = true;
			else
			{
				if (mod == 'Slime') isadmgfloor = true;
				if (gameinfo.gametype & GAME_Raven)
				{
					if (mod == 'Fire' || mod == 'Magma') isadmgfloor = true;
				}
				if (CountInv("PlayingStrangeAeons") && mod == 'ScrollFloor') isadmgfloor = true;
			}
		}
		if (dvds_cheatplayerdmgtaken != 1.0)
		{
			if (isacrusher)
			{
				if (cheatplayerdmgtaken < 1.0) cheatplayerdmgtaken += ((1.00 - cheatplayerdmgtaken) * 0.25);
				else if (cheatplayerdmgtaken > 1.0) cheatplayerdmgtaken -= ((cheatplayerdmgtaken - 1.00) * 0.75);
			}
			else
			if (isadmgfloor)
			{
				if (cheatplayerdmgtaken < 1.0) cheatplayerdmgtaken += ((1.00 - cheatplayerdmgtaken) * 0.5);
				else if (cheatplayerdmgtaken > 1.0) cheatplayerdmgtaken -= ((cheatplayerdmgtaken - 1.00) * 0.5);
			}
			
			if (damage > 0)
			{
				if (random(0,1) == 0) damage = floor(damage * cheatplayerdmgtaken);
												 else damage = ceil(damage * cheatplayerdmgtaken);
				
				if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP C1] Direct Dmg Changes\c-: \cypredmg = %d\c-, \cydmg = %d\c-, \cxcheatplayerdmgtaken = %2f)", predirdmg, damage, cheatplayerdmgtaken);
			}
		}
		predirdmg = damage;
		damage -= floor(defense * frandompick(0.0625,0.125,0.125,0.25,0.25,0.25,0.25,0.25,0.25,0.50,0.50,1.00));
		if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP C2] Defense Mod\c-: \cypredmg = %d\c-, \cydmg = %d\c-, \cddef = %d)", predirdmg, damage, defense);
		if (damage < 1) damage = A_CheckZeroDmgHit(inflictor, source, damage, mod);
		
		// Space for rent :V
		mobjdmg = damage;
		
		//************************************************************************
		let ret = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		//************************************************************************
		
		//**********************************************
		//*Post "PlayerStatItem" and "Resistances" Info*
		//**********************************************
		if (dvdsdebug_playerdmgdisplays && damage > 0)
		{
			if (ret > 0) Console.Printf("    (\cz[STEP 12] player-damagemobj output\c-: \cydmg = %d\c-, \cwdmgtype = %s\c-, \cdinflictor = %s\c-, \cnsource = %s\c-)", ret, mod, infl, sour);
							else Console.Printf("    (\cz[STEP 12] player-damagemobj output\c-: \caSKIPPED\c-, \cydmg = %d\c-)", ret);
		}

		if ((dvds_showdamagemessages & 1))
		{
			if (ret > 0) A_PrintDamageMessage(inflictor, source, ret, mod, criticalhit, infl, sour, vict, health, firstdamage, flags);
			else 
			{
				if (EvadedTheAttack)
				{
					A_PrintEvadeMessage(inflictor, source, ret, mod, criticalhit, infl, sour, vict, health);
				}
			}
		}

		if (ret > 0) 
		{
			if (criticalhit)
			{
				CallACS("MiscVarSetDECORATE",25301,1);
				A_StartSound("monster/criticalhit",CHAN_BODY,CHANF_DEFAULT,1.0,ATTN_NORM);
				Console.Printf("\cxDealt a Desperate Blow!", criticalhit);
			}
			int hpratio = ret * 100 / max(1, CallACS("StatCheck",1));
			
			// Cursed Shield Ratio Checks
			int cursemulti = 1;
			int cursedivisor = 1;
			if (hpratio >= 201)										{ cursemulti = 8; cursedivisor = 2; }
			if (hpratio >= 151 && hpratio <= 200)	{ cursemulti = 7; cursedivisor = 2; }
			if (hpratio >= 101 && hpratio <= 150)	{ cursemulti = 6; cursedivisor = 2; }
			if (hpratio >= 81 && hpratio <= 100)	{ cursemulti = 5; cursedivisor = 2; }
			if (hpratio >= 61 && hpratio <= 80)		{ cursemulti = 4; cursedivisor = 2; }
			if (hpratio >= 41 && hpratio <= 60)		{ cursemulti = 3; cursedivisor = 2; }
			if (hpratio >= 21 && hpratio <= 40)		{ cursemulti = 2; cursedivisor = 2; }
			if (hpratio <= 20)										{ cursemulti = 1; cursedivisor = 2; }
			if (criticalhit) cursemulti *= random(3,5);

			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP 13] player-damagemobj uncurse stuff\c-: \cydmg = %d\c-, \cwcursemulti = %d\c-, \cxcursedivisor = %d\c-, \cdhpratio = %d\c-)", ret, cursemulti, cursedivisor, hpratio);
			A_CursedShieldPain(1,cursemulti,cursedivisor);

			// Health Regen Ratio Checks
			double regendmg;
			int hpratioclamp = hpratio;
			if (hpratioclamp > 200) hpratioclamp = 200;
			regendmg = 1.25 + (hpratioclamp * 0.01);
			regendmg += (random(0,5) * 0.05);
			regendmg *= hpratioclamp;
			if (criticalhit) regendmg *= frandompick(1.25,1.5,1.5,1.5,1.5,1.75);

			if (regendmg)
			{
				if (dvdsdebug_regenpenaltydisplay) Console.Printf("HPPenaltyTimeAdd: %d", regendmg);
				CallACS("MiscVarSetDECORATE",92,regendmg,2); // HPRegenBonPenTimer
			}
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP 14] player-damagemobj hpregentimer stuff\c-: \cytics = %d, \cdhpratioclamp = %d\c-)", CallACS("MiscVarCheckDECORATE",92), hpratioclamp);
		}
		else
		{
			if (!(EvadedTheAttack || GhostDashing) && predamage > 0 && IsAlive > 0)
			{
				if (mod == 'Falling' || mod == 'Drowning') { }
				else
				{
					if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP 13a] player-damagemobj uncurse stuff\c-: \cydmgtype = %s\c-)", mod);
					if (CountInv("IronFeetNoPoison") && 
							(mod == "PoisonElemental" || mod == "Poison") && 
							(infl == "MinorPoisonCloud" || infl == "NormalPoisonCloud" || infl == "MajorPoisonCloud" ||
							 infl == "HexenPoisonCloud1" || infl == "HexenPoisonCloud2Source" || infl == "HexenPoisonCloud2Outer" || infl == "HexenPoisonCloud3Source" || infl == "HexenPoisonCloud3Outer")
						 )
					{
					}
					else
					{
						if (CallACS("GetBuffTimer",4) > 0 || bINVULNERABLE || player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE || CountInv("InvulnerabilitySpell") || CountInv("IsInvulnerable"))
						{ 
							CallACS("MiscVarSetDECORATE",25304,1);
							A_StartSound("Player/TookNoDamageInvuln",CHAN_BODY,CHANF_DEFAULT,frandom(0.375,0.625),ATTN_NORM); 
						}
						else 
						{ 
							CallACS("MiscVarSetDECORATE",25303,1);
							A_StartSound("Player/TookNoDamage",CHAN_BODY,CHANF_DEFAULT,frandom(0.375,0.625),ATTN_NORM); 
						}
					}
				}
			}

			A_CheckNeverBleed(1, ret, flags);
			if (dvdsdebug_playerdmgdisplays) Console.Printf("    (\cz[STEP 13] player-damagemobj uncurse stuff\c-: \caSKIPPED\c-)", ret);
		}

		saveddamage = 0;
		// End
		return ret;
	}
	
	int A_GetSceptreRange(int attacktype = 0)
	{
		int range;
		int baserange;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (attacktype == 0) // Normal Swing
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 1) // Aireal Attack
		{
			if (SceptreActualLevel <= 0) range = 104;
			if (SceptreActualLevel == 1) range = 106; // +2
			if (SceptreActualLevel == 2) range = 108; // +2
			if (SceptreActualLevel == 3) range = 110; // +2
			if (SceptreActualLevel == 4) range = 112; // +2
			if (SceptreActualLevel == 5) range = 116; // +4
			if (SceptreActualLevel == 6) range = 118; // +2
			if (SceptreActualLevel == 7) range = 122; // +4
			if (SceptreActualLevel == 8) range = 128; // +6
			if (SceptreActualLevel == 9) range = 132; // +2
			if (SceptreActualLevel == 10) range = 134; // +2
			if (SceptreActualLevel == 11) range = 136; // +2
			if (SceptreActualLevel == 12) range = 138; // +2
			if (SceptreActualLevel == 13) range = 142; // +4
			if (SceptreActualLevel == 14) range = 144; // +2
			if (SceptreActualLevel == 15) range = 148; // +4
			if (SceptreActualLevel >= 16) range = 154; // +6
			range = range * 5 / 4;
		}
		else
		if (attacktype == 2) // Spinning Attack
		{
			if (SceptreActualLevel <= 0) range = 168;
			if (SceptreActualLevel == 1) range = 173; // +5
			if (SceptreActualLevel == 2) range = 178; // +5
			if (SceptreActualLevel == 3) range = 182; // +4
			if (SceptreActualLevel == 4) range = 187; // +5
			if (SceptreActualLevel == 5) range = 196; // +9
			if (SceptreActualLevel == 6) range = 201; // +5
			if (SceptreActualLevel == 7) range = 209; // +8
			if (SceptreActualLevel == 8) range = 222; // +13
			if (SceptreActualLevel == 9) range = 230; // +8
			if (SceptreActualLevel == 10) range = 236; // +6
			if (SceptreActualLevel == 11) range = 241; // +5
			if (SceptreActualLevel == 12) range = 247; // +6
			if (SceptreActualLevel == 13) range = 256; // +9
			if (SceptreActualLevel == 14) range = 262; // +6
			if (SceptreActualLevel == 15) range = 271; // +9
			if (SceptreActualLevel >= 16) range = 288; // +17
			range = range * 5 / 4;
		}
		baserange = range;
		if (ClassicDoomType == 5) range = range * 6 / 5; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		if (debugmelee) Console.Printf("Sceptre Reticle Range: (Type: %d) %d - (Base Range: %d)", attacktype, range, baserange);

		return range;
	}
	
	// Melee Range
	int A_GetMeleeRange(int type = 0)
	{
		int baserange;
		int range;
		let weapon = player.ReadyWeapon;
		string weaponname = weapon.GetClassName();
		string actorname = GetClassName();
		int CharacterClass = CallACS("CheckCharacterClass");
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int debugmelee = dvdsdebug_showmeleeinformation;

		if (type == 0) range = 64; // Punch [normal]
		if (type == 1) range = 58; // Punch [uppercut]
		if (type == 2) range = 72; // Gauntlet Punch [normal]
		if (type == 3) range = 80; // Gauntlet Punch [alt-fire]
		if (type == 4) range = 104; // Kick
		if (type == 5) range = 73; // Chainsaw
		if (type == 6) range = random(74,75); // Dual-Bladed Chainsaw
		if (type == 7) range = 88; // Poison Needle
		
		baserange = range;
		if (CharacterClass == 2 && MartialArtsMastery > 0)
		{
			if (MartialArtsMastery == 1) range *= 1.015;
			if (MartialArtsMastery == 2) range *= 1.030;
			if (MartialArtsMastery == 3) range *= 1.045;
			if (MartialArtsMastery == 4) range *= 1.060;
			if (MartialArtsMastery == 5) range *= 1.075;
		}
		
		if (CharacterClass != 2 && BerserkerFit > 0)
		{
			if (BerserkerFit == 1) range *= 1.01;
			if (BerserkerFit == 2) range *= 1.02;
			if (BerserkerFit == 3) range *= 1.03;
			if (BerserkerFit == 4) range *= 1.04;
			if (BerserkerFit == 5) range *= 1.05;
		}
		
		if (ClassicDoomType == 5) range = range * 6 / 5; // 1.2x in Doom64 due to scaling up of general maps, etc :V
		if (debugmelee) Console.Printf("Melee Reticle Range: (Type: %d) %d - (Base Range: %d)", type, range, baserange);

		return range;
	}

	// Increases the number of points towards uncursing a Ruinous Shield into a Divine Shield
	void A_CursedShieldPain(int UncursePts, int uncursemulti, int uncurseddivisor)
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		int CurseMultiRandomizer;
		if (uncursemulti < 1) uncursemulti = 1;
		if (uncurseddivisor < 1) uncurseddivisor = 1;
		
		if (CharacterClass == 2)
		{
			if (CountInv("PearlyCorset")) UncursePts += UncursePts;
			if (CountInv("DoveRibbon")) UncursePts += UncursePts;

			if (CountInv("RuinousShield"))
			{
				CurseMultiRandomizer = random(1,100);
				if (CurseMultiRandomizer == 1) UncursePts *= 16;
				if (CurseMultiRandomizer == 2) UncursePts *= 8;
				if (CurseMultiRandomizer == 3) UncursePts *= 8;
				if (CurseMultiRandomizer == 4) UncursePts *= 4;
				if (CurseMultiRandomizer == 5) UncursePts *= 4;
				if (CurseMultiRandomizer == 6) UncursePts *= 4;
				if (CurseMultiRandomizer == 7) UncursePts *= 4;
				if (CurseMultiRandomizer == 8) UncursePts *= 2;
				if (CurseMultiRandomizer == 9) UncursePts *= 2;
				if (CurseMultiRandomizer == 10) UncursePts *= 2;
				if (CurseMultiRandomizer == 11) UncursePts *= 2;
				if (CurseMultiRandomizer == 12) UncursePts *= 2;
				if (CurseMultiRandomizer == 13) UncursePts *= 2;
				if (CurseMultiRandomizer == 14) UncursePts *= 2;
				if (CurseMultiRandomizer == 15) UncursePts *= 2;
				UncursePts *= 2;
	
				UncursePts *= uncursemulti;
				UncursePts /= uncurseddivisor;
				UncursePts = clamp(UncursePts, 2, 1024);
				CallACS("MiscVarSetDECORATE",202,UncursePts,1);
				int uncurselevel = CallACS("MiscVarCheckDECORATE",202);
				if (dvdsdebug_shielduncursedisplay) Console.Printf("+%d (Now: %d)", UncursePts, uncurselevel);
			}
		}
	}

	// Reset Breathing Scale
	void A_APPBreatheReset()
	{
		if (!isvoodoodoll) 
		{
			scaleymulti = 1.00;
			breathdirection = 0;
			breathframe = 0;
			A_SetScale(basexscale,baseyscale*scaleymulti);
		}
	}

	// Breathing Function
	void A_APPBreathe(double startpoint = 1.00, double endpoint = 0.976, double breathincrementbase = 0.002, double basetics = 4)
	{
		if (!isvoodoodoll) 
		{
			double StaminaBreathSpeed = 1.0;
			int StaminaLevel;
			int StaminaMax = 10000;
			if (CallACS("MiscVarCheckDECORATE",22) > 0) StaminaMax = CallACS("MiscVarCheckDECORATE",22);
			StaminaLevel = CallACS("MiscVarCheckDECORATE",21) * 10000 / StaminaMax;

			if (StaminaLevel < 157) StaminaBreathSpeed = 1.99;
			if (StaminaLevel > 156 && StaminaLevel < 626) StaminaBreathSpeed = 1.825;
			if (StaminaLevel > 625 && StaminaLevel < 1251) StaminaBreathSpeed = 1.66;
			if (StaminaLevel > 1250 && StaminaLevel < 2501) StaminaBreathSpeed = 1.495;
			if (StaminaLevel > 2500 && StaminaLevel < 5001) StaminaBreathSpeed = 1.33;
			if (StaminaLevel > 5000 && StaminaLevel < 7501) StaminaBreathSpeed = 1.165;
			if (StaminaLevel > 7500 && StaminaLevel < 12501) StaminaBreathSpeed = 1.00;
			if (StaminaLevel > 12500 && StaminaLevel < 20001) StaminaBreathSpeed = 0.835;
			if (StaminaLevel > 20000 && StaminaLevel < 27501) StaminaBreathSpeed = 0.67;
			if (StaminaLevel > 27500 && StaminaLevel < 35001) StaminaBreathSpeed = 0.505;
			if (StaminaLevel > 35000 && StaminaLevel < 42501) StaminaBreathSpeed = 0.34;
			if (StaminaLevel > 42500 && StaminaLevel < 48751) StaminaBreathSpeed = 0.175;
			if (StaminaLevel > 48750) StaminaBreathSpeed = 0.01;
			breathincrementbase *= StaminaBreathSpeed;
			
			double ticmulti = 1.00 * (tics / basetics);
			breathincrementbase *= ticmulti;

			if (breathdirection == 0)
			{
				breathframe++;
				scaleymulti -= breathincrementbase;
				if (scaleymulti <= endpoint) { scaleymulti = endpoint; breathdirection = 1; breathframe = 0; }
			}
			else
			{
				breathframe++;
				scaleymulti += breathincrementbase;
				if (scaleymulti >= startpoint) { scaleymulti = startpoint; breathdirection = 0; breathframe = 0; }
			}

			int debugbreath = dvdsdebug_playerbreathedisplays;
			if (debugbreath)
			{
				Console.Printf("scaleymulti = %.8f, breathincrementbase = %.8f, breathdirection = %d, breathframe = %d, StaminaBreathSpeed = %.8f, ticmulti = %.8f, actualtics = %d, basetics = %d", 
												scaleymulti, 
												breathincrementbase, 
												breathdirection, 
												breathframe, 
												StaminaBreathSpeed, 
												ticmulti, 
												tics, 
												basetics);
			}
			A_SetScale(basexscale,baseyscale*scaleymulti);
		}
	}
	
	void A_APPPain()
	{
		int CharacterClass = CallACS("CheckCharacterClass");
		double MaxHealthTrue = CallACS("StatCheck",1);
		double HealthRatio = health / MaxHealthTrue;
		//Console.Printf("HealthRatio: %.8f", HealthRatio);
		
		if (CharacterClass == 0) // Deggaris
		{
			A_Pain();
		}
		
		if (CharacterClass == 1) // Illucia
		{
			A_Pain();
		}
		
		if (CharacterClass == 2) // Flora
		{
			A_StopSound(CHAN_VOICE); 
			if (health > 0)
			{
				if (HealthRatio >= 0.667) A_StartSound("FloraPainSet1",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
				else if (HealthRatio >= 0.334 && HealthRatio < 0.667) A_StartSound("FloraPainSet2",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
				else if (HealthRatio < 0.334) A_StartSound("FloraPainSet3",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		if (CharacterClass == 8) // Ailish
		{
			//A_StopSound(CHAN_VOICE); 
			if (health > 0)
			{
				if (HealthRatio >= 0.667) A_StartSound("AilishPainSet1",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM); 
				else if (HealthRatio >= 0.334 && HealthRatio < 0.667) A_StartSound("AilishPainSet2",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
				else if (HealthRatio < 0.334) A_StartSound("AilishPainSet3",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
		
		if (CharacterClass == 9) // Petra
		{
			if (health > 0)
			{
				if (HealthRatio >= 0.667) A_StartSound("PetraPainSet1",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM); 
				else if (HealthRatio >= 0.334 && HealthRatio < 0.667) A_StartSound("PetraPainSet2",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
				else if (HealthRatio < 0.334) A_StartSound("PetraPainSet3",CHAN_VOICE,CHANF_DEFAULT,1.0,ATTN_NORM);
			}
		}
	}
	
	override void CheckPoison()
	{
		let player = self.player;
		if (player.poisoncount && !(Level.maptime & 15))
		{
			//Console.Printf("poisoncount: %d (maptime: %d)", player.poisoncount, Level.maptime);
			player.poisoncount -= randompick(3,4,4,5,5,5,5,5,6,6,7);
			if (player.poisoncount < 0) player.poisoncount = 0;
			int poisdmg = 1;
			if (health > poisdmg) player.PoisonDamage(player.poisoner, poisdmg, true);
		}
	}
}

// Aetherius's main character. Just put her and some of her starting stats here for future reference
class FloraBriscoletti : AetheriusPlayerPawn // DoomPlayer // PlayerPawn
{
	default
	{
		Tag "Flora Briscoletti";
		Health 73; // 61-85
		Player.MaxHealth 73;
		Player.MugShotMaxHealth -1; // 73
		Radius 13; // 13	
		Height 50; // 50
		Scale 0.34512; // 0.34512
		Mass 68;
		PainChance 255;
		Speed 1;
		+SOLID
		+SHOOTABLE
		+DROPOFF
		+PICKUP
		+NOTDMATCH
		+FRIENDLY
		+SLIDESONWALLS
		+CANPASS
		+CANPUSHWALLS
		+FLOORCLIP
		+WINDTHRUST
		+TELESTOMP
		+NOBLOCKMONST
		+NOSKIN
		+PLAYERPAWN.NOTHRUSTWHENINVUL
		+THRUSPECIES
		+DONTMORPH
		+DONTTRANSLATE
		species "Players";
		DamageFactor "Normal", 1.333; // 75% the physical defense of a normal player.
		DamageFactor "Magic", 0.598; // 166.7% the magical defense of a normal player
		DamageFactor "Fire", 0.900; // 111.1% the fire-elemental defense of a normal player
		DamageFactor "Ice", 0.950; // 105.2% the ice-elemental defense of a normal player
		DamageFactor "Thunder", 0.975; // 102.5% the thunder-elemental defense of a normal player
		DamageFactor "Wind", 1.0;
		DamageFactor "Holy", 0;
		DamageFactor "Eldritch", 0.299;
		DamageFactor "Dark", 0.875;
		Damagefactor "IncarnateGlare", 0.875; // Same as Dark
		DamageFactor "Spiritual", 0.4375;
		DamageFactor "Melee", 1.0;
		DamageFactor "Stomp", 1.0;
		DamageFactor "Trample", 1.0;
		DamageFactor "Sceptre", 0;
		DamageFactor "Slime", 1.0; // Damage Floors
		DamageFactor "Magma", 0.900; // 111.1% the fire-elemental defense of a normal player
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Drowning", 0.875;
		DamageFactor "Falling", 0.005; // EXTREMELY resistant against falling damage [0.5% normal damage]. It comes with being part Zenithian, those guys can fall a hellacious distance and live. :P
		Damagefactor "Bullet", 1.0;
		Damagefactor "Explosive", 1.0;
		radiusdamagefactor 1.0;
		Damagefactor "Fist", 1.0;
		Damagefactor "Kick", 1.0;
		Damagefactor "Gauntlets", 1.0;
		Damagefactor "Chainsaw", 1.0;
		DamageFactor "Acid", 1.0;
		DamageFactor "Poison", 1.0;
		DamageFactor "PoisonElemental", 1.0;
		DamageFactor "Sigil", 1;
		DamageFactor "SpectralLow", 1;
		DamageFactor "ImpSoul", 1;
		DamageFactor "DarkImpSoul", 1;
		DamageFactor "CacodemonSoul", 1;
		DamageFactor "CacolanternSoul", 1;
		DamageFactor "AbaddonSoul", 1;
		DamageFactor "KnightSoul", 1;
		DamageFactor "BaronSoul", 1;
		DamageFactor "BelphegorSoul", 1;
		DamageFactor "BrusierFist", 1;
		DamageFactor "ArchonSoul", 1;
		DamageFactor "PyroDemonSoul", 1;
		DamageFactor "IncarnateSoul", 1;
		DamageFactor "DiabloistSoul", 1;
		DamageFactor "BalrogSoul", 1;
		DamageFactor "HElementalSoul", 1;
		DamageFactor "HOverlordSoul", 1;
		DamageFactor "Railgun", 1;
		DamageFactor "Disintergrate", 1;
		DamageFactor "Telefrag", 1;
		DamageFactor "SpectralTouch", 1;

		Player.Portrait "NERPORT2";
		//Player.StartItem "SceptreOfEmpyrea";
		Player.StartItem "Resistances";
		Player.StartItem "PlayerStatItem";
		Player.StartItem "PlayerStatItem2";
		Player.StartItem "PlayerStatItem3";
		Player.StartItem "FistFlora";
		Player.WeaponSlot 1, "FistFlora", "PoisonNeedle", "SauronGauntletsFlora", "SceptreOfEmpyrea"; // Melee Weapons
		Player.WeaponSlot 2, "SapphireWandNew", "DualSapphireWandsNew", "StrifeCrossbow2New", "StrifeCrossbowNew", "ImpalerXBow", "DualImpalerXBow", "GoldWandNew", "DualGoldWandNew"; // Pistol2, DualPistols // Pistols
		Player.WeaponSlot 3, "DiarisLongbow", "CrossbowNew", "DualCrossbowNew", "SuperCrossbowNew", "DualSuperCrossbowNew"; //, MagicBoomerang // Magicial Weapons
		Player.WeaponSlot 4, "DragonClawNew", "DualDragonClawNew", "ImpSoul", "DarkImpSoul", "CacodemonSoul", "CacolanternSoul", "AbaddonSoul"; // Hellcore Class 1
		Player.WeaponSlot 5, "HellStaffNew", "DualHellStaffNew", "KnightSoul", "BaronSoul", "BelphegorSoul", "BruiserSoul", "ArchonSoul", "PyroDemonSoul"; // Hellcore Class 2
		Player.WeaponSlot 6, "PhoenixRodNew", "DualPhoenixRodNew", "IncarnateSoul", "ArchvileSoul", "DiabloistSoul", "BalrogSoul"; // Hellcore Class 3
		Player.WeaponSlot 7, "FiremaceNew", "DualFiremaceNew", "HElementalSoul", "HOverlordSoul"; // Hellcore Class 4
		Player.WeaponSlot 8, "64Unmaker", "NNSigil", "DSparilStaff", "DualDSparilStaff";
		Player.AttackZOffset 8;
		Player.JumpZ 9;
		Player.GruntSpeed 12;
		Player.FallingScreamSpeed 35, 40;
		Player.ViewHeight 37;
		Player.UseRange 64;
		Player.ForwardMove 2.5, 1.25;
		Player.SideMove 2.5, 1.25;
		Player.ColorRange 0,0;
		Player.SoundClass "player";
		Player.DamageScreenColor "ff 00 00";
		Player.MugShotMaxHealth 0;
		Player.FlechetteType "ArtiPoisonBag3";
		Player.AirCapacity 1;
		Player.InvulnerabilityMode "Reflective";
		Player.DisplayName "Flora Briscoletti";
		Player.Face "FLO";
		Player.CrouchSprite "TNT1";
		Player.SoundClass "FloraSND";
		Player.SpawnClass "Any";
		Obituary "$OB_MPDEFAULT";
	}

	States
	{
		Pain.Charm: 
			Goto See;
		Pain.Heal1:
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,0); 
			Goto See;
		Pain.Heal2:
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,1); 
			Goto See;
		Pain.Heal3:
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,2); 
			Goto See;
		Pain.Heal4:
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,3); 
			Goto See;
		Spawn:
			NERA A 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			loop;
		See:
			NERA AAAA 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Loop;
		Missile:
			NERA AAA 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Goto Spawn;
		Melee:
			NERA A 6 BRIGHT A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Goto Missile;
		Pain:
			NERA A 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			NERA A 4 
			{
				A_APPBreathe(1.0, 0.976471, 0.00214, 4);
				A_APPPain(); // ACS_NamedExecuteAlways("FloraPainScreams"); // A_Pain
			}
			Goto Spawn;
		Death:
			TNT1 A 0 A_APPBreatheReset();
			TNT1 A 0 A_PlayerSkinCheck("AltSkinDeath");
		Death1:
			TNT1 A 10;
			TNT1 A 10 A_PlayerScream;
			TNT1 A 10 A_NoBlocking;
			TNT1 AAA 10;
			TNT1 A -1;
			Stop;
		XDeath:
			TNT1 A 0 A_APPBreatheReset();
			TNT1 A 0 A_PlayerSkinCheck("AltSkinDeath");
		XDeath1:
			TNT1 A 5;
			TNT1 A 0 A_PlayerSkinCheck("AltSkinXDeath");
			TNT1 A 5 A_XScream;
			TNT1 A 0 A_PlayerSkinCheck("AltSkinXDeath");
			TNT1 A 5 A_NoBlocking;
			TNT1 AAAAA 5;
			TNT1 A -1;
			Stop;
		AltSkinDeath:
			TNT1 A 0 A_APPBreatheReset();
			TNT1 A 6;
			TNT1 A 6 A_PlayerScream;
			TNT1 AA 6;
			TNT1 A 6 A_NoBlocking;
			TNT1 AAA 6;
			TNT1 A -1;
			Stop;
		AltSkinXDeath:
			TNT1 A 0 A_APPBreatheReset();
			TNT1 A 5 A_PlayerScream;
			TNT1 A 0 A_NoBlocking;
			TNT1 A 5 A_SkullPop;
			TNT1 AAAA 5;
			TNT1 A -1;
			Stop;
		Ice:
			goto Death;
	}
}

// Illucia is the female-marine class. Less HP/Defense, more magic ability [minus poison magic], also faster versus Deggaris
class IlluciaHendershot : AetheriusPlayerPawn
{
	default
	{
		Tag "Illucia Hendershot";
		Health 81; // 100
		Player.MaxHealth 81;
		Player.MugShotMaxHealth -1; // 81
		Radius 14;
		Height 52;
		Mass 92;
		PainChance 255;
		Scale 0.975; // 0.9
		species "Players";
		Speed 1;
		+NOSKIN
		+PLAYERPAWN.NOTHRUSTWHENINVUL
		+THRUSPECIES
		+DONTMORPH
		DamageFactor "Normal", 1.143; // 87.5% the physical defense of a normal player.
		DamageFactor "Magic", 0.75; // 133% the magical defense of a normal player
		DamageFactor "Fire", 1;
		DamageFactor "Ice", 1;
		DamageFactor "Thunder", 1;
		DamageFactor "Holy", 1.33;
		DamageFactor "Eldritch", 1.25;
		DamageFactor "Dark", 0.67;
		DamageFactor "Spiritual", 1.0;
		DamageFactor "Wind", 1.0;
		DamageFactor "Melee", 1.0;
		DamageFactor "Stomp", 1.0;
		DamageFactor "Trample", 1.0;
		DamageFactor "Sceptre", 1.0;
		DamageFactor "Slime", 1.0; // Damage Floors
		DamageFactor "Magma", 1.0; // Damage Floors
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Drowning", 0.875;
		DamageFactor "Falling", 0.25;
		Damagefactor "Bullet", 1.0;
		Damagefactor "Explosive", 1.0;
		radiusdamagefactor 1.0;
		Damagefactor "Fist", 1.0;
		Damagefactor "Kick", 1.0;
		Damagefactor "Gauntlets", 1.0;
		Damagefactor "Chainsaw", 1.0;
		DamageFactor "Acid", 1.0;
		DamageFactor "Poison", 1.0;
		DamageFactor "PoisonElemental", 1.0;
		Damagefactor "IncarnateGlare", 0.67; // Same as Dark
		DamageFactor "Sigil", 1;
		DamageFactor "SpectralLow", 1;
		DamageFactor "ImpSoul", 1;
		DamageFactor "DarkImpSoul", 1;
		DamageFactor "CacodemonSoul", 1;
		DamageFactor "CacolanternSoul", 1;
		DamageFactor "AbaddonSoul", 1;
		DamageFactor "KnightSoul", 1;
		DamageFactor "BaronSoul", 1;
		DamageFactor "BelphegorSoul", 1;
		DamageFactor "BrusierFist", 1;
		DamageFactor "ArchonSoul", 1;
		DamageFactor "PyroDemonSoul", 1;
		DamageFactor "IncarnateSoul", 1;
		DamageFactor "DiabloistSoul", 1;
		DamageFactor "BalrogSoul", 1;
		DamageFactor "HElementalSoul", 1;
		DamageFactor "HOverlordSoul", 1;
		DamageFactor "Railgun", 1;
		DamageFactor "Disintergrate", 1;
		DamageFactor "Telefrag", 1;
		DamageFactor "SpectralTouch", 1;

		Player.Portrait "ILLPORT2";
		Player.ViewHeight 38;
		Player.JumpZ 8.5;
		Player.ForwardMove 2.25, 1.125;
		Player.SideMove 2.25, 1.125;
		Player.InvulnerabilityMode "Reflective";
		Player.DisplayName "Illucia Hendershot";
		Player.CrouchSprite "TNT1";
		Player.Face "ILL";
		Player.StartItem "PlayerStatItem";
		Player.StartItem "PlayerStatItem2";
		Player.StartItem "PlayerStatItem3";
		//Player.StartItem "Resistances";
		Player.StartItem "FistIllucia";
		Player.StartItem "Pistol2";
		Player.StartItem "Clip", 50;

		Player.StartItem "Shell", 10;
		Player.StartItem "Shotgun2";
		Player.StartItem "RocketAmmo", 10;
		Player.StartItem "PlasmaRifle2";
		Player.StartItem "Cell", 100;

		Player.SoundClass "IlluciaSND";
		// Player.StartItem "GreenArmor";
		Player.WeaponSlot 1, "FistIllucia", "Chainsaw2", "DoubleBladedChainsaw", "SauronGauntletsIllucia";
		Player.WeaponSlot 2, "Pistol2", "DualPistols";
		Player.WeaponSlot 3, "Shotgun2", "SuperShotgun2";
		Player.WeaponSlot 4, "Chaingun2", "Minigun";
		Player.WeaponSlot 5, "RocketLauncher2";
		Player.WeaponSlot 6, "PlasmaRifle2", "Railgun2", "Repeater2", "Karasawa2";
		Player.WeaponSlot 7, "BFG90002";
		Player.WeaponSlot 8, "64Unmaker", "NNSigil";
		Player.ColorRange 112, 127;
		Player.ColorSet 0, "Green",         0x70, 0x7F,  0x72;
		Player.ColorSet 1, "Gray",          0x60, 0x6F,  0x62; // Called "Indigo" originally so as to have a unique initial
		Player.ColorSet 2, "Brown",         0x40, 0x4F,  0x42;
		Player.ColorSet 3, "Red",           0x20, 0x2F,  0x22;
		// Doom Legacy additions
		Player.ColorSet 4, "Light Gray",    0x58, 0x67,  0x5A;
		Player.ColorSet 5, "Light Brown",   0x38, 0x47,  0x3A;
		Player.ColorSet 6, "Light Red",     0xB0, 0xBF,  0xB2;
		Player.ColorSet 7, "Light Blue",    0xC0, 0xCF,  0xC2;
		Player.SpawnClass "Any";
	}

	States
	{
		Pain.Charm:
			Goto See;
		Pain.Heal1: 
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,0);
			Goto See;
		Pain.Heal2: 
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,1);
			Goto See;
		Pain.Heal3: 
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,2);
			Goto See;
		Pain.Heal4: 
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,3);
			Goto See;
		Spawn:
			ILLP A 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Loop;
		See:
			ILLP ABCD 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Loop;
		Missile:
			ILLP EEE 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Goto Spawn;
		Melee:
			ILLP F 6 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Goto Missile;
		Pain:
			ILLP G 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			ILLP G 4 
			{
				A_APPBreathe(1.0, 0.976471, 0.00214, 4);
				A_APPPain();
			}
			Goto Spawn;
		Death:
			ILLP H 0 A_APPBreatheReset();
			ILLP H 0 A_PlayerSkinCheck("AltSkinDeath");
		Death1:
			ILLP H 10;
			ILLP I 10 A_PlayerScream;
			ILLP J 10 A_NoBlocking;
			ILLP KLM 10;
			ILLP N -1;
			Stop;
		XDeath:
			ILLP O 0 A_APPBreatheReset();
			ILLP O 0 A_PlayerSkinCheck("AltSkinXDeath");
		XDeath1:
			ILLP O 5;
			ILLP P 0 A_PlayerSkinCheck("AltSkinXDeath");
			ILLP P 5 A_XScream;
			ILLP Q 0 A_PlayerSkinCheck("AltSkinXDeath");
			ILLP Q 5 A_NoBlocking;
			ILLP RSTUV 5;
			ILLP W -1;
			Stop;
		AltSkinDeath:
			ILLP H 0 A_APPBreatheReset();
			ILLP H 6;
			ILLP I 6 A_PlayerScream;
			ILLP JK 6;
			ILLP L 6 A_NoBlocking;
			ILLP MNO 6;
			ILLP P -1;
			Stop;
		AltSkinXDeath:
			ILLP Q 0 A_APPBreatheReset();
			ILLP Q 5 A_PlayerScream;
			ILLP R 0 A_NoBlocking;
			ILLP R 5 A_SkullPop;
			ILLP STUV 5;
			ILLP W -1;
			Stop;
		Ice:
			goto Death;
	}
}

// Deggaris is the closest thing to a standard DoomGuy glass, though he is somewhat more durable than the original Doomguy, but has a lot less in magic, but has poison spells Illucia doesn't
class DeggarisMontegger : AetheriusPlayerPawn
{
	default
	{
		Tag "Deggaris Montegger";
		Health 103; // 100
		Player.MaxHealth 103;
		Player.MugShotMaxHealth -1; // 103
		Radius 16;
		Height 56;
		Scale 1;
		Mass 115;
		PainChance 255;
		species "Players";
		Speed 1;
		+NOSKIN
		+PLAYERPAWN.NOTHRUSTWHENINVUL
		+THRUSPECIES
		+DONTMORPH
		DamageFactor "Normal", 0.889; // 112.5% the physical defense of a normal player.
		DamageFactor "Magic", 1.2; // 83.3% the magical defense of a normal player
		DamageFactor "Fire", 1;
		DamageFactor "Ice", 1;
		DamageFactor "Thunder", 1;
		DamageFactor "Holy", 0.75;
		DamageFactor "Eldritch", 0.9375;
		DamageFactor "Dark", 0.875;
		DamageFactor "Spiritual", 0.8125;
		DamageFactor "Wind", 1.0;
		DamageFactor "Melee", 1.0;
		DamageFactor "Stomp", 1.0;
		DamageFactor "Trample", 1.0;
		DamageFactor "Sceptre", 1.0;
		DamageFactor "Slime", 1.0; // Damage Floors
		DamageFactor "Magma", 1.0; // Damage Floors
		DamageFactor "Crush", 1.0; // 8.0
		DamageFactor "Drowning", 0.875;
		DamageFactor "Falling", 0.25;
		Damagefactor "Bullet", 1.0;
		Damagefactor "Explosive", 1.0;
		radiusdamagefactor 1.0;
		Damagefactor "Fist", 1.0;
		Damagefactor "Kick", 1.0;
		Damagefactor "Gauntlets", 1.0;
		Damagefactor "Chainsaw", 1.0;
		DamageFactor "Acid", 1.0;
		DamageFactor "Poison", 1.0;
		DamageFactor "PoisonElemental", 1.0;
		Damagefactor "IncarnateGlare", 0.875; // Same as Dark
		DamageFactor "Sigil", 1;
		DamageFactor "SpectralLow", 1;
		DamageFactor "ImpSoul", 1;
		DamageFactor "DarkImpSoul", 1;
		DamageFactor "CacodemonSoul", 1;
		DamageFactor "CacolanternSoul", 1;
		DamageFactor "AbaddonSoul", 1;
		DamageFactor "KnightSoul", 1;
		DamageFactor "BaronSoul", 1;
		DamageFactor "BelphegorSoul", 1;
		DamageFactor "BrusierFist", 1;
		DamageFactor "ArchonSoul", 1;
		DamageFactor "PyroDemonSoul", 1;
		DamageFactor "IncarnateSoul", 1;
		DamageFactor "DiabloistSoul", 1;
		DamageFactor "BalrogSoul", 1;
		DamageFactor "HElementalSoul", 1;
		DamageFactor "HOverlordSoul", 1;
		DamageFactor "Railgun", 1;
		DamageFactor "Disintergrate", 1;
		DamageFactor "Telefrag", 1;
		DamageFactor "SpectralTouch", 1;

		Player.Portrait "DEGPORT2";
		Player.ViewHeight 41;
		Player.JumpZ 7.5;
		Player.ForwardMove 2.0, 1.0;
		Player.SideMove 2.0, 1.0;
		Player.InvulnerabilityMode "Ghost";
		Player.DisplayName "Deggaris Montegger";
		Player.CrouchSprite "PLYC";
		Player.StartItem "PlayerStatItem";
		Player.StartItem "PlayerStatItem2";
		Player.StartItem "PlayerStatItem3";
		//Player.StartItem "Resistances";
		Player.StartItem "Pistol2";
		Player.StartItem "FistDeggaris";
		Player.StartItem "Clip", 50;

		Player.StartItem "DualPistols";
		Player.StartItem "Shotgun2";
		Player.StartItem "Shell", 10;
		Player.StartItem "RocketAmmo", 10;
		Player.StartItem "Cell", 100;

		Player.SoundClass "DeggarisSND";
		// Player.StartItem "GreenArmor";
		Player.WeaponSlot 1, "FistDeggaris", "DoubleBladedChainsaw", "Chainsaw2", "SauronGauntlets";
		Player.WeaponSlot 2, "Pistol2", "DualPistols";
		Player.WeaponSlot 3, "Shotgun2", "SuperShotgun2";
		Player.WeaponSlot 4, "Chaingun2", "Minigun";
		Player.WeaponSlot 5, "RocketLauncher2";
		Player.WeaponSlot 6, "PlasmaRifle2", "Railgun2", "Repeater2", "Karasawa2";
		Player.WeaponSlot 7, "BFG90002";
		Player.WeaponSlot 8, "64Unmaker", "NNSigil";
		Player.ColorRange 112, 127;
		Player.ColorSet 0, "Green",         0x70, 0x7F,  0x72;
		Player.ColorSet 1, "Gray",          0x60, 0x6F,  0x62; // Called "Indigo" originally so as to have a unique initial
		Player.ColorSet 2, "Brown",         0x40, 0x4F,  0x42;
		Player.ColorSet 3, "Red",           0x20, 0x2F,  0x22;
		// Doom Legacy additions
		Player.ColorSet 4, "Light Gray",    0x58, 0x67,  0x5A;
		Player.ColorSet 5, "Light Brown",   0x38, 0x47,  0x3A;
		Player.ColorSet 6, "Light Red",     0xB0, 0xBF,  0xB2;
		Player.ColorSet 7, "Light Blue",    0xC0, 0xCF,  0xC2;
		Player.SpawnClass "Any";
	}

	States
	{
		Pain.Charm: 
			Goto See;
		Pain.Heal1: 
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,0); 
			Goto See;
		Pain.Heal2:
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,1); 
			Goto See;
		Pain.Heal3:
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,2); 
			Goto See;
		Pain.Heal4:
			TNT1 A 0 ACS_NamedExecuteAlways("Healing_Actor",0,3); 
			Goto See;
		Spawn:
			SENA A 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Loop;
		See:
			SENA ABCD 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Loop;
		Missile:
			SENA E 12 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Goto Spawn;
		Melee:
			SENA F 6 BRIGHT A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			Goto Missile;
		Pain:
			SENA G 4 A_APPBreathe(1.0, 0.976471, 0.00214, 4);
			SENA G 4 
			{
				A_APPBreathe(1.0, 0.976471, 0.00214, 4);
				A_APPPain();
			}
			Goto Spawn;
		Death:
			SENA H 0 A_APPBreatheReset();
			SENA H 0 A_PlayerSkinCheck("AltSkinDeath");
		Death1:
			SENA H 10;
			SENA I 10 A_PlayerScream;
			SENA J 10 A_NoBlocking;
			SENA KLM 10;
			SENA N -1;
			Stop;
		XDeath:
			SENA O 0 A_APPBreatheReset();
			SENA O 0 A_PlayerSkinCheck("AltSkinXDeath");
		XDeath1:
			SENA O 5;
			SENA P 0 A_PlayerSkinCheck("AltSkinXDeath");
			SENA P 5 A_XScream;
			SENA Q 0 A_PlayerSkinCheck("AltSkinXDeath");
			SENA Q 5 A_NoBlocking;
			SENA RSTUV 5;
			SENA W -1;
			Stop;
		AltSkinDeath:
			SENA H 0 A_APPBreatheReset();
			SENA H 6;
			SENA I 6 A_PlayerScream;
			SENA JK 6;
			SENA L 6 A_NoBlocking;
			SENA MNO 6;
			SENA P -1;
			Stop;
		AltSkinXDeath:
			SENA Q 0 A_APPBreatheReset();
			SENA Q 5 A_PlayerScream;
			SENA R 0 A_NoBlocking;
			SENA R 5 A_SkullPop;
			SENA STUVWX 5;
			SENA Y -1;
			Stop;
		Ice:
			goto Death;
	}
}
