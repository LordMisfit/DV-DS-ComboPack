// Hell Warrior Shield [moved from KDIZD CompatPack]
actor HWShieldDefense : ShieldingBuff { }
actor HWShieldDefenseExtra : ShieldingBuff { }

// Imp Warlord Shielding
actor ImpWarlordShieldDefend : ShieldingBuff { } // 0.5
actor ImpWarlordShieldDefendExtra : ShieldingBuff { } // 0.1

// Death Knight Shielding
actor DKnightShieldDefend : ShieldingBuff { } // 0.25
actor DKnightShieldDefendExtra : ShieldingBuff { } // 0.05

// Acolyte "Shielding"
actor AcolyteShieldDefend : ShieldingBuff { } // 0.75
actor AcolyteShieldDefendExtra : ShieldingBuff { } // 0.30

// Centaur/Slaughtaur Shielding
actor CentaurShieldDefend : ShieldingBuff { } // 0.333
actor CentaurShieldDefendExtra : ShieldingBuff { } // 0.0666
actor SlaughtaurShieldDefend : ShieldingBuff { } // 0.167
actor SlaughtaurShieldDefendExtra : ShieldingBuff { } // 0.0333

// Maulotaur "Shielding"
actor MaulotaurChargeDefense : ShieldingBuff { } // 0.25

// Heresiarch "Shielding"
actor HeresiarchShieldDefense : ShieldingBuff { } // 0.125

// Heresiarch "Shielding"
actor NightmarePhaseOutDefense : ShieldingBuff { } // 0.0625

actor HowitzerBase : AetheriusPuffZSC
{
	Tag "Howitzer Shell"
	var float user_ignoreaoeimmunity;
	Radius 11
	Height 8
	DamageType "Explosive"
	VSpeed 0
	RenderStyle "Translucent"
	+PUFFGETSOWNER +PUFFONACTORS
	Scale 1.5
	
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_ChangeFlag("FORCERADIUSDMG",0);
				user_ignoreaoeimmunity = (DemolitionsExpertPerkLevel * 2.5) + (DemolitionsExpertEXPerkLevel * 6.25);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { A_ChangeFlag("FORCERADIUSDMG",1); }

				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "");
				A_Quake(4, 4, 0, 256, "");
				finaldamagedealt = A_GetPlayerAttackDamage(9,0);
				A_Explode((finaldamagedealt*2),192,XF_HURTSOURCE,false,64,0,10,"BulletPuff","Explosive");
			}
			MISL B 8 Bright 
			MISL C 6 Bright
			MISL D 4 Bright
			Stop
	}
}

actor HowitzerNoAOE : HowitzerBase
{
	+PUFFGETSOWNER +PUFFONACTORS
	States
	{
		Spawn:
		Melee:
		Crash:
			TNT1 A 0 NoDelay
			{
				A_ChangeFlag("FORCERADIUSDMG",0);
				user_ignoreaoeimmunity = (DemolitionsExpertPerkLevel * 2.5) + (DemolitionsExpertEXPerkLevel * 6.25);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { A_ChangeFlag("FORCERADIUSDMG",1); }

				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "");
				A_Quake(4, 4, 0, 256, "");
				finaldamagedealt = A_GetPlayerAttackDamage(9,0);
				A_Explode((finaldamagedealt*2),192,0,false,64,0,10,"BulletPuff","Explosive");
			}
			MISL B 8 Bright 
			MISL C 6 Bright
			MISL D 4 Bright
			Stop
	}
}

//
ACTOR RocketPlayer : RocketBase
{
	Tag "Rocket"
	DamageType "Explosive"
	Damage (finaldamagedealt)
	States
	{
		Spawn:
			MISL A 0 NoDelay 
			{ 
				A_ChangeFlag("FORCERADIUSDMG",0);
				user_ignoreaoeimmunity = (DemolitionsExpertPerkLevel * 2.5) + (DemolitionsExpertEXPerkLevel * 6.25);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { A_ChangeFlag("FORCERADIUSDMG",1); }

				finaldamagedealt = A_GetPlayerAttackDamage(8,0); 
				A_ScaleVelocity(1.00 + ((DemolitionsExpertPerkLevel * 0.10) + (DemolitionsExpertEXPerkLevel * 0.25)));
			}
		Idle:
			MISL A 1 Bright
			Loop
		Death:
			MISL A 0 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(9,0); 
			}
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright A_Explode((finaldamagedealt),128,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive")
			MISL C 6 Bright
			MISL D 4 Bright
			Stop
	}
}

ACTOR RocketPlayerNoAOE : RocketBase
{
	Tag "Rocket"
	DamageType "Explosive"
	RenderStyle "Add"
	Alpha 0.75
	Damage (finaldamagedealt)
	States
	{
		Spawn:
			MISL A 0 NoDelay 
			{ 
				A_ChangeFlag("FORCERADIUSDMG",0);
				user_ignoreaoeimmunity = (DemolitionsExpertPerkLevel * 2.5) + (DemolitionsExpertEXPerkLevel * 6.25);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { A_ChangeFlag("FORCERADIUSDMG",1); }

				finaldamagedealt = A_GetPlayerAttackDamage(8,0); 
				A_ScaleVelocity(1.00+((DemolitionsExpertPerkLevel*0.10)+(DemolitionsExpertEXPerkLevel*0.25)));
			}
		Idle:
			MISL A 1 Bright
			Loop
		Death:
			MISL A 0 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(9,0); 
			}
			TNT1 A 0 
			{
				A_StartSound("weapons/rocklx",CHAN_7);
				A_Quake(1, 4, 0, 512, "nosound/silent");
				A_Quake(4, 4, 0, 256, "nosound/silent");
			}
			MISL B 8 Bright A_Explode((finaldamagedealt),128,0,false,0,0,10,"BulletPuff","Explosive")
			MISL C 6 Bright
			MISL D 4 Bright
			Stop
	}
}

ACTOR RocketPlayerSeeking : RocketPlayer
{
	Tag "Homing Rocket"
	DamageType "Explosive"
	Radius 11
	Height 8
	Speed 30
	Damage (10 * random(1,8))
	var float user_seekstrength;
	var int user_specificTarget;
	SeeSound "weapons/hrlfir"
	DeathSound "weapons/hrlexp"
	States
	{
		Spawn:
			HMIS A 0 NoDelay 
			{
				A_ChangeFlag("FORCERADIUSDMG",0);
				user_ignoreaoeimmunity = (DemolitionsExpertPerkLevel * 2.5) + (DemolitionsExpertEXPerkLevel * 6.25);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { A_ChangeFlag("FORCERADIUSDMG",1); }

				finaldamagedealt = (A_GetPlayerAttackDamage(8,0) * 0.5);
				A_ScaleVelocity(1.00 + ((DemolitionsExpertPerkLevel * 0.05) + (DemolitionsExpertEXPerkLevel * 0.125)));
				user_seekstrength = DemolitionsExpertPerkLevel + (DemolitionsExpertEXPerkLevel * 2.5);
				user_seekstrength *= (1.00 + ((DemolitionsExpertPerkLevel * 0.05) + (DemolitionsExpertEXPerkLevel * 0.125)) );
				if (user_seekstrength > 0)
				{
					A_ChangeFlag("SEEKERMISSILE", true);
					
					// When the rocket is first fired, check if it's being aimed at a specific target. If so, lock on to that target.
					user_specificTarget = A_SelectSeekTargetByShooterAim;
				}
				// This is needed so that subclasses can override the Idle state.
				return state("Idle");
			}
		Idle:
			HMIS A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			Loop
		Death:
			MISL A 0 
			{ 
				finaldamagedealt = (A_GetPlayerAttackDamage(9,0) * 0.5); 
			}
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1)
			BAL3 C 8 Bright A_Explode((finaldamagedealt),96,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive")
			BAL3 DE 5 Bright
			stop
	}
}

ACTOR RocketPlayerDrunk : RocketPlayerSeeking
{
	Tag "Drunk Rocket"
	DamageType "Explosive"
	Radius 11
	Height 8
	Speed 30
	Damage (10 * random(1,8))
	var float user_drunkbasefactor;
	var float user_drunkenness;
	SeeSound "weapons/hrlfir"
	DeathSound "weapons/hrlexp"
	States
	{
		Idle:
			"####" "#" 0 
			{
				if (random(1,8) == 1) { user_drunkbasefactor = 1.0; }
				else
				{
					if (random(1,8) == 1) { user_drunkbasefactor = 0.4; }
					else { user_drunkbasefactor = 0.7; }
				}
				user_drunkbasefactor *= (random(36,44) * 0.025);
				user_drunkenness = max(0.0, 10.0 - ((user_seekstrength * (1.0 * user_drunkbasefactor)) * (user_seekstrength * (0.4 * user_drunkbasefactor))));
				//A_LogFloat(user_drunkenness);
			}
			HMIS A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
					if (user_drunkenness > 0)
					{
						A_DrunkMissile(user_drunkenness, user_drunkenness);
					}
				}
			}
			Wait
		Death:
			MISL A 0 
			{ 
				finaldamagedealt = (A_GetPlayerAttackDamage(9,0) * 0.5); 
			}
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1)
			BAL3 C 8 Bright A_Explode((finaldamagedealt*0.5),96,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive")
			BAL3 DE 5 Bright
			stop
	}
}

ACTOR RocketPlayerSeekingNoAOE : RocketPlayerNoAOE
{
	Tag "Homing Rocket"
	DamageType "Explosive"
	Radius 11
	Height 8
	Speed 30
	Damage (10 * random(1,8))
	var float user_seekstrength;
	var int user_specificTarget;
	SeeSound "weapons/hrlfir"
	DeathSound "weapons/hrlexp"
	States
	{
		Spawn:
			HMIS A 0 NoDelay 
			{
				A_ChangeFlag("FORCERADIUSDMG",0);
				user_ignoreaoeimmunity = (DemolitionsExpertPerkLevel * 2.5) + (DemolitionsExpertEXPerkLevel * 6.25);
				if (frandom(0.01,100.00) <= user_ignoreaoeimmunity) { A_ChangeFlag("FORCERADIUSDMG",1); }

				finaldamagedealt = A_GetPlayerAttackDamage(8,0);
				A_ScaleVelocity(1.00 + ((DemolitionsExpertPerkLevel * 0.05) + (DemolitionsExpertEXPerkLevel * 0.125)));
				user_seekstrength = DemolitionsExpertPerkLevel + (DemolitionsExpertEXPerkLevel * 2.5);
				user_seekstrength *= (1.00 + ((DemolitionsExpertPerkLevel * 0.05) + (DemolitionsExpertEXPerkLevel * 0.125)) );
				if (user_seekstrength > 0)
				{
					A_ChangeFlag("SEEKERMISSILE", true);
					
					// When the rocket is first fired, check if it's being aimed at a specific target. If so, lock on to that target.
					user_specificTarget = A_SelectSeekTargetByShooterAim;
				}
				// This is needed so that subclasses can override the Idle state.
				return state("Idle");
			}
		Idle:
			HMIS A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
				}
			}
			Loop
		Death:
			MISL A 0 
			{ 
				finaldamagedealt = (A_GetPlayerAttackDamage(9,0) * 0.5); 
			}
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1)
			BAL3 C 8 Bright A_Explode((finaldamagedealt*0.5),96,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive")
			BAL3 DE 5 Bright
			stop
	}
}

ACTOR RocketPlayerDrunkNoAOE : RocketPlayerSeekingNoAOE
{
	Tag "Drunk Rocket"
	DamageType "Explosive"
	Radius 11
	Height 8
	Speed 30
	Damage (10 * random(1,8))
	var float user_drunkbasefactor;
	var float user_drunkenness;
	SeeSound "weapons/hrlfir"
	DeathSound "weapons/hrlexp"
	States
	{
		Idle:
			"####" "#" 0 
			{
				if (random(1,8) == 1) { user_drunkbasefactor = 1.0; }
				else
				{
					if (random(1,8) == 1) { user_drunkbasefactor = 0.4; }
					else { user_drunkbasefactor = 0.7; }
				}
				user_drunkbasefactor *= (random(36,44) * 0.025);
				user_drunkenness = max(0.0, 10.0 - ((user_seekstrength * (1.0 * user_drunkbasefactor)) * (user_seekstrength * (0.4 * user_drunkbasefactor))));
				//A_LogFloat(user_drunkenness);
			}
			HMIS A 1 Bright 
			{
				if (user_seekstrength > 0)
				{
					A_SuperSeekerMissile(user_seekstrength, user_seekstrength, !user_specificTarget);
					if (user_drunkenness > 0.0)
					{
						A_DrunkMissile(user_drunkenness, user_drunkenness);
					}
				}
			}
			Wait
		Death:
			MISL A 0 
			{ 
				finaldamagedealt = (A_GetPlayerAttackDamage(9,0) * 0.5); 
			}
			TNT1 A 0 
			{
				A_StartSound("weapons/hrlexp",CHAN_7);
				A_Quake(1, 4, 0, 256, "nosound/silent");
				A_Quake(3, 4, 0, 128, "nosound/silent");
			}
			BAL3 C 0 Bright A_SetTranslucent (0.67,1)
			BAL3 C 8 Bright A_Explode((finaldamagedealt*0.5),96,XF_HURTSOURCE,false,0,0,10,"BulletPuff","Explosive")
			BAL3 DE 5 Bright
			stop
	}
}

actor PlasmaBallPlayer : PlasmaBallBase
{
	Tag "Plasma Ball"
	Damage (finaldamagedealt)
	DamageType "Plasma"
	
	States
	{
		Spawn:
			PLSS A 0 NoDelay Bright 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(11,0); 
				A_ScaleVelocity(1.00+((PlasmaAccuracyPerkLevel*0.10)+(PlasmaAccuracyEXPerkLevel*0.25)));
			}
		Idle:
			PLSS AB 6 Bright
			Loop
		Death:
			PLSE AAAABBBBCCCCDDDDEEEE 1 Bright
			{
				user_projtimer++;
				if (user_projtimer > 1)
				{
					A_ChangeFlag("NODAMAGETHRUST",0);
					A_ChangeFlag("PAINLESS",1);
				}
				user_misctimer1 = 4 - (PlasmaAccuracyPerkLevel * 0.15) - (PlasmaAccuracyEXPerkLevel * 0.375);
				user_misctimer2 = 16 - (PlasmaAccuracyPerkLevel * 1) - (PlasmaAccuracyEXPerkLevel * 2.5);
				if (user_misctimer1 < 1) { user_misctimer1 = 1; }
				if (user_misctimer2 < 1) { user_misctimer2 = 1; }
				A_ChangeFlag("FORCERADIUSDMG",0);
				if ((user_projtimer % user_misctimer1) == 0) 
				{ 
					if (random(1,user_misctimer2) <= 2) { A_ChangeFlag("FORCERADIUSDMG",1); }

					finaldamagedealt = A_GetPlayerAttackDamage(11,0) * 0.125;
					A_Explode(finaldamagedealt,(16+(PlasmaAccuracyPerkLevel*8)+(PlasmaAccuracyEXPerkLevel*20)),0,0,(8+(PlasmaAccuracyPerkLevel*4)+(PlasmaAccuracyPerkLevel*10)));
				}
			}
			Stop
	}
}

actor PlasmaBall1Player : PlasmaBall1Base
{
	Tag "Plasma Ball [BFG]"
	Damage (finaldamagedealt)
	DamageType "BFG"
	States
	{
		Spawn:
			PLS1 A 0 NoDelay Bright 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(12,0); 
				A_ScaleVelocity(1.00+((PlasmaAccuracyPerkLevel*0.10)+(PlasmaAccuracyEXPerkLevel*0.25)));
			}
		Idle:
			PLS1 AB 6 Bright
			Loop
		Death:
			PLS1 C 4 Bright
			{
				user_projtimer++;
				if (user_projtimer > 1)
				{
					A_ChangeFlag("NODAMAGETHRUST",0);
					A_ChangeFlag("PAINLESS",1);
				}
				user_misctimer1 = 4 - (PlasmaAccuracyPerkLevel * 0.15) - (PlasmaAccuracyEXPerkLevel * 0.375);
				user_misctimer2 = 16 - (PlasmaAccuracyPerkLevel * 1) - (PlasmaAccuracyEXPerkLevel * 2.5);
				if (user_misctimer1 < 1) { user_misctimer1 = 1; }
				if (user_misctimer2 < 1) { user_misctimer2 = 1; }
				A_ChangeFlag("FORCERADIUSDMG",0);
				if ((user_projtimer % user_misctimer1) == 0) 
				{ 
					if (random(1,user_misctimer2) <= 2) { A_ChangeFlag("FORCERADIUSDMG",1); }

					finaldamagedealt = A_GetPlayerAttackDamage(12,0) * 0.5;
					A_Explode(finaldamagedealt,(16+(PlasmaAccuracyPerkLevel*8)+(PlasmaAccuracyEXPerkLevel*20)),0,0,(8+(PlasmaAccuracyPerkLevel*4)+(PlasmaAccuracyPerkLevel*10)));
				}
			}
			PLS1 DEFG 4 Bright
			Stop
	}
}

actor PlasmaBall2Player : PlasmaBall2Base
{
	Tag "Plasma Ball [BFG]"
	Damage (finaldamagedealt)
	DamageType "BFG"
	States
	{
		Spawn:
			PLS2 A 0 NoDelay Bright 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(13,0); 
				A_ScaleVelocity(1.00+((PlasmaAccuracyPerkLevel*0.10)+(PlasmaAccuracyEXPerkLevel*0.25)));
			}
		Idle:
			PLS2 AB 6 Bright
			Loop
		Death:
			PLS2 C 4 Bright
			{
				user_projtimer++;
				if (user_projtimer > 1)
				{
					A_ChangeFlag("NODAMAGETHRUST",0);
					A_ChangeFlag("PAINLESS",1);
				}
				user_misctimer1 = 4 - (PlasmaAccuracyPerkLevel * 0.15) - (PlasmaAccuracyEXPerkLevel * 0.375);
				user_misctimer2 = 16 - (PlasmaAccuracyPerkLevel * 1) - (PlasmaAccuracyEXPerkLevel * 2.5);
				if (user_misctimer1 < 1) { user_misctimer1 = 1; }
				if (user_misctimer2 < 1) { user_misctimer2 = 1; }
				A_ChangeFlag("FORCERADIUSDMG",0);
				if ((user_projtimer % user_misctimer1) == 0) 
				{ 
					if (random(1,user_misctimer2) <= 2) { A_ChangeFlag("FORCERADIUSDMG",1); }

					finaldamagedealt = A_GetPlayerAttackDamage(13,0) * 0.5;
					A_Explode(finaldamagedealt,(16+(PlasmaAccuracyPerkLevel*8)+(PlasmaAccuracyEXPerkLevel*20)),0,0,(8+(PlasmaAccuracyPerkLevel*4)+(PlasmaAccuracyPerkLevel*10)));
				}
			}
			PLS2 DE 4 Bright
			Stop
	}
}
actor BFGExtraNew : AetheriusProjectileZSC
{
	Tag "BFG Tracer"
	+PUFFGETSOWNER
	+NOBLOCKMAP
	+NOGRAVITY
	RenderStyle "Add"
	Alpha 0.75
	DamageType "BFGSplash"
	States
	{
		Spawn:
			BFE2 AABBCCDD 4 Bright
			Stop
	}
}

ACTOR BFGExtraPlayer : BFGExtraNew
{
	var int user_tracertimer;
	var int user_tracertiming;
	Tag "BFG Tracer"
	+NOBLOCKMAP
	+NOGRAVITY
	RenderStyle "Add"
	Alpha 0.75
	DamageType "BFGSplash"
	States
	{
		Spawn:
			BFE2 AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDD 1 Bright
			{
				user_tracertiming = randompick(3,4,4);
				if (CallACS("MiscVarCheckDECORATE",10029) == 1) { user_tracertiming = randompick(2,3,4); }
				if (CallACS("MiscVarCheckDECORATE",10029) >= 2) { user_tracertiming = randompick(2,2,3); }
				user_tracertimer++;
				if ((user_tracertimer % user_tracertiming) == 0) 
				{
					A_ChangeFlag("FORCERADIUSDMG",0);
					if (CallACS("MiscVarCheckDECORATE",10029) == 0 && random(1,4) == 1) { A_ChangeFlag("FORCERADIUSDMG",1); }
					if (CallACS("MiscVarCheckDECORATE",10029) == 1 && random(1,3) == 1) { A_ChangeFlag("FORCERADIUSDMG",1); }
					if (CallACS("MiscVarCheckDECORATE",10029) == 2 && random(1,2) == 1) { A_ChangeFlag("FORCERADIUSDMG",1); }
					A_Explode(A_GetPlayerAttackDamage(16,1),16,0,0,16,0,0,"BulletPuff","BFGSplash"); 
				}
				if (user_tracertimer > 1) 
				{
					A_ChangeFlag("NODAMAGETHRUST",0);
					A_ChangeFlag("PAINLESS",1);
					A_ChangeFlag("FORCERADIUSDMG",0);
				}
			}
			Stop
	}
}

actor BFGBallPlayer : BFGBallBase
{
	var int user_detonationtiming;
	Tag "BFG Ball"
	DamageType "BFG"
	Game Doom
	SpawnID 128
	Radius 13
	Height 8
	Speed 25
	Damage (finaldamagedealt)
	Projectile
	+RANDOMIZE
	RenderStyle "Add"
	Alpha 0.75
	DeathSound "weapons/bfgx"
	Obituary "$OB_MPBFG_BOOM"
	States
	{
		Spawn:
			BFS1 A 0 NoDelay Bright 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(14,0); 
				A_ScaleVelocity(1.00+((PlasmaAccuracyPerkLevel*0.10)+(PlasmaAccuracyEXPerkLevel*0.25)));
			}
		Idle:
			BFS1 AAAABBBB 1 Bright
			{
				user_projtimer++;
				A_ChangeFlag("FORCERADIUSDMG",0);
				if ((user_projtimer % 4) == 0) { A_ChangeFlag("FORCERADIUSDMG",1); }
				
				if (BFGAttunementPerkLevel <= 0) { user_radiusdmg = frandom(4.8,8.0); user_radiussize = frandom(64.0,72.0); }
				if (BFGAttunementPerkLevel == 1) { user_radiusdmg = frandom(24.0,40.0); user_radiussize = frandom(128.0,144.0); }
				if (BFGAttunementPerkLevel >= 2) { user_radiusdmg = frandom(33.2,72.0); user_radiussize = frandom(192.0,216.0); }
				A_Explode(user_radiusdmg,user_radiussize,XF_EXPLICITDAMAGETYPE,false,(user_radiussize*0.5),0,0,"BulletPuff","BFG");
			}
			Loop
		Death:
			TNT1 A 0 
			{
				A_StartSound("weapons/bfgx",CHAN_7);
				A_Quake(1, 12, 0, 768, "");
				A_Quake(5, 12, 0, 512, "");
			}
			BFE1 AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFF 1 Bright
			{
				user_projtimer++;
				user_detonationtiming = 4;
				if (BFGAttunementPerkLevel >= 2) { user_detonationtiming = 3; }
				A_ChangeFlag("FORCERADIUSDMG",0);
				if ((user_projtimer % user_detonationtiming) == 0) { A_ChangeFlag("FORCERADIUSDMG",1); }

				if (BFGAttunementPerkLevel <= 0) { user_radiusdmg = frandom(4.8,8.0); user_radiussize = frandom(64.0,72.0); }
				if (BFGAttunementPerkLevel == 1) { user_radiusdmg = frandom(24.0,40.0); user_radiussize = frandom(128.0,144.0); }
				if (BFGAttunementPerkLevel >= 2) { user_radiusdmg = frandom(33.2,72.0); user_radiussize = frandom(192.0,216.0); }
				A_Explode(user_radiusdmg,user_radiussize,XF_EXPLICITDAMAGETYPE,false,(user_radiussize*0.5),0,0,"BulletPuff","BFG");

				user_detonationtimer++;
				if ((user_detonationtimer % 5) == 0) { A_ChangeFlag("NODAMAGETHRUST",0); } else { A_ChangeFlag("NODAMAGETHRUST",1); }
				if (user_detonationtimer > 1) { A_ChangeFlag("PAINLESS",1); }
				if (user_detonationtimer == 20)
				{
					finaldamagedealt = A_GetPlayerAttackDamage(15,0);

					A_BFGSpray("BFGExtraPlayer", // flashtype
											A_GetBFGTracers(1), // numrays
											15, // damagecnt
											A_GetBFGTracerAngle, // angle
											A_GetBFGTracerDistance, // distance
											A_GetBFGTracerVAngle, // vrange
											(finaldamagedealt), // explicit damage
											0); // flags
				}
			}
			Stop

		ShotDown:
			TNT1 A 0 
			{
				A_ScaleVelocity(0);
				A_StartSound("weapons/bfgx",CHAN_7,CHANF_DEFAULT,0.5);
				A_Quake(1, 12, 0, 384, "");
				A_Quake(5, 12, 0, 256, "");
			}
			BFE1 AAAABBBBCCCCDDDDEEEEFFFF 1 bright
			{
				user_projtimer++;
				A_ChangeFlag("FORCERADIUSDMG",0);
				if ((user_projtimer % 8) == 0) { A_ChangeFlag("FORCERADIUSDMG",1); }

				A_ChangeFlag("FORCERADIUSDMG",1);
				if (BFGAttunementPerkLevel <= 0) { user_radiusdmg = frandom(4.8,8.0); user_radiussize = frandom(64.0,72.0); }
				if (BFGAttunementPerkLevel == 1) { user_radiusdmg = frandom(24.0,40.0); user_radiussize = frandom(128.0,144.0); }
				if (BFGAttunementPerkLevel >= 2) { user_radiusdmg = frandom(33.2,72.0); user_radiussize = frandom(192.0,216.0); }
				user_radiusdmg *= 0.5;
				user_radiussize *= 0.5;
				A_Explode(user_radiusdmg,user_radiussize,XF_EXPLICITDAMAGETYPE,false,(user_radiussize*0.5),0,0,"BulletPuff","BFG");
			}
			Stop
	}
}


actor WindyProjectile : AetheriusProjectileZSC
{
	Tag "Wind Projectile"
	height 4
	radius 2
	speed 20
	damage (0)
	+RIPPER
	+PAINLESS 
	PROJECTILE
	states
	{
		Spawn:
			TNT1 A 2 A_RadiusThrust (2500, 320, 0)
			TNT1 A 2 A_RadiusThrust (5000, 480, 0)
			TNT1 A 2 A_RadiusThrust (7500, 560, 0)
			TNT1 A 2 A_RadiusThrust (10000, 640, 0)
			TNT1 A 2 A_RadiusThrust (7500, 560, 0)
			TNT1 A 2 A_RadiusThrust (5000, 480, 0)
			Loop
		Death:
			TNT1 A 0 A_RadiusThrust (12500, 800, 0)
			Stop
	}
}

// Melee Hitsparks
actor MeleeHitSpark1 : AetheriusPuffZSC
{ 
	Scale 0.375
	VSpeed 0
	RenderStyle "Translucent"
	+NOINTERACTION +SPECTRAL
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay { A_HitSparkGetSize; A_HitSparkGetSize2; }
		Finish:
			TNT1 A 0 { A_HitSparkResize; }
			HTS1 AABBCC 1 BRIGHT { A_Fadeout(alpha/12); }
			stop
	}
}
actor MeleeHitSpark2 : MeleeHitSpark1
{ 
	Scale 0.375
	VSpeed 0
	RenderStyle "Translucent"
	+NOINTERACTION +SPECTRAL
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay { A_HitSparkGetSize; A_HitSparkGetSize2; }
		Finish:
			TNT1 A 0 { A_HitSparkResize; }
			HTS2 AABBCCDD 1 BRIGHT { A_Fadeout(alpha/12); }
			stop
	}
}
actor MeleeHitSpark3 : MeleeHitSpark1
{ 
	Scale 0.375
	VSpeed 0
	RenderStyle "Translucent"
	+NOINTERACTION +SPECTRAL
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay { A_HitSparkGetSize; A_HitSparkGetSize2; }
		Finish:
			TNT1 A 0 { A_HitSparkResize; }
			HTS3 AABBCCDDEE 1 BRIGHT { A_Fadeout(alpha/12); }
			stop
	}
}
actor MeleeHitSpark4 : MeleeHitSpark1
{
	Scale 0.375
	VSpeed 0
	RenderStyle "Translucent"
	+NOINTERACTION +SPECTRAL
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay { A_HitSparkGetSize; A_HitSparkGetSize2; }
		Finish:
			TNT1 A 0 { A_HitSparkResize; }
			HTS4 AABBCCDD 1 BRIGHT { A_Fadeout(alpha/12); }
			stop
	}
}

// Puffs
actor BulletPuffDVDS : AetheriusPuffZSC
{ 
	Tag "shot"
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	RenderStyle "Translucent"
	Alpha 0.5
	VSpeed 1
	Mass 5
	States
	{
		Spawn:
			PUFF A 4 Bright
			PUFF B 4
			// Intentional fall-through
		Melee:
			PUFF CD 4
			Stop
	}
}

actor DBTPuff : AetheriusPuffZSC replaces BulletPuff
{
	Tag "shot"
	Game Doom
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	+NOINTERACTION
	RenderStyle "Translucent"
	Alpha 0.5
	VSpeed 1
	Mass 1
	DamageType "Bullet"
	States
	{
		Spawn:
			TNT1 A 0
			TNT1 A 0 A_Jump(128,2)
			TNT1 A 0 A_StartSound("puff/ric",CHAN_7)
			TNT1 A 0 A_SpawnItemEx("DBTYellowSpark",0,0,0,0,0,0,0,32)
			TNT1 AA 0 A_SpawnItemEx("DBTPuffSmoke",0,0,0,0,0,frandom(0.1,0.3),0,32)
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("DBTSparkExtra",0,0,0,frandom(0.1,0.5),0,0,random(1,360))
			TNT1 A 1
			Stop
	}
}

actor DBTRailPuff : DBTPuff
{
	Tag "Railgun Blast"
	Game Doom
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	+NOINTERACTION
	RenderStyle "Translucent"
	Alpha 0.5
	VSpeed 1
	Mass 1
	DamageType "Bullet"
	States
	{
		Spawn:
			TNT1 A 0
			TNT1 A 0 A_Jump(128,2)
			TNT1 A 0 A_StartSound("puff/ric",CHAN_7)
			TNT1 A 0 A_SpawnItemEx("DBTYellowSpark",0,0,0,0,0,0,0,32)
			TNT1 AA 0 A_SpawnItemEx("DBTPuffSmoke",0,0,0,0,0,frandom(0.1,0.3),0,32)
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("DBTSparkExtra",0,0,0,frandom(0.1,0.5),0,0,random(1,360))
			TNT1 A 1
			Stop
	}
}

Actor DBTPuffSmoke 
{
	+NOINTERACTION
	+FORCEXYBILLBOARD
	Scale 0.03
	States
	{
		Spawn:
			TNT1 A 0 A_Jump(128,"T2")
		T1:
			X143 J 1 A_FadeOut(0.03)
			Wait
		T2:
			X143 K 1 A_FadeOut(0.03)
			Wait
 }
}

Actor DBTYellowSpark
{
	+NOINTERACTION
	Scale 0.16
	RenderStyle "Add"
	+FORCEXYBILLBOARD
	States
	{
		Spawn:
			TNT1 A 0
			// TNT1 A 0 A_StartSound("hxn2/weapons/baldehitwall",CHAN_WEAPON)
			TNT1 A 0 A_Jump(255,"Type1","Type2")
		Type1:
			FX26 A 2 Bright
			FX26 BCD 2 Bright
			FX26 EFGHI 2 Bright
			FX26 J 1 Bright A_FadeOut
			Wait
		Type2:
			FX26 P 2 Bright
			FX26 QRS 2 Bright
			FX26 TUVWX 2 Bright
			FX26 Y 1 Bright A_FadeOut
			Wait
	}
}

Actor DBTSparkExtra : AetheriusProjectileZSC
{
	Height 1
	Radius 1
	Speed 3
	Scale 0.15
	+NOCLIP
	PROJECTILE
	-NOGRAVITY
	Gravity 0.09
	+DONTSPLASH
	+DONTBLAST
	+THRUactorS
	RenderStyle "Add"
	+FORCEXYBILLBOARD
	States
	{
		Spawn:
			TNT1 A 0 // ICPR D 0
			FX26 K 1 Bright ThrustThingZ(0,frandom(0.8,3.5),0,1)
			FX26 KKKLMNO 3 Bright A_FadeOut(0.05)
			Stop
	}
}

actor DiarisArrow : Ammo 27335
{
	//$NotAngled
	//$Color 6
	//$Category "DV-DS Ammunition/Flora"
	ConversationID 364 // 345+ are unused by Strife, this is for use in DIALOUxx/SCRIPTxx references
	Tag "Diaris Arrows [small]: Ammo for Flora's Diaris Longbow."
	Scale 0.276
	Inventory.PickupMessage "Picked up some \cjDiaris Arrows\c-."
	Inventory.PickupSound "diarisbow/pickupsmlammo"
	Inventory.Amount 3
	inventory.maxamount 999999
	Ammo.BackpackAmount 3
	Ammo.BackpackMaxAmount 999999
	Inventory.Icon "ARSEA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				if (CallACS("CheckCharacterClass") != 2) { Thing_Remove(0); }
			}
		Idle:
			ARSE D 2 // A
			{
				if (GetCVar("dvds_floralongbowcandrop") <= 0)
				{
					A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,0,0);
					A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,0,56);
					A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,0,206);
					A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,0,253);
					A_FadeOut(1,1);
				}
			}
			loop
	}
}

actor DiarisArrowQuiver : DiarisArrow 27336
{
	//$NotAngled
	//$Color 6
	//$Category "DV-DS Ammunition/Flora"
	ConversationID 365 // 345+ are unused by Strife, this is for use in DIALOUxx/SCRIPTxx references
	Tag "Diaris Arrows [large]: Ammo for Flora's Diaris Longbow."
	Scale 0.276
	Inventory.PickupMessage "Picked up a quiver of \cjDiaris Arrows\c-."
	Inventory.PickupSound "diarisbow/pickuplrgammo"
	Inventory.Amount 12
	inventory.maxamount 999999
	Ammo.BackpackAmount 12
	Ammo.BackpackMaxAmount 999999
	Inventory.Icon "ARQUA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") != 2) { Thing_Remove(0); }
			}
		Idle:
			ARQU C 2 // B
			{
				if (GetCVar("dvds_floralongbowcandrop") <= 0)
				{
					A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,0,0);
					A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,0,56);
					A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,0,206);
					A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,0,253);
					A_FadeOut(1,1);
				}
			}
			loop
	}
}

actor ManaPickupFlash : PickupFlash
{
	+NOGRAVITY
	States
	{
		Spawn:
			ACLO DCDCBCBABA 3
			{
				A_SpawnItemEx("ManaGlitter", 0, 0, 16, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0) ,64);
				A_SpawnItemEx("ManaGlitter", 0, 0, 16, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0) ,64);
				A_SpawnItemEx("ManaGlitter", 0, 0, 16, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0) ,64);
			}
			Stop
	}
}

// Small Mana Recharge
actor DoomSpellMana : AetheriusCustomInventory 27337
{
	//$NotAngled
	//$Color 6
	//$Category "DV-DS Ammunition/Magic"
	Radius 8
	Height 8
	Scale 0.5
	RenderStyle "Translucent"
	Alpha 0.8
	inventory.pickupsound "PickupArtifact"
	inventory.pickupflash "ManaPickupFlash"
	Tag "Small Mana Cube [DV-DS]: Restores a small amount of MP/Mana"
	inventory.pickupmessage "Accquired a \cfSmall Mana Cube\c-"
	+FLOATBOB
	+DONTGIB

	states
	{
		Spawn:
			MAN3 A 0 NoDelay
			{
				A_SetScale(frandom(0.425,0.475));
				A_SetInventory("SizePulseType",random(0,1));

				A_FadeTo(frandom(0.6,1.0),FTF_CLAMP);
				A_SetInventory("TransPulseType",random(0,1));
			}
		Idle:
			//MAN3 AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP 1 Bright
			MAN3 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 2 Bright
			{
				if (scaleX <= 0.425 && scaleY <= 0.425) { A_SetInventory("SizePulseType",1); } // Set to Expand
				if (scaleX >= 0.475 && scaleY >= 0.475) { A_SetInventory("SizePulseType",0); } // Set to Shrink
				if (CountInv("SizePulseType") == 0) { A_SetScale(scaleX-0.0025,scaleY-0.0025); } // Shrinking
				if (CountInv("SizePulseType") == 1) { A_SetScale(scaleX+0.0025,scaleY+0.0025); } // Expanding
	
				if (alpha <= 0.60) { A_SetInventory("TransPulseType",1); } // Set to Fade In
				if (alpha >= 1.00) { A_SetInventory("TransPulseType",0); } // Set to Fade Out
				if (CountInv("transpulsetype") == 0) { A_FadeOut(0.025); } // Fading Out
				if (CountInv("transpulsetype") == 1) { A_FadeIn(0.025); } // Fading In
			}
			Loop
		Success:
			TNT1 A 0 A_PickupManaCube(1,0)
			Stop
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckManaLevels(0) > 0) { return state("Success"); } 
				return state(""); 
			}
			Fail
	}
}

actor DoomSpellMana2 : DoomSpellMana 27338
{
	//$NotAngled
	//$Color 6
	//$Category "DV-DS Ammunition/Magic"
	Scale 0.75
	Tag "Mana Cube [DV-DS]: Restores a medium amount of MP/Mana"
	inventory.pickupmessage "Accquired a \cfMana Cube\c-"

	states
	{
		Spawn:
			MAN3 A 0 NoDelay
			{
				A_SetScale(frandom(0.7,0.8));
				A_SetInventory("SizePulseType",random(0,1));

				A_FadeTo(frandom(0.6,1.0),FTF_CLAMP);
				A_SetInventory("TransPulseType",random(0,1));
			}
		Idle:
			MAN3 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 2 Bright
			{
				if (scaleX <= 0.70 && scaleY <= 0.70) { A_SetInventory("SizePulseType",1); } // Set to Expand
				if (scaleX >= 0.80 && scaleY >= 0.80) { A_SetInventory("SizePulseType",0); } // Set to Shrink
				if (CountInv("SizePulseType") == 0) { A_SetScale(scaleX-0.005,scaleY-0.005); } // Shrinking
				if (CountInv("SizePulseType") == 1) { A_SetScale(scaleX+0.005,scaleY+0.005); } // Expanding
	
				if (alpha <= 0.60) { A_SetInventory("TransPulseType",1); } // Set to Fade In
				if (alpha >= 1.00) { A_SetInventory("TransPulseType",0); } // Set to Fade Out
				if (CountInv("transpulsetype") == 0) { A_FadeOut(0.025); } // Fading Out
				if (CountInv("transpulsetype") == 1) { A_FadeIn(0.025); } // Fading In
			}
			Loop
		Success:
			TNT1 A 0 A_PickupManaCube(2,0) // ACS_NamedExecuteAlways("PickupManaCube",0,2,0)
			Stop
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckManaLevels(0) > 0) { return state("Success"); } 
				return state(""); 
			}
			Fail
	}
}

actor DoomSpellMana3 : DoomSpellMana 27339
{
	//$NotAngled
	//$Color 6
	//$Category "DV-DS Ammunition/Magic"
	Scale 1.0
	Tag "Large Mana Cube [DV-DS]: Restores a large amount of MP/Mana"
	inventory.pickupmessage "Accquired a \cfLarge Mana Cube\c-"

	states
	{
		Spawn:
			MAN3 A 0 NoDelay
			{
				A_SetScale(frandom(0.8,1.2));
				A_SetInventory("SizePulseType",random(0,1));

				A_FadeTo(frandom(0.6,1.0),FTF_CLAMP);
				A_SetInventory("TransPulseType",random(0,1));
			}
		Idle:
			MAN3 AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 2 Bright
			{
				if (scaleX <= 0.8 && scaleY <= 0.8) { A_SetInventory("SizePulseType",1); } // Set to Expand
				if (scaleX >= 1.2 && scaleY >= 1.2) { A_SetInventory("SizePulseType",0); } // Set to Shrink
				if (CountInv("SizePulseType") == 0) { A_SetScale(scaleX-0.01,scaleY-0.01); } // Shrinking
				if (CountInv("SizePulseType") == 1) { A_SetScale(scaleX+0.01,scaleY+0.01); } // Expanding
	
				if (alpha <= 0.60) { A_SetInventory("TransPulseType",1); } // Set to Fade In
				if (alpha >= 1.00) { A_SetInventory("TransPulseType",0); } // Set to Fade Out
				if (CountInv("transpulsetype") == 0) { A_FadeOut(0.025); } // Fading Out
				if (CountInv("transpulsetype") == 1) { A_FadeIn(0.025); } // Fading In
			}
			Loop
		Success:
			TNT1 A 0 A_PickupManaCube(3,0) // ACS_NamedExecuteAlways("PickupManaCube",0,3,0)
			Stop
		Pickup:
			TNT1 A 0 
			{ 
				if (A_CheckManaLevels(0) > 0) { return state("Success"); } 
				return state(""); 
			}
			Fail
	}
}

actor FistPuff : AetheriusPuffZSC
{
	Tag "Fist"
	Species "Players"
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
	+THRUSPECIES +MTHRUSPECIES
	RenderStyle "Translucent"
	Alpha 0.5
	VSpeed 1
	Mass 5
	damagetype "Fist"
	SeeSound "null" // "FistHit"
	AttackSound "null"

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 44;
				user_randompain += (MartialArtsMastery * 8);
				user_randompain += (MartialArtsMasteryEX * (8 * 5 / 2));
				user_randompain += (BerserkerFit * random(7,9));
				user_randompain += (BerserkerFitEX * (random(7,9) * 5 / 2));
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(3), 0, 0, (A_MeleeImpactRadius(3)/4));

				A_Quake((A_QuakeMeleeIntensity(3)),(A_QuakeMeleeDuration(3)),0,(A_QuakeMeleeTremrad(3)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserk", 56); } else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Melee:
			TNT1 A 0
			{
				user_randompain = 44;
				user_randompain += (MartialArtsMastery * 8);
				user_randompain += (MartialArtsMasteryEX * (8 * 5 / 2));
				user_randompain += (BerserkerFit * random(7,9));
				user_randompain += (BerserkerFitEX * (random(7,9) * 5 / 2));
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(3), 0, 0, (A_MeleeImpactRadius(3)/4));

				A_Quake((A_QuakeMeleeIntensity(3)),(A_QuakeMeleeDuration(3)),0,(A_QuakeMeleeTremrad(3)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserk", 56); } else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Crash:
			PUFF C 0
			{
				user_randompain = 44;
				user_randompain += (MartialArtsMastery * 8);
				user_randompain += (MartialArtsMasteryEX * (8 * 5 / 2));
				user_randompain += (BerserkerFit * random(7,9));
				user_randompain += (BerserkerFitEX * (random(7,9) * 5 / 2));
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(3), 0, 0, (A_MeleeImpactRadius(3)/4));

				A_Quake((A_QuakeMeleeIntensity(3)),(A_QuakeMeleeDuration(3)),0,(A_QuakeMeleeTremrad(3)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserkwall", 57); } else { A_StartSound("FistHitWall", 57); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
	}
}

actor UppercutPuff : FistPuff
{
	Tag "Uppercut"
	ProjectileKickback 0
	+NODAMAGETHRUST
	RenderStyle "Translucent"
	Alpha 0.875

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 32;
				user_randompain += (MartialArtsMastery * 4);
				user_randompain += (MartialArtsMasteryEX * (4 * 5 / 2));
				user_randompain += (BerserkerFit * random(3,5));
				user_randompain += (BerserkerFitEX * (random(3,5) * 5 / 2));
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(4), 0, 0, (A_MeleeImpactRadius(4)/4));

				A_Quake((A_QuakeMeleeIntensity(4)),(A_QuakeMeleeDuration(4)),0,(A_QuakeMeleeTremrad(4)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserk", 56); } else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Melee:
			TNT1 A 0
			{
				user_randompain = 32;
				user_randompain += (MartialArtsMastery * 4);
				user_randompain += (MartialArtsMasteryEX * (4 * 5 / 2));
				user_randompain += (BerserkerFit * random(3,5));
				user_randompain += (BerserkerFitEX * (random(3,5) * 5 / 2));
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(4), 0, 0, (A_MeleeImpactRadius(4)/4));

				A_Quake((A_QuakeMeleeIntensity(4)),(A_QuakeMeleeDuration(4)),0,(A_QuakeMeleeTremrad(4)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserk", 56); } else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Crash:
			PUFF C 0
			{
				user_randompain = 32;
				user_randompain += (MartialArtsMastery * 4);
				user_randompain += (MartialArtsMasteryEX * (4 * 5 / 2));
				user_randompain += (BerserkerFit * random(3,5));
				user_randompain += (BerserkerFitEX * (random(3,5) * 5 / 2));
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(4), 0, 0, (A_MeleeImpactRadius(4)/4));

				A_Quake((A_QuakeMeleeIntensity(4)),(A_QuakeMeleeDuration(4)),0,(A_QuakeMeleeTremrad(4)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserkwall", 57); } else { A_StartSound("FistHitWall", 57); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
	}
}

actor KickPuff : AetheriusPuffZSC
{
	Tag "Kick"
	Species "Players"
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
	+THRUSPECIES +MTHRUSPECIES
	RenderStyle "Translucent"
	ProjectileKickback 1500
	Alpha 0.5
	VSpeed 1
	Mass 5
	damagetype "Kick"
	SeeSound "null" // "FistHit"
	AttackSound "null"

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 4;
				if (MartialArtsMastery == 1) { user_randompain += 2; }
				if (MartialArtsMastery == 2) { user_randompain += 4; }
				if (MartialArtsMastery == 3) { user_randompain += 6; }
				if (MartialArtsMastery == 4) { user_randompain += 8; }
				if (MartialArtsMastery == 5) { user_randompain += 12; }
				if (MartialArtsMasteryEX == 1) { user_randompain += 5; }
				if (MartialArtsMasteryEX == 2) { user_randompain += 10; }
				if (BerserkerFit == 1) { user_randompain += random(1,3); }
				if (BerserkerFit == 2) { user_randompain += random(3,5); }
				if (BerserkerFit == 3) { user_randompain += random(5,7); }
				if (BerserkerFit == 4) { user_randompain += random(7,9); }
				if (BerserkerFit == 5) { user_randompain += random(10,14); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,3) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,5) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, 0, (A_MeleeImpactRadius(7)/4));

				A_Quake((A_QuakeMeleeIntensity(7)),(A_QuakeMeleeDuration(7)),0,(A_QuakeMeleeTremrad(7)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserk", 56); } else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2 A_RadiusThrust(1500,13,0,13)
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Melee:
			TNT1 A 0
			{
				user_randompain = 4;
				if (MartialArtsMastery == 1) { user_randompain += 2; }
				if (MartialArtsMastery == 2) { user_randompain += 4; }
				if (MartialArtsMastery == 3) { user_randompain += 6; }
				if (MartialArtsMastery == 4) { user_randompain += 8; }
				if (MartialArtsMastery == 5) { user_randompain += 12; }
				if (MartialArtsMasteryEX == 1) { user_randompain += 5; }
				if (MartialArtsMasteryEX == 2) { user_randompain += 10; }
				if (BerserkerFit == 1) { user_randompain += random(1,3); }
				if (BerserkerFit == 2) { user_randompain += random(3,5); }
				if (BerserkerFit == 3) { user_randompain += random(5,7); }
				if (BerserkerFit == 4) { user_randompain += random(7,9); }
				if (BerserkerFit == 5) { user_randompain += random(10,14); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,3) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,5) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, 0, (A_MeleeImpactRadius(7)/4));

				A_Quake((A_QuakeMeleeIntensity(7)),(A_QuakeMeleeDuration(7)),0,(A_QuakeMeleeTremrad(7)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserk", 56); } else { A_StartSound("FistHit", 56); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2 A_RadiusThrust(1500,13,0,13)
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Crash:
			PUFF C 0
			{
				user_randompain = 4;
				if (MartialArtsMastery == 1) { user_randompain += 2; }
				if (MartialArtsMastery == 2) { user_randompain += 4; }
				if (MartialArtsMastery == 3) { user_randompain += 6; }
				if (MartialArtsMastery == 4) { user_randompain += 8; }
				if (MartialArtsMastery == 5) { user_randompain += 12; }
				if (MartialArtsMasteryEX == 1) { user_randompain += 5; }
				if (MartialArtsMasteryEX == 2) { user_randompain += 10; }
				if (BerserkerFit == 1) { user_randompain += random(1,3); }
				if (BerserkerFit == 2) { user_randompain += random(3,5); }
				if (BerserkerFit == 3) { user_randompain += random(5,7); }
				if (BerserkerFit == 4) { user_randompain += random(7,9); }
				if (BerserkerFit == 5) { user_randompain += random(10,14); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,3) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,5) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, 0, (A_MeleeImpactRadius(7)/4));

				A_Quake((A_QuakeMeleeIntensity(7)),(A_QuakeMeleeDuration(7)),0,(A_QuakeMeleeTremrad(7)),"nosound/silent");

				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserkwall", 57); } else { A_StartSound("FistHitWall", 57); }
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2 A_RadiusThrust(1500,13,0,13)
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
	}
}

actor KickPuffNoThrust : KickPuff
{
	Tag "Kick"
	ProjectileKickback 0
	+NODAMAGETHRUST
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 4;
				if (MartialArtsMastery == 1) { user_randompain += 2; }
				if (MartialArtsMastery == 2) { user_randompain += 4; }
				if (MartialArtsMastery == 3) { user_randompain += 6; }
				if (MartialArtsMastery == 4) { user_randompain += 8; }
				if (MartialArtsMastery == 5) { user_randompain += 12; }
				if (MartialArtsMasteryEX == 1) { user_randompain += 5; }
				if (MartialArtsMasteryEX == 2) { user_randompain += 10; }
				if (BerserkerFit == 1) { user_randompain += random(1,3); }
				if (BerserkerFit == 2) { user_randompain += random(3,5); }
				if (BerserkerFit == 3) { user_randompain += random(5,7); }
				if (BerserkerFit == 4) { user_randompain += random(7,9); }
				if (BerserkerFit == 5) { user_randompain += random(10,14); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,3) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,5) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, 0, (A_MeleeImpactRadius(7)/4));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Spawn2:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Melee:
			TNT1 A 0
			{
				user_randompain = 4;
				if (MartialArtsMastery == 1) { user_randompain += 2; }
				if (MartialArtsMastery == 2) { user_randompain += 4; }
				if (MartialArtsMastery == 3) { user_randompain += 6; }
				if (MartialArtsMastery == 4) { user_randompain += 8; }
				if (MartialArtsMastery == 5) { user_randompain += 12; }
				if (MartialArtsMasteryEX == 1) { user_randompain += 5; }
				if (MartialArtsMasteryEX == 2) { user_randompain += 10; }
				if (BerserkerFit == 1) { user_randompain += random(1,3); }
				if (BerserkerFit == 2) { user_randompain += random(3,5); }
				if (BerserkerFit == 3) { user_randompain += random(5,7); }
				if (BerserkerFit == 4) { user_randompain += random(7,9); }
				if (BerserkerFit == 5) { user_randompain += random(10,14); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,3) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,5) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, 0, (A_MeleeImpactRadius(7)/4));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Melee2:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
		Crash:
			PUFF C 0
			{
				user_randompain = 4;
				if (MartialArtsMastery == 1) { user_randompain += 2; }
				if (MartialArtsMastery == 2) { user_randompain += 4; }
				if (MartialArtsMastery == 3) { user_randompain += 6; }
				if (MartialArtsMastery == 4) { user_randompain += 8; }
				if (MartialArtsMastery == 5) { user_randompain += 12; }
				if (MartialArtsMasteryEX == 1) { user_randompain += 5; }
				if (MartialArtsMasteryEX == 2) { user_randompain += 10; }
				if (BerserkerFit == 1) { user_randompain += random(1,3); }
				if (BerserkerFit == 2) { user_randompain += random(3,5); }
				if (BerserkerFit == 3) { user_randompain += random(5,7); }
				if (BerserkerFit == 4) { user_randompain += random(7,9); }
				if (BerserkerFit == 5) { user_randompain += random(10,14); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,3) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,5) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_Explode(A_GetKickDamage(0,1,true), A_MeleeImpactRadius(7), 0, 0, (A_MeleeImpactRadius(7)/4));
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		Crash2:
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			TNT1 A 2
			Stop
	}
}

// Base Melee Reticle
actor MeleeReticle-Silent : AetheriusPuffZSC
{
	VSpeed 0
	RenderStyle "Translucent"
	+NOINTERACTION
	+NOTIMEFREEZE

}
// Punch Attack Ghost Reticle
actor PunchPuff-Silent : MeleeReticle-Silent
{
	Scale 0.125
	Alpha 0.375
	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Melee:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Crash:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1

		Finish1:
			PURT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop

		Finish2:
			PURT B 1 BRIGHT { A_Fadeout(alpha/6); }
			stop

		Finish3:
			PURT C 1 BRIGHT { A_Fadeout(alpha/6); }
			stop
	}
}

// AltPunch Attack Ghost Reticle
actor AltPunchPuff-Silent : MeleeReticle-Silent
{
	Scale 0.125
	Alpha 0.375
	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Melee:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Crash:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1

		Finish1:
			APRT A 1 BRIGHT { A_Fadeout(alpha/2); }
			stop

		Finish2:
			APRT B 1 BRIGHT { A_Fadeout(alpha/2); }
			stop

		Finish3:
			APRT C 1 BRIGHT { A_Fadeout(alpha/2); }
			stop
	}
}

// Kick Attack Ghost Reticle
actor KickPuff-Silent : MeleeReticle-Silent
{
	Scale 0.125
	Alpha 0.375
	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Melee:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Crash:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1

		Finish1:
			KIRT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop

		Finish2:
			KIRT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop

		Finish3:
			KIRT C 1 BRIGHT { A_Fadeout(alpha/6); }
			stop
	}
}
// Chainsaw Reticle
actor ChainsawPuff-Silent : MeleeReticle-Silent
{
	Scale 0.125
	Alpha 0.375
	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Melee:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Crash:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1

		Finish1:
			CHSR A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop

		Finish2:
			CHSR B 1 BRIGHT { A_Fadeout(alpha/6); }
			stop
	}
}
// Poison Needle Reticle
actor PoisonNeedlePuff-Silent : MeleeReticle-Silent
{
	Scale 0.125
	Alpha 0.375
	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			goto Finish1
		Melee:
			TNT1 A 1 
			goto Finish1
		Crash:
			TNT1 A 1 
			goto Finish1

		Finish1:
			PNRT A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop
	}
}
// Chainsaw Reticle
actor ChainsawPuff2-Silent : MeleeReticle-Silent
{
	Scale 0.125
	Alpha 0.375
	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Melee:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1
		Crash:
			TNT1 A 1 
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) { return state("Finish1"); }
				if (CallACS("CheckCharacterClass") == 1) { return state("Finish2"); }
				//if (CallACS("CheckCharacterClass") == 2) { return state("Finish3"); }
				return state("");
			}
			goto Finish1

		Finish1:
			CH2R A 1 BRIGHT { A_Fadeout(alpha/6); }
			stop

		Finish2:
			CH2R B 1 BRIGHT { A_Fadeout(alpha/6); }
			stop
	}
}

// Shield Parts [Melee]
actor ShieldPartMeleeNoReflect : ShieldPartBase
{
	States
	{
		Spawn:
			HEXA C 0 bright NoDelay	
			{
				if (dvdsdebug_shieldactorghosts) { A_FadeTo(0.25,0.25); }
				if (random(1,16) == 1) { A_ChangeFlag("REFLECTIVE", TRUE); A_ChangeFlag("AIMREFLECT", TRUE); } 
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (MartialArtsMastery == 0) { A_SetSize(32,32,0); A_SetScale(1.0); }
					if (MartialArtsMastery == 1) { A_SetSize(33,33,0); A_SetScale(1.03125); }
					if (MartialArtsMastery == 2) { A_SetSize(34,34,0); A_SetScale(1.0625); }
					if (MartialArtsMastery == 3) { A_SetSize(36,36,0); A_SetScale(1.125); }
					if (MartialArtsMastery == 4) { A_SetSize(38,38,0); A_SetScale(1.1875); }
					if (MartialArtsMastery >= 5) { A_SetSize(41,41,0); A_SetScale(1.28125); }
				}
				else
				{
					if (BerserkerFit == 0) { A_SetSize(32,32,0); A_SetScale(1.0); }
					if (BerserkerFit == 1) { A_SetSize(33,33,0); A_SetScale(1.03125); }
					if (BerserkerFit == 2) { A_SetSize(34,34,0); A_SetScale(1.0625); }
					if (BerserkerFit == 3) { A_SetSize(36,36,0); A_SetScale(1.125); }
					if (BerserkerFit == 4) { A_SetSize(38,38,0); A_SetScale(1.1875); }
					if (BerserkerFit >= 5) { A_SetSize(41,41,0); A_SetScale(1.28125); }
				}
			}
			HEXA C 1 bright
			stop
		Pain:
			TNT1 A 0 bright { if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_StartSound("fisthitberserkwall", 57); } else { A_StartSound("FistHitWall", 57); } }
			stop
	}
}

actor ShieldPartMeleeReflect : ShieldPartMeleeNoReflect
{
	+REFLECTIVE 
	+AIMREFLECT
}

actor FistPlayerBlock : PlaceholderItem { }
actor FistPlayerBlock2 : PlaceholderItem { }
actor FistPlayerBlock3 : PlaceholderItem { }
actor FistPlayerBlock4 : PlaceholderItem { }
actor FistPlayerBlockExtra : PlaceholderItem { }
actor FistPlayerBlockExtra2 : PlaceholderItem { }
actor FistPlayerBlockItem : PlaceholderItem { }
actor FistPlayerBlockHold : PlaceholderItem { } 
actor FistPlayerSpeedFactor : FistPlayerBlockItem { }
actor FistPlayerSpeedFactor2 : FistPlayerBlockItem { }
actor FistPlayerSpeedFactor3 : FistPlayerBlockItem { }
actor FistPlayerSpeedFactor4 : FistPlayerBlockItem { }

actor GauntletPuff : AetheriusPuffZSC
{
	Tag "Sauron's Gauntlets"
	VSpeed 0
	Scale 0.5
	Alpha 0.5
	RenderStyle "Translucent"
	decal "GauntletScorch"
	damagetype "Gauntlets"
	SeeSound "GauntletHit"
	AttackSound "GauntletHitWall"
	+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (random(1,25) >= 9) { A_ChangeFlag("FORCEPAIN", TRUE); }
				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(5), 0, 0, (A_MeleeImpactRadius(5)/4));

				A_Quake((A_QuakeMeleeIntensity(5)),(A_QuakeMeleeDuration(5)),0,(A_QuakeMeleeTremrad(5)),"nosound/silent");

				A_StartSound("GauntletHit", 56);

				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			PUF4 A 2 BRIGHT
			PUF4 A 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 F 2 BRIGHT
			PUF4 F 2 BRIGHT
			Stop
		Melee:
			TNT1 A 0
			{
				if (random(1,25) >= 9) { A_ChangeFlag("FORCEPAIN", TRUE); }
				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(5), 0, 0, (A_MeleeImpactRadius(5)/4));

				A_Quake((A_QuakeMeleeIntensity(5)),(A_QuakeMeleeDuration(5)),0,(A_QuakeMeleeTremrad(5)),"nosound/silent");

				A_StartSound("GauntletHit", 56);
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			PUF4 A 2 BRIGHT
			PUF4 A 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 F 2 BRIGHT
			PUF4 F 2 BRIGHT
			Stop
		Crash:
			PUF4 A 0
			{
				if (random(1,25) >= 9) { A_ChangeFlag("FORCEPAIN", TRUE); }
				A_Explode(A_GetPunchDamage(0,1,true), A_MeleeImpactRadius(5), 0, 0, (A_MeleeImpactRadius(5)/4));

				A_Quake((A_QuakeMeleeIntensity(5)),(A_QuakeMeleeDuration(5)),0,(A_QuakeMeleeTremrad(5)),"nosound/silent");

				A_StartSound("GauntletHitWall", 56);
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			PUF4 A 2 BRIGHT
			PUF4 A 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 F 2 BRIGHT
			PUF4 F 2 BRIGHT
			Stop
	}
}

actor GauntletAltPuff : GauntletPuff
{
	Tag "Sauron's Gauntlets"
	VSpeed 0
	Scale 0.5
	Alpha 0.5
	RenderStyle "Translucent"
	decal "GauntletScorch"
	damagetype "Gauntlets"
	SeeSound "GauntletHit"
	AttackSound "GauntletHitWall"
	+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(6), 0, 0, (A_MeleeImpactRadius(6)/4));

				A_Quake((A_QuakeMeleeIntensity(6)),(A_QuakeMeleeDuration(6)),0,(A_QuakeMeleeTremrad(6)),"nosound/silent");

				A_StartSound("GauntletHit", 56);
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		SpawnSparks:
			PUF4 A 2 BRIGHT
			PUF4 A 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 F 2 BRIGHT
			PUF4 F 2 BRIGHT
			Stop
		Melee:
			TNT1 A 0
			{
				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(6), 0, 0, (A_MeleeImpactRadius(6)/4));

				A_Quake((A_QuakeMeleeIntensity(6)),(A_QuakeMeleeDuration(6)),0,(A_QuakeMeleeTremrad(6)),"nosound/silent");

				A_StartSound("GauntletHit", 56);
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		MeleeSparks:
			PUF4 A 2 BRIGHT
			PUF4 A 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 F 2 BRIGHT
			PUF4 F 2 BRIGHT
			Stop
		Crash:
			PUF4 A 0
			{
				A_Explode(A_GetPunchDamage(1,1,true), A_MeleeImpactRadius(6), 0, 0, (A_MeleeImpactRadius(6)/4));

				A_Quake((A_QuakeMeleeIntensity(6)),(A_QuakeMeleeDuration(6)),0,(A_QuakeMeleeTremrad(6)),"nosound/silent");

				A_StartSound("GauntletHitWall", 56);
				
				user_hitsparkrand = random(1,12);
				if (user_hitsparkrand >= 1 && user_hitsparkrand <= 4) { A_SpawnItemEx("MeleeHitSpark1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 5 && user_hitsparkrand <= 7) { A_SpawnItemEx("MeleeHitSpark2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 8 && user_hitsparkrand <= 10) { A_SpawnItemEx("MeleeHitSpark3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
				if (user_hitsparkrand >= 11 && user_hitsparkrand <= 12) { A_SpawnItemEx("MeleeHitSpark4",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERALPHA|SXF_TRANSFERRENDERSTYLE); }
			}
		CrashSparks:
			PUF4 A 2 BRIGHT
			PUF4 A 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 B 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 C 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 D 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 E 2 BRIGHT
			PUF4 F 2 BRIGHT
			PUF4 F 2 BRIGHT
			Stop
	}
}

actor ChainsawPuff : AetheriusPuffZSC
{
	Tag "Chainsaw"
	DamageType "Chainsaw"
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	RenderStyle "Translucent"
	Alpha 0.5
	VSpeed 1
	Mass 5
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 32;
				if (BerserkerFit == 1) { user_randompain += random(1,2); }
				if (BerserkerFit == 2) { user_randompain += random(3,4); }
				if (BerserkerFit == 3) { user_randompain += random(5,6); }
				if (BerserkerFit == 4) { user_randompain += random(7,8); }
				if (BerserkerFit == 5) { user_randompain += random(9,10); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,2) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,4) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }
			}
			PUFF A 4 Bright
			PUFF B 4
			// Intentional fall-through
		Melee:
			TNT1 A 0
			{
				user_randompain = 32;
				if (BerserkerFit == 1) { user_randompain += random(1,2); }
				if (BerserkerFit == 2) { user_randompain += random(3,4); }
				if (BerserkerFit == 3) { user_randompain += random(5,6); }
				if (BerserkerFit == 4) { user_randompain += random(7,8); }
				if (BerserkerFit == 5) { user_randompain += random(9,10); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,2) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,4) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }
			}
			PUFF CD 4
			Stop
	}
}

actor Chainsaw2Puff : ChainsawPuff
{
	Tag "Double-Bladed Chainsaw"
	DamageType "Chainsaw"
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	RenderStyle "Translucent"
	Alpha 0.5
	VSpeed 1
	Mass 5
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 16;
				if (BerserkerFit == 1) { user_randompain += random(1,2); }
				if (BerserkerFit == 2) { user_randompain += random(3,4); }
				if (BerserkerFit == 3) { user_randompain += random(5,6); }
				if (BerserkerFit == 4) { user_randompain += random(7,8); }
				if (BerserkerFit == 5) { user_randompain += random(9,10); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,2) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,4) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }
			}
			PUFF A 4 Bright
			PUFF B 4
			// Intentional fall-through
		Melee:
			TNT1 A 0
			{
				user_randompain = 16;
				if (BerserkerFit == 1) { user_randompain += random(1,2); }
				if (BerserkerFit == 2) { user_randompain += random(3,4); }
				if (BerserkerFit == 3) { user_randompain += random(5,6); }
				if (BerserkerFit == 4) { user_randompain += random(7,8); }
				if (BerserkerFit == 5) { user_randompain += random(9,10); }
				if (BerserkerFitEX == 1) { user_randompain += (random(1,2) * 5) / 2; }
				if (BerserkerFitEX == 2) { user_randompain += (random(3,4) * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }
			}
			PUFF CD 4
			Stop
	}
}

Actor ChainsawChecker : AetheriusCustomInventory replaces Chainsaw
{
	//$Sprite "CSAWA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(160,1)
			TNT1 A 0 A_SigilPieceSpawn(160,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (A_SawCheckSceptre >= 1) 
					{
						A_SpawnItemEx("SceptreOfEmpyrea",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy;
					}

					if (CountInv("PoisonNeedle",AAPTR_PLAYER1) <= 0)
					{
						if (random(1,8) <= 1) { A_SpawnItemEx("PoisonNeedle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
						else { A_SpawnItemEx("MiniBerserk",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
					}
					else
					{
						if (random(1,32) <= 1) { A_SpawnItemEx("PoisonNeedle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
						else { A_SpawnItemEx("MiniBerserk",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
					}
					A_Destroy;
				}
			}
		Idle:
			TNT1 A 0 
			{
				if (A_CheckChainsaw == 1) { return state("HaveSingle"); }
				if (A_CheckChainsaw == 2) { return state("HaveDouble"); }
				return state(""); 
			}
			goto HaveNone
		HaveNone:
			TNT1 A 0 
			{
				if (random(1,256 <= 32))
				{
					A_SpawnItemEx("DoubleBladedChainsaw",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				else
				{
					A_SpawnItemEx("Chainsaw2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				A_Destroy;
			}
			Loop
		HaveSingle:
			TNT1 A 0 
			{
				if (random(1,256 <= 32))
				{
					A_SpawnItemEx("DoubleBladedChainsaw",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				else
				{
					A_SpawnItemEx("Berserk2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				}
				A_Destroy;
			}
			Loop
		HaveDouble:
			TNT1 A 0 
			{
				A_SpawnItemEx("Berserk2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy;
			}
			Loop
	}
}

Actor DualPistolsChecker : AetheriusCustomInventory
{
	//$Sprite "PISTC0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(256,1)
			TNT1 A 0 A_SigilPieceSpawn(256,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,96,0);
					A_SpawnItemEx("HealthBonus",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,254,0);
					A_Destroy;
				}
			}
		Idle:
			TNT1 A 0
			{
				A_SpawnItemEx("DualPistols",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy;
			}
			stop
	}
}

Actor PistolChecker : AetheriusCustomInventory replaces Pistol
{
	//$Sprite "PISTC0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(256,1)
			TNT1 A 0 A_SigilPieceSpawn(256,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",12,0,0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,96,0);
					A_SpawnItemEx("HealthBonus",-12,0,0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254,0);
					if (random(1,256) == 1 && dvds_florawandscandrop) 
					{ 
						A_SpawnItemEx("SapphireWandNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0); 
					}
				}
				A_SpawnItemEx("Pistol2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_Destroy;
			}
			loop
	}
}

Actor ShotgunChecker : AetheriusCustomInventory replaces Shotgun
{
	//$Sprite "SHOTA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(128,1)
			TNT1 A 0 A_SigilPieceSpawn(128,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,255);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,255);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,254); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("Shotgun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}

Actor SuperShotgunChecker : AetheriusCustomInventory replaces SuperShotgun
{
	//$Sprite "SGN2A0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(96,1)
			TNT1 A 0 A_SigilPieceSpawn(96,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,255);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,253); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("SuperShotgun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}

Actor ChaingunChecker : AetheriusCustomInventory replaces Chaingun
{
	//$Sprite "MGUNA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(112,1)
			TNT1 A 0 A_SigilPieceSpawn(112,1)
			TNT1 A 0
			{
				A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,253);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,253);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,251); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy;
				}
				else
				{
					if (A_CheckFlag("DROPPED","Null")) 
					{ 
						A_SpawnItemEx("Chaingun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_Destroy;
					}
					else
					{
						A_UnmakerSpawn(96,1);
						A_SigilPieceSpawn(96,1);
						if (random(1,256) <= 32)
						{
							A_SpawnItemEx("Minigun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy;
						}
						else
						{
							A_SpawnItemEx("Chaingun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy;
						}
					}
				}
			}
			Loop
	}
}

Actor MinigunChecker : AetheriusCustomInventory
{
	//$Sprite "MNGNA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(96,1)
			TNT1 A 0 A_SigilPieceSpawn(96,1)
			TNT1 A 0
			{
				A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
				A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,253);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,254);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,250);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,251); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,0,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("Minigun",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}


Actor RocketLauncherChecker : AetheriusCustomInventory replaces RocketLauncher
{
	//$Sprite "LAUNA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(96,1)
			TNT1 A 0 A_SigilPieceSpawn(96,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,250);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,248); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,0,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("RocketLauncher2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}

Actor RailgunChecker : AetheriusCustomInventory // replaces Railgun
{
	//$Sprite "RAILA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(48,1)
			TNT1 A 0 A_SigilPieceSpawn(48,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,248);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,250);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,0,248); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,0,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("Railgun2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}

Actor PlasmaRifleChecker : AetheriusCustomInventory replaces PlasmaRifle
{
	//$Sprite "PLASA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(80,1)
			TNT1 A 0 A_SigilPieceSpawn(80,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,244);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,244); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy;
				}
				else
				{
					if (A_CheckFlag("DROPPED","Null")) 
					{
						if (random(1,256) <= 2)
						{
							A_UnmakerSpawn(48,1);
							A_SigilPieceSpawn(48,1);
							if (random(1,2) == 1) 
							{
								A_SpawnItemEx("Repeater2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							else
							{
								A_SpawnItemEx("Karasawa2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							A_Destroy;
						}
						else
						{
							A_SpawnItemEx("PlasmaRifle2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy;
						}
					}
					else
					{
						if (random(1,256) <= 32)
						{
							A_UnmakerSpawn(48,1);
							A_SigilPieceSpawn(48,1);
							if (random(1,2) == 1) 
							{
								A_SpawnItemEx("Repeater2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							else
							{
								A_SpawnItemEx("Karasawa2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
							A_Destroy;
						}
						else
						{
							A_SpawnItemEx("PlasmaRifle2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_Destroy;
						}
					}
				}
				
			}
			Loop
	}
}

Actor RepeaterChecker : AetheriusCustomInventory
{
	//$Sprite "REPGA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(48,1)
			TNT1 A 0 A_SigilPieceSpawn(48,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,240);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,244); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("Repeater2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}

Actor RepeaterSpin : Inventory { Inventory.MaxAmount 2 }
Actor RepeaterB : Inventory { Inventory.MaxAmount 1 }
Actor RepeaterC : Inventory { Inventory.MaxAmount 1 }
Actor RepeaterD : Inventory { Inventory.MaxAmount 1 }

Actor RepeaterFrameA : AetheriusCustomInventory
{
	Inventory.MaxAmount 0
	+Inventory.AutoActivate
	States
	{
		Spawn:
			TNT1 A 1
			Stop
		Use:
			TNT1 A 0 A_TakeInventory("RepeaterB", 1)
			TNT1 A 0 A_TakeInventory("RepeaterC", 1)
			TNT1 A 0 A_TakeInventory("RepeaterD", 1)
			Stop
	}
}

Actor RepeaterFrameB : RepeaterFrameA
{
	States
	{
		Spawn:
			TNT1 A 1
			Stop
		Use:
			TNT1 A 0 A_GiveInventory("RepeaterB", 1)
			TNT1 A 0 A_TakeInventory("RepeaterC", 1)
			TNT1 A 0 A_TakeInventory("RepeaterD", 1)
			Stop
	}
}

Actor RepeaterFrameC : RepeaterFrameA
{
	States
	{
		Spawn:
			TNT1 A 1
			Stop
		Use:
			TNT1 A 0 A_TakeInventory("RepeaterB", 1)
			TNT1 A 0 A_GiveInventory("RepeaterC", 1)
			TNT1 A 0 A_TakeInventory("RepeaterD", 1)
			Stop
	}
}

Actor RepeaterFrameD : RepeaterFrameA
{
	States
	{
		Spawn:
			TNT1 A 1
			Stop
		Use:
			TNT1 A 0 A_TakeInventory("RepeaterB", 1)
			TNT1 A 0 A_TakeInventory("RepeaterC", 1)
			TNT1 A 0 A_GiveInventory("RepeaterD", 1)
			Stop
	}
}

Actor RepeaterPuff : AetheriusProjectileZSC
{
	Tag "Plasma Repeater"
	Radius 3
	Height 3
	RenderStyle "Add"
	Alpha 0.75
	+AlwaysPuff
	+PuffOnActors
	+NoGravity
	+NoBlockMap
	+PuffGetsOwner
	+ForceRadiusDmg
	+BloodlessImpact
	-BloodSplatter
	DamageType "Plasma"
	Decal MummyScorch
	States
	{
		Spawn:
			RPUF A 1 Bright
			RPUF A 0 Bright A_StartSound("Weapons/RepeaterHit")
			RPUF A 2 Bright A_Explode(14, 44, 0, 0, 22)
			RPUF BCDEFG 3 Bright
			Stop
	}
}

Actor RepeaterPuffPlayer : RepeaterPuff
{
	Tag "Plasma Repeater"
	Radius 3
	Height 3
	RenderStyle "Add"
	Alpha 0.75
	+AlwaysPuff
	+PuffOnActors
	+NoGravity
	+NoBlockMap
	+PuffGetsOwner
	+ForceRadiusDmg
	+BloodlessImpact
	-BloodSplatter
	DamageType "Plasma"
	Decal MummyScorch
	States
	{
		Spawn:
			RPUF A 1 Bright
			RPUF A 0 Bright 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(10,0);
				A_StartSound("Weapons/RepeaterHit");
			}
			RPUF A 2 Bright A_Explode((finaldamagedealt), 44, 0, 0, 22)
			RPUF BCDEFG 3 Bright
			Stop
	}
}

Actor RepeaterPuffCrisis : RepeaterPuff
{
	Tag "Plasma Repeater"
	DamageType "Plasma"
	scale 1.25
	States
	{
		Spawn:
			RPUF A 1 Bright
			RPUF A 0 Bright A_StartSound("Weapons/RepeaterHit")
			RPUF A 2 Bright A_Explode(420, 44, 0, 0, 22)
			RPUF BCDEFG 3 Bright
			Stop
	}
}

Actor KaraSawaChecker : AetheriusCustomInventory
{
	//$Sprite "KSWPA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(48,1)
			TNT1 A 0 A_SigilPieceSpawn(48,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,244);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,236);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,244); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("KaraSawa2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}

Actor KsawBolt : AetheriusProjectileZSC
{
	Tag "'sawa Bolt"
	Projectile
	+RIPPER
	+BLOODSPLATTER
	+STRIFEDAMAGE
	+HEXENBOUNCE
	+BOUNCEONWALLS
	+BOUNCEONFLOORS
	+BOUNCEONCEILINGS
	+BOUNCEONACTORS
	+CANBOUNCEWATER
	+SKYEXPLODE
	BounceType "Hexen"
	BounceFactor 0.975
	WallBounceFactor 0.975
	Radius 6
	Height 4
	Speed 16 // 80
	Damage 15
	Alpha 1.0
	XScale 1.5
	YScale 0.4
	RenderStyle "Add"
	Reactiontime 280
	BounceSound "Weapons/KarasawaBounce"
	SeeSound ""
	DeathSound "Weapons/KarasawaHit"
	DamageType "Plasma"
	States
	{
		Spawn:
			KWBB A 0 Bright A_StartSound("KsawBoltFly")
			KWBB ABCD 1 Bright 
			{
				A_SpawnItemEx("BoltBlur", 0, 0, 0, 1, 0, 0, 180, 128);
				A_CountDown;
			}
			KWBB A 0 Bright 
			goto Spawn+1
		Death:
			KWBD ABCDEF 2 Bright
			Stop
	}
}

Actor KsawBoltPlayer : KsawBolt
{
	Tag "'sawa Bolt"
	var float user_seekRate;
	Damage (finaldamagedealt)
	DamageType "Plasma"
	States
	{
		Spawn:
			KWBB A 0 Bright NoDelay
			{
				if (CallACS("MiscVarCheckDECORATE",10027) >= 2)
				{
					//A_PrintBold("Sawa Attunement 2");
					A_ScaleVelocity(0.625);
					A_SetScale(1.3);
					reactiontime = 420;
					user_seekRate = 4;
				}
				else
				if (CallACS("MiscVarCheckDECORATE",10027) == 1)
				{
					//A_PrintBold("Sawa Attunement 1");
					A_ScaleVelocity(0.8125);
					A_SetScale(1.115);
					reactiontime = 350;
					user_seekRate = 2;
				}
				else
				{
					A_ScaleVelocity(1);
					A_SetScale(1);
					reactiontime = 420;
					user_seekRate = 0.0125;
				}
				A_StartSound("KsawBoltFly");
			}
			KWBB ABCD 1 Bright 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(17,0);
				A_SpawnItemEx("BoltBlur", 0, 0, 0, 1, 0, 0, 180, 128);
				if (user_seekRate > 0.0)
				{
					if (random(1, 8) == 1)
					{
						// Randomly forget the tracer (the actor being sought) and seek another one, for maximum chaos.
						A_RearrangePointers(AAPTR_DEFAULT, AAPTR_DEFAULT, AAPTR_NULL);
					}
					A_NFSeekerMissile(0, user_seekRate, SMF_LOOK|SMF_PRECISE|SMF_CURSPEED);
				}
				A_CountDown;
			}
			goto Spawn+1
		Death:
			KWBD ABCDEF 2 Bright
			Stop
	}
}

Actor KsawBoltCrisis : KsawBolt
{
	Tag "'sawa Bolt"
	Damage (18*random(1,8) * CrisisMultiplier)
	DamageType "Plasma"

	States
	{
		Spawn:
			KWBB A 0 Bright A_StartSound("KsawBoltFly")
			KWBB ABCD 1 Bright 
			{
				A_SpawnItemEx("BoltBlurCrisis", 0, 0, 0, 1, 0, 0, 180, 128);
				A_CountDown;
			}
			goto Spawn+1
		Death:
			KWBD ABCDEF 2 Bright
			Stop
	}
}

Actor BoltBlur : AetheriusProjectileZSC
{
	Height 2
	Radius 6
	Damage 0
	Speed 0.2
	RenderStyle "Add"
	Alpha 0.9
	XScale 1.3
	YScale 0.3
	+NoGravity
	+DropOff
	+NoTeleport
	states
	{
		Spawn:
			KWBR AB 2 Bright A_FadeOut(0.3)
			Loop
	}
}
Actor BoltBlurCrisis : BoltBlur
{
	Height 2
	Radius 6
	Damage 0
	Speed 0.2
	RenderStyle "Add"
	Alpha 0.9
	XScale 1.3
	YScale 0.3
	+NoGravity
	+DropOff
	+NoTeleport
	states
	{
		Spawn:
			KWBR A 0 NoDelay A_GenerateCrisisParticle
		Active:
			KWBR A 2 Bright A_FadeOut(0.3)
			KWBR B 2 Bright A_FadeOut(0.3)
			Loop
	}
}

Actor BFG9000Checker : AetheriusCustomInventory replaces BFG9000
{
	//$Sprite "BFUGA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_UnmakerSpawn(8,1)
			TNT1 A 0 A_SigilPieceSpawn(8,1)
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
					A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
					if (A_CheckFlag("DROPPED","Null")) { }
					else
					{
						A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,12);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,24);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,36);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,48);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,64);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,68);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,72);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,192);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,208);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,224);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("HealthBonus",frandom(-12.0,12.0),frandom(-12.0,12.0),0,frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,240);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonus",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,252);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("MaxHealthBonusREAL",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,232);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,236);
						A_SpawnItemEx("RandomSeedDropForcedAlways",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,236);
						A_SpawnItemEx("Backpack",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,224);
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
						if (random(1,64) == 1) { A_SpawnItemEx("RandomHellcoreWeapon",frandom(-3.0,3.0),frandom(-3.0,3.0),0,frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					}
					if (dvds_floralongbowcandrop) { A_SpawnItemEx("DiarisLongBow",0,0,0,0,0,0,0,SXF_TRANSFERAMBUSHFLAG | SXF_NOCHECKPOSITION | SXF_TRANSFERSPECIAL,224); }
					if (random(1,256) == 1 && dvds_florawandscandrop) { A_SpawnItemEx("SapphireWandNew",-12,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
					A_Destroy;
				}
				else
				{
					A_SpawnItemEx("BFG90002",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_Destroy;
				}
			}
			Loop
	}
}

Actor ClipNew : Clip // replaces Clip
{
	Inventory.Pickupsound "getbulletclip"
	Inventory.PickupMessage "Picked up \cua clip of bullets\c-!"
	Inventory.Amount 10
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
					}
					else
					{
						if (random(1,256) <= 64)
						{
							A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) { }
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			CLIP A -1
			stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor ClipSpawner replaces Clip
{
	//$Sprite "CLIPA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ClipNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ClipNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ClipNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ClipNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0
			stop
		}
}

Actor ClipBoxNew : ClipBox // replaces ClipBox
{
	Inventory.Pickupsound "getbulletbox"
	Inventory.PickupMessage "Picked up \cua box of bullets\c-!"
	Inventory.Amount 50
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 3)
					{
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
						A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
					}
					else
					{
						if (random(1,256) <= 64)
						{
							A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,0);
							A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			AMMO A -1
			stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor ClipBoxSpawner replaces ClipBox
{
	//$Sprite "AMMOA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ClipBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ClipBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ClipBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ClipBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0
			stop
	}
}

Actor ShellNew : Shell // replaces Shell
{
	Inventory.Pickupsound "getfourshells"
	Inventory.PickupMessage "Picked up \cusome shotgun shells\c-!"
	Inventory.Amount 4
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 6)
					{
						if (random(1,256) <= 6)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			SHEL A -1
			stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor ShellSpawner replaces Shell
{
	//$Sprite "SHELA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ShellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ShellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ShellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ShellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0
			stop
	}
}

Actor ShellBoxNew : ShellBox // replaces ShellBox
{
	Inventory.Pickupsound "getshellbox"
	Inventory.PickupMessage "Picked up a \cubox of shotgun shells\c-!"
	Inventory.Amount 20
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 12)
					{
						if (random(1,256) <= 12)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			SBOX A -1
			Stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor ShellBoxSpawner replaces ShellBox
{
	//$Sprite "SBOXA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("ShellBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("ShellBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("ShellBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("ShellBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0
			stop
	}
}

Actor RocketAmmoNew : RocketAmmo // replaces RocketAmmo
{
	Inventory.Pickupsound "getsinglerocket"
	Inventory.PickupMessage "Picked up \cua single rocket\c-!"
	Inventory.Amount 1
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 6)
					{
						if (random(1,256) <= 6)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 108) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 36) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 12) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 72) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 24) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 8) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			ROCK A -1
			stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor RocketSpawner replaces RocketAmmo
{
	//$Sprite "ROCKA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("RocketAmmoNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("RocketAmmoNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("RocketAmmoNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("RocketAmmoNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
		}
		Idle:
			TNT1 A 0
			stop
	}
}

Actor RocketBoxNew : RocketBox // replaces RocketBox
{
	Inventory.Pickupsound "getrocketbox"
	Inventory.PickupMessage "Picked up \cua box of rockets\c-!"
	Inventory.Amount 5
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 12)
					{
						if (random(1,256) <= 12)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 128) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 43) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 14) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 126) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 42) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 14) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 112) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 37) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 12) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 72) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 24) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 8) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								if (random(1,256) <= 64) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 21) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 7) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 63) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 21) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 7) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 56) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 19) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 6) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 36) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 12) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								if (random(1,256) <= 4) { A_SpawnItemEx("RockBombShard",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			BROK A -1
			stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor RocketBoxSpawner replaces RocketBox
{
	//$Sprite "BROKA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("RocketBoxNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("RocketBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("RocketBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("RocketBoxNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0
			stop
	}
}

Actor CellNew : Cell // replaces Cell
{
	Inventory.Pickupsound "getsmallcells"
	Inventory.PickupMessage "Picked up \cua small energy cell\c-!"
	Inventory.Amount 20
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 6)
					{
						if (random(1,256) <= 6)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			CELL A -1
			stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor CellSpawner replaces Cell
{
	//$Sprite "CELLA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("CellNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("CellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("CellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("CellNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0
			stop
	}
}

Actor CellPackNew : CellPack // replaces CellPack
{
	Inventory.Pickupsound "getcellpack"
	Inventory.PickupMessage "Picked up \cua large energy cell\c-!"
	Inventory.Amount 100
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CallACS("CheckCharacterClass") == 2)
				{
					if (random(1,256) <= 12)
					{
						if (random(1,256) <= 12)
						{
							A_SpawnItemEx("DiarisArrowQuiver",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
						else
						{
							A_SpawnItemEx("DiarisArrow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
							A_FadeOut(1.0);
						}
					}
					else
					{
						if (random(1,256) <= 64)
						{
							if (random(1,256) <= 3)
							{
								A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
							else
							{
								A_SpawnItemEx("DoomSpellMana2",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_FadeOut(1.0);
							}
						}
						else
						{
							if (A_CheckFlag("DROPPED","Null")) 
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,32,0);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,128,0);
							}
							else
							{ 
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
								A_SpawnItemEx("HealthBonus",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,64,0);
							}
						}
					}
					return state("KillObject");
				}
				return state("");
			}
		Idle:
			CELP A -1
			stop
		
		KillObject:
			NULL A 0 { Thing_Remove(0); }
			stop
	}
}

actor CellPackSpawner replaces CellPack
{
	//$Sprite "CELPA0"
	Radius 16
	Height 16
	Scale 1
	RenderStyle "None"
	Alpha 0
	+NOTIMEFREEZE
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (Random(1,1000) <= 1000) { A_SpawnItemEx("CellPackNew",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				if (Random(1,1000) <=  200) { A_SpawnItemEx("CellPackNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   50) { A_SpawnItemEx("CellPackNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
				if (Random(1,1000) <=   10) { A_SpawnItemEx("CellPackNew",frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),frandom(-2.0,2.0),0,SXF_NOCHECKPOSITION,0); }
	
				if (CallACS("CheckCharacterClass") == 0 || CallACS("CheckCharacterClass") == 1)
				{
					if (Random(1,1000) <=  125) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=   25) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
					if (Random(1,1000) <=    5) { A_SpawnItemEx("DoomSpellMana2",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,0); }
				}
			}
		Idle:
			TNT1 A 0
			stop
	}
}

// Diaris Bow Weapon - Magic Weapon #1
actor DiarisHolyArrow : BaseDiarisHolyArrow
{
	Tag "Diaris Arrow"
	Scale 0.25
	Damage (finaldamagedealt)
	Species "Players"
	DamageType "Holy"
	Alpha 1
	Speed 320
	Radius 4
	Height 4
	FastSpeed 320
	SeeSound "null"
	DeathSound "null"
	decal "BulletChip"
	MissileType "DiarisHolyArrowGlitter1"

	States
	{
		Spawn:
			DIAH A 0 NoDelay // 
			{
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			DIAH AAAAAAAA 1 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(18,0); 
			}
			loop
		Death:
			TNT1 A 0 
			{
				A_StartSound("ArrowHit");
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
			}
			stop
	}
}

actor DiarisHolyArrow2XDmg : DiarisHolyArrow
{
	Tag "Diaris Arrow"
	Damage (finaldamagedealt)
	MissileType "DiarisHolyArrowGlitter2"

	States
	{
		Spawn:
			DIAH A 0 NoDelay // 
			{ 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			DIAH AAAAAAAAA 1 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(19,0); 
			}
			loop
		Death:
			TNT1 A 0 
			{
				A_StartSound("ArrowHit");
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
			}
			stop
	}
}

actor DiarisHolyArrow3XDmg : DiarisHolyArrow
{
	Tag "Diaris Arrow"
	Damage (finaldamagedealt)
	MissileType "DiarisHolyArrowGlitter3"

	States
	{
		Spawn:
			DIAH A 0 NoDelay // 
			{ 
				A_ScaleVelocity(1.00+((ArcheryMasteryPerkLevel*0.10)+(ArcheryMasteryEXPerkLevel*0.25)));
			}
		Idle:
			DIAH AAAAAAAA 1 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(20,0); 
			}
			loop
		Death:
			TNT1 A 0 
			{
				A_StartSound("ArrowHit");
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
			}
			stop
	}
}

actor DiarisHolyArrowGlitter1 : AetheriusProjectileZSC
{
	Tag "Diaris Arrow Holy Sparkle"
	RenderStyle "Add"
	Alpha 0.333
	Scale 0.5
	+SPECTRAL
	+PIERCEARMOR
	+FORCERADIUSDMG
	+NODAMAGETHRUST
	+CANNOTPUSH
	+MTHRUSPECIES
	+THRUSPECIES
	Species "Players"
	DamageType "Holy"

	States
	{
		Spawn:
			AHGT A 0 NoDelay
			{
				finaldamagedealt = A_GetPlayerAttackDamage(18,0);
				A_Explode((finaldamagedealt/32),(24+(ArcheryMasteryPerkLevel*4)),0,false,(12+(ArcheryMasteryPerkLevel*2)));
				if (random(1,4) == 1)
				{
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(-2.0,2.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				}
			}
		Idle:
			AHGT AABBCCDDEE 1 BRIGHT A_FadeOut(0.034)
			loop
	}
}

actor DiarisHolyArrowGlitter2 : DiarisHolyArrowGlitter1
{
	RenderStyle "Add"
	Alpha 0.667
	Scale 1
	States
	{
		Spawn:
			AHGT A 0 NoDelay
			{
				finaldamagedealt = A_GetPlayerAttackDamage(19,0);
				A_Explode((finaldamagedealt/32),(32+(ArcheryMasteryPerkLevel*6)),0,false,(16+(ArcheryMasteryPerkLevel*3)));
				if (random(1,3) == 1)
				{
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(-3.0,3.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				}
			}
		Idle:
			AHGT AABBCCDDEE 1 BRIGHT A_FadeOut(0.067)
			loop
	}
}

actor DiarisHolyArrowGlitter3 : DiarisHolyArrowGlitter1
{
	RenderStyle "Add"
	Alpha 1
	Scale 1.5
	States
	{
		Spawn:
			AHGT A 0 NoDelay
			{
				finaldamagedealt = A_GetPlayerAttackDamage(20,0);
				A_Explode((finaldamagedealt/32),(40+(ArcheryMasteryPerkLevel*8)),0,false,(20+(ArcheryMasteryPerkLevel*4)));
				if (random(1,2) == 1)
				{
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(0.1,180.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
					A_SpawnItemEx("ArmorGlitter", 0, 0, 0, frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(-4.0,4.0), frandom(180.1,360.0), SXF_ABSOLUTEANGLE|SXF_ABSOLUTEVELOCITY, 16);
				}
			}
		Idle:
			AHGT AABBCCDDEE 1 BRIGHT A_FadeOut(0.1)
			loop
	}
}


// Imp's Soul Weapon - Hellcore Weapon #1
Actor DoomImpBall-Soul : DoomImpBallNew
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AB 4 Bright
			Loop
	}
}
Actor DoomImpBallCrisis-Soul : DoomImpBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}


// Dark Imp's Soul Weapon - Hellcore Weapon #2
Actor DarkSeeker-Soul : DarkSeeker 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL 
	Species "Players"
	States
	{
		Spawn:
			DKB1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DarkImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" A 2 Bright A_SeekerMissile (5,10)
			"####" ABB 2 Bright
			Loop
 }
}
Actor DarkSeekerCrisis-Soul : DarkSeekerCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL 
	Species "Players"
	States
	{
		Spawn:
			BAL4 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DarkImpSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 2 Bright A_SeekerMissile (10,20)
			"####" ABB 2 Bright A_GenerateCrisisParticle
			"####" A 2 Bright
			Loop
	}
}

// Cacodemon's Soul Weapon - Hellcore Weapon #3
actor CacodemonBall-Soul : CacodemonBallNew 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL 
	Species "Players"
	States
	{
		Spawn:
			BAL2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacodemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			BAL2 AB 4 Bright
			Loop
	}
}
actor CacodemonBallCrisis-Soul : CacodemonBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacodemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}

// Cacolantern's Soul Weapon - Hellcore Weapon #4
actor CacolanternBall-Soul : CacolanternBall 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL8 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacolanternSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			BAL8 AB 4 Bright
			loop
	}
}
actor CacolanternBallCrisis-Soul : CacolanternBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL8 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((CacolanternSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}

// Abaddon's Soul Weapon - Hellcore Weapon #5
actor AbaddonBall-Soul : AbaddonBall 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL3 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((AbaddonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			BAL3 AB 4 Bright
			loop
	}
}
actor AbaddonBallCrisis-Soul : AbaddonBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL3 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((AbaddonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}

// Hell Knight's Soul Weapon - Hellcore Weapon #6
Actor HellKnightBall-Soul : HellKnightBall 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((KnightSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright
			Loop
	}
}
Actor HellKnightBallCrisis-Soul : HellKnightBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((KnightSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}

// Baron of Hell's Soul Weapon - Hellcore Weapon #7
Actor BaronOfHellBall-Soul : BaronOfHellBall 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BaronSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright
			Loop
	}
}
Actor BaronOfHellBallCrisis-Soul : BaronOfHellBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BaronSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}

// Belphegor's Soul Weapon - Hellcore Weapon #8
Actor BelphegorBall-Soul : BelphegorBall 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BelphegorSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright
			Loop
	}
}
Actor BelphegorBallCrisis-Soul : BelphegorBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BelphegorSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}
// Bruiser Demon's Soul Weapon - Hellcore Weapon #9
Actor BruiserBall-Soul : BruiserBall 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BRBA A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_SpawnItemEx("BruiserBallTrail",0,0,0,0,0,1.28)
			Loop
	}
}
Actor BruiserBallCrisis-Soul : BruiserBallCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BRBA A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright
			{
				A_GenerateCrisisParticle;
				A_SpawnItemEx("BruiserBallTrail", 0, 0, 0, 0, 0, 0, 0, 128);
			}
			Loop
	}
}
Actor BruiserBall2-Soul : BruiserBall2
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BRB2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AB 6 BRIGHT 
			Loop
	}
}
Actor BruiserBall2Crisis-Soul : BruiserBall2Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BRB2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AAABBB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}
Actor BruiserFireSpawner-Soul : BruiserFireSpawner
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			TNT1 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
				A_CustomMissile("BruiserFire",0,0,0,4); // A_MissileAttack
			}
			TNT1 AA 3
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
			}
			Loop
	}
}
Actor BruiserFireSpawnerCrisis-Soul : BruiserFireSpawnerCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((BruiserSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			TNT1 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
				A_CustomMissile("BruiserFireCrisis",0,0,0,4); // A_MissileAttack
			}
			TNT1 AA 3
			{
				if (CallACS("MiscVarCheckDECORATE",10033) >= 2) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",10033) >= 4) { A_SetTics(1); }
			}
			Loop
	}
}

// Archon of Hell's Soul Weapon - Hellcore Weapon #10
Actor ArchonOfHellBall-Soul : ArchonOfHellBall 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright
			Loop
	}
}
Actor ArchonOfHellBallCrisis-Soul : ArchonOfHellBallCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			BAL7 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AABB 2 Bright A_GenerateCrisisParticle
			Loop
	}
}
Actor ArchonComet-Soul : ArchonComet 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			ARCB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AAAABBBBCCCC 1 Bright A_SpawnItem("ArchonCometTrail",0,0)
			Loop
	}
}
Actor ArchonCometCrisis-Soul : ArchonCometCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			ARCB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 Bright A_SpawnItem("ArchonCometTrail",0,0)
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 Bright A_SpawnItem("ArchonCometTrail",0,0)
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" BB 1 Bright A_SpawnItem("ArchonCometTrail",0,0)
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" BB 1 Bright A_SpawnItem("ArchonCometTrail",0,0)
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" CC 1 Bright A_SpawnItem("ArchonCometTrail",0,0)
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" CC 1 Bright A_SpawnItem("ArchonCometTrail",0,0)
			Loop
	}
}

// Pyro Demon's Soul Weapon - Hellcore Weapon #11
Actor FireShot-Soul : FireShot 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FSHT A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
			}
		Idle:
			"####" AAAAAA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			Loop
	}
}
Actor FireShotCrisis-Soul : FireShotCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FSHT A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 Bright A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			Loop
	}
}
Actor PyroBall-Soul : PyroBall
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			RBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" AAAABBBB 1 BRIGHT 
			Loop
	}
}
Actor PyroBallCrisis-Soul : PyroBallCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			RBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 BRIGHT 
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 BRIGHT 
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" BB 1 BRIGHT 
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" BB 1 BRIGHT 
			Loop
	}
}
Actor PyroBlast-Soul : PyroBlast
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			SBLL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" ABCDEFGHIJ 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" A 0 BRIGHT A_SeekerMissile(0,2)
			Loop
		Death:
			SBLL K 0 A_CustomMissile("FirebombExplosion1-Soul",1,0,45,4)
			SBLL K 0 A_CustomMissile("FirebombExplosion1-Soul",1,0,135,4)
			SBLL K 0 A_CustomMissile("FirebombExplosion1-Soul",1,0,225,4)
			SBLL K 0 A_CustomMissile("FirebombExplosion1-Soul",1,0,315,4)
			SBLL LMNOPQRSTUVW 1 BRIGHT
			Stop
	}
}
Actor PyroBlastCrisis-Soul : PyroBlastCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			SBLL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AB 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" CD 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" E 0 Bright A_GenerateCrisisParticle
			"####" EF 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" G 0 Bright A_GenerateCrisisParticle
			"####" GH 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" I 0 Bright A_GenerateCrisisParticle
			"####" IJ 1 BRIGHT A_SpawnItemEx("FireTail",0,0,0,0,0,0,0,128)
			"####" A 0 BRIGHT A_SeekerMissile(0,2)
			Loop
		Death:
			"####" K 0 A_CustomMissile("FirebombExplosion1Crisis-Soul",1,0,45,4)
			"####" K 0 A_CustomMissile("FirebombExplosion1Crisis-Soul",1,0,135,4)
			"####" K 0 A_CustomMissile("FirebombExplosion1Crisis-Soul",1,0,225,4)
			"####" K 0 A_CustomMissile("FirebombExplosion1Crisis-Soul",1,0,315,4)
			"####" LMNOPQRSTUVW 1 BRIGHT
			Stop
	}
}

actor FirebombExplosion1-Soul : FirebombExplosion1
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FRME A 0
			"####" A 1 Bright
			"####" A 1 Bright
			Loop
		Death:
			"####" A 0
			"####" A 0 A_StartSound("pyro/blastexplosion")
			"####" A 3 Bright A_Explode(128,144,0)
			"####" B 1 Bright A_Mushroom("Pyroball",8,MSF_DontHurt)
			"####" B 2 Bright A_CustomMissile("FirebombExplosion2-Soul",25,0,180,4)
			"####" CDEFGHIJKLMNOPQRS 3 Bright
			Stop
	}
}

actor FirebombExplosion1Crisis-Soul : FirebombExplosion1Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FRME A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" A 1 Bright
			Loop
		Death:
			"####" A 0
			"####" A 0 A_StartSound("pyro/blastexplosion")
			"####" A 3 Bright A_Explode((128 * CrisisMultiplier),144,0)
			"####" B 1 Bright A_Mushroom("PyroballCrisis",8,MSF_DontHurt)
			"####" B 2 Bright A_CustomMissile("FirebombExplosion2Crisis-Soul",25,0,180,4)
			"####" CDEFGHIJKLMNOPQRS 3 Bright
			Stop
	}
}

actor FirebombExplosion2-Soul : FirebombExplosion2
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Death:
			"####" A 0
			"####" A 0 A_StartSound("pyro/blastexplosion")
			"####" A 3 Bright A_Explode(128,136,0)
			"####" B 1 Bright
			"####" B 2 Bright A_CustomMissile("FirebombExplosion3-Soul",20,0,180,4)
			"####" CDEFGHIJKLMNOPQRS 3 Bright
			Stop
	}
}
actor FirebombExplosion2Crisis-Soul : FirebombExplosion2Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FRME A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" A 1 Bright
			Loop
		Death:
			"####" A 0
			"####" A 0 A_StartSound("pyro/blastexplosion")
			"####" A 3 Bright A_Explode((128 * CrisisMultiplier),136,0)
			"####" B 1 Bright
			"####" B 2 Bright A_CustomMissile("FirebombExplosion3Crisis-Soul",20,0,180,4)
			"####" CDEFGHIJKLMNOPQRS 3 Bright
			Stop
	}
}

actor FirebombExplosion3-Soul : FirebombExplosion3
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Death:
			FRME A 0
			FRME A 0 A_StartSound("pyro/blastexplosion")
			FRME A 3 Bright A_Explode(128,128,0)
			FRME BCDEFGHIJKLMNOPQRS 3 Bright
			Stop
	}
}
actor FirebombExplosion3Crisis-Soul : FirebombExplosion3Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FRME A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" A 1 Bright
			Loop
		Death:
			FRME A 0
			FRME A 0 A_StartSound("pyro/blastexplosion")
			FRME A 3 Bright A_Explode((128 * CrisisMultiplier),128,0)
			FRME BCDEFGHIJKLMNOPQRS 3 Bright
			Stop
	}
}

actor FallingComet-Soul : FallingComet
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	states
	{
		Spawn:
			COMT AAAABBBBCCCC 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			Loop
		Death:
			COMT D 3 BRIGHT A_SpawnItemEx("CometDeathGlow", 0, 0, 0, 0, 0, 0, 0, 128)
			COMT E 3 BRIGHT A_Explode(20,128,0)
			COMT E 0 A_SpawnItemEx("CometDeath", 0, 0, 0, 0, 0, 0, 0, 128)
			Stop
	}
}

actor FallingCometCrisis-Soul : FallingCometCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	states
	{
		Spawn:
			COMT A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)

			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)

			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 BRIGHT A_SpawnItemEx("FireTail", 0, 0, 0, 0, 0, 0, 0, 128)
			Loop
		Death:
			"####" D 3 BRIGHT A_SpawnItemEx("CometDeathGlow", 0, 0, 0, 0, 0, 0, 0, 128)
			"####" E 3 BRIGHT A_Explode((20 * CrisisMultiplier),128,0)
			"####" E 0 A_SpawnItemEx("CometDeath", 0, 0, 0, 0, 0, 0, 0, 128)
			Stop
	}
}

Actor RainCometNull-Soul : RainCometNull
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			RCMN A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 0 A_Jump(5,8)
			"####" AAAAAA 1 A_Wander
			"####" A 8 A_CustomMissile("FallingComet-Soul",-24,random(0,128),random(0,360),2,random(1,89))
			"####" A 0 Bright { user_theta += 1; }
			"####" A 0 Bright A_JumpIf(user_theta==32,"Death")
			Loop
	}
}
Actor RainCometNullCrisis-Soul : RainCometNullCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			RCMN A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 0 A_Jump(5,8)
			"####" AAAAAA 1 A_Wander
			"####" A 8 A_CustomMissile("FallingCometCrisis-Soul",-24,random(0,128),random(0,360),2,random(1,89))
			"####" A 0 Bright { user_theta += 1; }
			"####" A 0 Bright A_JumpIf(user_theta==32,"Death")
			Loop
	}
}
Actor EscapeExplosion-Soul : EscapeExplosion
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			NKXP A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_Mushroom("PyroBall-Soul",16,MSF_DontHurt);
			}
		Idle:
			"####" BC 3 BRIGHT
			"####" D 3 BRIGHT A_Explode(50,192,0)
			"####" EFGHIJKLMNOPQRSTUV 3 BRIGHT
			Stop
	}
}
Actor EscapeExplosionCrisis-Soul : EscapeExplosionCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			NKXP A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((PyroDemonSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_Mushroom("PyroBallCrisis-Soul",16,MSF_DontHurt);
			}
		Idle:
			"####" BC 3 BRIGHT
			"####" D 3 BRIGHT A_Explode((50 * CrisisMultiplier),192,0)
			"####" EFGHIJKLMNOPQRSTUV 3 BRIGHT
			stop
	}
}

// Death Incarnate's Soul Weapon - Hellcore Weapon #12
Actor DIPuff-Soul : DIPuff { +SPECTRAL }

actor ReviveProj : AetheriusProjectileZSC
{
	//+FLOAT
	//+NOBLOCKMONST
	//+NOGRAVITY
	+FRIENDLY
	+NOCLIP
	Radius 50
	Height 5
	PROJECTILE
	RenderStyle "None"
	Speed 7
	States
	{
		Spawn:
			TNT1 AAAAA 6 
			{
				A_Chase("","",CHF_RESURRECT);
				//A_VileChase;
			}
			Stop
		Death:
			TNT1 A 1
			Stop
		Heal:
			TNT1 A 1
			Stop
	}
}

// Revive Projectiles [used by monsters]
actor ReviveProj2 : ReviveProj
{
	//-FRIENDLY
}

Actor ArchvileFlame-Soul : ArchvileFlame
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FIRE A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchvileSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
			goto Idle
	}
}

Actor ArchvileFlameCrisis-Soul : ArchvileFlameCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FIRE A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((ArchvileSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
			goto Idle
	}
}

// Diabloist's Soul Weapon - Hellcore Weapon #14
Actor DFlare-Soul : DFlare 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 1 Bright A_CustomMissile("MFlareFX",0,0,0,0)
			"####" AA 1 Bright
			"####" B 1 Bright A_CustomMissile("MFlareFX",0,0,0,0)
			"####" BB 1 Bright
			Loop
	}
}
Actor DFlareCrisis-Soul : DFlareCrisis 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright A_CustomMissile("MFlareFX",0,0,0,0)
			"####" A 1 Bright
			"####" A 1 Bright A_GenerateCrisisParticle
			"####" B 1 Bright A_CustomMissile("MFlareFX",0,0,0,0)
			"####" B 1 Bright A_GenerateCrisisParticle
			"####" B 1 Bright
			Loop
	}
}
Actor DTracer-Soul : DTracer 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			TNT1 A 1 Bright A_SeekerMissile (10,15)
			TNT1 A 0 Bright A_Countdown
			TNT1 A 0 Bright A_CustomMissile("DTracerPuff-Soul",0,0,0,0)
			Loop
	}
}
Actor DTracerCrisis-Soul : DTracerCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			TNT1 A 1 Bright A_SeekerMissile (10,15)
			TNT1 A 0 Bright A_Countdown
			TNT1 A 0 Bright A_CustomMissile("DTracerPuffCrisis-Soul",0,0,0,0)
			Loop
	}
}
Actor DMissile-Soul : DMissile
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" AAAA 1 Bright
			"####" A 1 A_CFlamePuff
			Goto Death+1
		Death:
			"####" A 1 Bright A_CFlameMissile("DMissileCircle-Soul")
			"####" ABC 3 Bright
			"####" D 4 Bright
			"####" E 3 Bright
			"####" F 4 Bright
			"####" G 3 Bright
			"####" H 4 Bright
			"####" I 3 Bright
			"####" J 4 Bright
			"####" K 3 Bright
			"####" L 4 Bright
			"####" M 3 Bright
			Stop
	}
}
Actor DMissileCrisis-Soul : DMissileCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 Bright
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" AA 1 Bright
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 A_CFlamePuff
			Goto Death+1
		Death:
			"####" A 1 Bright A_CFlameMissile("DMissileCircleCrisis-Soul")
			"####" ABC 3 Bright
			"####" D 4 Bright
			"####" E 3 Bright
			"####" F 4 Bright
			"####" G 3 Bright
			"####" H 4 Bright
			"####" I 3 Bright
			"####" J 4 Bright
			"####" K 3 Bright
			"####" L 4 Bright
			"####" M 3 Bright
			Stop
	}
}

actor DTracerPuff-Soul : DTracerPuff
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FTRA A 0
			"####" A 1 Bright A_Explode(4,8,0)
			"####" A 1 Bright
			"####" A 1 Bright
			"####" B 1 Bright A_Explode(4,8,0)
			"####" B 1 Bright
			"####" B 1 Bright
			"####" C 1 Bright A_Explode(4,8,0)
			"####" C 1 Bright
			"####" C 1 Bright
			"####" D 1 Bright A_Explode(4,8,0)
			"####" D 1 Bright
			"####" D 1 Bright
			"####" E 1 Bright A_Explode(4,8,0)
			"####" E 1 Bright
			"####" E 1 Bright
			"####" F 1 Bright A_Explode(4,8,0)
			"####" F 1 Bright
			"####" F 1 Bright
			"####" G 1 Bright A_Explode(4,8,0)
			"####" G 1 Bright
			"####" G 1 Bright
			"####" H 1 Bright A_Explode(4,8,0)
			"####" H 1 Bright
			"####" H 1 Bright
			"####" I 1 Bright A_Explode(4,8,0)
			"####" I 1 Bright
			"####" I 1 Bright
			"####" J 1 Bright A_Explode(4,8,0)
			"####" J 1 Bright
			"####" J 1 Bright
			stop
	}
}

actor DTracerPuffCrisis-Soul : DTracerPuffCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FTRA A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" A 1 Bright
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" B 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 Bright
			"####" B 1 Bright
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" C 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" C 1 Bright
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 Bright
			"####" D 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" D 0 Bright A_GenerateCrisisParticle
			"####" D 1 Bright
			"####" D 1 Bright
			"####" E 0 Bright A_GenerateCrisisParticle
			"####" E 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" E 1 Bright
			"####" E 0 Bright A_GenerateCrisisParticle
			"####" E 1 Bright
			"####" F 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" F 0 Bright A_GenerateCrisisParticle
			"####" F 1 Bright
			"####" F 1 Bright
			"####" G 0 Bright A_GenerateCrisisParticle
			"####" G 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" G 1 Bright
			"####" G 0 Bright A_GenerateCrisisParticle
			"####" G 1 Bright
			"####" H 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" H 0 Bright A_GenerateCrisisParticle
			"####" H 1 Bright
			"####" H 1 Bright
			"####" H 0 Bright A_GenerateCrisisParticle
			"####" I 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" I 1 Bright
			"####" I 0 Bright A_GenerateCrisisParticle
			"####" I 1 Bright
			"####" J 1 Bright A_Explode((4 * CrisisMultiplier),8,0)
			"####" J 0 Bright A_GenerateCrisisParticle
			"####" J 1 Bright
			"####" J 1 Bright
			stop
	}
}

actor DMissileCircle-Soul : DMissileCircle 
{ 
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
}
actor DMissileCircleCrisis-Soul : DMissileCircleCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			CFCF A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" A 1 Bright
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" A 1 Bright
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 Bright A_CFlameRotate
			"####" B 1 Bright
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 Bright
			"####" C 1 Bright
			"####" D 0 Bright A_GenerateCrisisParticle
			"####" D 1 Bright
			"####" E 1 Bright
			"####" E 0 Bright A_GenerateCrisisParticle
			"####" E 1 Bright
			"####" F 1 Bright A_CFlameRotate
			"####" F 0 Bright A_GenerateCrisisParticle
			"####" F 1 Bright
			"####" G 1 Bright
			"####" G 0 Bright A_GenerateCrisisParticle
			"####" H 1 Bright
			"####" H 1 Bright
			"####" I 0 Bright A_GenerateCrisisParticle
			"####" I 1 Bright
			"####" I 1 Bright
			"####" J 0 Bright A_GenerateCrisisParticle
			"####" J 1 Bright A_CFlameRotate
			"####" K 1 Bright
			"####" K 0 Bright A_GenerateCrisisParticle
			"####" K 1 Bright
			"####" L 1 Bright
			"####" L 0 Bright A_GenerateCrisisParticle
			"####" L 1 Bright
			"####" L 1 Bright
			"####" L 0 Bright A_GenerateCrisisParticle
			"####" M 1 Bright
			"####" M 1 Bright
			"####" M 0 Bright A_GenerateCrisisParticle
			"####" M 1 Bright
			"####" N 1 Bright A_CFlameRotate
			"####" N 0 Bright A_GenerateCrisisParticle
			"####" N 1 Bright
			"####" O 1 Bright
			"####" O 0 Bright A_GenerateCrisisParticle
			"####" O 1 Bright
			"####" O 1 Bright
			"####" P 0 Bright A_GenerateCrisisParticle
			"####" P 1 Bright
			"####" P 1 Bright
			Stop
		Death:
			"####" QR 3 Bright
			"####" S 3 Bright A_Explode((20 * CrisisMultiplier),20,0)
			"####" TUVWXYZ 3 Bright
			Stop
	}
}


Actor DFire-Soul : DFire
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			HLFR A 1 Bright
			{
				A_StartFire;
				A_Explode(4,32,0);
			}
			HLFR BABCB 1 Bright
			{
				A_Fire;
				A_Explode(4,32,0);
			}
			HLFR CBCDCDCDEDED 1 Bright
			{
				A_Fire;
				A_Explode(5,32,0);
			}
			HLFR E 1 Bright
			{
				A_FireCrackle;
				A_Explode(4,32,0);
			}
			HLFR FEF 1 Bright
			{
				A_Fire;
				A_Explode(3,32,0);
			}
			HLFR EFG 1 Bright
			{
				A_Fire;
				A_Explode(2,32,0);
			}
			HLFR HGHGH 1 Bright
			{
				A_Fire;
				A_Explode(1,32,0);
			}
			stop
	}
}
Actor DFireCrisis-Soul : DFireCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			VBAL A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((DiabloistSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			HLFR A 1 Bright
			{
				A_StartFire;
				A_Explode((4 * CrisisMultiplier),32,0);
			}
			HLFR BABCB 1 Bright
			{
				A_Fire;
				A_Explode((4 * CrisisMultiplier),32,0);
			}
			HLFR CBCDCDCDEDED 1 Bright
			{
				A_Fire;
				A_Explode((5 * CrisisMultiplier),32,0);
			}
			HLFR E 1 Bright
			{
				A_FireCrackle;
				A_Explode((4 * CrisisMultiplier),32,0);
			}
			HLFR FEF 1 Bright
			{
				A_Fire;
				A_Explode((3 * CrisisMultiplier),32,0);
			}
			HLFR EFG 1 Bright
			{
				A_Fire;
				A_Explode((2 * CrisisMultiplier),32,0);
			}
			HLFR HGHGH 1 Bright
			{
				A_Fire;
				A_Explode((1 * CrisisMultiplier),32,0);
			}
			stop
	}
}

// Flying Balrog's Soul Weapon - Hellcore Weapon #15
Actor FlyingBalrogShot1-Soul : FlyingBalrogShot1 
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			MANF A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			MANF AABB 2 Bright
			loop
	}
}
Actor FlyingBalrogShot1Crisis-Soul : FlyingBalrogShot1Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			MANF A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			MANF AABB 2 Bright A_GenerateCrisisParticle
			loop
	}
}
Actor FlyingBalrogShot2-Soul : FlyingBalrogShot2
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FATB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			FATB AB 2 Bright A_CustomTracer(16.875,"BulletPuffDVDS","RevenantTracerSmoke")
			loop
	}
}
Actor FlyingBalrogShot2Crisis-Soul : FlyingBalrogShot2Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			FATB A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((FlyingBalrogSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" AB 2 Bright
			{
				A_GenerateCrisisParticle;
				A_CustomTracer(16.875,"BulletPuffDVDS","RevenantTracerSmoke");
			}
			loop
	}
}

// Hades Elemental's Soul Weapon - Hellcore Weapon #16
actor HadesElementalBall-Soul : HadesElementalBall
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			HEFX AB 4 bright
			loop
		Death:
			HEFX CDEEFGH 3 bright
			stop
	}
}

actor HadesElementalBallCrisis-Soul : HadesElementalBallCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	states
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			"####" AABB 2 bright A_GenerateCrisisParticle
			loop
		Death:
			"####" CDEEFGH 3 bright
			stop
	}
}

actor HadesBolt-Soul : HadesBolt
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX2 F 0 ThrustThing(random(0,255),1,0,0)
			LFX2 FGHIJ 1 Bright 
			{
				A_Explode(16,64,0);
				A_StartSound("Monster/hadsit");
				A_Explode(16,64,0);
			}
			LFX2 J 0 Bright A_CountDown
			loop
		Death:
			LFX2 FGHIJ 2 Bright A_Explode(32,64,0)
			stop
	}
}

actor HadesBoltCrisis-Soul : HadesBoltCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX2 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesElementalSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX2 F 0 ThrustThing(random(0,255),1,0,0)
			LFX2 F 0 Bright A_GenerateCrisisParticle
			LFX2 FG 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 H 0 Bright A_GenerateCrisisParticle
			LFX2 HI 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 J 0 Bright A_CountDown
			LFX2 J 0 Bright A_GenerateCrisisParticle
			LFX2 JF 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 G 0 Bright A_GenerateCrisisParticle
			LFX2 GH 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 I 0 Bright A_GenerateCrisisParticle
			LFX2 IJ 1 Bright 
			{
				A_Explode((16 * CrisisMultiplier),64,0);
				A_StartSound("Monster/hadsit");
				A_Explode((16 * CrisisMultiplier),64,0);
			}
			LFX2 J 0 Bright A_CountDown
			loop
		Death:
			LFX2 FGHIJ 2 Bright A_Explode((32 * CrisisMultiplier),64,0)
			stop
	}
}

// Hades Overlord's Soul Weapon - Hellcore Weapon #17
actor StormStrike1-Soul : StormStrike1
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 I 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX1 IJKLM 1 Bright A_Explode(64,64,0)
			loop
		Death:
			LFX1 NOPQR 2 Bright
			stop
	}
}

actor StormStrike1Crisis-Soul : StormStrike1Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 I 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX1 I 0
			"####" I 0 Bright A_GenerateCrisisParticle
			"####" I 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" J 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" K 0 Bright A_GenerateCrisisParticle
			"####" K 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" L 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" M 0 Bright A_GenerateCrisisParticle
			"####" M 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" I 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" J 0 Bright A_GenerateCrisisParticle
			"####" J 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" K 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" L 0 Bright A_GenerateCrisisParticle
			"####" L 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			"####" M 1 Bright A_Explode((64 * CrisisMultiplier),64,0)
			loop
		Death:
			"####" NOPQR 2 Bright
			stop
	}
}

actor StormShot1-Soul : StormShot1
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX1 S 0
			"####" STUVW 1 Bright
			"####" W 0 Bright A_CustomMissile("StormLite1-Soul",0,0,90,6)
			"####" W 0 Bright A_CustomMissile("StormLite1-Soul",0,0,270,6)
			loop
		Death:
			"####" STUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVW 1 Bright A_Explode(16,32,0)
			stop
	}
}

actor StormShot1Crisis-Soul : StormShot1Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX1 S 0
			"####" S 0 Bright A_GenerateCrisisParticle
			"####" ST 1 Bright
			"####" U 0 Bright A_GenerateCrisisParticle
			"####" UV 1 Bright
			"####" V 0 Bright A_GenerateCrisisParticle
			"####" W 1 Bright
			"####" W 0 Bright A_CustomMissile("StormLite1Crisis-Soul",0,0,90,6)
			"####" W 0 Bright A_CustomMissile("StormLite1Crisis-Soul",0,0,270,6)
			"####" S 1 Bright
			"####" S 0 Bright A_GenerateCrisisParticle
			"####" TU 1 Bright
			"####" V 0 Bright A_GenerateCrisisParticle
			"####" VW 1 Bright
			"####" W 0 Bright A_GenerateCrisisParticle
			"####" W 0 Bright A_CustomMissile("StormLite1Crisis-Soul",0,0,90,6)
			"####" W 0 Bright A_CustomMissile("StormLite1Crisis-Soul",0,0,270,6)
			loop
		Death:
			"####" STUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVWSTUVW 1 Bright A_Explode((16 * CrisisMultiplier),32,0)
			stop
	}
}

actor StormShot2-Soul : StormShot2
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			TNT1 A 2
			LFX2 KLMNO 1 Bright
			LFX2 O 0 Bright A_CustomMissile("StormLite2Crisis-Soul",0,0,90,6)
			LFX2 O 0 Bright A_CustomMissile("StormLite2Crisis-Soul",0,0,270,6)
			Goto Spawn+1
		Death:
			LFX2 KLMNO 1 Bright A_Explode(32,64,0)
			LFX2 KKKKKK 0 Bright A_SpawnItemEx("StormBoltCrisis-Soul",0,0,0,4,0,0,random(0,359),0,0)
			LFX2 LMNO 1 Bright A_Explode(32,64,0)
			stop
	}
}

actor StormShot2Crisis-Soul : StormShot2Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			TNT1 A 2
			LFX2 K 0
			"####" K 0 Bright A_GenerateCrisisParticle
			"####" K 1 Bright
			"####" L 1 Bright
			"####" M 0 Bright A_GenerateCrisisParticle
			"####" M 1 Bright
			"####" N 1 Bright
			"####" N 0 Bright A_GenerateCrisisParticle
			"####" O 1 Bright
			"####" O 0 Bright A_CustomMissile("StormLite2Crisis-Soul",0,0,90,6)
			"####" O 0 Bright A_CustomMissile("StormLite2Crisis-Soul",0,0,270,6)
			"####" K 1 Bright
			"####" L 0 Bright A_GenerateCrisisParticle
			"####" L 1 Bright
			"####" M 1 Bright
			"####" M 0 Bright A_GenerateCrisisParticle
			"####" N 1 Bright
			"####" O 1 Bright
			"####" O 0 Bright A_GenerateCrisisParticle
			"####" O 0 Bright A_CustomMissile("StormLite2Crisis-Soul",0,0,90,6)
			"####" O 0 Bright A_CustomMissile("StormLite2Crisis-Soul",0,0,270,6)
			Goto Spawn+1
		Death:
			"####" KLMNO 1 Bright A_Explode((32 * CrisisMultiplier),64,0)
			"####" KKKKKK 0 Bright A_SpawnItemEx("StormBolt-Soul",0,0,0,4,0,0,random(0,359),0,0)
			"####" LMNO 1 Bright A_Explode((32 * CrisisMultiplier),64,0)
			stop
	}
}

actor StormBolt-Soul : StormBolt
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX2 F 1 Bright A_Explode(16,64,0)
			LFX2 F 0 Bright A_CustomMissile("StormBolt2",16,0,0,6,90)
			LFX2 F 0 ThrustThing(random(0,255),1,0,0)
			LFX2 G 1 Bright A_Explode(16,64,0)
			LFX2 G 0 Bright A_CustomMissile("StormBolt2",16,0,0,6,90)
			LFX2 H 1 Bright A_Explode(16,64,0)
			LFX2 H 0 Bright A_CustomMissile("StormBolt2",16,0,0,6,90)
			LFX2 I 1 Bright A_Explode(16,64,0)
			LFX2 I 0 Bright A_CustomMissile("StormBolt2",16,0,0,6,90)
			LFX2 J 1 Bright A_Explode(16,64,0)
			LFX2 J 0 Bright A_CustomMissile("StormBolt2",16,0,0,6,90)
			LFX2 J 0 Bright A_CountDown
			loop
		Death:
			LFX2 FGHIJ 2 Bright A_Explode(16,64,0)
			stop
	}
}

actor StormBoltCrisis-Soul : StormBoltCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX2 F 0
			"####" F 0 Bright A_GenerateCrisisParticle
			"####" F 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" F 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" F 0 ThrustThing(random(0,255),1,0,0)
			"####" G 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" G 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" H 0 Bright A_GenerateCrisisParticle
			"####" H 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" H 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" I 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" I 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" J 0 Bright A_GenerateCrisisParticle
			"####" J 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" J 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" J 0 Bright A_CountDown
			"####" F 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" F 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" F 0 ThrustThing(random(0,255),1,0,0)
			"####" G 0 Bright A_GenerateCrisisParticle
			"####" G 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" G 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" H 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" H 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" I 0 Bright A_GenerateCrisisParticle
			"####" I 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" I 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" J 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			"####" J 0 Bright A_CustomMissile("StormBolt2Crisis",16,0,0,6,90)
			"####" J 0 Bright A_CountDown
			loop
		Death:
			"####" FGHIJ 2 Bright A_Explode((16 * CrisisMultiplier),64,0)
			stop
	}
}

actor StormBolt2-Soul : StormBolt2
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			TNT1 A 1 Bright A_Explode(16,64,0)
			loop
		Death:
			TNT1 A 1 Bright
			stop
	}
}

actor StormBolt2Crisis-Soul : StormBolt2Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			TNT1 A 1 Bright A_Explode((16 * CrisisMultiplier),64,0)
			loop
		Death:
			TNT1 A 1 Bright
			stop
	}
}

actor StormLite1-Soul : StormLite1
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			DLIT A 0
			"####" A 1 Bright
			"####" B 1 Bright
			"####" C 1 Bright
			"####" A 1 Bright
			"####" B 1 Bright
			"####" C 1 Bright
			Loop
		Death:
			"####" DEFGHIJKLMNO 1 Bright
			Stop
	}
}

actor StormLite1Crisis-Soul : StormLite1Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			DLIT A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" B 1 Bright
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 Bright
			"####" A 1 Bright
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 Bright
			"####" C 1 Bright
			Loop
		Death:
			"####" DEFGHIJKLMNO 1 Bright
			Stop
	}
}

actor StormLite2-Soul : StormLite2
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX1 X 1 Bright
			LFX1 Y 1 Bright
			LFX1 Z 1 Bright
			LFX1 X 1 Bright
			LFX1 Y 1 Bright
			LFX1 Z 1 Bright
			Loop
		Death:
			LFX1 STUVW 3 Bright
			Stop
	}
}

actor StormLite2Crisis-Soul : StormLite2Crisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	States
	{
		Spawn:
			LFX1 S 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			LFX1 X 0
			"####" X 0 Bright A_GenerateCrisisParticle
			"####" X 1 Bright
			"####" Y 1 Bright
			"####" Z 0 Bright A_GenerateCrisisParticle
			"####" Z 1 Bright
			"####" X 1 Bright
			"####" Y 0 Bright A_GenerateCrisisParticle
			"####" Y 1 Bright
			"####" Z 1 Bright
			Loop
		Death:
			"####" STUVW 3 Bright
			Stop
	}
}

actor HadesOverlordBall-Soul : HadesOverlordBall
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	states
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			HEFX A 0
			"####" A 2 bright
			"####" A 2 bright
			"####" B 2 bright
			"####" B 2 bright
			loop
		Death:
			"####" CDEEFGH 3 bright
			stop
	}
}

actor HadesOverlordBallCrisis-Soul : HadesOverlordBallCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	states
	{
		Spawn:
			HEFX A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			HEFX A 0
			"####" AABB 2 bright A_GenerateCrisisParticle
			loop
		Death:
			"####" CDEEFGH 3 bright
			stop
	}
}

actor OverBall-Soul : OverBall
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	Translation "192:207=168:191"
	States
	{
		Spawn:
			AFX1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			AFX1 ABC 1 Bright
			loop
		Death:
			AFX1 DE 4 Bright A_Explode(32,32,0)
			AFX1 FGHI 4 bright
			stop
	}
}

actor OverBallCrisis-Soul : OverBallCrisis
{
	AetheriusBaseProjectileZSC.ishellcore 1
	+SPECTRAL
	Species "Players"
	Translation "192:207=168:191"
	States
	{
		Spawn:
			AFX1 A 0 NoDelay
			{
				A_ScaleVelocity(1.0 + ((HadesOverlordSouls - 1) * 0.15));
				A_ScaleVelocity(1.0 + (SoulMasteryPerkLevel * 0.125) + (SoulMasteryEXPerkLevel * 0.3125));
				A_AlertMonsters;
			}
		Idle:
			AFX1 A 0
			"####" A 0 Bright A_GenerateCrisisParticle
			"####" A 1 Bright
			"####" B 1 Bright
			"####" C 0 Bright A_GenerateCrisisParticle
			"####" C 1 Bright
			"####" A 1 Bright
			"####" B 0 Bright A_GenerateCrisisParticle
			"####" B 1 Bright
			"####" C 1 Bright
			loop
		Death:
			"####" DE 4 Bright A_Explode((32 * CrisisMultiplier),32,0)
			"####" FGHI 4 bright
			stop
	}
}

// Sapphire Wand [Flora]
ACTOR MageWandSmokeNew
{
	+NOBLOCKMAP
	+NOGRAVITY
	+SHADOW
	+NOTELEPORT
	+CANNOTPUSH
	+NODAMAGETHRUST
	RenderStyle "Translucent"
	Alpha 0.6
	Scale 0.75
	States
	{
		Spawn:
			MWN3 A 0 NoDelay
		Idle:
			MWN3 ABAB 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			Stop
	}
}

ACTOR MageWandSmokeNew2
{
	+NOBLOCKMAP
	+NOGRAVITY
	+SHADOW
	+NOTELEPORT
	+CANNOTPUSH
	+NODAMAGETHRUST
	RenderStyle "Translucent"
	Alpha 0.6
	Scale 0.875
	States
	{
		Spawn:
			MWN3 A 0 NoDelay
		Idle:
			MWN3 ABAB 4 bright
			{
				if (CallACS("MiscVarCheckDECORATE",10053) >= 2) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",10053) >= 5) { A_SetTics(2); }
			}
			Stop
	}
}

ACTOR MageWandMissileNew : BaseWandMissile
{
	Tag "Sapphire Shot"
	Speed 184
	Radius 1 // 12
	Height 1 // 8
	Damage ((finaldamagedealt * random(3,4)) / 2) // 5
	Scale 0.25
	DamageType "Magic"
	MissileType "MageWandSmokeNew"
	SeeSound "MageWandFire"
	Obituary "%o got pew-pew'd to death by %k's Sapphire Wand"
	States
	{
		Spawn:
			MWN2 C 0 Bright
			{
				finaldamagedealt = A_GetPlayerAttackDamage(44,0);
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
				user_randompain = 2;
				if (WandMastPerkLvl == 1) { user_randompain += 5; }
				if (WandMastPerkLvl == 2) { user_randompain += 11; }
				if (WandMastPerkLvl == 3) { user_randompain += 18; }
				if (WandMastPerkLvl == 4) { user_randompain += 26; }
				if (WandMastPerkLvl == 5) { user_randompain += 35; }
				if (WandMastEXPerkLvl == 1) { user_randompain += (5 * 5) / 2; }
				if (WandMastEXPerkLvl == 2) { user_randompain += (11 * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }
			}
		Idle:
			MWN2 CCCCDDDD 1 Bright 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(44,0); 
			}
			Loop
		Death:
			MWN2 E 4 Bright
			MWN2 F 3 Bright
			MWN2 G 4 Bright
			MWN2 H 3 Bright
			MWN2 I 4 Bright
			Stop
	}
}

ACTOR MageWandMissile2New : MageWandMissileNew
{
	Tag "Sapphire Shot"
	Damage ((finaldamagedealt * random(3,4)) / 2) // 5
	States
	{
		Spawn:
			MWN2 C 0 Bright
			{
				finaldamagedealt = A_GetPlayerAttackDamage(45,0);
				A_ScaleVelocity(1.00+((WandMastPerkLvl*0.10)+(WandMastEXPerkLvl*0.25)));
				user_randompain = 2;
				if (WandMastPerkLvl == 1) { user_randompain += 5; }
				if (WandMastPerkLvl == 2) { user_randompain += 11; }
				if (WandMastPerkLvl == 3) { user_randompain += 18; }
				if (WandMastPerkLvl == 4) { user_randompain += 26; }
				if (WandMastPerkLvl == 5) { user_randompain += 35; }
				if (WandMastEXPerkLvl == 1) { user_randompain += (5 * 5) / 2; }
				if (WandMastEXPerkLvl == 2) { user_randompain += (11 * 5) / 2; }
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }
			}
		Idle:
			MWN2 CCCCDDDD 1 Bright 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(45,0); 
			}
			Loop
		Death:
			MWN2 E 4 Bright
			MWN2 F 3 Bright
			MWN2 G 4 Bright
			MWN2 H 3 Bright
			MWN2 I 4 Bright
			Stop
	}
}


actor EWShieldIdleMode : PlaceholderItem { }
actor EWShieldDefendMode : PlaceholderItem { }
actor EWShieldDefendModeExtra : PlaceholderItem { }
actor HWShieldBlockHold : PlaceholderItem { }

Actor EvilWarriorShieldExtraPickup : AetheriusCustomInventory
{
	+DONTGIB
	+INVENTORY.ALWAYSPICKUP
	Inventory.Pickupsound "misc/w_pkup"
	Inventory.PickupMessage "You got a \czHell Warrior's Shield\c- power-up! (\cy+20% damage\c-) \cx[Slot 9]\c-"
	States
	{
		Spawn:
			EWSH ABCDEFGH 3
			{
				if (CallACS("MiscVarCheckDECORATE",300) >= 10)
				{
					A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_FadeOut(1,1);
				}
			}
			Goto Spawn2
		Spawn2:
			EWSH I 5
			{
				if (CallACS("MiscVarCheckDECORATE",300) >= 10)
				{
					A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_FadeOut(1,1);
				}
			}
			loop
			
		Pickup:
			TNT1 A 0 { A_GiveInventory("HellWarriorShieldLevel",1); }
			Stop
	}
}

Actor EvilWarriorShieldExtraPickupGround : EvilWarriorShieldExtraPickup
{
	States
	{
		Spawn:
			EWSH I 5
			{
				if (CallACS("MiscVarCheckDECORATE",300) >= 10)
				{
					A_SpawnItemEx("DoomSpellMana3",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_FadeOut(1,1);
				}
			}
			loop
			
		Pickup:
			TNT1 A 0 { A_GiveInventory("HellWarriorShieldLevel",1); }
			Stop
	}
}

ACTOR EvilWarriorShieldBall : AetheriusProjectileZSC
{
	Tag "Shield Ball Shredder"
	Radius 6
	Height 8
	Speed 8
	Damage (finaldamagedealt) // 2
	PROJECTILE
	RenderStyle "Add"
	+RANDOMIZE
	+RIPPER
	Alpha 0.8
	Scale 0.4
	ProjectileKickBack 0
	SeeSound "hellwarrior/shotfire"
	DeathSound "hellwarrior/shothit"
	States
	{
		Spawn:
			GRBA ABCDEFGH 2 Bright 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(52,0); 
			}
			Loop
		Death:
			GRBA AIJKLMN 3 Bright
			Stop
	}
}

ACTOR EvilWarriorShieldBallCrisis : EvilWarriorShieldBall
{
	ProjectileKickBack 0
	Damage (finaldamagedealt * CrisisMultiplier) // 2
	States
	{
		Spawn:
			GRBA ABCDEFGH 2 Bright 
			{
				finaldamagedealt = A_GetPlayerAttackDamage(52,0);
				A_GenerateCrisisParticle;
			}
			Loop
		Death:
			GRBA AIJKLMN 3 Bright
			Stop
	}
}

// BUBBLES :V
ACTOR HubbleBubbleSmall : AetheriusProjectileZSC
{
	Tag "Hubble Bubble"
	var int user_ripperinterval; var int user_maxripperinterval; var int user_halfmaxripperinterval;
	var int user_bubbletimer; var int user_maxbubbletimer;
	var int user_transpulsetype;
	var int user_sizepulsetype;
	var int user_damageradius;
	var int user_velx; var int user_vely; var int user_velz;

	Radius 6 // 573 wide
	Height 6 // 569 tall
	Scale 0.05
	Speed 2
	Damage (0)
	Projectile
	+ROLLSPRITE
	+ROLLCENTER

	+BLOODLESSIMPACT
	+RIPPER
	+FOILINVUL
	+NOEXPLODEFLOOR
	+PIERCEARMOR
	+PAINLESS
	+FORCERADIUSDMG
	+NODAMAGETHRUST
	+DONTREFLECT
	+BOUNCEONWALLS
	+BOUNCEONFLOORS
	+BOUNCEONCEILINGS
	+BOUNCEONACTORS
	+NOBOUNCESOUND
	+SPECTRAL
	+THRUSPECIES +MTHRUSPECIES

	//+NOINTERACTION
	Species "Players"
	BounceType "Doom"
	ProjectileKickBack 0
	BounceFactor 1.0
	WallBounceFactor 1.0
	DamageType "Magic"
	RenderStyle "Add"
	Alpha 0.8
	//  SeeSound "imp/attack"
	//  DeathSound "imp/shotx"
	States
	{
		Spawn:
			HUBB A 0 NoDelay Bright
			{
				user_transpulsetype = 0;
				user_sizepulsetype = 0;
				user_maxbubbletimer = random(270,315);
				user_maxripperinterval = random(16,24);
				user_maxripperinterval -= (PlayerSOR/32); // Sorcery
				user_maxripperinterval -= (PlayerTHE/64); // Therapeusis
				if (user_maxripperinterval < 4) { user_maxripperinterval = 4; }
				user_halfmaxripperinterval = user_maxripperinterval / 2;
				Thing_ChangeTID(0,5001);
			}
		Idle:
			HUBB A 1 Bright
			{
				A_ScaleVelocity(1.0005);
				if (scaleX <= 0.0475 && scaleY <= 0.0475) { user_sizepulsetype = 1; } // Set to Expand
				if (scaleX >= 0.0525 && scaleY >= 0.0525) { user_sizepulsetype = 0; } // Set to Shrink
				if (user_sizepulsetype == 0) { A_SetScale(scaleX-0.000125,scaleY-0.000125); } // Shrinking
				if (user_sizepulsetype == 1) { A_SetScale(scaleX+0.000125,scaleY+0.000125); } // Expanding
	
				if (alpha <= 0.64) { user_transpulsetype = 1; } // Set to Fade In
				if (alpha >= 0.96) { user_transpulsetype = 0; } // Set to Fade Out
				if (user_transpulsetype == 0) { A_FadeOut(0.025); } // Fading Out
				if (user_transpulsetype == 1) { A_FadeIn(0.025); } // Fading In
	
				user_damageradius = 32;
				A_SetRoll(roll+4,SPF_INTERPOLATE,AAPTR_DEFAULT);
				user_ripperinterval += 1;
				if (user_ripperinterval < user_maxripperinterval)
				{
					A_ChangeFlag("PAINLESS",1);
					A_ChangeFlag("FORCEPAIN",0);
				}
				if (user_ripperinterval == user_halfmaxripperinterval)
				{
					if (random(1,4) == 1) 
					{
						finaldamagedealt = A_GetPlayerAttackDamage(46,0);
						A_Explode((finaldamagedealt),user_damageradius,0,0,user_damageradius); 
						A_ChangeFlag("PAINLESS",0); 
						A_ChangeFlag("FORCEPAIN",1);
					}
				}
				if (user_ripperinterval >= user_maxripperinterval)
				{
					finaldamagedealt = A_GetPlayerAttackDamage(46,0);
					A_Explode((finaldamagedealt),user_damageradius,0,0,user_damageradius);
					A_ChangeFlag("PAINLESS",0);
					A_ChangeFlag("FORCEPAIN",1);
	
					user_ripperinterval = 0;
					user_maxripperinterval = random(16,24);
					user_maxripperinterval -= (PlayerSOR/32); // Sorcery
					user_maxripperinterval -= (PlayerTHE/64); // Therapeusis
					if (user_maxripperinterval < 4) { user_maxripperinterval = 4; }
					user_halfmaxripperinterval = user_maxripperinterval / 2;
				}
				user_bubbletimer += 1;
				if (user_bubbletimer >= user_maxbubbletimer) { return state("Death"); }
				return state("");
			}
			Loop

		Pop:
		Death:
			TNT1 A 0 Bright
			{
				user_damageradius = 128;
				A_ChangeFlag("PAINLESS",0);
				A_ChangeFlag("FORCEPAIN",1);
				A_StartSound("HubbleBubblePop");
				finaldamagedealt = A_GetPlayerAttackDamage(46,0);
				A_Explode((finaldamagedealt*4),user_damageradius,0,0,user_damageradius); 
				if (random(1,2) == 1) { return state("Death1"); } else { return state("Death2"); }
				return state("");
			}
		Death1:
			HUBB BCDE 1 Bright
			{
				A_ScaleVelocity(0.0);
				A_SetScale(scaleX*1.250,scaleY*1.250);
			}
			Stop
		Death2:
			HUBB FGHIJ 1 Bright
			{
				A_ScaleVelocity(0.0);
				A_SetScale(scaleX*1.125,scaleY*1.125);
			}
			Stop
	}
}

ACTOR HubbleBubbleLarge : HubbleBubbleSmall
{
	Tag "Large Hubble Bubble"
	Radius 15 // 573 wide
	Height 15 // 569 tall
	Scale 0.10
	Speed 1.334

	States
	{
		Spawn:
			HUBB A 0 NoDelay Bright
			{
				user_transpulsetype = 0;
				user_sizepulsetype = 0;
				user_maxbubbletimer = random(405,467);
				user_maxripperinterval = random(16,24);
				user_maxripperinterval -= (PlayerSOR/32); // Sorcery
				user_maxripperinterval -= (PlayerTHE/64); // Therapeusis
				if (user_maxripperinterval < 4) { user_maxripperinterval = 4; }
				user_halfmaxripperinterval = user_maxripperinterval / 2;
				Thing_ChangeTID(0,5001);
			}
		Idle:
			HUBB A 1 Bright
			{
				A_ScaleVelocity(1.0002);
	
				if (scaleX <= 0.095 && scaleY <= 0.095) { user_sizepulsetype = 1; } // Set to Expand
				if (scaleX >= 0.105 && scaleY >= 0.105) { user_sizepulsetype = 0; } // Set to Shrink
				if (user_sizepulsetype == 0) { A_SetScale(scaleX-0.00025,scaleY-0.00025); } // Shrinking
				if (user_sizepulsetype == 1) { A_SetScale(scaleX+0.00025,scaleY+0.00025); } // Expanding
	
				if (alpha <= 0.64) { user_transpulsetype = 1; } // Set to Fade In
				if (alpha >= 0.96) { user_transpulsetype = 0; } // Set to Fade Out
				if (user_transpulsetype == 0) { A_FadeOut(0.025); } // Fading Out
				if (user_transpulsetype == 1) { A_FadeIn(0.025); } // Fading In
	
				user_damageradius = 64;
				A_SetRoll(roll+4,SPF_INTERPOLATE,AAPTR_DEFAULT);
				user_ripperinterval += 1;
				if (user_ripperinterval < user_maxripperinterval)
				{
					A_ChangeFlag("PAINLESS",1);
					A_ChangeFlag("FORCEPAIN",0);
				}
				if (user_ripperinterval == user_halfmaxripperinterval)
				{
					if (random(1,8) <= 3) 
					{
						finaldamagedealt = A_GetPlayerAttackDamage(47,0);
						A_Explode((finaldamagedealt),user_damageradius,0,0,user_damageradius); 
						A_ChangeFlag("PAINLESS",0); 
						A_ChangeFlag("FORCEPAIN",1);
					}
				}
				if (user_ripperinterval >= user_maxripperinterval)
				{
					finaldamagedealt = A_GetPlayerAttackDamage(47,0);
					A_Explode((finaldamagedealt),user_damageradius,0,0,user_damageradius); 
					A_ChangeFlag("PAINLESS",0);
					A_ChangeFlag("FORCEPAIN",1);
					user_ripperinterval = 0;
					user_maxripperinterval = random(16,24);
					user_maxripperinterval -= (PlayerSOR/32); // Sorcery
					user_maxripperinterval -= (PlayerTHE/64); // Therapeusis
					if (user_maxripperinterval < 4) { user_maxripperinterval = 4; }
					user_halfmaxripperinterval = user_maxripperinterval / 2;
				}
				user_bubbletimer += 1;
				if (user_bubbletimer >= user_maxbubbletimer) { return state("Death"); }
				return state("");
			}
			Loop

		Pop:
		Death:
			TNT1 A 0 Bright
			{
				user_damageradius = 256;
				A_ChangeFlag("PAINLESS",0);
				A_ChangeFlag("FORCEPAIN",1);
				A_StartSound("HubbleBubblePop");
				finaldamagedealt = A_GetPlayerAttackDamage(47,0);
				A_Explode((finaldamagedealt*4),user_damageradius,0,0,user_damageradius); 
				if (random(1,2) == 1) { return state("Death1"); } else { return state("Death2"); }
				return state("");
			}
		Death1:
			HUBB BCDE 1 Bright
			{
				A_ScaleVelocity(0.0);
				A_SetScale(scaleX*1.125,scaleY*1.125);
			}
			Stop
		Death2:
			HUBB FGHIJ 1 Bright
			{
				A_ScaleVelocity(0.0);
				A_SetScale(scaleX*1.125,scaleY*1.125);
			}
			Stop
	}
}

/*
actor BoomSource : AetheriusProjectileZSC
{
	Tag "Boom"
	Height 1
	Radius 1
	Scale 0.01
	Speed 0
	Damage (0)
	Projectile
	+BLOODLESSIMPACT
	+RIPPER
	+FOILINVUL
	+NOEXPLODEFLOOR
	+PIERCEARMOR
	+PAINLESS
	+FORCERADIUSDMG
	+NODAMAGETHRUST
	+DONTREFLECT
	+SPECTRAL
	+THRUSPECIES +MTHRUSPECIES

	Species "Players"
	RenderStyle "None"
	Alpha 0.0
	states
	{
		Spawn:
			TNT1 A 0
			{
				A_SetAngle(frandom(0.0,359.9));
			}
		Death:
			TNT1 A 0
			stop
	}
}
*/

actor PoisonNeedleAmmo : Ammo
{
	Scale 0.2
	ConversationID 415 // 345+ are unused by Strife, this is for use in DIALOUxx/SCRIPTxx references
	Inventory.PickupMessage "Picked Up an \cjExtra Poison Needle\c- \cx[Slot 1 - Alt-Fire Throwing-Weapon]\c-"
	Inventory.Amount 1
	Inventory.MaxAmount 2
	Inventory.Icon "PSNPB0"
	Ammo.BackpackAmount 2
	Ammo.BackpackMaxAmount 4
	+DONTGIB
	states
	{
		Spawn:
			PSNP A -1 NoDelay
			{
				if (CountInv("PoisonNeedle",AAPTR_PLAYER1) <= 0) 
				{
					A_SpawnItemEx("PoisonNeedle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					Thing_Remove(0);
				}
				if (CallACS("CheckCharacterClass") != 2) { Thing_Remove(0); }
			}
			stop
	}
}

// Thrown Poison Needle [base code]
actor PoisonNeedleProj : AetheriusProjectileZSC
{
	Tag "Poison Needle"
	+SKYEXPLODE
	+DONTREFLECT
	+BLOODSPLATTER
	+FORCEXYBILLBOARD	
	+THRUSPECIES
	species "Players"
	Radius 5 // 11
	Height 4 // 8
	Scale 0.8
	Speed 60
	Damage ((finaldamagedealt))
	DamageType "PoisonNeedle"
	Projectile
	SeeSound "subweapons/daggerthrow"
	states
	{
		Spawn:
			TPSN A 0 NoDelay
			{
				if (CountInv("AetheriusPowerStrength",AAPTR_PLAYER1)) { A_ScaleVelocity(2.5); }
				finaldamagedealt = A_GetPlayerAttackDamage(59,0);
				user_randompain = 44;
				user_randompain += (MartialArtsMastery * 4);
				user_randompain += (MartialArtsMasteryEX * (4 * 5 / 2));
				user_randompain += (BerserkerFit * random(3,5));
				user_randompain += (BerserkerFitEX * (random(3,5) * 5 / 2));
				user_randompain *= 2;
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }
			}
		Idle:
			TPSN AAAAAAAAA 2 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(59,0); 
			}
			TPSN A 0 A_ChangeFlag ("NOGRAVITY",0)
			goto Falling
		Falling:
			TPSN A 2 
			{ 
				finaldamagedealt = A_GetPlayerAttackDamage(59,0); 
			}
			loop

		Death:
			TNT1 A 0 A_StartSound("subweapons/miss")
			goto Final
		Crash:
			TNT1 A 0 A_StartSound("subweapons/miss")
			goto Final
		XDeath:
			TNT1 A 0 A_StartSound("subweapons/hit")
			goto Final
		
		Final:
			TNT1 A 0
			TNT1 A 0 A_ChangeFlag ("NOGRAVITY",1)
			TNT1 A 0 
			{
				if (dvds_florathrownneedlemode == 0) { A_SpawnItemEx("PoisonNeedleAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid); }
				else { A_GiveInventory("PoisonNeedleAmmo",1, AAPTR_PLAYER1); }
			}
			stop
	}
}

actor PoisonNeedleProjExtra : PoisonNeedleProj
{
	states
	{
		Death:
		Crash:
		XDeath:
			TNT1 A 0
			TNT1 A 0 A_ChangeFlag ("NOGRAVITY",1)
			TNT1 A 0 A_StartSound("subweapons/miss",7)
			stop
	}
}

actor PoisonNeedlePuff : AetheriusPuffZSC
{
	Tag "Poison Needle"
	Species "Players"
	+NOBLOCKMAP
	+NOGRAVITY
	+ALLOWPARTICLES
	+RANDOMIZE
	+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
	+THRUSPECIES +MTHRUSPECIES
	RenderStyle "Translucent"
	Alpha 0.5
	VSpeed 1
	Mass 5
	damagetype "PoisonNeedle"
	SeeSound "null" // "FistHit"
	AttackSound "null"

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 44;
				user_randompain += (MartialArtsMastery * 4);
				user_randompain += (MartialArtsMasteryEX * (4 * 5 / 2));
				user_randompain += (BerserkerFit * random(3,5));
				user_randompain += (BerserkerFitEX * (random(3,5) * 5 / 2));
				user_randompain *= 2;
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_StartSound("subweapons/hit",7);
			}
		SpawnSparks:
			PUFF ABCD 2
			Stop
		Melee:
			TNT1 A 0
			{
				user_randompain = 44;
				user_randompain += (MartialArtsMastery * 4);
				user_randompain += (MartialArtsMasteryEX * (4 * 5 / 2));
				user_randompain += (BerserkerFit * random(3,5));
				user_randompain += (BerserkerFitEX * (random(3,5) * 5 / 2));
				user_randompain *= 2;
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_StartSound("subweapons/hit",7);
			}
		MeleeSparks:
			PUFF ABCD 2
			Stop
		Crash:
			TNT1 A 0
			{
				user_randompain = 44;
				user_randompain += (MartialArtsMastery * 4);
				user_randompain += (MartialArtsMasteryEX * (4 * 5 / 2));
				user_randompain += (BerserkerFit * random(3,5));
				user_randompain += (BerserkerFitEX * (random(3,5) * 5 / 2));
				user_randompain *= 2;
				if (random(1,100) <= user_randompain) { A_ChangeFlag("FORCEPAIN", TRUE); }

				A_StartSound("subweapons/miss",7);
			}
		CrashSparks:
			PUFF ABCD 2
			Stop
	}
}

ACTOR UnmakerLaser : SingleDamageFastRipper //AetheriusFastProjectileZSC
{
	Tag "Unmaker Laser"
	var float user_basedist;
	var float user_dist;
	var float user_basespread;
	var int user_times;
	Radius 2
	Height 4
	Speed 200
	Damage (finaldamagedealt / (1 + timesrippedoverall)) // (10*random(1,8))
	DamageType "Magic"
	ProjectileKickBack 16
	RenderStyle "Add"
	Alpha 1
	SeeSound "NULL"
	DeathSound "NULL"
	Obituary "%o was unmade by %k."
	PROJECTILE
	+RANDOMIZE
	+RIPPER
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				finaldamagedealt = A_GetPlayerAttackDamage(71,0);
			}
		Idle:
			TNT1 A 1
			{
				if (timesrippedoverall >= (random(0,1) + (CountInv("UnmakerUpgrades",AAPTR_PLAYER1)))) 
				{
					A_ChangeFlag("RIPPER",false);
				} 
				else 
				{ 
					A_ChangeFlag("RIPPER",true);
				}

				user_basedist = 3.0;
				user_basespread = 2.25;
				user_times = 0;
				for (user_dist = user_basedist; user_dist < 38.0; user_dist += user_basespread)
				{
					A_SpawnItemEx("UnmakerLaserTrail", (user_dist*velx)/-35.0,  -(user_dist*vely)/-35.0,  2+(user_dist*velz)/-35.0,  0,0,0, 0, SXF_ABSOLUTEANGLE);
				}
			}
			Loop
		Death:
			LPUF AAABBB 1 BRIGHT A_FadeOut(0.0334)
			Loop
	}
}

ACTOR UnmakerLaserCrisis : UnmakerLaser
{
	Tag "\cxUnmaker Laser\c-"
	Damage ((finaldamagedealt / (1 + timesrippedoverall)) * CrisisMultiplier) // (10*random(1,8))
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				finaldamagedealt = A_GetPlayerAttackDamage(71,0);
			}
		Idle:
			TNT1 A 1
			{
				if (timesrippedoverall >= (random(0,2) + (CountInv("UnmakerUpgrades",AAPTR_PLAYER1)))) 
				{
					A_ChangeFlag("RIPPER",false); 
				} 
				else 
				{ 
					A_ChangeFlag("RIPPER",true); 
				}

				user_basedist = 3.0;
				user_basespread = 2.25;
				user_times = 0;
				for (user_dist = user_basedist; user_dist < 38.0; user_dist += user_basespread)
				{
					user_times++;
					if (user_times >= 9)
					{
						A_SpawnItemEx("UnmakerLaserTrailCrisis", (user_dist*velx)/-35.0,  -(user_dist*vely)/-35.0,  2+(user_dist*velz)/-35.0,  0,0,0, 0, SXF_ABSOLUTEANGLE);
						user_times = 0;
					}
					else
					{
						A_SpawnItemEx("UnmakerLaserTrail", (user_dist*velx)/-35.0,  -(user_dist*vely)/-35.0,  2+(user_dist*velz)/-35.0,  0,0,0, 0, SXF_ABSOLUTEANGLE);
					}
				}
			}
			Loop
		Death:
			LPUF AAABBB 1 BRIGHT A_FadeOut(0.0334)
			Loop
	}
}

ACTOR UnmakerLaserTrail : AetheriusFastProjectileZSC
{
	Radius 2
	Height 4
	Scale 0.65
	Alpha 1
	Speed 0
	Damage 0
	RenderStyle "Add"
	SeeSound "NULL"
	DeathSound "NULL"
	PROJECTILE
	+RANDOMIZE
	+NOINTERACTION
	
	States
	{
		Spawn:
			LPUF CCCCC 1 BRIGHT
			Stop
		Death:
			LPUF ABC 2 BRIGHT
			Stop
	}
}

ACTOR UnmakerLaserTrailCrisis : AetheriusFastProjectileZSC
{
	Radius 2
	Height 4
	Scale 0.65
	Alpha 1
	Speed 0
	Damage 0
	RenderStyle "Add"
	SeeSound "NULL"
	DeathSound "NULL"
	PROJECTILE
	+RANDOMIZE
	+NOINTERACTION
	
	States
	{
		Spawn:
			LPUF CCCCC 1 BRIGHT
			{
				user_crisistimer += 1;
				if (dvds_gfxeffectlevel == 0)
				{
					if (user_crisistimer == 1) 
					{
						A_GenerateCrisisParticle; 
						//user_crisistimer = 0;
					}
				}
				else
				{
					if (user_crisistimer == 2) 
					{
						A_GenerateCrisisParticle; 
						user_crisistimer = 0;
					}
				}
			}
			Stop
		Death:
			LPUF ABC 2 BRIGHT
			Stop
	}
}

/* --- UNMAKER UPGRADES ----------------------------------------------------- */

ACTOR UnmakerUpgrades : Inventory
{
	Game Doom
	+UNDROPPABLE
	Inventory.MaxAmount 3
}

ACTOR UnmakerDVDSUpgrade1 : CustomInventory 1042
{
	// Orange Artifact (First Upgrade)
	//$Color 19
	//$NotAngled
	//$Category "Doom 64 Retribution"
	Game Doom
	Scale 0.5
	SpawnID 162
	Inventory.Amount 1
	Inventory.MaxAmount 1
	Inventory.InterHubAmount 1
	Inventory.Icon "ART1A0"
	Inventory.PickupMessage "Whatever it is, it doesn't belong in this world..."
	Inventory.PickupSound "misc/unmakart1"
	+DONTGIB
	+COUNTITEM
	-INTERHUBSTRIP
	
	States
	{
		Spawn:
			ART1 ABCDEDCB 5 BRIGHT
			{
				if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 1) 
				{ 
					A_SpawnItemEx("UnmakerDVDSUpgrade2");
					Thing_Remove(0); 
				}
			}
			Loop
		Pickup:
			TNT1 A 0
			{
				if (CountInv("UnmakerDVDS",AAPTR_PLAYER1) > 0) { return state("Success"); }
				return state("");
			}
			Fail
		Success:
			TNT1 A 0 A_GiveInventory("UnmakerUpgrades", 1)
			Stop
		AlreadyTaken:
			TNT1 A 0
			Fail
	}
}

ACTOR UnmakerDVDSUpgrade2 : CustomInventory 1043
{
	// Purple Artifact (Second Upgrade)
	//$Color 5
	//$NotAngled
	//$Category "Doom 64 Retribution"
	Game Doom
	Scale 0.5
	SpawnID 163
	Inventory.Amount 1
	Inventory.MaxAmount 1
	Inventory.InterHubAmount 1
	Inventory.Icon "ART2A0"
	Inventory.PickupMessage "It must do something..."
	Inventory.PickupSound "misc/unmakart1"
	+DONTGIB
	+COUNTITEM
	-INTERHUBSTRIP
	
	States
	{
		Spawn:
			ART2 ABCDEDCB 5 BRIGHT
			{
				if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 2) 
				{ 
					A_SpawnItemEx("UnmakerDVDSUpgrade3");
					Thing_Remove(0); 
				}
			}
			Loop
		Pickup:
			TNT1 A 0
			{
				if (CountInv("UnmakerDVDS",AAPTR_PLAYER1) > 0) { return state("Success"); } 
				return state("");
			}
			Fail
		Success:
			TNT1 A 0 A_GiveInventory("UnmakerUpgrades", 1)
			Stop
		AlreadyTaken:
			TNT1 A 0
			Fail
	}
}

ACTOR UnmakerDVDSUpgrade3 : CustomInventory 1044
{
	// Cyan Artifact (Third Upgrade)
	//$Color 3
	//$NotAngled
	//$Category "Doom 64 Retribution"
	Game Doom
	Scale 0.5
	SpawnID 164
	Inventory.Amount 1
	Inventory.MaxAmount 1
	Inventory.InterHubAmount 1
	Inventory.Icon "ART3A0"
	Inventory.PickupMessage "You have a feeling that it wasn't to be touched..."
	Inventory.PickupSound "misc/unmakart1"
	+DONTGIB
	+COUNTITEM
	-INTERHUBSTRIP
	
	States
	{
		Spawn:
			ART3 ABCDEDCB 5 BRIGHT
			{
				if (CountInv("UnmakerUpgrades",AAPTR_PLAYER1) >= 3) { Thing_Remove(0); }
			}
			Loop
		Pickup:
			TNT1 A 0
			{
				if (CountInv("UnmakerDVDS",AAPTR_PLAYER1) > 0) { return state("Success"); } 
				return state("");
			}
			Fail
		Success:
			TNT1 A 0 A_GiveInventory("UnmakerUpgrades", 1)
			Stop
		AlreadyTaken:
			TNT1 A 0
			Fail
	}
}

ACTOR SigilPickup : AetheriusCustomInventory 1045
{
	Scale 0.5
	Tag "$TAG_SIGIL" // "SIGIL"
	Inventory.Icon "I_SGL1"
	Inventory.PickupMessage "You've acquired a piece of the \czSigil of The One God\c- \cx[Slot 8]\c-!"
	Inventory.PickupSound "weapons/sigilcharge"
	+DONTGIB
	+FLOORCLIP
	+FLOATBOB
	
	States
	{
		Spawn:
			SIGL B 0 NoDelay
			SIGL B 1
			{
				if (CallACS("MiscVarCheckDECORATE",25038) == 5) { Thing_Remove(0); }
				else if (CallACS("MiscVarCheckDECORATE",25038) == 4) { return state("Piece5"); }
				else if (CallACS("MiscVarCheckDECORATE",25038) == 3) { return state("Piece4"); }
				else if (CallACS("MiscVarCheckDECORATE",25038) == 2) { return state("Piece3"); }
				else if (CallACS("MiscVarCheckDECORATE",25038) == 1) { return state("Piece2"); }
				else { return state("Piece1"); }
				return state("");
			}
			loop
		Piece1:
			SGLP AAAA 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 0) { return state("Spawn"); }
				return state("");
			}
			SGPG AAAA 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 0) { return state("Spawn"); }
				return state("");
			}
			goto Spawn
		Piece2:
			SGLP BBBB 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 1) { return state("Spawn"); }
				return state("");
			}
			SGPG BBBB 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 1) { return state("Spawn"); }
				return state("");
			}
			goto Spawn
		Piece3:
			SGLP DDDD 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 2) { return state("Spawn"); }
				return state("");
			}
			SGPG DDDD 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 2) { return state("Spawn"); }
				return state("");
			}
			goto Spawn
		Piece4:
			SGLP CCCC 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 3) { return state("Spawn"); }
				return state("");
			}
			SGPG CCCC 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 3) { return state("Spawn"); }
				return state("");
			}
			goto Spawn
		Piece5:
			SGLP EEEE 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 4) { return state("Spawn"); }
				return state("");
			}
			SGPG EEEE 1 bright
			{
				A_SetTics(random(2,3));
				if (CallACS("MiscVarCheckDECORATE",25038) != 4) { return state("Spawn"); }
				return state("");
			}
			goto Spawn
		Pickup:
			TNT1 A 0
			{
				//A_LogInt(CallACS("MiscVarCheckDECORATE",25038));
				if (CallACS("MiscVarCheckDECORATE",25038) == 0)
				{ 
					A_SetInventory("Sigil1", 1, AAPTR_PLAYER1);
					return state("Success");
				}
				if (CallACS("MiscVarCheckDECORATE",25038) == 1)
				{ 
					A_SetInventory("Sigil2", 1, AAPTR_PLAYER1);
					return state("Success");
				}
				if (CallACS("MiscVarCheckDECORATE",25038) == 2)
				{ 
					A_SetInventory("Sigil3", 1, AAPTR_PLAYER1);
					return state("Success");
				}
				if (CallACS("MiscVarCheckDECORATE",25038) == 3)
				{ 
					A_SetInventory("Sigil4", 1, AAPTR_PLAYER1);
					return state("Success");
				}
				if (CallACS("MiscVarCheckDECORATE",25038) == 4)
				{ 
					A_SetInventory("Sigil5", 1, AAPTR_PLAYER1);
					return state("Success");
				}
				return state("");
			}
			Fail
		Success:
			TNT1 A 0
			{
				A_SetInventory("SigilModeType",(CallACS("MiscVarCheckDECORATE",25038)+1));
				Thing_Remove(0);
			}
			stop
	}
}

//**********
// SIGIL
//**********
// NOTE: NN stands for Non-Native because we aren't inheriting from the "Sigil" actor.

Actor NNSigil : KDIZDWeapon
{
	Weapon.Kickback 100
	Weapon.SelectionOrder 4000
	+WEAPON.CHEATNOTWEAPON
	+WEAPON.NOALERT
	Tag "The Sigil"
	States
	{
		// Overlays
		SigilHands:
			TNT1 A 0
			{
				if (CallACS("CheckCharacterClass") == 0) 
				{
					if (CountInv("SigilDrain",AAPTR_PLAYER1) > 0 ) { return state("DeggarisHandDrain"); }
					else { return state("DeggarisHand"); }
					return state(""); 
				}
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CountInv("SigilDrain",AAPTR_PLAYER1) > 0 ) { return state("IlluciaHandDrain"); }
					else { return state("IlluciaHand"); }
					return state(""); 
				}
				if (CallACS("CheckCharacterClass") == 2) 
				{
					if (CountInv("SigilDrain",AAPTR_PLAYER1) > 0 ) { return state("FloraHandDrain"); }
					else { return state("FloraHand"); }
					return state(""); 
				}
				return state("");
			}
			loop
		DeggarisHand:
			SGDH A 1 bright
			goto SigilHands
		DeggarisHandDrain:
			SGDH B 1 bright
			goto SigilHands
		IlluciaHand:
			SGIH A 1 bright
			goto SigilHands
		IlluciaHandDrain:
			SGIH B 1 bright
			goto SigilHands
		FloraHand:
			SGFH A 1 bright
			goto SigilHands
		FloraHandDrain:
			SGFH B 1 bright
			goto SigilHands

		//
		User4:
			"####" # 0
			{
				if (CountInv("SigilPieces",AAPTR_PLAYER1) > 1)
				{
					A_GiveInventory("SigilModeType",1,AAPTR_PLAYER1);
					A_StartSound("weapons/sigil",CHAN_WEAPON);

					if (CountInv("SigilModeType",AAPTR_PLAYER1) > CountInv("SigilPieces",AAPTR_PLAYER1)) { A_SetInventory("SigilModeType",1,AAPTR_PLAYER1); }
				}
				
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 1) { return state("Change1"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 2) { return state("Change2"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 3) { return state("Change3"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 4) { return state("Change4"); }
				if (CountInv("SigilModeType",AAPTR_PLAYER1) == 5) { return state("Change5"); }
				return state("");
			}
			goto Ready
		Change1:
			SGL1 A 1 
			{ 
				A_SetTics(random(6,8)*2);
			}
			goto Ready
		Change2:
			SGL2 A 1 
			{ 
				A_SetTics(random(6,8)*2);
			}
			goto Ready
		Change3:
			SGL3 A 1 
			{ 
				A_SetTics(random(6,8)*2);
			}
			goto Ready
		Change4:
			SGL4 A 1 
			{ 
				A_SetTics(random(6,8)*2);
			}
			goto Ready
		Change5:
			SGL5 A 1 
			{ 
				A_SetTics(random(6,8)*2);
			}
			goto Ready
		
		Deselect:
			"----" A 1 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Deselect5")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Deselect5")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Deselect4")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Deselect3")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Deselect2")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "Deselect1")
		Deselect1:
			SGL1 A 1 Bright 
			{ 
				A_DVDSLower(0,317,1.2);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop
		Deselect2:
			SGL2 A 1 Bright 
			{
				A_DVDSLower(0,317,1.2);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop
		Deselect3:
			SGL3 A 1 Bright 
			{ 
				A_DVDSLower(0,317,1.2);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop
		Deselect4:
			SGL4 A 1 Bright
			{ 
				A_DVDSLower(0,317,1.2);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop
		Deselect5:
			SGL5 A 1 Bright
			{ 
				A_DVDSLower(0,317,1.2);
				A_DVDSLower(0,10035,2);
				A_DVDSLower(0,10036,5);
				A_DVDSLower(18);
			}
			Loop
		//
		Select:
			"----" A 1 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Select5")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Select5")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Select4")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Select3")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Select2")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "Select1")
		Select1:
			SGL1 A 1 Bright
			{ 
				A_DVDSRaise(0,317,1.2);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop
		Select2:
			SGL2 A 1 Bright
			{ 
				A_DVDSRaise(0,317,1.2);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop
		Select3:
			SGL3 A 1 Bright
			{ 
				A_DVDSRaise(0,317,1.2);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop
		Select4:
			SGL4 A 1 Bright
			{ 
				A_DVDSRaise(0,317,1.2);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop
		Select5:
			SGL5 A 1 Bright
			{ 
				A_DVDSRaise(0,317,1.2);
				A_DVDSRaise(0,10035,2);
				A_DVDSRaise(0,10036,5);
				A_DVDSRaise(18);
			}
			Loop

		//Well, it seems using "----" A in 'Ready' makes ZDoom refuse
		//to give you the item. Interesting.
		Ready:
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Ready5")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Ready4")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Ready3")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Ready2")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "Ready1")
		Ready1:
			SGL1 A 1 Bright 
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			goto Ready
		Ready2:
			SGL2 A 1 Bright
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			goto Ready
		Ready3:
			SGL3 A 1 Bright
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			goto Ready
		Ready4:
			SGL4 A 1 Bright
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			goto Ready
		Ready5:
			SGL5 A 1 Bright
			{
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			goto Ready

		Fire:
			SGL1 A 0 A_StartSound("weapons/sigilcharge", CHAN_WEAPON)
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "Fire5")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "Fire4")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "Fire3")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "Fire2")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "Fire1")
		Fire1:
			SGL1 A 18 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(17); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 3) { A_SetTics(16); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(15); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 9) { A_SetTics(12); }
				A_Light2;
			}
			SGL1 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_GunFlash;
			}
			TNT1 A 0 A_SetInventory("SigilDrain",1,AAPTR_PLAYER1)
			SGL1 B 15 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 4) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(12); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(11); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(10); }
				A_StartSound("weapons/sigilcharge", CHAN_WEAPON);
				A_UseHealthAttack(1,4); // ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 4);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("NNSigilLightningSpot",0,0,"",0,0,0,0);
			}
			TNT1 A 0 A_SetInventory("SigilDrain",0,AAPTR_PLAYER1)
			Goto Ready
		Fire2:
			SGL2 A 18 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(17); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 3) { A_SetTics(16); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(15); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 9) { A_SetTics(12); }
				A_Light2;
			}
			SGL2 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_GunFlash;
			}
			TNT1 A 0 A_SetInventory("SigilDrain",1,AAPTR_PLAYER1)
			SGL2 B 15
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 4) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(12); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(11); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(10); }
				A_StartSound("weapons/sigilcharge", CHAN_WEAPON);
				A_UseHealthAttack(2,4); // ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 8);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("SpectralLightningH1",0,0,"",0,0,0,0);
			}
			TNT1 A 0 A_SetInventory("SigilDrain",0,AAPTR_PLAYER1)
			Goto Ready
		Fire3:
			SGL3 A 18 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(17); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 3) { A_SetTics(16); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(15); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 9) { A_SetTics(12); }
				A_Light2;
			}
			SGL3 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_GunFlash;
			}
			TNT1 A 0 A_SetInventory("SigilDrain",1,AAPTR_PLAYER1)
			TNT1 A 0 
			{
				A_StartSound("weapons/sigilcharge", CHAN_WEAPON);
				A_UseHealthAttack(3,4); // ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 12);
				A_GiveInventory("NNSigil3AttackCounter", 20);
			}
			TNT1 A 0 A_SetAngle(angle-90)
		Fire3Loop:
			TNT1 A 0 A_SetAngle(angle+9)
			TNT1 A 0
			{
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("SpectralLightningBall1",0,0,"",0,0,0,0);
			}
			TNT1 A 0 A_TakeInventory("NNSigil3AttackCounter", 1)
			TNT1 A 0 A_JumpIfInventory("NNSigil3AttackCounter", 1, "Fire3Loop")
			SGL3 B 15 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 4) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(12); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(11); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(10); }
				A_SetAngle(angle-90);
			}
			TNT1 A 0 A_SetInventory("SigilDrain",0,AAPTR_PLAYER1)
			Goto Ready
		Fire4:
			SGL4 A 18 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(17); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 3) { A_SetTics(16); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(15); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 9) { A_SetTics(12); }
				A_Light2;
			}
			SGL4 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_GunFlash;
			}
			TNT1 A 0 A_SetInventory("SigilDrain",1,AAPTR_PLAYER1)
			SGL4 B 15
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 4) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(12); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(11); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(10); }
				A_StartSound("weapons/sigilcharge", CHAN_WEAPON);
				A_UseHealthAttack(4,4); // ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 16);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("NNSigilLightningBigV",0,0,"",0,0,0,0);
			}
			TNT1 A 0 A_SetInventory("SigilDrain",0,AAPTR_PLAYER1)
			Goto Ready
		Fire5:
			SGL5 A 18 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(17); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 3) { A_SetTics(16); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(15); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 9) { A_SetTics(12); }
				A_Light2;
			}
			SGL5 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_GunFlash;
			}
			TNT1 A 0 A_SetInventory("SigilDrain",1,AAPTR_PLAYER1)
			SGL5 B 15
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 4) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(12); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(11); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(10); }
				A_StartSound("weapons/sigilcharge", CHAN_WEAPON);
				A_UseHealthAttack(5,4); // ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 20);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireProjectile("SpectralLightningBigBall1",0,0,"",0,0,0,0);
			}
			TNT1 A 0 A_SetInventory("SigilDrain",0,AAPTR_PLAYER1)
			Goto Ready

		/*
		AltFire:
			SGL1 A 0 A_StartSound("weapons/sigilcharge", CHAN_WEAPON)
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 5, "AltFire5")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 4, "AltFire4")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 3, "AltFire3")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 2, "AltFire2")
			TNT1 A 0 A_JumpIf(CountInv("SigilModeType",AAPTR_PLAYER1) == 1, "AltFire1")
			Goto Ready
		AltFire1:
			SGL1 A 18 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(17); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 3) { A_SetTics(16); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(15); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 9) { A_SetTics(12); }
				A_Light2;
			}
			SGL1 A 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_GunFlash;
			}
			TNT1 A 0 A_SetInventory("SigilDrain",1,AAPTR_PLAYER1)
			SGL1 B 15 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 2) { A_SetTics(14); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 4) { A_SetTics(13); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 6) { A_SetTics(12); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 8) { A_SetTics(11); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(10); }
				A_StartSound("weapons/sigilcharge", CHAN_WEAPON);
				A_UseHealthAttack(1,4); // ACS_NamedExecuteAlways("NNSigilDamageUser", 0, 4);
				CallACS("StartTensionCountDown");
				A_SpreadAuraFireBullets(0, 0, 1, 0, "NNSigilLightningSpotPuff", FBF_NORANDOM|FBF_NORANDOMPUFFZ, FBF_NORANDOM|FBF_NORANDOMPUFFZ, 0, "", 0, 0, 0, "");
			}
			TNT1 A 0 A_SetInventory("SigilDrain",0,AAPTR_PLAYER1)
			Goto Ready
		AltFire2:
			Goto Fire2
		AltFire3:
			Goto Fire3
		AltFire4:
			Goto Fire4
		AltFire5:
			Goto Fire5
		*/
		//

		Flash:
			SGLF A 3 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_Light2;
			}
			SGLF B 4 Bright
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(2); }
				A_Light2;
			}
			SGLF C 3 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(2); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(1); }
				A_LightInverse;
			}
			SGLF B 4 Bright 
			{
				if (CallACS("MiscVarCheckDECORATE",317) >= 5) { A_SetTics(3); }
				if (CallACS("MiscVarCheckDECORATE",317) >= 10) { A_SetTics(2); }
				A_Light1;
			}
			SGLF B 0 A_Light0
			Stop
			


		Kick:
			TNT1 A 0
			{
				if (A_UseStaminaAttack(A_GetKickStaminaUse(0),2) == 0) { return state("KickEnd"); }
				return state(""); 
			}
			TNT1 A 0
			{
				A_QMWKickInit;
				if (CallACS("CheckCharacterClass") != 2) { return state("KickStart2"); }
				return state(""); 
			}
			goto KickStart
		KickStart2: // 19/13 (Deg/Illu) Tics, 13/7 (-6) [MAMlv3], 12/6 (-1) [MAMlv5]
			LEG2 A 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
				}
			}
			LEG2 B 2
			{
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(1); 
				}
				else
				{
					if (A_WeaponCheckDoubleFireRate)
					{
						A_SetTics(0); 
					}
				}
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) { A_StartSound("fistswingheavy0",1); } else { A_StartSound("fistswingmedium0",1); }
			}
			LEG2 C 1
			{
				if (random(1,256) >= 128) 
				{
					if (CallACS("CheckCharacterClass") == 0) { A_StartSound("*grunt",CHAN_VOICE,CHANF_DEFAULT,10.0); }
					if (CallACS("CheckCharacterClass") == 1) { A_StartSound("GauntletIlluciaSwing",CHAN_VOICE,CHANF_DEFAULT,10.0); }
				}
			}
			LEG2 D 1
			{
				if (A_WeaponCheckDoubleFireRate)
				{
					A_SetTics(0); 
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate)
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate)
						{
							A_SetTics(0); 
						}
					}
				}
				A_GetKickSwingRecoil(0);
				A_SpreadAuraCustomPunch(A_GetKickDamage(0,0,false),1,CPF_NOTURN,"KickPuff",A_GetMeleeRange(4),0,0,"","","");
	
				if (A_CheckMeleeDestroyProj(1) > 0)
				{
					if (random(1,8) <= 1)
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeReflect",CountInv("ActorVar1"),88);
					}
					else
					{
						A_SetInventory("ActorVar1",28);
						if (CallACS("CheckCharacterClass") == 1) { A_SetInventory("ActorVar1",26); }

						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),24);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),56);
						A_MeleeShieldPiece("ShieldPartMeleeNoReflect",CountInv("ActorVar1"),88);
					}
				}
			}
			LEG2 F 5 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(2); 
					} 
					else 
					{ 
						A_SetTics(3); 
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(3); 
					}
				}
			}
			LEG2 E 2 
			{
				if (CallACS("CheckCharacterClass") == 1) 
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(0); 
					} 
					else 
					{
						A_SetTics(1); 
						if (A_WeaponCheckDoubleFireRate)
						{
							A_SetTics(0); 
						}
					}
				}
				else
				{
					if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
					{ 
						A_SetTics(1); 
					}
					else 
					{
						if (A_WeaponCheckDoubleFireRate)
						{
							A_SetTics(0); 
						}
					}
				}
			}
			LEG2 D 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 3) 
				{ 
					A_SetTics(0); 
				} 
				else
				{
					if (A_WeaponCheckDoubleFireRate)
					{
						A_SetTics(0); 
					}
				}
			}
			LEG2 C 1 
			{ 
				if (CallACS("CheckCharacterClass") == 1) { A_SetTics(0); } 
			}
			LEG2 B 1
			{
				if (A_WeaponCheckDoubleFireRate)
				{
					A_SetTics(0); 
				}
			}
			LEG2 A 1 
			{ 
				if (CallACS("MiscVarCheckDECORATE",10051) >= 5) { A_SetTics(0); } 
			}
			LEG2 A 0 { return state("KickEnd"); }
		KickEnd:
			TNT1 A 0
			{
				A_KickBonusOff;
				A_SetMartialArtsMastery(0);
			}
			stop
	}
}

// ******************************
// *** Sigil/Spectral Attacks ***
// ******************************

// The base class for attacks used by The Sigil of the One God, whether they are the Player's attacks or those of a Spectral Monster. 
// The base class also has a bit of explosive radius for their impact, although not all of their inheritors use said explosive damage.
ACTOR SpectralLightningBaseNew : AetheriusProjectileZSC replaces SpectralLightningBase 
{
	+SPECTRAL 
	DamageType "Sigil"
	+NOTELEPORT
	+ACTIVATEIMPACT
	+ACTIVATEPCROSS
	+STRIFEDAMAGE
	MaxStepHeight 4
	RenderStyle "Add"
	SeeSound "weapons/sigil"
	DeathSound "weapons/sigilhit"
	States
	{
		Death:
			ZAP1 B 3 bright
			{
				A_GetSigilDamage(0,0); A_GetSigilDamage(0,1);
				A_Explode((finaldamagedealt), (finaldamagedealt2), 0);
			}
			ZAP1 A 3 bright 
			{
				if (random(1,256) > 96)
				{
					A_AlertMonsters;
				}
			}
			ZAP1 BCDEFE 3 bright
			{
			}
			ZAP1 DCB 2 bright
			{
			}
			ZAP1 A 1 bright
			{
			}
			Stop
	}
}

// The Player's version of Sigil 3 shots, which have three and a half times the base damage as the versions the 3rd Spectre 
// and The Entity use, probably for balance reasons.
ACTOR SpectralLightningBall1New : SpectralLightningBaseNew replaces SpectralLightningBall1
{
	Tag "Sigil Spread Shot"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (finaldamagedealt) // 70
	Speed 30
	Radius 8
	Height 16
	Projectile
	States
	{
		Spawn:
			ZOT3 A 0 Bright NoDelay { A_GetSigilDamage(1,0); }
			ZOT3 ABCDE 4 Bright
			{
				A_GetSigilDamage(1,0);
			}
			Loop
	}
}
// The 3rd Spectre and The Entity's version of Sigil 3 shots, which have less than one third the base damage as 
// the original, probably for balance reasons.
ACTOR SpectralLightningBall2New : SpectralLightningBall1New replaces SpectralLightningBall2
{
	Tag "Spectral Spread Shot"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (finaldamagedealt) // 20
	States
	{
		Spawn:
			ZOT3 A 0 Bright NoDelay { A_GetSigilDamage(2,0); }
			ZOT3 ABCDE 4 Bright
			{
				A_GetSigilDamage(2,0);
			}
			Loop
	}
}
ACTOR SpectralLightningBall2Monster : SpectralLightningBall2New
{
	Tag "Spectral Spread Shot"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (20 * random(1,4))
	States
	{
		Spawn:
			ZOT3 ABCDE 4 Bright
			{
			}
			Loop
	}
}
ACTOR SpectralLightningBall2MonsterCrisis : SpectralLightningBall2Monster
{
	+SPECTRAL 
	DamageType "Sigil" 
	Damage ((20 * random(1,4)) * CrisisMultiplier)
	States
	{
		Spawn:
			ZOT3 ABCDE 4 Bright
			{
				A_GenerateCrisisParticle;
			}
			Loop
	}
}

// A variant of SpectralLightningBase that skips the first frame of it's death animation.
// This prevents the Explosive Damage on contact from occuring.
ACTOR SpectralLightningDeath1New : SpectralLightningBaseNew replaces SpectralLightningDeath1
{
	+SPECTRAL 
	DamageType "Sigil" 
	States
	{
		Death:
			ZAP1 A 3 bright
			{
				if (random(1,256) > 96) { A_AlertMonsters; }
			}
			ZAP1 BCDEFE 3 bright
			{
			}
			ZAP1 DCB 2 bright
			{
			}
			ZAP1 A 1 bright
			{
			}
			Stop
	}
}

// The Player's version of Sigil 4 shots, which have double the base damage as the versions the 
// 4th Spectre and The Entity use, probably for balance reasons.
ACTOR SpectralLightningBigV1New : SpectralLightningDeath1New replaces SpectralLightningBigV1
{
	Tag "Sigil Lightning Column"
	DamageType "Sigil"
	+SPECTRAL
	Speed 28
	Radius 8
	Height 16
	Damage (finaldamagedealt) // 120
	Projectile
	States
	{
		Spawn:
			ZOT2 A 0 Bright NoDelay { A_GetSigilDamage(3,0); }
			ZOT2 ABCDE 4 Bright 
			{
				A_GetSigilDamage(3,0);
				A_Tracer2;
			}
			Loop
	}
}

// The 4th Spectre and The Entity's version of Sigil 4 shots, which have half the base 
// damage as the original, probably for balance reasons.
ACTOR SpectralLightningBigV2New : SpectralLightningBigV1New
{
	Tag "Spectral Lightning Column"
	DamageType "Sigil"
	+SPECTRAL
	Damage (finaldamagedealt/2) // 60
	States
	{
		Spawn:
			ZOT2 ABCDE 4 Bright 
			{
				A_Tracer2;
			}
			Loop
	}
}
ACTOR SpectralLightningBigV2Monster : SpectralLightningBigV2New
{
	Tag "Spectral Lightning Column"
	DamageType "Sigil"
	+SPECTRAL
	Damage (60 * random(1,4))
	States
	{
		Spawn:
			ZOT2 ABCDE 4 Bright 
			{
				A_Tracer2;
			}
			Loop
	}
}
ACTOR SpectralLightningBigV2MonsterCrisis : SpectralLightningBigV2Monster
{
	DamageType "Sigil"
	+SPECTRAL
	Damage ((60 * random(1,4)) * CrisisMultiplier)
	States
	{
		Spawn:
			ZOT2 ABCDE 4 Bright 
			{
				A_GenerateCrisisParticle;
				A_Tracer2;
			}
			Loop
	}
}

// A variant of SpectralLightningBase that skips the first two frames of it's death animation.
// This skips both the alert potential and the explosive damage normally dealt on contact.
ACTOR SpectralLightningDeath2New : SpectralLightningBaseNew replaces SpectralLightningDeath2
{
	+SPECTRAL 
	DamageType "Sigil" 
	States
	{
		Death:
			ZAP1 BCDEFE 3 bright
			{
			}
			ZAP1 DCB 2 bright
			{
			}
			ZAP1 A 1 bright
			{
			}
			Stop
	}
}

// A variant of SpectralLightningBase that skips the first SIX frames of it's death animation.
ACTOR SpectralLightningDeathShortNew : SpectralLightningBaseNew replaces SpectralLightningDeathShort
{
	+SPECTRAL 
	DamageType "Sigil" 
	States
	{
		Death:
			ZAP1 FE 3 bright
			{
			}
			ZAP1 DCB 2 bright
			{
			}
			ZAP1 A 1 bright
			{
			}
			Stop
	}
}

// The giant ball of spectral energy fired by the Player's Sigil 5 weapon. It shoots three SpectralLightningH3 
// at the same time every few tics on multiple sides of it as it travels (one to its left, another to its right, 
// and another ahead of it).
ACTOR SpectralLightningBigBall1New : SpectralLightningDeath2New replaces SpectralLightningBigBall1
{
	Tag "Sigil Lightning MegaBlast"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (finaldamagedealt) // 130
	Speed 18
	Radius 15 // 20
	Height 20 // 40
	Projectile

	States
	{
		Spawn:
			ZAP7 A 0 Bright NoDelay { A_GetSigilDamage(8,0); }
			ZAP7 AB 4 Bright 
			{
				A_GetSigilDamage(8,0);
				A_SpectralBigBallLightning("SpectralLightningH3");
			}
			ZAP7 CDE 6 Bright
			{
				A_GetSigilDamage(8,0);
				A_SpectralBigBallLightning("SpectralLightningH3");
			}
			Loop
	}
}

// The Fifth Spectre and The Entity's version of the Sigil 5 attack, which is less than one fourth the strength of the
// player's version. However like it's stronger counterpart, it still shoots three SpectralLightningH3 at the same time
// every few tics on multiple sides of it as it travels (one to its left, another to its right, and another ahead of it).
ACTOR SpectralLightningBigBall2New : SpectralLightningBigBall1New replaces SpectralLightningBigBall2
{
	Tag "Spectral Lightning MegaBlast"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (30 * random(1,4))
	States
	{
		Spawn:
			ZAP7 AB 4 Bright 
			{
				A_SpectralBigBallLightning("SpectralLightningH3Monster");
			}
			ZAP7 CDE 6 Bright
			{
				A_SpectralBigBallLightning("SpectralLightningH3Monster");
			}
			Loop
	}
}
ACTOR SpectralLightningBigBall2Crisis : SpectralLightningBigBall2New
{
	+SPECTRAL 
	DamageType "Sigil" 
	Damage ((30 * random(1,4)) * CrisisMultiplier)
	States
	{
		Spawn:
			ZAP7 AB 4 Bright 
			{
				A_GenerateCrisisParticle;
				A_SpectralBigBallLightning("SpectralLightningH3MonsterCrisis");
			}
			ZAP7 CDE 6 Bright
			{
				A_SpectralBigBallLightning("SpectralLightningH3MonsterCrisis");
			}
			Loop
	}
}

// The stronger attack emitted by a SpectralLightningSpot. A weaker variant can also be emitted by the same spot. 
// This attack is related to the Player's Sigil 1 attack, the First Spectre, The Entity and also it's Sub Entities.
// Does NOT deal Area of Effect damage, since it's death animation skips the frame where the explosion happens.
ACTOR SpectralLightningV1New : SpectralLightningDeathShortNew replaces SpectralLightningV1 
{ 
	Tag "Sigil LightningFall"
	+SPECTRAL 
	DamageType "Sigil" 
	DamageType "SpectralLow"
	Damage (finaldamagedealt) // 120
	Speed 22
	Radius 8
	Height 24
	Projectile
	States
	{
		Spawn:
			ZOT1 A 0 Bright NoDelay { A_GetSigilDamage(3,0); }
			ZOT1 AB 4 Bright
			{
				A_GetSigilDamage(3,0);
			}
			ZOT1 CDE 6 Bright
			{
				A_GetSigilDamage(3,0);
			}
			Loop
	}
}
// Programmer/Spectral Monster only version
ACTOR SpectralLightningV1Monster : SpectralLightningV1New
{ 
	Tag "Spectral LightningFall"
	+SPECTRAL 
	DamageType "Sigil" 
	DamageType "SpectralLow"
	Damage (100 * random(1,4))
	Speed 22
	Radius 8
	Height 24
	Projectile
	States
	{
		Spawn:
			ZOT1 AB 4 Bright
			{
			}
			ZOT1 CDE 6 Bright
			{
			}
			Loop
		Death:
			ZAP1 FE 3
			{
			}
			ZAP1 DCB 2
			{
			}
			ZAP1 A 1
			{
			}
			Stop
	}
}
ACTOR SpectralLightningV1MonsterCrisis : SpectralLightningV1Monster
{ 
	+SPECTRAL 
	DamageType "Sigil" 
	DamageType "SpectralLow"
	Damage ((100 * random(1,4)) * CrisisMultiplier)
	States
	{
		Spawn:
			ZOT1 AB 4 Bright
			{
				A_GenerateCrisisParticle;
			}
			ZOT1 CDE 6 Bright
			{
				A_GenerateCrisisParticle;
			}
			Loop
		Death:
			ZAP1 FE 3
			{
			}
			ZAP1 DCB 2
			{
			}
			ZAP1 A 1
			{
			}
			Stop
	}
}

// The weaker attack emitted by a SpectralLightningSpot. A stronger variant can also be emitted by the same spot. 
// This attack is related to the Player's Sigil 1 attack, the First Spectre, The Entity and also it's Sub Entities.
// Does NOT deal Area of Effect damage, since it's death animation skips the frame where the explosion happens.
ACTOR SpectralLightningV2New : SpectralLightningV1New replaces SpectralLightningV2
{ 
	Tag "Sigil LightningFall"
	+SPECTRAL 
	DamageType "Sigil" 
	DamageType "SpectralLow" 
	Damage (finaldamagedealt) // 60
	States
	{
		Spawn:
			ZOT1 A 0 Bright NoDelay { A_GetSigilDamage(4,0); }
			ZOT1 AB 4 Bright
			{
				A_GetSigilDamage(4,0);
			}
			ZOT1 CDE 6 Bright
			{
				A_GetSigilDamage(4,0);
			}
			Loop
		Death:
			ZAP1 FE 3
			{
			}
			ZAP1 DCB 2
			{
			}
			ZAP1 A 1
			{
			}
			Stop
	}
}
// Programmer/Spectral Monster only version
ACTOR SpectralLightningV2Monster : SpectralLightningV2New
{ 
	Tag "Spectral LightningFall"
	+SPECTRAL 
	DamageType "Sigil" 
	DamageType "SpectralLow" 
	Damage (50 * random(1,4))
	States
	{
		Spawn:
			ZOT1 AB 4 Bright
			{
			}
			ZOT1 CDE 6 Bright
			{
			}
			Loop
		Death:
			ZAP1 FE 3
			{
			}
			ZAP1 DCB 2
			{
			}
			ZAP1 A 1
			{
			}
			Stop
	}
}
ACTOR SpectralLightningV2MonsterCrisis : SpectralLightningV2Monster
{ 
	+SPECTRAL 
	DamageType "Sigil" 
	DamageType "SpectralLow" 
	Damage ((50 * random(1,4)) * CrisisMultiplier)
	States
	{
		Spawn:
			ZOT1 AB 4 Bright
			{
				A_GenerateCrisisParticle;
			}
			ZOT1 CDE 6 Bright
			{
				A_GenerateCrisisParticle;
			}
			Loop
		Death:
			ZAP1 FE 3
			{
			}
			ZAP1 DCB 2
			{
			}
			ZAP1 A 1
			{
			}
			Stop
	}
}

// The Player's version of Sigil 2 shots, which are at least three and a half times strong than any other version. 
// Probably for balance purposes. It also leaves a "tail" like afterimage of itself behind it as it travels.
ACTOR SpectralLightningH1New : SpectralLightningBaseNew replaces SpectralLightningH1
{
	Tag "Sigil Lightning Bolt"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (finaldamagedealt) // 70
	Speed 30
	Radius 8 // 8
	Height 16 // 16
	Projectile

	States
	{
		Spawn:
			ZAP6 A 0 Bright NoDelay { A_GetSigilDamage(5,0); }
			ZAP6 A 4 Bright
			{
				A_GetSigilDamage(5,0);
			}
			ZAP6 BC 4 Bright 
			{
				A_GetSigilDamage(5,0);
				A_SpectralLightningTail;
			}
			Loop
	}
}

// A seemingly unused variant of SpectralLightningH1 that neither the Player or any Spectral Monster will use. 
// It's double the power of SpectralLightningH3 but less than one third the power of SpectralLightningH1.
ACTOR SpectralLightningH2New : SpectralLightningH1New replaces SpectralLightningH2
{
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (finaldamagedealt) // 20
	States
	{
		Spawn:
			ZAP6 A 0 Bright NoDelay { A_GetSigilDamage(6,0); }
			ZAP6 A 4 Bright
			{
				A_GetSigilDamage(6,0);
			}
			ZAP6 BC 4 Bright 
			{
				A_GetSigilDamage(6,0);
				A_SpectralLightningTail;
			}
			Loop
	}
}

// These projectiles are additionally emitted by SpectralLightningBigBall1 (Sigil 5) and SpectralLightningBigBall2 
// (the Fifth Spectre and The Entity's version) which fires them 3 at a time, one to its left, another ahead of it, 
// and one to its right, at the same time.
ACTOR SpectralLightningH3New : SpectralLightningH1New replaces SpectralLightningH3
{
	Tag "Sigil Lightning Bolt"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (finaldamagedealt) // 10
	States
	{
		Spawn:
			ZAP6 A 0 Bright NoDelay { A_GetSigilDamage(7,0); }
			ZAP6 A 4 Bright
			{
				A_GetSigilDamage(7,0);
			}
			ZAP6 BC 4 Bright 
			{
				A_GetSigilDamage(7,0);
				A_SpectralLightningTail;
			}
			Loop
	}
}
ACTOR SpectralLightningH3Monster : SpectralLightningH3New
{
	Tag "Spectral Lightning Bolt"
	+SPECTRAL 
	DamageType "Sigil" 
	Damage (10 * random(1,4))
	States
	{
		Spawn:
			ZAP6 A 4 Bright
			{
			}
			ZAP6 BC 4 Bright 
			{
				A_SpectralLightningTail;
			}
			Loop
	}
}
ACTOR SpectralLightningH3MonsterCrisis : SpectralLightningH3Monster
{
	+SPECTRAL 
	DamageType "Sigil" 
	Damage ((10 * random(1,4)) * CrisisMultiplier)
	States
	{
		Spawn:
			ZAP6 A 4 Bright
			{
				A_GenerateCrisisParticle;
			}
			ZAP6 BC 4 Bright 
			{
				A_GenerateCrisisParticle;
				A_SpectralLightningTail;
			}
			Loop
	}
}

// The spot-beacon created by the Player using Sigil 1, the first Spectre, the Entity, and their Sub Entities. 
// This beacon moves around in random directions every few tics, spawning either SpectralLightningV1 (strong) 
// or SpectralLightningV2 (weak) around it at close to ceiling level that drop straight down on whatever's unlucky 
// enough to be standing there. The spot fades out after about 8 seconds of activity.
ACTOR SpectralLightningSpotNew : SpectralLightningDeath1New replaces SpectralLightningSpot
{
	Tag "Sigil Lightning Beacon"
	+SPECTRAL 
	DamageType "Sigil" 
	Speed 18
	ReactionTime 70
	+NOBLOCKMAP
	+NOBLOCKMONST
	+NODROPOFF
	RenderStyle "Translucent"
	Alpha 0.6

	States
	{
		Spawn:
			ZAP5 A 4 Bright 
			{
				A_Countdown;
			}
			ZAP5 B 4 Bright 
			{
				A_SpectralLightning("SpectralLightningV1Monster","SpectralLightningV2Monster");
			}
			ZAP5 CD 4 Bright
			{
				A_Countdown;
			}
			Loop
	}
}
ACTOR SpectralLightningSpotCrisis : SpectralLightningSpotNew
{
	+SPECTRAL 
	DamageType "Sigil" 
	States
	{
		Spawn:
			ZAP5 A 4 Bright 
			{
				A_GenerateCrisisParticle;
				A_Countdown;
			}
			ZAP5 B 4 Bright 
			{
				A_GenerateCrisisParticle;
				A_SpectralLightning("SpectralLightningV1MonsterCrisis","SpectralLightningV2MonsterCrisis");
			}
			ZAP5 CD 4 Bright
			{
				A_GenerateCrisisParticle;
				A_Countdown;
			}
			Loop
	}
}

Actor NNSigilLightningSpotPuff : AetheriusPuffZSC
{
	DamageType "Sigil"
	VSpeed 0
	Mass 0
	+SPECTRAL
	States	//actors won't damage the spectres. Wierd.
	{
		Spawn:
			TNT1 A 0 NoDelay A_SpawnItemEx("NNSigilLightningSpot", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION)
			stop
	}
}

// Modded Sigil's version of SpectralLightningSpot
Actor NNSigilLightningSpot : SpectralLightningSpotNew
{
	Tag "Sigil Lightning Beacon"
	+SPECTRAL //This flag is needed, otherwise the SpectralLightningV1/V2
	DamageType "Sigil"
	States	//actors won't damage the spectres. Wierd.
	{
		Spawn:
			TNT1 A 0
			TNT1 A 0 A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_PLAYER_GETTARGET, AAPTR_TRACER)
			TNT1 A 0 A_CheckFlag("SHOOTABLE", 3, AAPTR_TRACER)
			TNT1 A 0 A_Warp(AAPTR_TARGET) //Try to stick to the player's feet.
			ZAP5 A 4 Bright 
			{
				A_ChangeVelocity(28,0,0, CVF_RELATIVE|CVF_REPLACE);
			}
			Goto Meander+1 // Super::Spawn+1
			ZAP5 A 4 Bright 
			{
				//A_Log("A_Warp(AAPTR_TRACER, 0,0,0, 0, WARPF_NOCHECKPOSITION|WARPF_STOP|WARPF_TOFLOOR)");
				A_Warp(AAPTR_TRACER, 0,0,0, 0, WARPF_NOCHECKPOSITION|WARPF_STOP|WARPF_TOFLOOR);
			}
			Goto Meander+1 // Super::Spawn+1
		Meander:
			ZAP5 A 4 Bright 
			{
				A_Countdown;
			}
			ZAP5 B 4 Bright 
			{
				A_SpectralLightning("SpectralLightningV1New","SpectralLightningV2New");
			}
			ZAP5 CD 4 Bright
			{
				A_Countdown;
			}
			Loop
	}
}

// Modded version of SpectralLightningBigV1New for the new Sigil
Actor NNSigilLightningBigV : SpectralLightningBigV1New
{
	Tag "Sigil Lightning Column"
	Decal "BaronScorch"
	DamageType "Sigil"
	+SPECTRAL
	Damage (finaldamagedealt) // 120
	States
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				A_GetSigilDamage(3,0);
				A_TransferPointer(AAPTR_TARGET, AAPTR_DEFAULT, AAPTR_PLAYER_GETTARGET, AAPTR_TRACER);
			}
			TNT1 A 0 A_CheckFlag("SHOOTABLE", 2, AAPTR_TRACER)
			ZOT2 A 4 Bright 
			{
				A_GetSigilDamage(3,0);
				A_ChangeVelocity(28,0,0, CVF_RELATIVE);
			}
			Goto Super::Spawn+1
			ZOT2 A 4 Bright
			Goto Super::Spawn+1
	}
}

// Tracks the number of shots emitted by the Sigil's third mode due to lack of player-centric variables in DECORATE
Actor NNSigil3AttackCounter : Inventory
{
	Inventory.MaxAmount 20
}

DamageType NNSigilUse
{
	Factor 1.0
	NoArmor
}