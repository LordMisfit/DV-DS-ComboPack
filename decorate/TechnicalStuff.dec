DamageType Fist { Factor 1.0 }
DamageType Kick { Factor 1.0 }
DamageType Gauntlets { Factor 1.0 }
DamageType Chainsaw { Factor 1.0 }
DamageType Sceptre { Factor 1.0 }
DamageType Magic { Factor 1.0 }
DamageType Fire { Factor 1.0 }
DamageType Ice { Factor 1.0 }
DamageType Thunder { Factor 1.0 }
DamageType Wind { Factor 1.0 }
DamageType Holy { Factor 1.0 }
DamageType Dark { Factor 1.0 }

actor SilentHeal : PlaceholderItem { } // 
actor Dedz : PlaceholderItem { } // 
actor WandGuard : PlaceholderItem { } // 
actor Summon : PlaceholderItem { Inventory.MaxAmount 5 } // 
actor Summon2 : PlaceholderItem { Inventory.MaxAmount 5 } // 
actor Summon3 : PlaceholderItem { Inventory.MaxAmount 5 } // 
actor Summon4 : PlaceholderItem { Inventory.MaxAmount 5 } // 
actor Summon5 : PlaceholderItem { Inventory.MaxAmount 5 } // 
actor AltItemSpellUseMode : PlaceholderItem { }

actor UsingSceptreAltFire : PlaceholderItem { }

actor FloraUsingHellcoreWeapon : PlaceholderItem { } // Checks to see if your current selected weapon is "Hellcore Class" [for HUD displays]
actor FloraHellcoreNotOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of less than 25%, give this to her inventory [for HUD displays]
actor FloraHellcore25PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 24%, give this to her inventory [for HUD displays]
actor FloraHellcore50PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 49%, give this to her inventory [for HUD displays]
actor FloraHellcore75PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 74%, give this to her inventory [for HUD displays]
actor FloraHellcore100PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 99%, give this to her inventory [for HUD displays]
actor FloraHellcore250PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 249%, give this to her inventory [for HUD displays]
actor FloraHellcore500PercentOverheated : PlaceholderItem { } // If Flora has a Hellcore Heat of over 499%, give this to her inventory [for HUD displays]
actor FloraLearnedPistols : PlaceholderItem { } // If Flora has learned pistol usage, give this inventory item to the player

actor Missed : PlaceholderItem { } // Placeholder Item given to display "Missed!" on the HUD when successfully evading an attack.

actor UsingMeleeWeapon : PlaceholderItem { } // Checks to see if your current selected weapon is "Melee Class" [for HUD displays]

actor SigilDrain : PlaceholderItem { Inventory.MaxAmount 1 } 
actor SigilModeType : PlaceholderItem { Inventory.MaxAmount 6 } 
actor SigilPieces : PlaceholderItem { Inventory.MaxAmount 5 } 

actor DrawingDiarisBow : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 1
} 

actor InGameMenu : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 1
} 

actor ArrowRandomizer : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 9999999
} 

actor PrimingSceptre : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 1
} 

actor MinigunHeat : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 100
}

actor RailgunCharge : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 100
}

actor RailgunZoom : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 2147483647
}

actor LongbowZoom : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 2147483647
}

actor ActorVarBase : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 2147483647
}

actor ActorVar1 : ActorVarBase { }
actor ActorVar2 : ActorVarBase { }
actor ActorVar3 : ActorVarBase { }
actor ActorVar4 : ActorVarBase { }
actor ActorVar5 : ActorVarBase { }
actor ActorVar6 : ActorVarBase { }
actor ActorVar7 : ActorVarBase { }
actor ActorVar8 : ActorVarBase { }
actor ActorVar9 : ActorVarBase { }
actor ActorVar10 : ActorVarBase { }
actor ActorVar11 : ActorVarBase { }
actor ActorVar12 : ActorVarBase { }
actor ActorVar13 : ActorVarBase { }
actor ActorVar14 : ActorVarBase { }
actor ActorVar15 : ActorVarBase { }
actor ActorVar16 : ActorVarBase { }
actor ActorVar17 : ActorVarBase { }
actor ActorVar18 : ActorVarBase { }
actor ActorVar19 : ActorVarBase { }
actor ActorVar20 : ActorVarBase { }

actor RLMode : PlaceHolderItem
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 100
}

actor PRMode : PlaceHolderItem
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 100
}

actor HSMode : PlaceHolderItem
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 100
}

actor PlasmaBurstLevel : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 100
}

actor MonsterDisplayDMG : PlaceholderItem { } // This works as an inventory flag to indicate a monster can display damage numbers and to prevent them from having multiple copies of the script running
actor MonsterLevelCalcs : PlaceholderItem { } // This works as an inventory flag to indicate a monster has gotten their proper level-based buffs

actor PlayingDeusVultI : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingDeusVultII : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingDoom1 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingDoom2 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingHeretic : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingHexen : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingStrife : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingDoom64 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingPSXDoom : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingCircus666 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingCircus2 : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingKDIZD : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingStrangeAeons : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingTCOTDA : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingTUTNT : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor PlayingUnloved : PlaceholderItem { } // This works as an inventory flag to indicate the game mode


actor TakeAllStamina : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor TakeAllMPMana : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor IsScriptFrozen : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor IsUnconscious : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor DisableHUD : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor EnableHUD : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
actor RemoveAllWeapons : PlaceholderItem { } // This works as an inventory flag to indicate the game mode



actor SceptreSpinFrameCount : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 } // Hacky workaround for weapon stuff for players. x.x
actor FlameCount : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 } // Hacky workaround for weapon stuff for players. x.x
actor DualFlameCount : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 } // Hacky workaround for weapon stuff for players. x.x
actor SceptreTimer : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 } // Hacky workaround for weapon stuff for players. x.x

actor AChristinaAltFireType : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }
actor CharacterClassCheck : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }

actor WeaponFlashResult : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }
actor HellcoreFireFrame : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }

actor NormFireManaCost : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }
actor AltFireManaCost : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }

actor SirenTimerCurrent : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }
actor SirenTimerMaximum : PlaceHolderItem { +KEEPDEPLETED Inventory.MaxAmount 2147483647 }

actor UnmakerAmmoType : PlaceHolderItem { Inventory.MaxAmount 1 }
actor WeapCrisis : PlaceHolderItem { Inventory.MaxAmount 1 }
actor SizePulseType : PlaceHolderItem { Inventory.MaxAmount 1 }
actor TransPulseType : PlaceHolderItem { Inventory.MaxAmount 1 }

actor HellWarriorShieldLevel : PlaceHolderItem { Inventory.MaxAmount 10 }

actor OnCeiling : PlaceHolderItem { Inventory.MaxAmount 1 }
actor ShieldingBuff : PlaceHolderItem { Inventory.MaxAmount 1 }

actor CheatCrit : PlaceHolderItem { Inventory.MaxAmount 1 } // Makes the game always allow crits [cheating]
actor CheatCritUltimate : PlaceHolderItem { Inventory.MaxAmount 1 } // Makes the game always allow crits [cheating]
actor DealCriticalHit : PlaceHolderItem { Inventory.MaxAmount 1 } // Indicates the the holder will deal a critical hit [for damage-indicator script checks]
actor ResistCriticalHit : PlaceHolderItem { Inventory.MaxAmount 1 } // Indicates the the holder will resist a critical hit [for damage-indicator script checks]
actor TookCriticalHit : PlaceHolderItem { Inventory.MaxAmount 1 } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
actor TookWeaknessHit : PlaceHolderItem { Inventory.MaxAmount 3 } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
actor TookResistanceHit : PlaceHolderItem { Inventory.MaxAmount 3 } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
actor TookNoDamage : PlaceHolderItem { Inventory.MaxAmount 1 } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
actor TookNoDamageInvuln : PlaceHolderItem { Inventory.MaxAmount 1 } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]
actor AbsorbedDamage : PlaceHolderItem { Inventory.MaxAmount 1 } // Indicates the the holder was dealt a critical hit [for damage-indicator script checks]

actor SauronGauntletsItem : PlaceholderItem { } // For SBARINFO so the HUD shows the extra icon for having the Gauntlets regardless of which type/character.

actor IsHaSatanNow : PlaceholderItem { ConversationID 412 } // This works as an inventory flag to indicate the character is currently the 'HaSatan' of Hell [greatly reduces Hellcore Consumption]

actor BFG2704Array : PlaceholderItem 
{ 
	+INVENTORY.KEEPDEPLETED
	Inventory.MaxAmount 100 
}

Actor DSNoArmorClass : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSGreenArmorClass : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1
	DamageFactor "normal", 0.975 // -2.5% Damage to HP
	DamageFactor "Bullet", 0.85	// -15% Bullet Damage
	DamageFactor "Fire", 0.98		// -2% Fire Damage
	DamageFactor "Magma", 0.98		// -2% Fire Damage
	DamageFactor "Explosive", 0.99		// -1% Explosive Damage

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSBlueArmorClass : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1
	DamageFactor "normal", 0.95 // -5% Damage to HP
	DamageFactor "Bullet", 0.75	// -25% Bullet Damage
	DamageFactor "Fire", 0.90		// -10% Fire Damage
	DamageFactor "Magma", 0.90		// -10% Fire Damage
	DamageFactor "Explosive", 0.96		// -4% Explosive Damage

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSStoneArmorClass1 : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1
	DamageFactor "normal", 0.875 // -12.5% Damage to HP
	DamageFactor "Bullet", 0.60	// -40% Bullet Damage
	DamageFactor "Fire", 0.725		// -27.5% Fire Damage
	DamageFactor "Magma", 0.725		// -27.5% Fire Damage
	DamageFactor "Ice", 1.125		// +12.5% Ice Damage
	DamageFactor "Explosive", 0.85		// -15% Explosive Damage

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSDiamondArmorClass1 : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1
	DamageFactor "normal", 0.625 // -37.5% Damage to HP
	DamageFactor "Bullet", 0.525	// -47.5% Bullet Damage
	DamageFactor "Fire", 0.625		// -37.5% Fire Damage
	DamageFactor "Magma", 0.625		// -37.5% Fire Damage
	DamageFactor "Ice", 0.925		// -7.5% Ice Damage
	DamageFactor "Holy", 0.825		// -17.5% Holy Damage
	DamageFactor "Explosive", 0.925		// -7.5% Explosive Damage

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSStoneArmorClass2 : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1
	DamageFactor "normal", 0.75	// -25% Overall Damage
	DamageFactor "Bullet", 0.60	// -40% Bullet Damage
	DamageFactor "Fire", 0.725		// -27.5% Fire Damage
	DamageFactor "Magma", 0.725		// -37.5% Fire Damage
	DamageFactor "Ice", 1.125		// +12.5% Ice Damage
	DamageFactor "Explosive", 0.70		// -30% Explosive Damage

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSDiamondArmorClass2 : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1
	DamageFactor "normal", 0.25 // -75% Damage to HP
	DamageFactor "Bullet", 0.525	// -47.5% Bullet Damage
	DamageFactor "Fire", 0.625		// -37.5% Fire Damage
	DamageFactor "Magma", 0.625		// -37.5% Fire Damage
	DamageFactor "Ice", 0.925		// -7.5% Ice Damage
	DamageFactor "Holy", 0.825		// -17.5% Holy Damage
	DamageFactor "Explosive", 0.65		// -35% Explosive Damage

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSSpiritualExoskin1 : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSSpiritualExoskin2 : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

Actor DSSpiritualExoskin3 : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 1

	states
	{
		Use:
			TNT1 A 0
			Stop
	}
}

actor SwingTimer : AetheriusCustomInventory
{
	Inventory.Amount 1
	Inventory.MaxAmount 24
}

actor FullHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "full" or greater health range]
actor NormalHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "normal" health range]
actor DecentHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "normal" health range]
actor LowHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "low" health range]
actor CriticalHealth : PlaceholderItem { } // For Both HUD and Hellcore-Weapon Checks [when in "critical" health range]
actor PlayerIsDead : PlaceholderItem { } // For HUD Checks [when player is dead]
actor PlayerDeathFadeOut : PlaceholderItem { } // For Controlling death-fadeout screens

actor TensionAuraFrameBase : CrossbowFX4Base
{
	-SOLID
	+NOINTERACTION
	+NOTIMEFREEZE
	RenderStyle Add
	Alpha 0.25
	Radius 4
	Height 4
	XScale 0.667
	YScale 1
	states
	{
		Spawn:
			TNT1 A 0 NoDelay
			TNT1 A 0 A_JumpIf(TensionLevel == 1,"SetScale5")
			TNT1 A 0 A_JumpIf(TensionLevel == 2,"SetScale20")
			TNT1 A 0 A_JumpIf(TensionLevel == 3,"SetScale50")
			TNT1 A 0 A_JumpIf(TensionLevel == 4,"SetScale100")
			TNT1 A 0 A_JumpIf(TensionLevel == 5,"SetScale250")
			TNT1 A 0 A_JumpIf(TensionLevel == 6,"SetScale500")
			TNT1 A 0 A_JumpIf(TensionLevel == 7,"SetScale1000")
			stop

		SetScale5:
			TNT1 A 0 A_SetScale(0.5,0.75)
			goto Frame
		SetScale20:
			TNT1 A 0 A_SetScale(0.5555,0.8333)
			goto Frame
		SetScale50:
			TNT1 A 0 A_SetScale(0.6111,0.9166)
			goto Frame
		SetScale100:
			TNT1 A 0 A_SetScale(0.6666,1)
			goto Frame
		SetScale250:
			TNT1 A 0 A_SetScale(0.7222,1.0833)
			goto Frame
		SetScale500:
			TNT1 A 0 A_SetScale(0.7777,1.1666)
			goto Frame
		SetScale1000:
			TNT1 A 0 A_SetScale(0.8333,1.25)
			goto Frame

		Frame:
			TSNA A 1
			TSNA A 1
			stop
		Frame2:
			TSIN A 1
			TSIN A 1
			stop
	}
}

actor TensionAuraLooper : TensionAuraFrameBase
{
	states
	{
		Spawn:
			TNT1 A 0 NoDelay
			TNT1 A 0 A_JumpIf(TensionLevel == 1,"SetScale5")
			TNT1 A 0 A_JumpIf(TensionLevel == 2,"SetScale20")
			TNT1 A 0 A_JumpIf(TensionLevel == 3,"SetScale50")
			TNT1 A 0 A_JumpIf(TensionLevel == 4,"SetScale100")
			TNT1 A 0 A_JumpIf(TensionLevel == 5,"SetScale250")
			TNT1 A 0 A_JumpIf(TensionLevel == 6,"SetScale500")
			TNT1 A 0 A_JumpIf(TensionLevel == 7,"SetScale1000")
			stop

		SetScale5:
			TNT1 A 0 { A_SetScale(0.5,0.75); }
			goto Frame
		SetScale20:
			TNT1 A 0 { A_SetScale(0.5555,0.8333); }	
			goto Frame
		SetScale50:
			TNT1 A 0 { A_SetScale(0.6111,0.9166); }
			goto Frame
		SetScale100:
			TNT1 A 0 { A_SetScale(0.6666,1); }
			goto Frame
		SetScale250:
			TNT1 A 0 { A_SetScale(0.7222,1.0833); }
			goto Frame
		SetScale500:
			TNT1 A 0 { A_SetScale(0.7777,1.1666); }
			goto Frame
		SetScale1000:
			TNT1 A 0 { A_SetScale(0.8333,1.25); }
			goto Frame

		Frame:
			TSNA AABBCCDD 1 
			{
				if (GetCVar("dvds_tensionauratype") == 0) { return state("Frame2"); }
				else
				{
					A_Warp(AAPTR_PLAYER1,4,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE); // |WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION
				}
				return state("");
			}
			loop
		Frame2:
			TSIN ABCDEFGHI 1
			{
				if (GetCVar("dvds_tensionauratype") == 1) { return state("Frame"); }
				else
				{
					A_Warp(AAPTR_PLAYER1,4,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE); // |WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION
				}
				return state("");
			}
			loop
	}
}

actor TensionAuraLightBase
{
	-SOLID
	+NOINTERACTION
	+NOTIMEFREEZE
	RenderStyle Add
	Alpha 0.01
	Scale 0.01
	Radius 1
	Height 1
	XScale 1
	YScale 1
	states
	{
		Spawn:
			TNT1 A 0 NoDelay
			TNT1 A 0 A_JumpIf(CallACS("GetBuffTimer",1) > 0,"SpawnInvis")
			goto SpawnNormal

		SpawnNormal:
			TNT1 A 1 // TSNB A 1 A_Warp(AAPTR_PLAYER1,1,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION)
			goto Spawn

		SpawnInvis:
			TNT1 B 1 // TSNB B 1 A_Warp(AAPTR_PLAYER1,1,0,0,0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_WARPINTERPOLATION|WARPF_COPYINTERPOLATION)
			goto Spawn
	}
}

actor TensionAuraLight5 : TensionAuraLightBase { }
actor TensionAuraLight20 : TensionAuraLightBase { }
actor TensionAuraLight50 : TensionAuraLightBase { }
actor TensionAuraLight100 : TensionAuraLightBase { }
actor TensionAuraLight250 : TensionAuraLightBase { }
actor TensionAuraLight500 : TensionAuraLightBase { }
actor TensionAuraLight1000 : TensionAuraLightBase { }

actor PlayerWhistle
{
	-SOLID
	+NOBLOCKMAP
	+NOINTERACTION
	+NOGRAVITY
	+NOTELESTOMP
	+MISSILE
	Speed 1
	Height 1
	Radius 1
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_StartSound("player/whistle")
			TNT1 A 1 A_AlertMonsters
			stop
	}
}

actor PlayerMortalBlastRadius
{
	-SOLID
	+NOBLOCKMAP
	+NOINTERACTION
	+NOGRAVITY
	+NOTELESTOMP
	+MISSILE
	Speed 1
	Height 1
	Radius 1

	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(100000,1024,0,1024)
			stop
	}
}

actor PlayerTension5BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(50000,256,0,128) // Pushes things with 1250 mass at 20 units/tic
			stop
	}
}

actor PlayerTension20BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(75000,320,0,160) // Pushes things with 1875 mass at 20 units/tic
			stop
	}
}

actor PlayerTension50BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(100000,384,0,192) // Pushes things with 2500 mass at 20 units/tic
			stop
	}
}

actor PlayerTension100BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(125000,448,0,224) // Pushes things with 3125 mass at 20 units/tic
			stop
	}
}

actor PlayerTension250BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(150000,512,0,256) // Pushes things with 3750 mass at 20 units/tic
			stop
	}
}

actor PlayerTension500BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(200000,640,0,320) // Pushes things with 5000 mass at 20 units/tic
			stop
	}
}

actor PlayerTension1000BlastRadius : PlayerMortalBlastRadius
{
	States
	{
		Spawn:
			TNT1 A 1 NoDelay A_RadiusThrust(250000,768,0,384) // Pushes things with 6250 mass at 20 units/tic
			stop
	}
}

actor InvulnerabilityAura
{
	var int user_auradamage;
	var int user_auraradius;
	var int user_perktemp;
	-SOLID
	+NOINTERACTION
	+NOTIMEFREEZE
	+NODAMAGETHRUST
	+EXTREMEDEATH
	+PAINLESS
	+DONTHARMSPECIES
	Species "FriendlyMonsters"
	ProjectileKickback 0
	RenderStyle None
	DamageType "InvulnerabilityAura"
	Radius 4
	Height 4
	states
	{
		Spawn:
			TNT1 A 0 NoDelay
			TNT1 A 1 
			{
				user_auradamage = 4;
				user_auradamage += (CallACS("StatCheck",1) / 64);
				user_auradamage += (CallACS("StatCheck",10) / 64);
				user_auradamage /= 32;
				user_auradamage = (user_auradamage * random(7,9)) / 8;

				user_auraradius = 96;
				user_perktemp = CallACS("CheckCharacterClass");
				if (user_perktemp == 0) { user_auraradius = 96; }
				if (user_perktemp == 1) { user_auraradius = 84; }
				if (user_perktemp == 2) { user_auraradius = 78; }
				if (user_perktemp == 8) { user_auraradius = 78; }
				if (user_perktemp == 9) { user_auraradius = 78; }

				A_Explode(user_auradamage,user_auraradius,0,0,user_auraradius);
			}
			stop
	}
}